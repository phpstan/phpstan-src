<?php

/**
 * @template TKey
 * @template TValue
 */
interface ArrayAccess
{

	/**
	 * @param TKey $offset
	 * @return bool
	 */
	public function offsetExists($offset);

	/**
	 * @param TKey $offset
	 * @return TValue|null
	 */
	public function offsetGet($offset);

	/**
	 * @param TKey|null $offset
	 * @param TValue $value
	 * @return void
	 */
	public function offsetSet($offset, $value);

	/**
	 * @param TKey $offset
	 * @return void
	 */
	public function offsetUnset($offset);

}

/**
 * @template TKey
 * @template TValue
 * @implements IteratorAggregate<TKey, TValue>
 * @implements ArrayAccess<TKey, TValue>
 */
class ArrayObject implements IteratorAggregate, ArrayAccess
{

	/**
	 * @param array<TKey, TValue>|object $input
	 * @param int $flags
	 * @param class-string $iterator_class
	 */
	public function __construct($input = null, $flags = 0, $iterator_class = "ArrayIterator") { }

	/**
	 * @param TValue $value
	 * @return void
	 */
	public function append($value) { }

	/**
	 * @return array<TKey, TValue>
	 */
	public function getArrayCopy() { }

	/**
	 * @param callable(TValue, TValue): int $cmp_function
	 * @return void
	 */
	public function uasort($cmp_function) { }

	/**
	 * @param callable(TKey, TKey): int $cmp_function
	 * @return void
	 */
	public function uksort($cmp_function) { }

	/**
	 * @return ArrayIterator<TKey, TValue>
	 */
	public function getIterator() { }

	/**
	 * @param class-string $iterator_class
	 * @return void
	 */
	public function setIteratorClass($iterator_class) { }

}

/**
 * @template TValue
 * @implements Iterator<int, TValue>
 * @implements ArrayAccess<int, TValue>
 */
class SplFixedArray implements Iterator, ArrayAccess, Countable
{
	/**
	 * @template TInput
	 * @param array<int, TInput> $array
	 * @return SplFixedArray<TInput>
	 */
	public static function fromArray(array $array, bool $save_indexes = true): SplFixedArray { }

	/**
	 * @return array<int, TValue>
	 */
	public function toArray(): array { }
}

/**
 * @template TObject of object
 * @template TData
 *
 * @template-implements Iterator<int, TObject>
 * @template-implements ArrayAccess<TObject, TData>
 */
class SplObjectStorage implements Countable, Iterator, Serializable, ArrayAccess
{

    /**
     * @param \SplObjectStorage<TObject, TData> $storage
     */
    public function addAll(SplObjectStorage $storage): void { }

    /**
     * @param TObject $object
     * @param TData $data
     */
    public function attach(object $object, $data = null): void { }

    /**
     * @param TObject $object
     */
    public function contains(object $object): bool { }

    /**
     * @param TObject $object
     */
    public function detach(object $object): void { }

    /**
     * @param TObject $object
     */
    public function detach(object $object): void { }

    /**
     * @param TObject $object
     */
    public function getHash(object $object): string { }

    /**
     * @return TData
     */
    public function getInfo() { }

    /**
     * @param \SplObjectStorage<object, mixed> $storage
     */
    public function removeAll(SplObjectStorage $storage): void { }

    /**
     * @param \SplObjectStorage<object, mixed> $storage
     */
    public function removeAllExcept(SplObjectStorage $storage): void { }

    /**
     * @param TData $data
     */
    public function setInfo($data): void { }

}

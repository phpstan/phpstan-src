<?php

/**
 * @template TIn of mixed
 * @template TReturn of mixed
 *
 * @param array<TIn> $one
 * @param callable(TReturn, TIn): TReturn $two
 * @param TReturn $three
 *
 * @return TReturn
 */
function array_reduce(
	array $one,
	callable $two,
	$three = null
) {}

/**
 * @template TKey as (int|string)
 * @template T
 * @template TArray as array<TKey,T>
 *
 * @param TArray $array
 * @param callable(T,T):int $callback
 * @param-out (TArray is non-empty-array ? non-empty-array<TKey,T> : array<TKey,T>) $array
 */
function uasort(array &$array, callable $callback): bool
{}

/**
 * @template T
 * @template TArray as array<T>
 *
 * @param TArray $array
 * @param callable(T,T):int $callback
 * @param-out (TArray is non-empty-array ? non-empty-list<T> : list<T>) $array
 */
function usort(array &$array, callable $callback): bool
{}

/**
 * @template TKey as (int|string)
 * @template T
 * @template TArray as array<TKey,T>
 *
 * @param TArray $array
 * @param callable(TKey,TKey):int $callback
 * @param-out (TArray is non-empty-array ? non-empty-array<TKey,T> : array<TKey,T>) $array
 */
function uksort(array &$array, callable $callback): bool
{
}

/**
 * @template T of mixed
 *
 * @param array<T> $one
 * @param array<T> $two
 * @param callable(T, T): int<-1, 1> $three
 */
function array_udiff(
    array $one,
    array $two,
    callable $three
): int {}

/**
 * @template K of array-key
 * @template V
 * @param array<K, V> $array
 * @return ($array is list<V> ? true : false)
 */
function array_is_list(array $array): bool {}

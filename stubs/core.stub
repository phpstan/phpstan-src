<?php

/**
 * @param ($allow_string is false ? object : object|string) $object_or_class
 * @param string $class
 * @param bool $allow_string
 * @return ($allow_string is false ? ($object_or_class is object ? bool : false) : bool)
 */
function is_subclass_of($object_or_class, string $class, $allow_string = true): bool{}

/**
 * @param ($allow_string is false ? object : object|string) $object_or_class
 * @param string $class
 * @param bool $allow_string
 * @return ($allow_string is false ? ($object_or_class is object ? bool : false) : bool)
 */
function is_a($object_or_class, string $class, $allow_string = false): bool{}

/**
 * @param mixed $var
 * @param bool $return
 * @return ($return is true ? string : null)
 */
function var_export($var, bool $return = false) {}

/**
 * @param mixed $var
 * @return ($return is true ? string : bool)
 */
function highlight_file($var, bool $return = false) {}

/**
 * @param mixed $var
 * @return ($return is true ? string : bool)
 */
function show_source($var, bool $return = false) {}

/**
 * @param mixed $var
 * @param bool $return
 * @return ($return is true ? string : true)
 */
function print_r($var, bool $return = false) {}

/**
 * @return ($string is non-empty-string ? non-empty-string : string)
 */
function sodium_bin2base64(string $string, int $id): string {}

/**
 * @return ($string is non-empty-string ? non-empty-string : string)
 */
function sodium_bin2hex(string $string): string {}

/**
 * @return ($string is non-empty-string ? non-empty-string : string)
 */
function base64_encode(string $string) : string {}

/**
 * @return ($string is non-empty-string ? non-empty-string : string)
 */
function bin2hex(string $string): string {}

/**
 * @return ($string is non-empty-string ? non-empty-string : string)
 */
function str_shuffle(string $string): string {}

/**
 * @param array<mixed> $result
 * @param-out array<int|string, array<mixed>|string> $result
 */
function parse_str(string $string, array &$result): void {}

/**
 * @param array<mixed> $result
 * @param-out array<string, array<mixed>|string> $result
 */
function mb_parse_str(string $string, array &$result): bool {}

/** @param-out float $percent */
function similar_text(string $string1, string $string2, ?float &$percent = null) : int {}

/**
 * @param mixed $output
 * @param mixed $result_code
 *
 * @param-out list<string> $output
 * @param-out int $result_code
 *
 * @return string|false
 */
function exec(string $command, &$output, &$result_code) {}

/**
 * @param mixed $result_code
 * @param-out int $result_code
 *
 * @return string|false
 */
function system(string $command, &$result_code) {}

/**
 * @param mixed $result_code
 * @param-out int $result_code
 */
function passthru(string $command, &$result_code): ?bool {}


/**
 * @template T
 * @template TArray as array<T>
 *
 * @param TArray $array
 */
function shuffle(array &$array): bool
{
}

/**
 * @template T
 * @template TArray as array<T>
 *
 * @param TArray $array
 */
function sort(array &$array, int $flags = SORT_REGULAR): bool
{
}

/**
 * @template T
 * @template TArray as array<T>
 *
 * @param TArray $array
 */
function rsort(array &$array, int $flags = SORT_REGULAR): bool
{
}

/**
 * @param string $string
 * @param-out null $string
 */
function sodium_memzero(string &$string): void
{
}

/**
 * @param resource $stream
 * @param mixed $vars
 * @param-out string|int|float|null $vars
 *
 * @return list<mixed>|int|false
 */
function fscanf($stream, string $format, &...$vars) {}

/**
 * @param mixed $war
 * @param mixed $vars
 * @param-out string|int|float|null $war
 * @param-out string|int|float|null $vars
 *
 * @return int|array<mixed>|null
 */
function sscanf(string $string, string $format, &$war, &...$vars) {}

/**
 * @template TFlags as int
 *
 * @param string $pattern
 * @param string $subject
 * @param mixed $matches
 * @param TFlags $flags
 * @param-out (
 *          TFlags is 1
 *          ? array<list<string>>
 *          : (TFlags is 2
 *              ? list<array<string>>
 *              : (TFlags is 256|257
 *                  ? array<list<array{string, int}>>
 *                  : (TFlags is 258
 *                      ? list<array<array{string, int}>>
 *                      : (TFlags is 512|513
 *                          ? array<list<?string>>
 *                          : (TFlags is 514
 *                              ? list<array<?string>>
 *                              : (TFlags is 770
 *                                  ? list<array<array{?string, int}>>
 *                                  : (TFlags is 0 ? array<list<string>> : array<mixed>)
 *                              )
 *                          )
 *                      )
 *                  )
 *              )
 *          )
 *        ) $matches
 * @return int|false
 */
function preg_match_all($pattern, $subject, &$matches = [], int $flags = 1, int $offset = 0) {}

/**
 * @template TFlags as int-mask<0, 256, 512>
 *
 * @param string $pattern
 * @param string $subject
 * @param mixed $matches
 * @param TFlags $flags
 * @param-out (
 *             TFlags is 256
 *             ? array<array-key, array{string, 0|positive-int}|array{'', -1}>
 *             : (TFlags is 512
 *                 ? array<array-key, string|null>
 *                 : (TFlags is 768
 *                     ? array<array-key, array{string, 0|positive-int}|array{null, -1}>
 *                     : array<array-key, string>
 *                     )
 *                 )
 *             ) $matches
 * @return 1|0|false
 */
function preg_match($pattern, $subject, &$matches = [], int $flags = 0, int $offset = 0) {}

/**
 * @param string|array<mixed> $pattern
 * @param callable(array<int|string, string>):string $callback
 * @param string|array<mixed> $subject
 * @param int $count
 * @param-out 0|positive-int $count
 * @return ($subject is array ? list<string>|null : string|null)
 */
function preg_replace_callback($pattern, $callback, $subject, int $limit = -1, &$count = null, int $flags = 0) {}

/**
 * @param string|array<mixed> $pattern
 * @param string|array<mixed> $replacement
 * @param string|array<mixed> $subject
 * @param int $count
 * @param-out 0|positive-int $count
 * @return ($subject is array ? list<string>|null : string|null)
 */
function preg_replace($pattern, $replacement, $subject, int $limit = -1, &$count = null) {}

/**
 * @param string|array<mixed> $pattern
 * @param string|array<mixed> $replacement
 * @param string|array<mixed> $subject
 * @param int $count
 * @param-out 0|positive-int $count
 * @return ($subject is array ? list<string> : string|null)
 */
function preg_filter($pattern, $replacement, $subject, int $limit = -1, &$count = null) {}

/**
 * @param array<mixed>|string $search
 * @param array<mixed>|string $replace
 * @param array<mixed>|string $subject
 * @param-out int $count
 * @return list<string>|string
 */
function str_replace($search, $replace, $subject, ?int &$count = null) {}

/**
 * @param array<mixed>|string $search
 * @param array<mixed>|string $replace
 * @param array<mixed>|string $subject
 * @param-out int $count
 * @return list<string>|string
 */
function str_ireplace($search, $replace, $subject, ?int &$count = null) {}

/**
 * @template TRead of null|array<array-key, resource>
 * @template TWrite of null|array<array-key, resource>
 * @template TExcept of null|array<array-key, resource>
 * @param TRead $read
 * @param TWrite $write
 * @param TExcept $except
 * @return false|0|positive-int
 * @param-out (TRead is null ? null : array<array-key, resource>) $read
 * @param-out (TWrite is null ? null : array<array-key, resource>) $write
 * @param-out (TExcept is null ? null : array<array-key, resource>) $except
 */
function stream_select(?array &$read, ?array &$write, ?array &$except, ?int $seconds, ?int $microseconds = null) {}

/**
 * @param resource $stream
 * @param-out 0|1 $would_block
 */
function flock($stream, int $operation, mixed &$would_block = null): bool {}

/**
 * @param-out int $error_code
 * @param-out string $error_message
 * @return resource|false
 */
function fsockopen(string $hostname, int $port = -1, ?int &$error_code = null, ?string &$error_message = null, ?float $timeout = null) {}

/**
 * @param-out string $filename
 * @param-out int $line
 */
function headers_sent(?string &$filename = null, ?int &$line = null): bool {}

/**
 * @param-out callable-string $callable_name
 * @return ($value is callable ? true : false)
 */
function is_callable(mixed $value, bool $syntax_only = false, ?string &$callable_name = null): bool {}

/**
 * @param float|int $num
 * @return ($num is float ? float : $num is int ? non-negative-int : float|non-negative-int)
 */
function abs($num) {}

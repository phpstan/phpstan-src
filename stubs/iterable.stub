<?php

/**
 * @template-covariant TKey
 * @template-covariant TValue
 */
interface Traversable
{
}

/**
 * @template-covariant TKey
 * @template-covariant TValue
 *
 * @extends Traversable<TKey, TValue>
 */
interface IteratorAggregate extends Traversable
{

	/**
	 * @return Traversable<TKey, TValue>
	 */
	public function getIterator();

}

/**
 * @template-covariant TKey
 * @template-covariant TValue
 *
 * @extends Traversable<TKey, TValue>
 */
interface Iterator extends Traversable
{

	/**
	 * @return TValue
	 */
	public function current();

	/**
	 * @return TKey
	 */
	public function key();

}

/**
 * @template-covariant TKey
 * @template-covariant TValue
 *
 * @extends Iterator<TKey, TValue>
 */
interface RecursiveIterator extends Iterator
{

}

/**
 * @template-covariant TKey
 * @template-covariant TValue
 * @template TSend
 * @template-covariant TReturn
 *
 * @implements Iterator<TKey, TValue>
 */
class Generator implements Iterator
{

	/**
	 * @return TReturn
	 */
	public function getReturn() {}

	/**
	 * @param TSend $value
	 * @return TValue
	 */
	public function send($value) {}

}

/**
 * @implements Traversable<string, static>
 * @implements ArrayAccess<int|string, static>
 * @implements Iterator<string, static>
 * @implements RecursiveIterator<string, static>
 */
class SimpleXMLElement implements Traversable, ArrayAccess, Iterator, RecursiveIterator
{

}

/**
 * @template-covariant TKey
 * @template-covariant TValue
 * @extends Iterator<TKey, TValue>
 */
interface SeekableIterator extends Iterator
{
	/**
	 * @param int $position
	 * @return void
	 */
	public function seek($position);
}

/**
 * @template TKey of array-key
 * @template TValue
 * @implements SeekableIterator<TKey, TValue>
 * @implements ArrayAccess<TKey, TValue>
 */
class ArrayIterator implements SeekableIterator, ArrayAccess, Countable
{

	/**
	 * @param array<TKey, TValue> $array
	 * @param int $flags
	 */
	public function __construct($array = array(), $flags = 0) { }

	/**
	 * @param TValue $value
	 * @return void
	 */
	public function append($value) { }

	/**
	 * @return array<TKey, TValue>
	 */
	public function getArrayCopy() { }

	/**
	 * @param callable(TValue, TValue): int $cmp_function
	 * @return void
	 */
	public function uasort($cmp_function) { }

	/**
	 * @param callable(TKey, TKey): int $cmp_function
	 * @return void
	 */
	public function uksort($cmp_function) { }

}

/**
 * @template T of \RecursiveIterator|\IteratorAggregate
 * @mixin T
 */
class RecursiveIteratorIterator
{

	/**
	 * @param T $iterator
	 * @param int $mode
	 * @param int $flags
	 */
	public function __construct(
		$iterator,
		$mode = RecursiveIteratorIterator::LEAVES_ONLY,
		int $flags = 0
	)
	{

	}

}

/**
 * @template-covariant TKey
 * @template-covariant TValue
 *
 * @template-extends Iterator<TKey, TValue>
 */
interface OuterIterator extends Iterator {
    /**
     * @return Iterator<TKey, TValue>
     */
    public function getInnerIterator();
}

/**
 * @template-covariant TKey
 * @template-covariant TValue
 * @template TIterator as Traversable<TKey, TValue>
 *
 * @template-implements OuterIterator<TKey, TValue>
 *
 * @mixin TIterator
 */
class IteratorIterator implements OuterIterator {
    /**
     * @param TIterator $iterator
     */
    public function __construct(Traversable $iterator) {}
}

/**
 * @template-covariant TKey
 * @template-covariant TValue
 * @template TIterator as Traversable<TKey, TValue>
 *
 * @template-extends IteratorIterator<TKey, TValue, TIterator>
 */
class FilterIterator extends IteratorIterator
{

}

/**
 * @template TKey
 * @template TValue
 * @template TIterator as Traversable<TKey, TValue>
 *
 * @template-implements OuterIterator<TKey, TValue>
 *
 * @template-extends FilterIterator<TKey, TValue, TIterator>
 */
class CallbackFilterIterator extends FilterIterator implements OuterIterator  {
    /**
     * @param Iterator<TKey, TValue> $iterator
     * @param callable(TValue, TKey, Iterator<TKey, TValue>): bool $callback
     */
    public function __construct(Iterator $iterator, callable $callback) {}

    /**
     * @return TValue|null
     */
    public function current() {}

    /**
     * @return TKey|null
     */
    public function key() {}
}

/**
 * @template TKey
 * @template TValue
 * @template TIterator as Traversable<TKey, TValue>
 *
 * @template-implements RecursiveIterator<TKey, TValue>
 * @template-extends CallbackFilterIterator<TKey, TValue, TIterator>
 */
class RecursiveCallbackFilterIterator extends CallbackFilterIterator implements RecursiveIterator {

    /**
     * @param RecursiveIterator<TKey, TValue> $iterator
     * @param callable(TValue, TKey, RecursiveIterator<TKey, TValue>): bool $callback
     */
    public function __construct(RecursiveIterator $iterator, callable $callback) {}

    /**
     * @return RecursiveCallbackFilterIterator<TKey, TValue, TIterator>
     */
    public function getChildren() {}

    /**
     * @return bool
     */
    public function hasChildren() {}

    /**
     * @return TValue|null
     */
    public function current() {}

    /**
     * @return TKey|null
     */
    public function key() {}
}

/**
 * @template TKey of array-key
 * @template TValue
 *
 * @template-implements RecursiveIterator<TKey, TValue>
 * @template-extends ArrayIterator<TKey, TValue>
 */
class RecursiveArrayIterator extends ArrayIterator implements RecursiveIterator {

    /**
     * @return RecursiveArrayIterator<TKey, TValue>
     */
    public function getChildren() {}

    /**
     * @return bool
     */
    public function hasChildren() {}

    /**
     * @return TValue
     */
    public function current() {}

    /**
     * @return TKey
     */
    public function key() {}

    /**
     * @param callable(TKey, TKey): int $cmp_function
     * @return void
     */
    public function uksort($cmp_function) { }
}

/**
 * @template TKey
 * @template TValue
 * @template TIterator as Traversable<TKey, TValue>
 *
 * @template-implements OuterIterator<TKey, TValue>
 * @template-implements ArrayAccess<TKey, TValue>
 *
 * @template-extends IteratorIterator<TKey, TValue, TIterator>
 */
class CachingIterator extends IteratorIterator implements OuterIterator , ArrayAccess , Countable  {
    const CALL_TOSTRING = 1 ;
    const CATCH_GET_CHILD = 16 ;
    const TOSTRING_USE_KEY = 2 ;
    const TOSTRING_USE_CURRENT = 4 ;
    const TOSTRING_USE_INNER = 8 ;
    const FULL_CACHE = 256 ;

	/**
     * @param Iterator<TKey, TValue> $iterator
     */
    public function __construct(Iterator $iterator, int $flags = self::CALL_TOSTRING) {}

    /**
	 * @return bool
	 */
    public function hasNext () {}

    /**
     * @return TValue|null
     */
    public function current() {}

    /**
     * @return TKey|null
     */
    public function key() {}
}

/**
 * @template-implements SeekableIterator<int, DirectoryIterator>
 */
class DirectoryIterator extends SplFileInfo implements SeekableIterator {

    public function __construct(string $path){}

    /**
     * @return self
     */
    public function current() {}

    /**
     * @return int|false
     */
    public function key() {}

    /**
     * @return void
     */
    public function next(){}

    /**
     * @return void
     */
    public function rewind(){}

    /**
     * @param int $position
     * @return void
     */
    public function seek($position) {}

    /**
     * @return bool
     */
    public function valid(){}
}

/**
 * @template-implements Iterator<mixed, mixed>
 */
class EmptyIterator implements Iterator {
    /**
     * @return mixed
     */
    public function current() {}

    /**
     * @return mixed
     */
    public function key() {}

    /**
     * @return void
     */
    public function next() {}

    /**
     * @return void
     */
    public function rewind() {}

    /**
     * @return false
     */
    public function valid() {}
}

/**
 * @template-extends DirectoryIterator<string, FilesystemIterator|SplFileInfo|string>
 */
class FilesystemIterator extends DirectoryIterator
{
    const CURRENT_AS_PATHNAME = 32;
    const CURRENT_AS_FILEINFO = 0;
    const CURRENT_AS_SELF = 16;
    const CURRENT_MODE_MASK = 240;
    const KEY_AS_PATHNAME = 0;
    const KEY_AS_FILENAME = 256;
    const FOLLOW_SYMLINKS = 512;
    const KEY_MODE_MASK = 3840;
    const NEW_CURRENT_AND_KEY = 256;
    const SKIP_DOTS = 4096;
    const UNIX_PATHS = 8192;

    public function __construct(string $path, int $flags = self::KEY_AS_PATHNAME|self::CURRENT_AS_FILEINFO|self::SKIP_DOTS) {}

    /**
     * @return FilesystemIterator|SplFileInfo|string|null
     */
    public function current() {}

    /**
     * @return int
     */
    public function getFlags() {}

    /**
     * @param int $flags
     * @return void
     */
    public function setFlags($flags) {}

    /**
     * @return string|false
     */
    public function key() {}
}

/**
 * @template-extends FilesystemIterator<string, GlobIterator|SplFileInfo|string>
 */
class GlobIterator extends FilesystemIterator implements Countable {
    /**
     * @return int
     */
    public function count() {}
}

/**
 * @template TKey
 * @template TValue
 * @template TIterator of Traversable<TKey, TValue>
 *
 * @template-extends IteratorIterator<TKey, TValue, TIterator>
 */
class InfiniteIterator extends IteratorIterator {
    /**
     * @param Iterator<TKey, TValue> $iterator
     */
    public function __construct(Iterator $iterator) {}

    /**
     * @return TValue|null
     */
    public function current() {}

    /**
     * @return TKey|null
     */
    public function key() {}
}

/**
 * @template TKey
 * @template TValue
 * @template TIterator as Traversable<TKey, TValue>
 *
 * @template-implements OuterIterator<TKey, TValue>
 *
 * @template-extends IteratorIterator<TKey, TValue, TIterator>
 */
class LimitIterator extends IteratorIterator implements OuterIterator {
    /**
     * @param Iterator<TKey, TValue> $iterator
     */
    public function __construct(Iterator $iterator, int $offset = 0, int $count = -1) {}

    /**
     * @return TValue|null
     */
    public function current() {}

    /**
     * @return TKey|null
     */
    public function key() {}
}

/**
 * @template TKey
 * @template TValue
 * @template TIterator of Traversable<TKey, TValue>
 *
 * @template-extends IteratorIterator<TKey, TValue, TIterator>
 */
class NoRewindIterator extends IteratorIterator {
    /**
     * @param Iterator<TKey, TValue> $iterator
     */
    public function __construct(Iterator $iterator) {}

    /**
     * @return TValue|null
     */
    public function current() {}

    /**
     * @return TKey|null
     */
    public function key() {}
}

/**
 * @template TKey
 * @template TValue
 *
 * @template-implements Iterator<TKey, TValue>
 */
class MultipleIterator implements Iterator {

    public function __construct (int $flags = 0) {}

    /**
     * @param Iterator<TKey,TValue> $iterator
     * @param string|int $infos
     * @return void
     */
    public function attachIterator(Iterator $iterator, $infos = '') {}

    /**
     * @param Iterator<TKey, TValue> $iterator
     * @return bool
     */
    public function containsIterator(Iterator $iterator) {}

    /**
     * @return int
     */
    public function countIterators() {}

    /**
     * @return array<array-key, TValue|null>
     */
    public function current() {}

    /**
     * @param Iterator<TKey,TValue> $iterator
     * @return void
     */
    public function detachIterator(Iterator $iterator) {}

    /**
     * @return int
     */
    public function getFlags() {}

    /**
     * @return array<array-key, TValue|null>
     */
    public function key() {}

    /**
     * @return void
     */
    public function setFlags(int $flags) {}
}

/**
 * @template TKey
 * @template TValue
 * @template TIterator of Traversable<TKey, TValue>
 *
 * @template-extends FilterIterator<TKey, TValue, TIterator>
 * @template-implements RecursiveIterator<TKey, TValue>
 */
abstract class RecursiveFilterIterator extends FilterIterator implements RecursiveIterator {

    /**
     * @param RecursiveIterator<TKey, TValue> $iterator
     */
    public function __construct(RecursiveIterator $iterator) {}

    /**
     * @return RecursiveFilterIterator<TKey, TValue, TIterator>
     */
    public function getChildren() {}

    /**
     * @return bool
     */
    public function hasChildren() {}

    /**
     * @return TValue|null
     */
    public function current() {}

    /**
     * @return TKey|null
     */
    public function key() {}
}

/**
 * @template TKey
 * @template TValue
 * @template TIterator of Traversable<TKey, TValue>
 *
 * @template-extends RecursiveFilterIterator<TKey, TValue, TIterator>
 * @template-implements RecursiveIterator<TKey, TValue>
 * @template-implements OuterIterator<TKey, TValue>
 */
class ParentIterator extends RecursiveFilterIterator implements RecursiveIterator, OuterIterator {

    /**
     * @return bool
     */
    public function accept() {}

    /**
     * @param RecursiveIterator<TKey, TValue> $iterator
     */
    public function __construct(RecursiveIterator $iterator) {}

    /**
     * @return ParentIterator<TKey, TValue, TIterator>
     */
    public function getChildren() {}

    /**
     * @return bool
     */
    public function hasChildren() {}

    /**
     * @return void
     */
    public function next() {}

    /**
     * @return void
     */
    public function rewind() {}

    /**
     * @return TValue|null
     */
    public function current() {}

    /**
     * @return TKey|null
     */
    public function key() {}
}

/**
 * @template TKey
 * @template TValue
 *
 * @template-implements RecursiveIterator<TKey, TValue>
 * @template-extends ArrayIterator<TKey, TValue>
 */
class RecursiveArrayIterator extends ArrayIterator implements RecursiveIterator {
    /**
     * @return RecursiveArrayIterator<TKey, TValue>
     */
    public function getChildren() {}

    /**
     * @return bool
     */
    public function hasChildren() {}

    /**
     * @return TValue|null
     */
    public function current() {}

    /**
     * @return TKey|null
     */
    public function key() {}
}

/**
 * @template TKey
 * @template TValue
 * @template TIterator of Traversable<TKey, TValue>
 *
 * @template-implements RecursiveIterator<TKey, TValue>
 * @template-extends CachingIterator<TKey, TValue, TIterator>
 */
class RecursiveCachingIterator extends CachingIterator implements RecursiveIterator {

    /**
     * @param Iterator<TKey, TValue> $iterator
     */
    public function __construct(Iterator $iterator, int $flags = 0) {}

    /**
     * @return RecursiveCachingIterator<TKey, TValue, TIterator>
     */
    public function getChildren() {}

    /**
     * @return bool
     */
    public function hasChildren() {}

    /**
     * @return TValue|null
     */
    public function current() {}

    /**
     * @return TKey|null
     */
    public function key() {}
}

/**
 * @template-implements RecursiveIterator<string, RecursiveDirectoryIterator|string|SplFileInfo>
 * @template-implements SeekableIterator<string, RecursiveDirectoryIterator|string|SplFileInfo>
 */
class RecursiveDirectoryIterator extends FilesystemIterator implements RecursiveIterator, SeekableIterator {

    const CURRENT_AS_PATHNAME = 32 ;
    const CURRENT_AS_FILEINFO = 0 ;
    const CURRENT_AS_SELF = 16 ;
    const CURRENT_MODE_MASK = 240 ;
    const KEY_AS_PATHNAME = 0 ;
    const KEY_AS_FILENAME = 256 ;
    const FOLLOW_SYMLINKS = 512 ;
    const KEY_MODE_MASK = 3840 ;
    const NEW_CURRENT_AND_KEY = 256 ;
    const SKIP_DOTS = 4096 ;
    const UNIX_PATHS = 8192 ;

    /**
     * @param string $path
     */
    public function __construct(string $path, int $flags = self::KEY_AS_PATHNAME|self::CURRENT_AS_FILEINFO) {}

    /**
     * @return string
     */
    public function getSubPath() {}

    /**
     * @return string
     */
    public function getSubPathname() {}

    /**
     * @return RecursiveDirectoryIterator|string|SplFileInfo|null
     */
    public function current() {}

    /**
     * @return string|null
     */
    public function key() {}
}

/**
 * @template TKey
 * @template TValue
 * @template TIterator as Traversable<TKey, TValue>
 *
 * @template-implements RecursiveIterator<TKey, TValue>
 * @template-extends RegexIterator<TKey, TValue, TIterator>
 */
class RecursiveRegexIterator extends RegexIterator implements RecursiveIterator {

    const MATCH = 0 ;
    const GET_MATCH = 1 ;
    const ALL_MATCHES = 2 ;
    const SPLIT = 3 ;
    const REPLACE = 4 ;
    const USE_KEY = 1 ;

    /**
     * @param RecursiveIterator<TKey, TValue> $iterator
     * @param string $regex
     * @param int $mode
     * @param self::USE_KEY|0 $flags
     * @param int $preg_flags
     */
    public function __construct(RecursiveIterator $iterator, string $regex, int $mode = self::MATCH, int $flags = 0, int $preg_flags = 0) {}

    /**
     * @return RecursiveRegexIterator<TKey, TValue, TIterator>
     */
    public function getChildren() {}
}

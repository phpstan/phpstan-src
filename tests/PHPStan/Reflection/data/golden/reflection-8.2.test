-----
FUNCTION CommonMark\Parse
-----
MISSING
-----
FUNCTION CommonMark\Render
-----
MISSING
-----
FUNCTION CommonMark\Render\HTML
-----
MISSING
-----
FUNCTION CommonMark\Render\Latex
-----
MISSING
-----
FUNCTION CommonMark\Render\Man
-----
MISSING
-----
FUNCTION CommonMark\Render\XML
-----
MISSING
-----
FUNCTION Componere\cast
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $arg1
     * @param mixed $object
     * @return Type
     */
    function componere\cast(mixed $arg1, mixed $object): Type
-----
FUNCTION Componere\cast_by_ref
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $arg1
     * @param mixed $object
     * @return Type
     */
    function componere\cast_by_ref(mixed $arg1, mixed $object): Type
-----
FUNCTION Context parameters
-----
MISSING
-----
FUNCTION FTP context options
-----
MISSING
-----
FUNCTION HTTP context options
-----
MISSING
-----
FUNCTION MongoDB\BSON\fromJSON
-----
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\UnexpectedValueException
Variants: 1
    /**
     * @param string $json
     * @return string
     */
    function MongoDB\BSON\fromJSON(string $json): string
-----
FUNCTION MongoDB\BSON\fromPHP
-----
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\UnexpectedValueException
Variants: 1
    /**
     * @param array|object $value
     * @return string
     */
    function MongoDB\BSON\fromPHP(array|object $value): string
-----
FUNCTION MongoDB\BSON\toCanonicalExtendedJSON
-----
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\UnexpectedValueException
Variants: 1
    /**
     * @param string $bson
     * @return string
     */
    function MongoDB\BSON\toCanonicalExtendedJSON(string $bson): string
-----
FUNCTION MongoDB\BSON\toJSON
-----
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\UnexpectedValueException
Variants: 1
    /**
     * @param string $bson
     * @return string
     */
    function MongoDB\BSON\toJSON(string $bson): string
-----
FUNCTION MongoDB\BSON\toPHP
-----
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException|MongoDB\Driver\Exception\UnexpectedValueException
Variants: 1
    /**
     * @param string $bson
     * @param array|null $typemap
     * @return array|object
     */
    function MongoDB\BSON\toPHP(string $bson, array|null $typemap = array{}): array|object
-----
FUNCTION MongoDB\BSON\toRelaxedExtendedJSON
-----
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\UnexpectedValueException
Variants: 1
    /**
     * @param string $bson
     * @return string
     */
    function MongoDB\BSON\toRelaxedExtendedJSON(string $bson): string
-----
FUNCTION MongoDB\Driver\Monitoring\addSubscriber
-----
Has side-effects: Yes
Throw type: InvalidArgumentException
Variants: 1
    /**
     * @param MongoDB\Driver\Monitoring\Subscriber $subscriber
     * @return void
     */
    function MongoDB\Driver\Monitoring\addSubscriber(MongoDB\Driver\Monitoring\Subscriber $subscriber): void
-----
FUNCTION MongoDB\Driver\Monitoring\removeSubscriber
-----
Has side-effects: Yes
Throw type: InvalidArgumentException
Variants: 1
    /**
     * @param MongoDB\Driver\Monitoring\Subscriber $subscriber
     * @return void
     */
    function MongoDB\Driver\Monitoring\removeSubscriber(MongoDB\Driver\Monitoring\Subscriber $subscriber): void
-----
FUNCTION PDO_CUBRID DSN
-----
MISSING
-----
FUNCTION PDO_DBLIB DSN
-----
MISSING
-----
FUNCTION PDO_FIREBIRD DSN
-----
MISSING
-----
FUNCTION PDO_IBM DSN
-----
MISSING
-----
FUNCTION PDO_INFORMIX DSN
-----
MISSING
-----
FUNCTION PDO_MYSQL DSN
-----
MISSING
-----
FUNCTION PDO_OCI DSN
-----
MISSING
-----
FUNCTION PDO_ODBC DSN
-----
MISSING
-----
FUNCTION PDO_PGSQL DSN
-----
MISSING
-----
FUNCTION PDO_SQLITE DSN
-----
MISSING
-----
FUNCTION PDO_SQLSRV DSN
-----
MISSING
-----
FUNCTION Phar context options
-----
MISSING
-----
FUNCTION SSL context options
-----
MISSING
-----
FUNCTION Socket context options
-----
MISSING
-----
FUNCTION UI\Draw\Text\Font\fontFamilies
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @return array
     */
    function ui\draw\text\font\fontfamilies(): array
-----
FUNCTION UI\quit
-----
Returns by reference: Maybe
Has side-effects: Yes
Variants: 1
    /**
     * @return void
     */
    function ui\quit(): void
-----
FUNCTION UI\run
-----
Returns by reference: Maybe
Has side-effects: Yes
Variants: 1
    /**
     * @param int $flags
     * @return void
     */
    function ui\run(int $flags): void
-----
FUNCTION Zip context options
-----
MISSING
-----
FUNCTION Zlib context options
-----
MISSING
-----
FUNCTION __autoload
-----
MISSING
-----
FUNCTION __halt_compiler
-----
MISSING
-----
FUNCTION abs
-----
Variants: 3
    /**
     * @param int $number
     * @return int<0, max>
     */
    function abs(int $number): int<0, max>
    /**
     * @param float $number
     * @return float
     */
    function abs(float $number): float
    /**
     * @param string $number
     * @return float|int<0, max>
     */
    function abs(string $number): float|int<0, max>
-----
FUNCTION acos
-----
Variants: 1
    /**
     * @param float $num
     * @return float
     */
    function acos(float $num): float
-----
FUNCTION acosh
-----
Variants: 1
    /**
     * @param float $num
     * @return float
     */
    function acosh(float $num): float
-----
FUNCTION addcslashes
-----
Variants: 1
    /**
     * @param string $string
     * @param string $characters
     * @return string
     */
    function addcslashes(string $string, string $characters): string
-----
FUNCTION addslashes
-----
Variants: 1
    /**
     * @param string $string
     * @return string
     */
    function addslashes(string $string): string
-----
FUNCTION apache_child_terminate
-----
Has side-effects: Yes
Variants: 1
    /**
     * @return void
     */
    function apache_child_terminate(): void
-----
FUNCTION apache_get_modules
-----
Variants: 1
    /**
     * @return array
     */
    function apache_get_modules(): array
-----
FUNCTION apache_get_version
-----
Variants: 1
    /**
     * @return string|false
     */
    function apache_get_version(): string|false
-----
FUNCTION apache_getenv
-----
Variants: 1
    /**
     * @param string $variable
     * @param bool $walk_to_top
     * @return string|false
     */
    function apache_getenv(string $variable, bool $walk_to_top = false): string|false
-----
FUNCTION apache_lookup_uri
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @return object|false
     */
    function apache_lookup_uri(string $filename): object|false
-----
FUNCTION apache_note
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $note_name
     * @param string|null $note_value
     * @return string|false
     */
    function apache_note(string $note_name, string|null $note_value = null): string|false
-----
FUNCTION apache_request_headers
-----
Variants: 1
    /**
     * @return array
     */
    function apache_request_headers(): array
-----
FUNCTION apache_response_headers
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return array
     */
    function apache_response_headers(): array
-----
FUNCTION apache_setenv
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $variable
     * @param string $value
     * @param bool $walk_to_top
     * @return bool
     */
    function apache_setenv(string $variable, string $value, bool $walk_to_top = false): bool
-----
FUNCTION apcu_add
-----
Has side-effects: Maybe
Variants: 2
    /**
     * @param string $key
     * @param mixed $var
     * @param int $ttl
     * @return bool
     */
    function apcu_add(string $key, mixed $var, int $ttl = 0): bool
    /**
     * @param array<string, mixed> $values
     * @param mixed $unused
     * @param int $ttl
     * @return array<string, int>
     */
    function apcu_add(array<string, mixed> $values, mixed $unused, int $ttl = 0): array<string, int>
-----
FUNCTION apcu_cache_info
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param bool $limited
     * @return array<string, mixed>
     */
    function apcu_cache_info(bool $limited = false): array<string, mixed>
-----
FUNCTION apcu_cas
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $key
     * @param int $old
     * @param int $new
     * @return bool
     */
    function apcu_cas(string $key, int $old, int $new): bool
-----
FUNCTION apcu_clear_cache
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return bool
     */
    function apcu_clear_cache(): bool
-----
FUNCTION apcu_dec
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $key
     * @param int $step
     * @param bool $success
     * @param int $ttl
     * @return int
     */
    function apcu_dec(string $key, int $step = 1, bool &rw$success = null, int $ttl = 0): int
-----
FUNCTION apcu_delete
-----
Has side-effects: Maybe
Variants: 2
    /**
     * @param APCuIterator|string $key
     * @return bool
     */
    function apcu_delete(APCuIterator|string $key): bool
    /**
     * @param array<string> $key
     * @return array<int, string>
     */
    function apcu_delete(array<string> $key): array<int, string>
-----
FUNCTION apcu_enabled
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return bool
     */
    function apcu_enabled(): mixed
-----
FUNCTION apcu_entry
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $key
     * @param callable(): mixed $generator
     * @param int $ttl
     * @return mixed
     */
    function apcu_entry(string $key, callable(): mixed $generator, int $ttl = 0): mixed
-----
FUNCTION apcu_exists
-----
Has side-effects: Maybe
Variants: 2
    /**
     * @param string $keys
     * @return bool
     */
    function apcu_exists(string $keys): bool
    /**
     * @param array<string> $keys
     * @return array
     */
    function apcu_exists(array<string> $keys): array
-----
FUNCTION apcu_fetch
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array<string>|string $key
     * @param bool $success
     * @return mixed
     */
    function apcu_fetch(array<string>|string $key, bool &rw$success = null): mixed
-----
FUNCTION apcu_inc
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $key
     * @param int $step
     * @param bool $success
     * @param int $ttl
     * @return int
     */
    function apcu_inc(string $key, int $step = 1, bool &rw$success = null, int $ttl = 0): int
-----
FUNCTION apcu_key_info
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $key
     * @return array|null
     */
    function apcu_key_info(mixed $key): mixed
-----
FUNCTION apcu_sma_info
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param bool $limited
     * @return array
     */
    function apcu_sma_info(bool $limited = false): array
-----
FUNCTION apcu_store
-----
Has side-effects: Maybe
Variants: 2
    /**
     * @param string $key
     * @param mixed $var
     * @param int $ttl
     * @return bool
     */
    function apcu_store(string $key, mixed $var, int $ttl = 0): bool
    /**
     * @param array $values
     * @param mixed $unused
     * @param int $ttl
     * @return array
     */
    function apcu_store(array $values, mixed $unused, int $ttl = 0): array
-----
FUNCTION array
-----
MISSING
-----
FUNCTION array_change_key_case
-----
Variants: 1
    /**
     * @param array $array
     * @param int $case
     * @return array
     */
    function array_change_key_case(array $array, int $case = 0): array
-----
FUNCTION array_chunk
-----
Variants: 1
    /**
     * @param array $array
     * @param int<1, max> $length
     * @param bool $preserve_keys
     * @return array<int, array>
     */
    function array_chunk(array $array, int<1, max> $length, bool $preserve_keys = false): array<int, array>
-----
FUNCTION array_column
-----
Variants: 1
    /**
     * @param array $array
     * @param int|string|null $column_key
     * @param int|string|null $index_key
     * @return array
     */
    function array_column(array $array, int|string|null $column_key, int|string|null $index_key = null): array
-----
FUNCTION array_combine
-----
Variants: 1
    /**
     * @param array<int|string> $keys
     * @param array $values
     * @return array
     */
    function array_combine(array<int|string> $keys, array $values): array
-----
FUNCTION array_count_values
-----
Variants: 1
    /**
     * @param array $array
     * @return array<int<1, max>>
     */
    function array_count_values(array $array): array<int<1, max>>
-----
FUNCTION array_diff
-----
Variants: 1
    /**
     * @param array $array
     * @param array $arrays
     * @return array
     */
    function array_diff(array $array, array ...$arrays): array
-----
FUNCTION array_diff_assoc
-----
Variants: 1
    /**
     * @param array $array
     * @param array $arrays
     * @return array
     */
    function array_diff_assoc(array $array, array ...$arrays): array
-----
FUNCTION array_diff_key
-----
Variants: 1
    /**
     * @param array $array
     * @param array $arrays
     * @return array
     */
    function array_diff_key(array $array, array ...$arrays): array
-----
FUNCTION array_diff_uassoc
-----
Variants: 2
    /**
     * @param array $arr1
     * @param array $arr2
     * @param callable(mixed, mixed): int $data_comp_func
     * @return array
     */
    function array_diff_uassoc(array $arr1, array $arr2, callable(mixed, mixed): int $data_comp_func): array
    /**
     * @param array $arr1
     * @param array $arr2
     * @param array $arr3
     * @param array|(callable(mixed, mixed): int) $arg4
     * @param array|(callable(): mixed) $rest
     * @return array
     */
    function array_diff_uassoc(array $arr1, array $arr2, array $arr3, array|(callable(mixed, mixed): int) $arg4, array|(callable(): mixed) ...$rest): array
-----
FUNCTION array_diff_ukey
-----
Variants: 2
    /**
     * @param array $arr1
     * @param array $arr2
     * @param callable(mixed, mixed): int $key_comp_func
     * @return array
     */
    function array_diff_ukey(array $arr1, array $arr2, callable(mixed, mixed): int $key_comp_func): array
    /**
     * @param array $arr1
     * @param array $arr2
     * @param array $arr3
     * @param array|(callable(mixed, mixed): int) $arg4
     * @param array|(callable(mixed, mixed): int) $rest
     * @return array
     */
    function array_diff_ukey(array $arr1, array $arr2, array $arr3, array|(callable(mixed, mixed): int) $arg4, array|(callable(mixed, mixed): int) ...$rest): array
-----
FUNCTION array_fill
-----
Variants: 1
    /**
     * @param int $start_index
     * @param int $count
     * @param mixed $value
     * @return array
     */
    function array_fill(int $start_index, int $count, mixed $value): array
-----
FUNCTION array_fill_keys
-----
Variants: 1
    /**
     * @param array $keys
     * @param mixed $value
     * @return array
     */
    function array_fill_keys(array $keys, mixed $value): array
-----
FUNCTION array_filter
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $array
     * @param (callable(mixed, mixed): bool)|null $callback
     * @param int $mode
     * @return array
     */
    function array_filter(array $array, (callable(mixed, mixed): bool)|null $callback = null, int $mode = 0): array
-----
FUNCTION array_flip
-----
Variants: 1
    /**
     * @param array<int|string> $array
     * @return array
     */
    function array_flip(array<int|string> $array): array
-----
FUNCTION array_intersect
-----
Variants: 1
    /**
     * @param array $array
     * @param array $arrays
     * @return array
     */
    function array_intersect(array $array, array ...$arrays): array
-----
FUNCTION array_intersect_assoc
-----
Variants: 1
    /**
     * @param array $array
     * @param array $arrays
     * @return array
     */
    function array_intersect_assoc(array $array, array ...$arrays): array
-----
FUNCTION array_intersect_key
-----
Variants: 1
    /**
     * @param array $array
     * @param array $arrays
     * @return array
     */
    function array_intersect_key(array $array, array ...$arrays): array
-----
FUNCTION array_intersect_uassoc
-----
Variants: 2
    /**
     * @param array $arr1
     * @param array $arr2
     * @param callable(mixed, mixed): int $key_compare_func
     * @return array
     */
    function array_intersect_uassoc(array $arr1, array $arr2, callable(mixed, mixed): int $key_compare_func): array
    /**
     * @param array $arr1
     * @param array $arr2
     * @param array $arr3
     * @param array|(callable(mixed, mixed): int) $arg4
     * @param array|(callable(): mixed) $rest
     * @return array
     */
    function array_intersect_uassoc(array $arr1, array $arr2, array $arr3, array|(callable(mixed, mixed): int) $arg4, array|(callable(): mixed) ...$rest): array
-----
FUNCTION array_intersect_ukey
-----
Variants: 2
    /**
     * @param array $arr1
     * @param array $arr2
     * @param callable(mixed, mixed): int $key_compare_func
     * @return array
     */
    function array_intersect_ukey(array $arr1, array $arr2, callable(mixed, mixed): int $key_compare_func): array
    /**
     * @param array $arr1
     * @param array $arr2
     * @param array $arr3
     * @param array|(callable(mixed, mixed): int) $arg4
     * @param array|(callable(mixed, mixed): int) $rest
     * @return array
     */
    function array_intersect_ukey(array $arr1, array $arr2, array $arr3, array|(callable(mixed, mixed): int) $arg4, array|(callable(mixed, mixed): int) ...$rest): array
-----
FUNCTION array_is_list
-----
Variants: 1
    /**
     * @param array $array
     * @return ($array is list<mixed> ? true : false)
     */
    function array_is_list(array $array): bool
-----
FUNCTION array_key_exists
-----
Variants: 1
    /**
     * @param int|string $key
     * @param array $array
     * @return bool
     */
    function array_key_exists(int|string $key, array $array): bool
-----
FUNCTION array_key_first
-----
Variants: 1
    /**
     * @param array $array
     * @return int|string|null
     */
    function array_key_first(array $array): int|string|null
-----
FUNCTION array_key_last
-----
Variants: 1
    /**
     * @param array $array
     * @return int|string|null
     */
    function array_key_last(array $array): int|string|null
-----
FUNCTION array_keys
-----
Variants: 1
    /**
     * @param array $array
     * @param mixed $filter_value
     * @param bool $strict
     * @return array<int, (int|string)>
     */
    function array_keys(array $array, mixed $filter_value = *ERROR*, bool $strict = false): array<int, (int|string)>
-----
FUNCTION array_map
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param (callable(): mixed)|null $callback
     * @param array $array
     * @param array $arrays
     * @return array
     */
    function array_map((callable(): mixed)|null $callback, array $array, array ...$arrays): array
-----
FUNCTION array_merge
-----
Variants: 1
    /**
     * @param array $arrays
     * @return array
     */
    function array_merge(array ...$arrays): array
-----
FUNCTION array_merge_recursive
-----
Variants: 1
    /**
     * @param array $arrays
     * @return array
     */
    function array_merge_recursive(array ...$arrays): array
-----
FUNCTION array_multisort
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $array
     * @param array|int $rest
     * @return bool
     */
    function array_multisort(array &r$array, array|int ...$rest): bool
-----
FUNCTION array_pad
-----
Variants: 1
    /**
     * @param array $array
     * @param int $length
     * @param mixed $value
     * @return array
     */
    function array_pad(array $array, int $length, mixed $value): array
-----
FUNCTION array_pop
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param array $array
     * @return mixed
     */
    function array_pop(array &r$array): mixed
-----
FUNCTION array_product
-----
Variants: 1
    /**
     * @param array $array
     * @return float|int
     */
    function array_product(array $array): float|int
-----
FUNCTION array_push
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param array $array
     * @param mixed $values
     * @return int
     */
    function array_push(array &r$array, mixed ...$values): int
-----
FUNCTION array_rand
-----
Variants: 2
    /**
     * @param array $input
     * @param int $num_req
     * @return array<int, int|string>|int|string
     */
    function array_rand(array $input, int $num_req = 1): array<int, int|string>|int|string
    /**
     * @param array $input
     * @return int|string
     */
    function array_rand(array $input): int|string
-----
FUNCTION array_reduce
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array<TIn (function array_reduce(), parameter)> $array
     * @param callable(TReturn, TIn): TReturn $callback
     * @param TReturn (function array_reduce(), parameter) $initial
     * @return TReturn (function array_reduce(), parameter)
     */
    function array_reduce(array $array, callable(mixed, mixed): mixed $callback, mixed $initial = null): mixed
-----
FUNCTION array_replace
-----
Variants: 1
    /**
     * @param array $array
     * @param array $replacements
     * @return array
     */
    function array_replace(array $array, array ...$replacements): array
-----
FUNCTION array_replace_recursive
-----
Variants: 1
    /**
     * @param array $array
     * @param array $replacements
     * @return array
     */
    function array_replace_recursive(array $array, array ...$replacements): array
-----
FUNCTION array_reverse
-----
Variants: 1
    /**
     * @param array $array
     * @param bool $preserve_keys
     * @return array
     */
    function array_reverse(array $array, bool $preserve_keys = false): array
-----
FUNCTION array_search
-----
Variants: 1
    /**
     * @param mixed $needle
     * @param array $haystack
     * @param bool $strict
     * @return int|string|false
     */
    function array_search(mixed $needle, array $haystack, bool $strict = false): int|string|false
-----
FUNCTION array_shift
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param array $array
     * @return mixed
     */
    function array_shift(array &r$array): mixed
-----
FUNCTION array_slice
-----
Variants: 1
    /**
     * @param array $array
     * @param int $offset
     * @param int|null $length
     * @param bool $preserve_keys
     * @return array
     */
    function array_slice(array $array, int $offset, int|null $length = null, bool $preserve_keys = false): array
-----
FUNCTION array_splice
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $array
     * @param int $offset
     * @param int|null $length
     * @param mixed $replacement
     * @return array
     */
    function array_splice(array &r$array, int $offset, int|null $length = null, mixed $replacement = array{}): array
-----
FUNCTION array_sum
-----
Variants: 1
    /**
     * @param array $array
     * @return float|int
     */
    function array_sum(array $array): float|int
-----
FUNCTION array_udiff
-----
Variants: 2
    /**
     * @param array<T (function array_udiff(), parameter)> $arr1
     * @param array<T (function array_udiff(), parameter)> $arr2
     * @param callable(T, T): int<-1, 1> $data_comp_func
     * @return array
     */
    function array_udiff(array $arr1, array $arr2, callable(mixed, mixed): int $data_comp_func): array
    /**
     * @param array<T (function array_udiff(), parameter)> $arr1
     * @param array<T (function array_udiff(), parameter)> $arr2
     * @param array $arr3
     * @param array|(callable(mixed, mixed): int) $arg4
     * @param array|(callable(mixed, mixed): int) $rest
     * @return array
     */
    function array_udiff(array $arr1, array $arr2, array $arr3, array|(callable(mixed, mixed): int) $arg4, array|(callable(mixed, mixed): int) ...$rest): array
-----
FUNCTION array_udiff_assoc
-----
Variants: 2
    /**
     * @param array $arr1
     * @param array $arr2
     * @param callable(mixed, mixed): int $key_comp_func
     * @return array
     */
    function array_udiff_assoc(array $arr1, array $arr2, callable(mixed, mixed): int $key_comp_func): array
    /**
     * @param array $arr1
     * @param array $arr2
     * @param array $arr3
     * @param array|(callable(mixed, mixed): int) $arg4
     * @param array|(callable(mixed, mixed): int) $rest
     * @return array
     */
    function array_udiff_assoc(array $arr1, array $arr2, array $arr3, array|(callable(mixed, mixed): int) $arg4, array|(callable(mixed, mixed): int) ...$rest): array
-----
FUNCTION array_udiff_uassoc
-----
Variants: 2
    /**
     * @param array $arr1
     * @param array $arr2
     * @param callable(): mixed $data_comp_func
     * @param callable(mixed, mixed): int $key_comp_func
     * @return array
     */
    function array_udiff_uassoc(array $arr1, array $arr2, callable(): mixed $data_comp_func, callable(mixed, mixed): int $key_comp_func): array
    /**
     * @param array $arr1
     * @param array $arr2
     * @param array $arr3
     * @param array|(callable(mixed, mixed): int) $arg4
     * @param array|(callable(mixed, mixed): int) $arg5
     * @param array|(callable(mixed, mixed): int) $rest
     * @return array
     */
    function array_udiff_uassoc(array $arr1, array $arr2, array $arr3, array|(callable(mixed, mixed): int) $arg4, array|(callable(mixed, mixed): int) $arg5, array|(callable(mixed, mixed): int) ...$rest): array
-----
FUNCTION array_uintersect
-----
Variants: 2
    /**
     * @param array $arr1
     * @param array $arr2
     * @param callable(mixed, mixed): int $data_compare_func
     * @return array
     */
    function array_uintersect(array $arr1, array $arr2, callable(mixed, mixed): int $data_compare_func): array
    /**
     * @param array $arr1
     * @param array $arr2
     * @param array $arr3
     * @param array|(callable(mixed, mixed): int) $arg4
     * @param array|(callable(mixed, mixed): int) $rest
     * @return array
     */
    function array_uintersect(array $arr1, array $arr2, array $arr3, array|(callable(mixed, mixed): int) $arg4, array|(callable(mixed, mixed): int) ...$rest): array
-----
FUNCTION array_uintersect_assoc
-----
Variants: 2
    /**
     * @param array $arr1
     * @param array $arr2
     * @param callable(mixed, mixed): int $data_compare_func
     * @return array
     */
    function array_uintersect_assoc(array $arr1, array $arr2, callable(mixed, mixed): int $data_compare_func): array
    /**
     * @param array $arr1
     * @param array $arr2
     * @param array $arr3
     * @param array|(callable(mixed, mixed): int) $arg4
     * @param array|(callable(mixed, mixed): int) $rest
     * @return array
     */
    function array_uintersect_assoc(array $arr1, array $arr2, array $arr3, array|(callable(mixed, mixed): int) $arg4, array|(callable(mixed, mixed): int) ...$rest): array
-----
FUNCTION array_uintersect_uassoc
-----
Variants: 2
    /**
     * @param array $arr1
     * @param array $arr2
     * @param callable(mixed, mixed): int $data_compare_func
     * @param callable(mixed, mixed): int $key_compare_func
     * @return array
     */
    function array_uintersect_uassoc(array $arr1, array $arr2, callable(mixed, mixed): int $data_compare_func, callable(mixed, mixed): int $key_compare_func): array
    /**
     * @param array $arr1
     * @param array $arr2
     * @param array $arr3
     * @param array|(callable(mixed, mixed): int) $arg4
     * @param array|(callable(mixed, mixed): int) $arg5
     * @param array|(callable(mixed, mixed): int) $rest
     * @return array
     */
    function array_uintersect_uassoc(array $arr1, array $arr2, array $arr3, array|(callable(mixed, mixed): int) $arg4, array|(callable(mixed, mixed): int) $arg5, array|(callable(mixed, mixed): int) ...$rest): array
-----
FUNCTION array_unique
-----
Variants: 1
    /**
     * @param array $array
     * @param int $flags
     * @return array
     */
    function array_unique(array $array, int $flags = 2): array
-----
FUNCTION array_unshift
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param array $array
     * @param mixed $values
     * @return int<1, max>
     */
    function array_unshift(array &r$array, mixed ...$values): int<1, max>
-----
FUNCTION array_values
-----
Variants: 1
    /**
     * @param array $array
     * @return array<int, mixed>
     */
    function array_values(array $array): array<int, mixed>
-----
FUNCTION array_walk
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array|object $array
     * @param callable(): mixed $callback
     * @param mixed $arg
     * @return true
     */
    function array_walk(array|object &r$array, callable(): mixed $callback, mixed $arg = *ERROR*): true
-----
FUNCTION array_walk_recursive
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array|object $array
     * @param callable(): mixed $callback
     * @param mixed $arg
     * @return true
     */
    function array_walk_recursive(array|object &r$array, callable(): mixed $callback, mixed $arg = *ERROR*): true
-----
FUNCTION arsort
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $array
     * @param int $flags
     * @return true
     */
    function arsort(array &r$array, int $flags = 0): true
-----
FUNCTION asin
-----
Variants: 1
    /**
     * @param float $num
     * @return float
     */
    function asin(float $num): float
-----
FUNCTION asinh
-----
Variants: 1
    /**
     * @param float $num
     * @return float
     */
    function asinh(float $num): float
-----
FUNCTION asort
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $array
     * @param int $flags
     * @return true
     */
    function asort(array &r$array, int $flags = 0): true
-----
FUNCTION assert
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param bool|string $assertion
     * @param string|Throwable|null $description
     * @return bool
     */
    function assert(bool|string $assertion, string|Throwable|null $description = null): bool
-----
FUNCTION assert_options
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $option
     * @param mixed $value
     * @return mixed
     */
    function assert_options(int $option, mixed $value = *ERROR*): mixed
-----
FUNCTION atan
-----
Variants: 1
    /**
     * @param float $num
     * @return float
     */
    function atan(float $num): float
-----
FUNCTION atan2
-----
Variants: 1
    /**
     * @param float $y
     * @param float $x
     * @return float
     */
    function atan2(float $y, float $x): float
-----
FUNCTION atanh
-----
Variants: 1
    /**
     * @param float $num
     * @return float
     */
    function atanh(float $num): float
-----
FUNCTION base64_decode
-----
Variants: 2
    /**
     * @param string $string
     * @param false $strict
     * @return string
     */
    function base64_decode(string $string, false $strict = false): string
    /**
     * @param string $string
     * @param true $strict
     * @return string|false
     */
    function base64_decode(string $string, true $strict = false): string|false
-----
FUNCTION base64_encode
-----
Variants: 1
    /**
     * @param string $string
     * @return ($string is non-empty-string ? non-empty-string : string)
     */
    function base64_encode(string $string): string
-----
FUNCTION base_convert
-----
Variants: 1
    /**
     * @param string $num
     * @param int $from_base
     * @param int $to_base
     * @return string
     */
    function base_convert(string $num, int $from_base, int $to_base): string
-----
FUNCTION basename
-----
Variants: 1
    /**
     * @param string $path
     * @param string $suffix
     * @return string
     */
    function basename(string $path, string $suffix = ''): string
-----
FUNCTION bcadd
-----
Variants: 1
    /**
     * @param string $num1
     * @param string $num2
     * @param int|null $scale
     * @return numeric-string
     */
    function bcadd(string $num1, string $num2, int|null $scale = null): numeric-string
-----
FUNCTION bccomp
-----
Variants: 1
    /**
     * @param string $num1
     * @param string $num2
     * @param int|null $scale
     * @return int
     */
    function bccomp(string $num1, string $num2, int|null $scale = null): int
-----
FUNCTION bcdiv
-----
Throw type: DivisionByZeroError
Variants: 1
    /**
     * @param string $num1
     * @param string $num2
     * @param int|null $scale
     * @return string
     */
    function bcdiv(string $num1, string $num2, int|null $scale = null): string
-----
FUNCTION bcmod
-----
Throw type: DivisionByZeroError
Variants: 1
    /**
     * @param string $num1
     * @param string $num2
     * @param int|null $scale
     * @return string
     */
    function bcmod(string $num1, string $num2, int|null $scale = null): string
-----
FUNCTION bcmul
-----
Variants: 1
    /**
     * @param string $num1
     * @param string $num2
     * @param int|null $scale
     * @return numeric-string
     */
    function bcmul(string $num1, string $num2, int|null $scale = null): numeric-string
-----
FUNCTION bcpow
-----
Variants: 1
    /**
     * @param string $num
     * @param string $exponent
     * @param int|null $scale
     * @return numeric-string
     */
    function bcpow(string $num, string $exponent, int|null $scale = null): numeric-string
-----
FUNCTION bcpowmod
-----
Variants: 1
    /**
     * @param string $num
     * @param string $exponent
     * @param string $modulus
     * @param int|null $scale
     * @return string
     */
    function bcpowmod(string $num, string $exponent, string $modulus, int|null $scale = null): string
-----
FUNCTION bcscale
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int|null $scale
     * @return int
     */
    function bcscale(int|null $scale = null): int
-----
FUNCTION bcsqrt
-----
Variants: 1
    /**
     * @param string $num
     * @param int|null $scale
     * @return numeric-string
     */
    function bcsqrt(string $num, int|null $scale = null): numeric-string
-----
FUNCTION bcsub
-----
Variants: 1
    /**
     * @param string $num1
     * @param string $num2
     * @param int|null $scale
     * @return numeric-string
     */
    function bcsub(string $num1, string $num2, int|null $scale = null): numeric-string
-----
FUNCTION bin2hex
-----
Variants: 1
    /**
     * @param string $string
     * @return ($string is non-empty-string ? non-empty-string : string)
     */
    function bin2hex(string $string): string
-----
FUNCTION bind_textdomain_codeset
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $domain
     * @param string|null $codeset
     * @return string|false
     */
    function bind_textdomain_codeset(string $domain, string|null $codeset): string|false
-----
FUNCTION bindec
-----
Variants: 1
    /**
     * @param string $binary_string
     * @return float|int
     */
    function bindec(string $binary_string): float|int
-----
FUNCTION bindtextdomain
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $domain
     * @param string|null $directory
     * @return string|false
     */
    function bindtextdomain(string $domain, string|null $directory): string|false
-----
FUNCTION boolval
-----
Variants: 1
    /**
     * @param mixed $value
     * @return bool
     */
    function boolval(mixed $value): bool
-----
FUNCTION bzclose
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $bz
     * @return bool
     */
    function bzclose(resource $bz): bool
-----
FUNCTION bzcompress
-----
Variants: 1
    /**
     * @param string $data
     * @param int $block_size
     * @param int $work_factor
     * @return int|string
     */
    function bzcompress(string $data, int $block_size = 4, int $work_factor = 0): int|string
-----
FUNCTION bzdecompress
-----
Variants: 1
    /**
     * @param string $data
     * @param bool $use_less_memory
     * @return int|string|false
     */
    function bzdecompress(string $data, bool $use_less_memory = false): int|string|false
-----
FUNCTION bzerrno
-----
Variants: 1
    /**
     * @param resource $bz
     * @return int
     */
    function bzerrno(resource $bz): int
-----
FUNCTION bzerror
-----
Variants: 1
    /**
     * @param resource $bz
     * @return array<string, int|string>
     */
    function bzerror(resource $bz): array<string, int|string>
-----
FUNCTION bzerrstr
-----
Variants: 1
    /**
     * @param resource $bz
     * @return string
     */
    function bzerrstr(resource $bz): string
-----
FUNCTION bzflush
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $bz
     * @return bool
     */
    function bzflush(resource $bz): bool
-----
FUNCTION bzopen
-----
Variants: 1
    /**
     * @param resource|string $file
     * @param string $mode
     * @return resource|false
     */
    function bzopen(resource|string $file, string $mode): resource|false
-----
FUNCTION bzread
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $bz
     * @param int $length
     * @return string|false
     */
    function bzread(resource $bz, int $length = 1024): string|false
-----
FUNCTION bzwrite
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $bz
     * @param string $data
     * @param int|null $length
     * @return int|false
     */
    function bzwrite(resource $bz, string $data, int|null $length = null): int|false
-----
FUNCTION cal_days_in_month
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $calendar
     * @param int $month
     * @param int $year
     * @return int
     */
    function cal_days_in_month(int $calendar, int $month, int $year): int
-----
FUNCTION cal_from_jd
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $julian_day
     * @param int $calendar
     * @return array
     */
    function cal_from_jd(int $julian_day, int $calendar): array
-----
FUNCTION cal_info
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $calendar
     * @return array
     */
    function cal_info(int $calendar = -1): array
-----
FUNCTION cal_to_jd
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $calendar
     * @param int $month
     * @param int $day
     * @param int $year
     * @return int
     */
    function cal_to_jd(int $calendar, int $month, int $day, int $year): int
-----
FUNCTION call_user_func
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @param mixed $args
     * @return mixed
     */
    function call_user_func(callable(): mixed $callback, mixed ...$args): mixed
-----
FUNCTION call_user_func_array
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @param array<int|string, mixed> $args
     * @return mixed
     */
    function call_user_func_array(callable(): mixed $callback, array<int|string, mixed> $args): mixed
-----
FUNCTION ceil
-----
Variants: 1
    /**
     * @param float|int $num
     * @return float
     */
    function ceil(float|int $num): float
-----
FUNCTION chdir
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $directory
     * @return bool
     */
    function chdir(string $directory): bool
-----
FUNCTION checkdate
-----
Variants: 1
    /**
     * @param int $month
     * @param int $day
     * @param int $year
     * @return bool
     */
    function checkdate(int $month, int $day, int $year): bool
-----
FUNCTION checkdnsrr
-----
Variants: 1
    /**
     * @param string $hostname
     * @param string $type
     * @return bool
     */
    function checkdnsrr(string $hostname, string $type = 'MX'): bool
-----
FUNCTION chgrp
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $filename
     * @param int|string $group
     * @return bool
     */
    function chgrp(string $filename, int|string $group): bool
-----
FUNCTION chmod
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $filename
     * @param int $permissions
     * @return bool
     */
    function chmod(string $filename, int $permissions): bool
-----
FUNCTION chop
-----
Variants: 1
    /**
     * @param string $string
     * @param string $characters
     * @return string
     */
    function chop(string $string, string $characters = " \n\r\t\v\000"): string
-----
FUNCTION chown
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $filename
     * @param int|string $user
     * @return bool
     */
    function chown(string $filename, int|string $user): bool
-----
FUNCTION chr
-----
Variants: 1
    /**
     * @param int $codepoint
     * @return non-empty-string
     */
    function chr(int $codepoint): non-empty-string
-----
FUNCTION chroot
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $directory
     * @return bool
     */
    function chroot(string $directory): bool
-----
FUNCTION chunk_split
-----
Variants: 1
    /**
     * @param string $string
     * @param int<1, max> $length
     * @param string $separator
     * @return string
     */
    function chunk_split(string $string, int<1, max> $length = 76, string $separator = "\r\n"): string
-----
FUNCTION class_alias
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $class
     * @param string $alias
     * @param bool $autoload
     * @return bool
     */
    function class_alias(string $class, string $alias, bool $autoload = true): bool
-----
FUNCTION class_exists
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $class
     * @param bool $autoload
     * @return bool
     */
    function class_exists(string $class, bool $autoload = true): bool
-----
FUNCTION class_implements
-----
Variants: 1
    /**
     * @param object|string $object_or_class
     * @param bool $autoload
     * @return array<string, class-string>|false
     */
    function class_implements(object|string $object_or_class, bool $autoload = true): array<string, class-string>|false
-----
FUNCTION class_parents
-----
Variants: 1
    /**
     * @param object|string $object_or_class
     * @param bool $autoload
     * @return array<string, class-string>|false
     */
    function class_parents(object|string $object_or_class, bool $autoload = true): array<string, class-string>|false
-----
FUNCTION class_uses
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param object|string $object_or_class
     * @param bool $autoload
     * @return array<string, class-string>|false
     */
    function class_uses(object|string $object_or_class, bool $autoload = true): array<string, class-string>|false
-----
FUNCTION clearstatcache
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param bool $clear_realpath_cache
     * @param string $filename
     * @return void
     */
    function clearstatcache(bool $clear_realpath_cache = false, string $filename = ''): void
-----
FUNCTION cli_get_process_title
-----
Variants: 1
    /**
     * @return string|null
     */
    function cli_get_process_title(): string|null
-----
FUNCTION cli_set_process_title
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $title
     * @return bool
     */
    function cli_set_process_title(string $title): bool
-----
FUNCTION closedir
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource|null $dir_handle
     * @return void
     */
    function closedir(resource|null $dir_handle = null): void
-----
FUNCTION closelog
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return true
     */
    function closelog(): true
-----
FUNCTION com_create_guid
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return string|false
     */
    function com_create_guid(): string|false
-----
FUNCTION com_event_sink
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param variant $variant
     * @param object $sink_object
     * @param array|string|null $sink_interface
     * @return bool
     */
    function com_event_sink(variant $variant, object $sink_object, array|string|null $sink_interface = null): bool
-----
FUNCTION com_get_active_object
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $prog_id
     * @param int|null $codepage
     * @return variant
     */
    function com_get_active_object(string $prog_id, int|null $codepage = null): variant
-----
FUNCTION com_load_typelib
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $typelib
     * @param true $case_insensitive
     * @return bool
     */
    function com_load_typelib(string $typelib, true $case_insensitive = true): bool
-----
FUNCTION com_message_pump
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $timeout_milliseconds
     * @return bool
     */
    function com_message_pump(int $timeout_milliseconds = 0): bool
-----
FUNCTION com_print_typeinfo
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string|variant $variant
     * @param string|null $dispatch_interface
     * @param bool $display_sink
     * @return bool
     */
    function com_print_typeinfo(string|variant $variant, string|null $dispatch_interface = null, bool $display_sink = false): bool
-----
FUNCTION compact
-----
Variants: 1
    /**
     * @param array|string $var_name
     * @param array|string $var_names
     * @return array<string, mixed>
     */
    function compact(array|string $var_name, array|string ...$var_names): array<string, mixed>
-----
FUNCTION connection_aborted
-----
Has side-effects: Yes
Variants: 1
    /**
     * @return 0|1
     */
    function connection_aborted(): 0|1
-----
FUNCTION connection_status
-----
Has side-effects: Yes
Variants: 1
    /**
     * @return int<0, 3>
     */
    function connection_status(): int<0, 3>
-----
FUNCTION constant
-----
Throw type: Error
Variants: 1
    /**
     * @param string $name
     * @return mixed
     */
    function constant(string $name): mixed
-----
FUNCTION convert_cyr_string
-----
MISSING
-----
FUNCTION convert_uudecode
-----
Variants: 1
    /**
     * @param string $string
     * @return string|false
     */
    function convert_uudecode(string $string): string|false
-----
FUNCTION convert_uuencode
-----
Variants: 1
    /**
     * @param string $string
     * @return string
     */
    function convert_uuencode(string $string): string
-----
FUNCTION copy
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $from
     * @param string $to
     * @param resource|null $context
     * @return bool
     */
    function copy(string $from, string $to, resource|null $context = null): bool
-----
FUNCTION cos
-----
Variants: 1
    /**
     * @param float $num
     * @return float
     */
    function cos(float $num): float
-----
FUNCTION cosh
-----
Variants: 1
    /**
     * @param float $num
     * @return float
     */
    function cosh(float $num): float
-----
FUNCTION count
-----
Variants: 1
    /**
     * @param array|Countable $value
     * @param int $mode
     * @return int<0, max>
     */
    function count(array|Countable $value, int $mode = 0): int<0, max>
-----
FUNCTION count_chars
-----
Variants: 1
    /**
     * @param string $string
     * @param int $mode
     * @return array<int, int>|string
     */
    function count_chars(string $string, int $mode = 0): array<int, int>|string
-----
FUNCTION crc32
-----
Variants: 1
    /**
     * @param string $string
     * @return int
     */
    function crc32(string $string): int
-----
FUNCTION create_function
-----
MISSING
-----
FUNCTION crypt
-----
Variants: 1
    /**
     * @param string $string
     * @param string $salt
     * @return non-empty-string
     */
    function crypt(string $string, string $salt): non-empty-string
-----
FUNCTION ctype_alnum
-----
Variants: 1
    /**
     * @param mixed $text
     * @return bool
     */
    function ctype_alnum(mixed $text): bool
-----
FUNCTION ctype_alpha
-----
Variants: 1
    /**
     * @param mixed $text
     * @return bool
     */
    function ctype_alpha(mixed $text): bool
-----
FUNCTION ctype_cntrl
-----
Variants: 1
    /**
     * @param mixed $text
     * @return bool
     */
    function ctype_cntrl(mixed $text): bool
-----
FUNCTION ctype_digit
-----
Variants: 1
    /**
     * @param mixed $text
     * @return bool
     */
    function ctype_digit(mixed $text): bool
-----
FUNCTION ctype_graph
-----
Variants: 1
    /**
     * @param mixed $text
     * @return bool
     */
    function ctype_graph(mixed $text): bool
-----
FUNCTION ctype_lower
-----
Variants: 1
    /**
     * @param mixed $text
     * @return bool
     */
    function ctype_lower(mixed $text): bool
-----
FUNCTION ctype_print
-----
Variants: 1
    /**
     * @param mixed $text
     * @return bool
     */
    function ctype_print(mixed $text): bool
-----
FUNCTION ctype_punct
-----
Variants: 1
    /**
     * @param mixed $text
     * @return bool
     */
    function ctype_punct(mixed $text): bool
-----
FUNCTION ctype_space
-----
Variants: 1
    /**
     * @param mixed $text
     * @return bool
     */
    function ctype_space(mixed $text): bool
-----
FUNCTION ctype_upper
-----
Variants: 1
    /**
     * @param mixed $text
     * @return bool
     */
    function ctype_upper(mixed $text): bool
-----
FUNCTION ctype_xdigit
-----
Variants: 1
    /**
     * @param mixed $text
     * @return bool
     */
    function ctype_xdigit(mixed $text): bool
-----
FUNCTION cubrid_affected_rows
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $req_identifier
     * @return int
     */
    function cubrid_affected_rows(mixed $req_identifier = null): int
-----
FUNCTION cubrid_bind
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $req_identifier
     * @param int $bind_param
     * @param mixed $bind_value
     * @param string $bind_value_type
     * @return bool
     */
    function cubrid_bind(resource $req_identifier, int $bind_param, mixed $bind_value, string $bind_value_type = null): bool
-----
FUNCTION cubrid_client_encoding
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $conn_identifier
     * @return string
     */
    function cubrid_client_encoding(mixed $conn_identifier = null): string
-----
FUNCTION cubrid_close
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $conn_identifier
     * @return bool
     */
    function cubrid_close(mixed $conn_identifier = null): bool
-----
FUNCTION cubrid_close_prepare
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $req_identifier
     * @return bool
     */
    function cubrid_close_prepare(resource $req_identifier): bool
-----
FUNCTION cubrid_close_request
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $req_identifier
     * @return bool
     */
    function cubrid_close_request(resource $req_identifier): bool
-----
FUNCTION cubrid_col_get
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn_identifier
     * @param string $oid
     * @param string $attr_name
     * @return array
     */
    function cubrid_col_get(resource $conn_identifier, string $oid, string $attr_name): array
-----
FUNCTION cubrid_col_size
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn_identifier
     * @param string $oid
     * @param string $attr_name
     * @return int
     */
    function cubrid_col_size(resource $conn_identifier, string $oid, string $attr_name): int
-----
FUNCTION cubrid_column_names
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $req_identifier
     * @return array
     */
    function cubrid_column_names(resource $req_identifier): array
-----
FUNCTION cubrid_column_types
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $req_identifier
     * @return array
     */
    function cubrid_column_types(resource $req_identifier): array
-----
FUNCTION cubrid_commit
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn_identifier
     * @return bool
     */
    function cubrid_commit(resource $conn_identifier): bool
-----
FUNCTION cubrid_connect
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $host
     * @param int $port
     * @param string $dbname
     * @param string $userid
     * @param string $passwd
     * @return resource
     */
    function cubrid_connect(string $host, int $port, string $dbname, string $userid = 'PUBLIC', string $passwd = ''): resource
-----
FUNCTION cubrid_connect_with_url
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $conn_url
     * @param string $userid
     * @param string $passwd
     * @return resource
     */
    function cubrid_connect_with_url(string $conn_url, string $userid = 'PUBLIC', string $passwd = ''): resource
-----
FUNCTION cubrid_current_oid
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $req_identifier
     * @return string
     */
    function cubrid_current_oid(resource $req_identifier): string
-----
FUNCTION cubrid_data_seek
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $req_identifier
     * @param int $row_number
     * @return bool
     */
    function cubrid_data_seek(mixed $req_identifier, int $row_number): bool
-----
FUNCTION cubrid_db_name
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $result
     * @param int $index
     * @return string
     */
    function cubrid_db_name(array $result, int $index): string
-----
FUNCTION cubrid_disconnect
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn_identifier
     * @return bool
     */
    function cubrid_disconnect(resource $conn_identifier = null): bool
-----
FUNCTION cubrid_drop
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn_identifier
     * @param string $oid
     * @return bool
     */
    function cubrid_drop(resource $conn_identifier, string $oid): bool
-----
FUNCTION cubrid_errno
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $conn_identifier
     * @return int
     */
    function cubrid_errno(mixed $conn_identifier = null): int
-----
FUNCTION cubrid_error
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $connection
     * @return string
     */
    function cubrid_error(mixed $connection = null): string
-----
FUNCTION cubrid_error_code
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return int
     */
    function cubrid_error_code(): int
-----
FUNCTION cubrid_error_code_facility
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return int
     */
    function cubrid_error_code_facility(): int
-----
FUNCTION cubrid_error_msg
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return string
     */
    function cubrid_error_msg(): string
-----
FUNCTION cubrid_execute
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $conn_identifier
     * @param string $sql
     * @param int $option
     * @param mixed $request_identifier
     * @return bool
     */
    function cubrid_execute(mixed $conn_identifier, string $sql, int $option = null, mixed $request_identifier): bool
-----
FUNCTION cubrid_fetch
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $result
     * @param int $type
     * @return mixed
     */
    function cubrid_fetch(resource $result, int $type = 3): mixed
-----
FUNCTION cubrid_fetch_array
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $result
     * @param int $type
     * @return array
     */
    function cubrid_fetch_array(mixed $result, int $type = 3): array
-----
FUNCTION cubrid_fetch_assoc
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $result
     * @return array
     */
    function cubrid_fetch_assoc(mixed $result): array
-----
FUNCTION cubrid_fetch_field
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $result
     * @param int $field_offset
     * @return object
     */
    function cubrid_fetch_field(mixed $result, int $field_offset = 0): object
-----
FUNCTION cubrid_fetch_lengths
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $result
     * @return array
     */
    function cubrid_fetch_lengths(mixed $result): array
-----
FUNCTION cubrid_fetch_object
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $result
     * @param string $class_name
     * @param array $params
     * @return object
     */
    function cubrid_fetch_object(mixed $result, string $class_name = null, array $params = null): object
-----
FUNCTION cubrid_fetch_row
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $result
     * @return array
     */
    function cubrid_fetch_row(mixed $result): array
-----
FUNCTION cubrid_field_flags
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $result
     * @param int $field_offset
     * @return string
     */
    function cubrid_field_flags(mixed $result, int $field_offset): string
-----
FUNCTION cubrid_field_len
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $result
     * @param int $field_offset
     * @return int
     */
    function cubrid_field_len(mixed $result, int $field_offset): int
-----
FUNCTION cubrid_field_name
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $result
     * @param int $field_offset
     * @return string
     */
    function cubrid_field_name(mixed $result, int $field_offset): string
-----
FUNCTION cubrid_field_seek
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $result
     * @param int $field_offset
     * @return bool
     */
    function cubrid_field_seek(mixed $result, int $field_offset): bool
-----
FUNCTION cubrid_field_table
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $result
     * @param int $field_offset
     * @return string
     */
    function cubrid_field_table(mixed $result, int $field_offset): string
-----
FUNCTION cubrid_field_type
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $result
     * @param int $field_offset
     * @return string
     */
    function cubrid_field_type(mixed $result, int $field_offset): string
-----
FUNCTION cubrid_free_result
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $req_identifier
     * @return bool
     */
    function cubrid_free_result(resource $req_identifier): bool
-----
FUNCTION cubrid_get
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn_identifier
     * @param string $oid
     * @param mixed $attr
     * @return mixed
     */
    function cubrid_get(resource $conn_identifier, string $oid, mixed $attr = null): mixed
-----
FUNCTION cubrid_get_autocommit
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn_identifier
     * @return bool
     */
    function cubrid_get_autocommit(resource $conn_identifier): bool
-----
FUNCTION cubrid_get_charset
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn_identifier
     * @return string
     */
    function cubrid_get_charset(resource $conn_identifier): string
-----
FUNCTION cubrid_get_class_name
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn_identifier
     * @param string $oid
     * @return string
     */
    function cubrid_get_class_name(resource $conn_identifier, string $oid): string
-----
FUNCTION cubrid_get_client_info
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return string
     */
    function cubrid_get_client_info(): string
-----
FUNCTION cubrid_get_db_parameter
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn_identifier
     * @return array
     */
    function cubrid_get_db_parameter(resource $conn_identifier): array
-----
FUNCTION cubrid_get_query_timeout
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $req_identifier
     * @return int
     */
    function cubrid_get_query_timeout(resource $req_identifier): int
-----
FUNCTION cubrid_get_server_info
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn_identifier
     * @return string
     */
    function cubrid_get_server_info(resource $conn_identifier): string
-----
FUNCTION cubrid_insert_id
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn_identifier
     * @return string
     */
    function cubrid_insert_id(resource $conn_identifier = null): string
-----
FUNCTION cubrid_is_instance
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn_identifier
     * @param string $oid
     * @return int
     */
    function cubrid_is_instance(resource $conn_identifier, string $oid): int
-----
FUNCTION cubrid_list_dbs
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $conn_identifier
     * @return array
     */
    function cubrid_list_dbs(mixed $conn_identifier): array
-----
FUNCTION cubrid_load_from_glo
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $conn_identifier
     * @param string $oid
     * @param string $file_name
     * @return int
     */
    function cubrid_load_from_glo(mixed $conn_identifier, string $oid, string $file_name): int
-----
FUNCTION cubrid_lob2_bind
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $req_identifier
     * @param int $bind_index
     * @param mixed $bind_value
     * @param string $bind_value_type
     * @return bool
     */
    function cubrid_lob2_bind(resource $req_identifier, int $bind_index, mixed $bind_value, string $bind_value_type = null): bool
-----
FUNCTION cubrid_lob2_close
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $lob_identifier
     * @return bool
     */
    function cubrid_lob2_close(resource $lob_identifier): bool
-----
FUNCTION cubrid_lob2_export
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $lob_identifier
     * @param string $file_name
     * @return bool
     */
    function cubrid_lob2_export(resource $lob_identifier, string $file_name): bool
-----
FUNCTION cubrid_lob2_import
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $lob_identifier
     * @param string $file_name
     * @return bool
     */
    function cubrid_lob2_import(resource $lob_identifier, string $file_name): bool
-----
FUNCTION cubrid_lob2_new
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn_identifier
     * @param string $type
     * @return resource
     */
    function cubrid_lob2_new(resource $conn_identifier = null, string $type = 'BLOB'): resource
-----
FUNCTION cubrid_lob2_read
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $lob_identifier
     * @param int $len
     * @return string
     */
    function cubrid_lob2_read(resource $lob_identifier, int $len): string
-----
FUNCTION cubrid_lob2_seek
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $lob_identifier
     * @param int $offset
     * @param int $origin
     * @return bool
     */
    function cubrid_lob2_seek(resource $lob_identifier, int $offset, int $origin = 1): bool
-----
FUNCTION cubrid_lob2_seek64
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $lob_identifier
     * @param string $offset
     * @param int $origin
     * @return bool
     */
    function cubrid_lob2_seek64(resource $lob_identifier, string $offset, int $origin = 1): bool
-----
FUNCTION cubrid_lob2_size
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $lob_identifier
     * @return int
     */
    function cubrid_lob2_size(resource $lob_identifier): int
-----
FUNCTION cubrid_lob2_size64
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $lob_identifier
     * @return string
     */
    function cubrid_lob2_size64(resource $lob_identifier): string
-----
FUNCTION cubrid_lob2_tell
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $lob_identifier
     * @return int
     */
    function cubrid_lob2_tell(resource $lob_identifier): int
-----
FUNCTION cubrid_lob2_tell64
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $lob_identifier
     * @return string
     */
    function cubrid_lob2_tell64(resource $lob_identifier): string
-----
FUNCTION cubrid_lob2_write
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $lob_identifier
     * @param string $buf
     * @return bool
     */
    function cubrid_lob2_write(resource $lob_identifier, string $buf): bool
-----
FUNCTION cubrid_lob_close
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $lob_identifier_array
     * @return bool
     */
    function cubrid_lob_close(array $lob_identifier_array): bool
-----
FUNCTION cubrid_lob_export
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn_identifier
     * @param resource $lob_identifier
     * @param string $path_name
     * @return bool
     */
    function cubrid_lob_export(resource $conn_identifier, resource $lob_identifier, string $path_name): bool
-----
FUNCTION cubrid_lob_get
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn_identifier
     * @param string $sql
     * @return array
     */
    function cubrid_lob_get(resource $conn_identifier, string $sql): array
-----
FUNCTION cubrid_lob_send
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn_identifier
     * @param resource $lob_identifier
     * @return bool
     */
    function cubrid_lob_send(resource $conn_identifier, resource $lob_identifier): bool
-----
FUNCTION cubrid_lob_size
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $lob_identifier
     * @return string
     */
    function cubrid_lob_size(resource $lob_identifier): string
-----
FUNCTION cubrid_lock_read
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn_identifier
     * @param string $oid
     * @return bool
     */
    function cubrid_lock_read(resource $conn_identifier, string $oid): bool
-----
FUNCTION cubrid_lock_write
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn_identifier
     * @param string $oid
     * @return bool
     */
    function cubrid_lock_write(resource $conn_identifier, string $oid): bool
-----
FUNCTION cubrid_move_cursor
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $req_identifier
     * @param int $offset
     * @param int $origin
     * @return int
     */
    function cubrid_move_cursor(resource $req_identifier, int $offset, int $origin = 1): int
-----
FUNCTION cubrid_new_glo
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $conn_identifier
     * @param string $class_name
     * @param string $file_name
     * @return string
     */
    function cubrid_new_glo(mixed $conn_identifier, string $class_name, string $file_name): string
-----
FUNCTION cubrid_next_result
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $result
     * @return bool
     */
    function cubrid_next_result(resource $result): bool
-----
FUNCTION cubrid_num_cols
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $req_identifier
     * @return int
     */
    function cubrid_num_cols(resource $req_identifier): int
-----
FUNCTION cubrid_num_fields
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $result
     * @return int
     */
    function cubrid_num_fields(mixed $result): int
-----
FUNCTION cubrid_num_rows
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $req_identifier
     * @return int
     */
    function cubrid_num_rows(resource $req_identifier): int
-----
FUNCTION cubrid_pconnect
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $host
     * @param int $port
     * @param string $dbname
     * @param string $userid
     * @param string $passwd
     * @return resource
     */
    function cubrid_pconnect(string $host, int $port, string $dbname, string $userid = 'PUBLIC', string $passwd = ''): resource
-----
FUNCTION cubrid_pconnect_with_url
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $conn_url
     * @param string $userid
     * @param string $passwd
     * @return resource
     */
    function cubrid_pconnect_with_url(string $conn_url, string $userid = 'PUBLIC', string $passwd = ''): resource
-----
FUNCTION cubrid_ping
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $conn_identifier
     * @return bool
     */
    function cubrid_ping(mixed $conn_identifier = null): bool
-----
FUNCTION cubrid_prepare
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn_identifier
     * @param string $prepare_stmt
     * @param int $option
     * @return resource
     */
    function cubrid_prepare(resource $conn_identifier, string $prepare_stmt, int $option = 0): resource
-----
FUNCTION cubrid_put
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn_identifier
     * @param string $oid
     * @param string $attr
     * @param mixed $value
     * @return bool
     */
    function cubrid_put(resource $conn_identifier, string $oid, string $attr = null, mixed $value): bool
-----
FUNCTION cubrid_query
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $query
     * @param mixed $conn_identifier
     * @return resource
     */
    function cubrid_query(string $query, mixed $conn_identifier = null): resource
-----
FUNCTION cubrid_real_escape_string
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $unescaped_string
     * @param mixed $conn_identifier
     * @return string
     */
    function cubrid_real_escape_string(string $unescaped_string, mixed $conn_identifier = null): string
-----
FUNCTION cubrid_result
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $result
     * @param int $row
     * @param mixed $field
     * @return string
     */
    function cubrid_result(mixed $result, int $row, mixed $field = 0): string
-----
FUNCTION cubrid_rollback
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn_identifier
     * @return bool
     */
    function cubrid_rollback(resource $conn_identifier): bool
-----
FUNCTION cubrid_save_to_glo
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $conn_identifier
     * @param string $oid
     * @param string $file_name
     * @return int
     */
    function cubrid_save_to_glo(mixed $conn_identifier, string $oid, string $file_name): int
-----
FUNCTION cubrid_schema
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn_identifier
     * @param int $schema_type
     * @param string $class_name
     * @param string $attr_name
     * @return array
     */
    function cubrid_schema(resource $conn_identifier, int $schema_type, string $class_name = null, string $attr_name = null): array
-----
FUNCTION cubrid_send_glo
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $conn_identifier
     * @param string $oid
     * @return int
     */
    function cubrid_send_glo(mixed $conn_identifier, string $oid): int
-----
FUNCTION cubrid_seq_drop
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn_identifier
     * @param string $oid
     * @param string $attr_name
     * @param int $index
     * @return bool
     */
    function cubrid_seq_drop(resource $conn_identifier, string $oid, string $attr_name, int $index): bool
-----
FUNCTION cubrid_seq_insert
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn_identifier
     * @param string $oid
     * @param string $attr_name
     * @param int $index
     * @param string $seq_element
     * @return bool
     */
    function cubrid_seq_insert(resource $conn_identifier, string $oid, string $attr_name, int $index, string $seq_element): bool
-----
FUNCTION cubrid_seq_put
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn_identifier
     * @param string $oid
     * @param string $attr_name
     * @param int $index
     * @param string $seq_element
     * @return bool
     */
    function cubrid_seq_put(resource $conn_identifier, string $oid, string $attr_name, int $index, string $seq_element): bool
-----
FUNCTION cubrid_set_add
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn_identifier
     * @param string $oid
     * @param string $attr_name
     * @param string $set_element
     * @return bool
     */
    function cubrid_set_add(resource $conn_identifier, string $oid, string $attr_name, string $set_element): bool
-----
FUNCTION cubrid_set_autocommit
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn_identifier
     * @param bool $mode
     * @return bool
     */
    function cubrid_set_autocommit(resource $conn_identifier, bool $mode): bool
-----
FUNCTION cubrid_set_db_parameter
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn_identifier
     * @param int $param_type
     * @param int $param_value
     * @return bool
     */
    function cubrid_set_db_parameter(resource $conn_identifier, int $param_type, int $param_value): bool
-----
FUNCTION cubrid_set_drop
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn_identifier
     * @param string $oid
     * @param string $attr_name
     * @param string $set_element
     * @return bool
     */
    function cubrid_set_drop(resource $conn_identifier, string $oid, string $attr_name, string $set_element): bool
-----
FUNCTION cubrid_set_query_timeout
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $req_identifier
     * @param int $timeout
     * @return bool
     */
    function cubrid_set_query_timeout(resource $req_identifier, int $timeout): bool
-----
FUNCTION cubrid_unbuffered_query
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $query
     * @param mixed $conn_identifier
     * @return resource
     */
    function cubrid_unbuffered_query(string $query, mixed $conn_identifier = null): resource
-----
FUNCTION cubrid_version
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return string
     */
    function cubrid_version(): string
-----
FUNCTION curl_close
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param CurlHandle $handle
     * @return void
     */
    function curl_close(CurlHandle $handle): void
-----
FUNCTION curl_copy_handle
-----
Variants: 1
    /**
     * @param CurlHandle $handle
     * @return CurlHandle|false
     */
    function curl_copy_handle(CurlHandle $handle): CurlHandle|false
-----
FUNCTION curl_errno
-----
Variants: 1
    /**
     * @param CurlHandle $handle
     * @return int
     */
    function curl_errno(CurlHandle $handle): int
-----
FUNCTION curl_error
-----
Variants: 1
    /**
     * @param CurlHandle $handle
     * @return string
     */
    function curl_error(CurlHandle $handle): string
-----
FUNCTION curl_escape
-----
Variants: 1
    /**
     * @param CurlHandle $handle
     * @param string $string
     * @return string|false
     */
    function curl_escape(CurlHandle $handle, string $string): string|false
-----
FUNCTION curl_exec
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param CurlHandle $handle
     * @return bool|string
     */
    function curl_exec(CurlHandle $handle): bool|string
-----
FUNCTION curl_getinfo
-----
Variants: 1
    /**
     * @param CurlHandle $handle
     * @param int|null $option
     * @return mixed
     */
    function curl_getinfo(CurlHandle $handle, int|null $option = null): mixed
-----
FUNCTION curl_init
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string|null $url
     * @return CurlHandle|false
     */
    function curl_init(string|null $url = null): CurlHandle|false
-----
FUNCTION curl_multi_add_handle
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param CurlMultiHandle $multi_handle
     * @param CurlHandle $handle
     * @return int
     */
    function curl_multi_add_handle(CurlMultiHandle $multi_handle, CurlHandle $handle): int
-----
FUNCTION curl_multi_close
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param CurlMultiHandle $multi_handle
     * @return void
     */
    function curl_multi_close(CurlMultiHandle $multi_handle): void
-----
FUNCTION curl_multi_errno
-----
Variants: 1
    /**
     * @param CurlMultiHandle $multi_handle
     * @return int
     */
    function curl_multi_errno(CurlMultiHandle $multi_handle): int
-----
FUNCTION curl_multi_exec
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param CurlMultiHandle $multi_handle
     * @param int $still_running
     * @return int
     */
    function curl_multi_exec(CurlMultiHandle $multi_handle, int &rw$still_running): int
-----
FUNCTION curl_multi_getcontent
-----
Variants: 1
    /**
     * @param CurlHandle $handle
     * @return string|null
     */
    function curl_multi_getcontent(CurlHandle $handle): string|null
-----
FUNCTION curl_multi_info_read
-----
Variants: 1
    /**
     * @param CurlMultiHandle $multi_handle
     * @param int $queued_messages
     * @return array|false
     */
    function curl_multi_info_read(CurlMultiHandle $multi_handle, int &rw$queued_messages = null): array|false
-----
FUNCTION curl_multi_init
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return CurlMultiHandle
     */
    function curl_multi_init(): CurlMultiHandle
-----
FUNCTION curl_multi_remove_handle
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param CurlMultiHandle $multi_handle
     * @param CurlHandle $handle
     * @return int
     */
    function curl_multi_remove_handle(CurlMultiHandle $multi_handle, CurlHandle $handle): int
-----
FUNCTION curl_multi_select
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param CurlMultiHandle $multi_handle
     * @param float $timeout
     * @return int
     */
    function curl_multi_select(CurlMultiHandle $multi_handle, float $timeout = 1.0): int
-----
FUNCTION curl_multi_setopt
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param CurlMultiHandle $multi_handle
     * @param int $option
     * @param mixed $value
     * @return bool
     */
    function curl_multi_setopt(CurlMultiHandle $multi_handle, int $option, mixed $value): bool
-----
FUNCTION curl_multi_strerror
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $error_code
     * @return string|null
     */
    function curl_multi_strerror(int $error_code): string|null
-----
FUNCTION curl_pause
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param CurlHandle $handle
     * @param int $flags
     * @return int
     */
    function curl_pause(CurlHandle $handle, int $flags): int
-----
FUNCTION curl_reset
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param CurlHandle $handle
     * @return void
     */
    function curl_reset(CurlHandle $handle): void
-----
FUNCTION curl_setopt
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param CurlHandle $handle
     * @param int $option
     * @param mixed $value
     * @return bool
     */
    function curl_setopt(CurlHandle $handle, int $option, mixed $value): bool
-----
FUNCTION curl_setopt_array
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param CurlHandle $handle
     * @param array $options
     * @return bool
     */
    function curl_setopt_array(CurlHandle $handle, array $options): bool
-----
FUNCTION curl_share_close
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param CurlShareHandle $share_handle
     * @return void
     */
    function curl_share_close(CurlShareHandle $share_handle): void
-----
FUNCTION curl_share_errno
-----
Variants: 1
    /**
     * @param CurlShareHandle $share_handle
     * @return int
     */
    function curl_share_errno(CurlShareHandle $share_handle): int
-----
FUNCTION curl_share_init
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return CurlShareHandle
     */
    function curl_share_init(): CurlShareHandle
-----
FUNCTION curl_share_setopt
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param CurlShareHandle $share_handle
     * @param int $option
     * @param mixed $value
     * @return bool
     */
    function curl_share_setopt(CurlShareHandle $share_handle, int $option, mixed $value): bool
-----
FUNCTION curl_share_strerror
-----
Variants: 1
    /**
     * @param int $error_code
     * @return string|null
     */
    function curl_share_strerror(int $error_code): string|null
-----
FUNCTION curl_strerror
-----
Variants: 1
    /**
     * @param int $error_code
     * @return string|null
     */
    function curl_strerror(int $error_code): string|null
-----
FUNCTION curl_unescape
-----
Variants: 1
    /**
     * @param CurlHandle $handle
     * @param string $string
     * @return string|false
     */
    function curl_unescape(CurlHandle $handle, string $string): string|false
-----
FUNCTION curl_upkeep
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param CurlHandle $handle
     * @return bool
     */
    function curl_upkeep(CurlHandle $handle): bool
-----
FUNCTION curl_version
-----
Variants: 1
    /**
     * @return array|false
     */
    function curl_version(): array|false
-----
FUNCTION current
-----
Variants: 1
    /**
     * @param array|object $array
     * @return mixed
     */
    function current(array|object $array): mixed
-----
FUNCTION data://
-----
MISSING
-----
FUNCTION date
-----
Variants: 1
    /**
     * @param string $format
     * @param int|null $timestamp
     * @return string
     */
    function date(string $format, int|null $timestamp = null): string
-----
FUNCTION date_add
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param DateTime $object
     * @param DateInterval $interval
     * @return DateTime
     */
    function date_add(DateTime $object, DateInterval $interval): DateTime
-----
FUNCTION date_create
-----
Variants: 1
    /**
     * @param string $datetime
     * @param DateTimeZone|null $timezone
     * @return DateTime|false
     */
    function date_create(string $datetime = 'now', DateTimeZone|null $timezone = null): DateTime|false
-----
FUNCTION date_create_from_format
-----
Variants: 1
    /**
     * @param string $format
     * @param string $datetime
     * @param DateTimeZone|null $timezone
     * @return DateTime|false
     */
    function date_create_from_format(string $format, string $datetime, DateTimeZone|null $timezone = null): DateTime|false
-----
FUNCTION date_create_immutable
-----
Variants: 1
    /**
     * @param string $datetime
     * @param DateTimeZone|null $timezone
     * @return DateTimeImmutable|false
     */
    function date_create_immutable(string $datetime = 'now', DateTimeZone|null $timezone = null): DateTimeImmutable|false
-----
FUNCTION date_create_immutable_from_format
-----
Variants: 1
    /**
     * @param string $format
     * @param string $datetime
     * @param DateTimeZone|null $timezone
     * @return DateTimeImmutable|false
     */
    function date_create_immutable_from_format(string $format, string $datetime, DateTimeZone|null $timezone = null): DateTimeImmutable|false
-----
FUNCTION date_date_set
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param DateTime $object
     * @param int $year
     * @param int $month
     * @param int $day
     * @return DateTime
     */
    function date_date_set(DateTime $object, int $year, int $month, int $day): DateTime
-----
FUNCTION date_default_timezone_get
-----
Variants: 1
    /**
     * @return string
     */
    function date_default_timezone_get(): string
-----
FUNCTION date_default_timezone_set
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $timezoneId
     * @return bool
     */
    function date_default_timezone_set(string $timezoneId): bool
-----
FUNCTION date_diff
-----
Variants: 1
    /**
     * @param DateTimeInterface $baseObject
     * @param DateTimeInterface $targetObject
     * @param bool $absolute
     * @return DateInterval
     */
    function date_diff(DateTimeInterface $baseObject, DateTimeInterface $targetObject, bool $absolute = false): DateInterval
-----
FUNCTION date_format
-----
Variants: 1
    /**
     * @param DateTimeInterface $object
     * @param string $format
     * @return string
     */
    function date_format(DateTimeInterface $object, string $format): string
-----
FUNCTION date_get_last_errors
-----
Variants: 1
    /**
     * @return array{warning_count: int, warnings: array<int, string>, error_count: int, errors: array<int, string>}|false
     */
    function date_get_last_errors(): array{warning_count: int, warnings: array<int, string>, error_count: int, errors: array<int, string>}|false
-----
FUNCTION date_interval_create_from_date_string
-----
Variants: 1
    /**
     * @param string $datetime
     * @return DateInterval|false
     */
    function date_interval_create_from_date_string(string $datetime): DateInterval|false
-----
FUNCTION date_interval_format
-----
Variants: 1
    /**
     * @param DateInterval $object
     * @param string $format
     * @return string
     */
    function date_interval_format(DateInterval $object, string $format): string
-----
FUNCTION date_isodate_set
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param DateTime $object
     * @param int $year
     * @param int $week
     * @param int $dayOfWeek
     * @return DateTime
     */
    function date_isodate_set(DateTime $object, int $year, int $week, int $dayOfWeek = 1): DateTime
-----
FUNCTION date_modify
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param DateTime $object
     * @param string $modifier
     * @return DateTime|false
     */
    function date_modify(DateTime $object, string $modifier): DateTime|false
-----
FUNCTION date_offset_get
-----
Variants: 1
    /**
     * @param DateTimeInterface $object
     * @return int
     */
    function date_offset_get(DateTimeInterface $object): int
-----
FUNCTION date_parse
-----
Variants: 1
    /**
     * @param string $datetime
     * @return array<string, mixed>
     */
    function date_parse(string $datetime): array<string, mixed>
-----
FUNCTION date_parse_from_format
-----
Variants: 1
    /**
     * @param string $format
     * @param string $datetime
     * @return array{year: int|false, month: int|false, day: int|false, hour: int|false, minute: int|false, second: int|false, fraction: float|false, warning_count: int, warnings: array<string>, error_count: int, errors: array<string>, is_localtime: bool, zone_type?: bool|int, zone?: bool|int, is_dst?: bool, tz_abbr?: string, tz_id?: string, relative?: array{year: int, month: int, day: int, hour: int, minute: int, second: int, weekday?: int, weekdays?: int, first_day_of_month?: bool, last_day_of_month?: bool}}
     */
    function date_parse_from_format(string $format, string $datetime): array{year: int|false, month: int|false, day: int|false, hour: int|false, minute: int|false, second: int|false, fraction: float|false, warning_count: int, warnings: array<string>, error_count: int, errors: array<string>, is_localtime: bool, zone_type?: bool|int, zone?: bool|int, is_dst?: bool, tz_abbr?: string, tz_id?: string, relative?: array{year: int, month: int, day: int, hour: int, minute: int, second: int, weekday?: int, weekdays?: int, first_day_of_month?: bool, last_day_of_month?: bool}}
-----
FUNCTION date_sub
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param DateTime $object
     * @param DateInterval $interval
     * @return DateTime
     */
    function date_sub(DateTime $object, DateInterval $interval): DateTime
-----
FUNCTION date_sun_info
-----
Variants: 1
    /**
     * @param int $timestamp
     * @param float $latitude
     * @param float $longitude
     * @return array<string, bool|int>
     */
    function date_sun_info(int $timestamp, float $latitude, float $longitude): array<string, bool|int>
-----
FUNCTION date_sunrise
-----
Is deprecated: Yes
Variants: 1
    /**
     * @param int $timestamp
     * @param int $returnFormat
     * @param float|null $latitude
     * @param float|null $longitude
     * @param float|null $zenith
     * @param float|null $utcOffset
     * @return float|int|string|false
     */
    function date_sunrise(int $timestamp, int $returnFormat = 1, float|null $latitude = null, float|null $longitude = null, float|null $zenith = null, float|null $utcOffset = null): float|int|string|false
-----
FUNCTION date_sunset
-----
Is deprecated: Yes
Variants: 1
    /**
     * @param int $timestamp
     * @param int $returnFormat
     * @param float|null $latitude
     * @param float|null $longitude
     * @param float|null $zenith
     * @param float|null $utcOffset
     * @return float|int|string|false
     */
    function date_sunset(int $timestamp, int $returnFormat = 1, float|null $latitude = null, float|null $longitude = null, float|null $zenith = null, float|null $utcOffset = null): float|int|string|false
-----
FUNCTION date_time_set
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param DateTime $object
     * @param int $hour
     * @param int $minute
     * @param int $second
     * @param int $microsecond
     * @return DateTime
     */
    function date_time_set(DateTime $object, int $hour, int $minute, int $second = 0, int $microsecond = 0): DateTime
-----
FUNCTION date_timestamp_get
-----
Variants: 1
    /**
     * @param DateTimeInterface $object
     * @return int
     */
    function date_timestamp_get(DateTimeInterface $object): int
-----
FUNCTION date_timestamp_set
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param DateTime $object
     * @param int $timestamp
     * @return DateTime
     */
    function date_timestamp_set(DateTime $object, int $timestamp): DateTime
-----
FUNCTION date_timezone_get
-----
Variants: 1
    /**
     * @param DateTimeInterface $object
     * @return DateTimeZone|false
     */
    function date_timezone_get(DateTimeInterface $object): DateTimeZone|false
-----
FUNCTION date_timezone_set
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param DateTime $object
     * @param DateTimeZone $timezone
     * @return DateTime
     */
    function date_timezone_set(DateTime $object, DateTimeZone $timezone): DateTime
-----
FUNCTION db2_autocommit
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @param 0|1 $value
     * @return ($value is null ? 0|1 : bool)
     */
    function db2_autocommit(resource $connection, 0|1 $value = null): 0|1|bool
-----
FUNCTION db2_bind_param
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @param int $parameter_number
     * @param string $variable_name
     * @param int $parameter_type
     * @param int $data_type
     * @param int $precision
     * @param int $scale
     * @return bool
     */
    function db2_bind_param(resource $stmt, int $parameter_number, string $variable_name, int $parameter_type = 1, int $data_type = 0, int $precision = -1, int $scale = 0): bool
-----
FUNCTION db2_client_info
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @return stdClass|false
     */
    function db2_client_info(resource $connection): stdClass|false
-----
FUNCTION db2_close
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @return bool
     */
    function db2_close(resource $connection): bool
-----
FUNCTION db2_column_privileges
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @param string $qualifier
     * @param string $schema
     * @param string $table_name
     * @param string $column_name
     * @return resource|false
     */
    function db2_column_privileges(resource $connection, string $qualifier = null, string $schema = null, string $table_name = null, string $column_name = null): resource|false
-----
FUNCTION db2_columns
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @param string $qualifier
     * @param string $schema
     * @param string $table_name
     * @param string $column_name
     * @return resource|false
     */
    function db2_columns(resource $connection, string $qualifier = null, string $schema = null, string $table_name = null, string $column_name = null): resource|false
-----
FUNCTION db2_commit
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @return bool
     */
    function db2_commit(resource $connection): bool
-----
FUNCTION db2_conn_error
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @return string
     */
    function db2_conn_error(resource $connection = null): string
-----
FUNCTION db2_conn_errormsg
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @return string
     */
    function db2_conn_errormsg(resource $connection = null): string
-----
FUNCTION db2_connect
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $database
     * @param string $username
     * @param string $password
     * @param array $options
     * @return resource|false
     */
    function db2_connect(string $database, string $username, string $password, array $options = array{}): resource|false
-----
FUNCTION db2_cursor_type
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @return int
     */
    function db2_cursor_type(resource $stmt): int
-----
FUNCTION db2_escape_string
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $string_literal
     * @return string
     */
    function db2_escape_string(string $string_literal): string
-----
FUNCTION db2_exec
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @param string $statement
     * @param array $options
     * @return resource|false
     */
    function db2_exec(resource $connection, string $statement, array $options = array{}): resource|false
-----
FUNCTION db2_execute
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @param array $parameters
     * @return bool
     */
    function db2_execute(resource $stmt, array $parameters = array{}): bool
-----
FUNCTION db2_fetch_array
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @param int $row_number
     * @return array|false
     */
    function db2_fetch_array(resource $stmt, int $row_number = null): array|false
-----
FUNCTION db2_fetch_assoc
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @param int $row_number
     * @return array|false
     */
    function db2_fetch_assoc(resource $stmt, int $row_number = null): array|false
-----
FUNCTION db2_fetch_both
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @param int $row_number
     * @return array|false
     */
    function db2_fetch_both(resource $stmt, int $row_number = null): array|false
-----
FUNCTION db2_fetch_object
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @param int $row_number
     * @return stdClass|false
     */
    function db2_fetch_object(resource $stmt, int $row_number = null): stdClass|false
-----
FUNCTION db2_fetch_row
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @param int $row_number
     * @return bool
     */
    function db2_fetch_row(resource $stmt, int $row_number = null): bool
-----
FUNCTION db2_field_display_size
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @param mixed $column
     * @return int|false
     */
    function db2_field_display_size(resource $stmt, mixed $column): int|false
-----
FUNCTION db2_field_name
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @param mixed $column
     * @return string|false
     */
    function db2_field_name(resource $stmt, mixed $column): string|false
-----
FUNCTION db2_field_num
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @param mixed $column
     * @return int|false
     */
    function db2_field_num(resource $stmt, mixed $column): int|false
-----
FUNCTION db2_field_precision
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @param mixed $column
     * @return int|false
     */
    function db2_field_precision(resource $stmt, mixed $column): int|false
-----
FUNCTION db2_field_scale
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @param mixed $column
     * @return int|false
     */
    function db2_field_scale(resource $stmt, mixed $column): int|false
-----
FUNCTION db2_field_type
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @param mixed $column
     * @return string|false
     */
    function db2_field_type(resource $stmt, mixed $column): string|false
-----
FUNCTION db2_field_width
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @param mixed $column
     * @return int|false
     */
    function db2_field_width(resource $stmt, mixed $column): int|false
-----
FUNCTION db2_foreign_keys
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @param string $qualifier
     * @param string $schema
     * @param string $table_name
     * @return resource|false
     */
    function db2_foreign_keys(resource $connection, string $qualifier, string $schema, string $table_name): resource|false
-----
FUNCTION db2_free_result
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @return bool
     */
    function db2_free_result(resource $stmt): bool
-----
FUNCTION db2_free_stmt
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @return bool
     */
    function db2_free_stmt(resource $stmt): bool
-----
FUNCTION db2_get_option
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $resource
     * @param string $option
     * @return string|false
     */
    function db2_get_option(resource $resource, string $option): string|false
-----
FUNCTION db2_last_insert_id
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $resource
     * @return string|null
     */
    function db2_last_insert_id(resource $resource): string|null
-----
FUNCTION db2_lob_read
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @param int $colnum
     * @param int $length
     * @return string|false
     */
    function db2_lob_read(resource $stmt, int $colnum, int $length): string|false
-----
FUNCTION db2_next_result
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @return resource|false
     */
    function db2_next_result(resource $stmt): resource|false
-----
FUNCTION db2_num_fields
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @return int<0, max>|false
     */
    function db2_num_fields(resource $stmt): int<0, max>|false
-----
FUNCTION db2_num_rows
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @return int<0, max>|false
     */
    function db2_num_rows(resource $stmt): int<0, max>|false
-----
FUNCTION db2_pclose
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $resource
     * @return bool
     */
    function db2_pclose(resource $resource): bool
-----
FUNCTION db2_pconnect
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $database
     * @param string $username
     * @param string $password
     * @param array $options
     * @return resource|false
     */
    function db2_pconnect(string $database, string $username, string $password, array $options = array{}): resource|false
-----
FUNCTION db2_prepare
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @param string $statement
     * @param array $options
     * @return resource|false
     */
    function db2_prepare(resource $connection, string $statement, array $options = array{}): resource|false
-----
FUNCTION db2_primary_keys
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @param string $qualifier
     * @param string $schema
     * @param string $table_name
     * @return resource|false
     */
    function db2_primary_keys(resource $connection, string $qualifier, string $schema, string $table_name): resource|false
-----
FUNCTION db2_procedure_columns
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @param string $qualifier
     * @param string $schema
     * @param string $procedure
     * @param string $parameter
     * @return resource|false
     */
    function db2_procedure_columns(resource $connection, string $qualifier, string $schema, string $procedure, string $parameter): resource|false
-----
FUNCTION db2_procedures
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @param string $qualifier
     * @param string $schema
     * @param string $procedure
     * @return resource|false
     */
    function db2_procedures(resource $connection, string $qualifier, string $schema, string $procedure): resource|false
-----
FUNCTION db2_result
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @param mixed $column
     * @return mixed
     */
    function db2_result(resource $stmt, mixed $column): mixed
-----
FUNCTION db2_rollback
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @return bool
     */
    function db2_rollback(resource $connection): bool
-----
FUNCTION db2_server_info
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @return stdClass|false
     */
    function db2_server_info(resource $connection): stdClass|false
-----
FUNCTION db2_set_option
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $resource
     * @param array $options
     * @param int $type
     * @return bool
     */
    function db2_set_option(resource $resource, array $options, int $type): bool
-----
FUNCTION db2_special_columns
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @param string $qualifier
     * @param string $schema
     * @param string $table_name
     * @param int $scope
     * @return resource|false
     */
    function db2_special_columns(resource $connection, string $qualifier, string $schema, string $table_name, int $scope): resource|false
-----
FUNCTION db2_statistics
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @param string $qualifier
     * @param string $schema
     * @param string $table_name
     * @param bool $unique
     * @return resource|false
     */
    function db2_statistics(resource $connection, string $qualifier, string $schema, string $table_name, bool $unique): resource|false
-----
FUNCTION db2_stmt_error
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @return string
     */
    function db2_stmt_error(resource $stmt = null): string
-----
FUNCTION db2_stmt_errormsg
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @return string
     */
    function db2_stmt_errormsg(resource $stmt = null): string
-----
FUNCTION db2_table_privileges
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @param string $qualifier
     * @param string $schema
     * @param string $table_name
     * @return resource|false
     */
    function db2_table_privileges(resource $connection, string $qualifier = null, string $schema = null, string $table_name = null): resource|false
-----
FUNCTION db2_tables
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @param string $qualifier
     * @param string $schema
     * @param string $table_name
     * @param string $table_type
     * @return resource|false
     */
    function db2_tables(resource $connection, string $qualifier = null, string $schema = null, string $table_name = null, string $table_type = null): resource|false
-----
FUNCTION dba_close
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $dba
     * @return void
     */
    function dba_close(resource $dba): void
-----
FUNCTION dba_delete
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array|string $key
     * @param resource $dba
     * @return bool
     */
    function dba_delete(array|string $key, resource $dba): bool
-----
FUNCTION dba_exists
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array|string $key
     * @param resource $dba
     * @return bool
     */
    function dba_exists(array|string $key, resource $dba): bool
-----
FUNCTION dba_fetch
-----
Has side-effects: Maybe
Variants: 2
    /**
     * @param string $key
     * @param int $skip
     * @param resource $handle
     * @return string|false
     */
    function dba_fetch(string $key, int $skip, resource $handle): string|false
    /**
     * @param string $key
     * @param resource $handle
     * @return string|false
     */
    function dba_fetch(string $key, resource $handle): string|false
-----
FUNCTION dba_firstkey
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $dba
     * @return string|false
     */
    function dba_firstkey(resource $dba): string|false
-----
FUNCTION dba_handlers
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param bool $full_info
     * @return array
     */
    function dba_handlers(bool $full_info = false): array
-----
FUNCTION dba_insert
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array|string $key
     * @param string $value
     * @param resource $dba
     * @return bool
     */
    function dba_insert(array|string $key, string $value, resource $dba): bool
-----
FUNCTION dba_key_split
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string|false|null $key
     * @return array|false
     */
    function dba_key_split(string|false|null $key): array|false
-----
FUNCTION dba_list
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return array
     */
    function dba_list(): array
-----
FUNCTION dba_nextkey
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $dba
     * @return string|false
     */
    function dba_nextkey(resource $dba): string|false
-----
FUNCTION dba_open
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $path
     * @param string $mode
     * @param string|null $handler
     * @param int $permission
     * @param int $map_size
     * @param int|null $flags
     * @return resource|false
     */
    function dba_open(string $path, string $mode, string|null $handler = null, int $permission = 420, int $map_size = 0, int|null $flags = null): resource|false
-----
FUNCTION dba_optimize
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $dba
     * @return bool
     */
    function dba_optimize(resource $dba): bool
-----
FUNCTION dba_popen
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $path
     * @param string $mode
     * @param string|null $handler
     * @param int $permission
     * @param int $map_size
     * @param int|null $flags
     * @return resource|false
     */
    function dba_popen(string $path, string $mode, string|null $handler = null, int $permission = 420, int $map_size = 0, int|null $flags = null): resource|false
-----
FUNCTION dba_replace
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array|string $key
     * @param string $value
     * @param resource $dba
     * @return bool
     */
    function dba_replace(array|string $key, string $value, resource $dba): bool
-----
FUNCTION dba_sync
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $dba
     * @return bool
     */
    function dba_sync(resource $dba): bool
-----
FUNCTION dbase_add_record
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $dbase_identifier
     * @param array $record
     * @return bool
     */
    function dbase_add_record(resource $dbase_identifier, array $record): bool
-----
FUNCTION dbase_close
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $dbase_identifier
     * @return bool
     */
    function dbase_close(resource $dbase_identifier): bool
-----
FUNCTION dbase_create
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param array $fields
     * @return resource|false
     */
    function dbase_create(string $filename, array $fields): resource|false
-----
FUNCTION dbase_delete_record
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $dbase_identifier
     * @param int $record_number
     * @return bool
     */
    function dbase_delete_record(resource $dbase_identifier, int $record_number): bool
-----
FUNCTION dbase_get_header_info
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $dbase_identifier
     * @return array
     */
    function dbase_get_header_info(resource $dbase_identifier): array
-----
FUNCTION dbase_get_record
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $dbase_identifier
     * @param int $record_number
     * @return array
     */
    function dbase_get_record(resource $dbase_identifier, int $record_number): array
-----
FUNCTION dbase_get_record_with_names
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $dbase_identifier
     * @param int $record_number
     * @return array
     */
    function dbase_get_record_with_names(resource $dbase_identifier, int $record_number): array
-----
FUNCTION dbase_numfields
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $dbase_identifier
     * @return int
     */
    function dbase_numfields(resource $dbase_identifier): int
-----
FUNCTION dbase_numrecords
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $dbase_identifier
     * @return int
     */
    function dbase_numrecords(resource $dbase_identifier): int
-----
FUNCTION dbase_open
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param int $mode
     * @return resource|false
     */
    function dbase_open(string $filename, int $mode): resource|false
-----
FUNCTION dbase_pack
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $dbase_identifier
     * @return bool
     */
    function dbase_pack(resource $dbase_identifier): bool
-----
FUNCTION dbase_replace_record
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $dbase_identifier
     * @param array $record
     * @param int $record_number
     * @return bool
     */
    function dbase_replace_record(resource $dbase_identifier, array $record, int $record_number): bool
-----
FUNCTION dcgettext
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $domain
     * @param string $message
     * @param int $category
     * @return string
     */
    function dcgettext(string $domain, string $message, int $category): string
-----
FUNCTION dcngettext
-----
Variants: 1
    /**
     * @param string $domain
     * @param string $singular
     * @param string $plural
     * @param int $count
     * @param int $category
     * @return string
     */
    function dcngettext(string $domain, string $singular, string $plural, int $count, int $category): string
-----
FUNCTION debug_backtrace
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $options
     * @param int $limit
     * @return array<int, array{function: string, line?: int, file?: string, class?: class-string, type?: '->'|'::', args?: array, object?: object}>
     */
    function debug_backtrace(int $options = 1, int $limit = 0): array<int, array{function: string, line?: int, file?: string, class?: class-string, type?: '->'|'::', args?: array, object?: object}>
-----
FUNCTION debug_print_backtrace
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param int $options
     * @param int $limit
     * @return void
     */
    function debug_print_backtrace(int $options = 0, int $limit = 0): void
-----
FUNCTION debug_zval_dump
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param mixed $value
     * @param mixed $values
     * @return void
     */
    function debug_zval_dump(mixed $value, mixed ...$values): void
-----
FUNCTION decbin
-----
Variants: 1
    /**
     * @param int $num
     * @return string
     */
    function decbin(int $num): string
-----
FUNCTION dechex
-----
Variants: 1
    /**
     * @param int $num
     * @return string
     */
    function dechex(int $num): string
-----
FUNCTION decoct
-----
Variants: 1
    /**
     * @param int $num
     * @return string
     */
    function decoct(int $num): string
-----
FUNCTION define
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $constant_name
     * @param mixed $value
     * @param bool $case_insensitive
     * @return bool
     */
    function define(string $constant_name, mixed $value, bool $case_insensitive = false): bool
-----
FUNCTION defined
-----
Variants: 1
    /**
     * @param string $constant_name
     * @return bool
     */
    function defined(string $constant_name): bool
-----
FUNCTION deflate_add
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param DeflateContext $context
     * @param string $data
     * @param int $flush_mode
     * @return string|false
     */
    function deflate_add(DeflateContext $context, string $data, int $flush_mode = 2): string|false
-----
FUNCTION deflate_init
-----
Variants: 1
    /**
     * @param int $encoding
     * @param array $options
     * @return DeflateContext|false
     */
    function deflate_init(int $encoding, array $options = array{}): DeflateContext|false
-----
FUNCTION deg2rad
-----
Variants: 1
    /**
     * @param float $num
     * @return float
     */
    function deg2rad(float $num): float
-----
FUNCTION delete
-----
MISSING
-----
FUNCTION dgettext
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $domain
     * @param string $message
     * @return string
     */
    function dgettext(string $domain, string $message): string
-----
FUNCTION die
-----
MISSING
-----
FUNCTION dio_close
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $fd
     * @return void
     */
    function dio_close(resource $fd): void
-----
FUNCTION dio_fcntl
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fd
     * @param int $cmd
     * @param mixed $args
     * @return mixed
     */
    function dio_fcntl(resource $fd, int $cmd, mixed $args): mixed
-----
FUNCTION dio_open
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param int $flags
     * @param int $mode
     * @return resource|false
     */
    function dio_open(string $filename, int $flags, int $mode = 0): resource|false
-----
FUNCTION dio_read
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fd
     * @param int $len
     * @return string
     */
    function dio_read(resource $fd, int $len = 1024): string
-----
FUNCTION dio_seek
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fd
     * @param int $pos
     * @param int $whence
     * @return int
     */
    function dio_seek(resource $fd, int $pos, int $whence = 0): int
-----
FUNCTION dio_stat
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fd
     * @return array|null
     */
    function dio_stat(resource $fd): array|null
-----
FUNCTION dio_tcsetattr
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fd
     * @param array $options
     * @return bool
     */
    function dio_tcsetattr(resource $fd, array $options): bool
-----
FUNCTION dio_truncate
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fd
     * @param int $offset
     * @return bool
     */
    function dio_truncate(resource $fd, int $offset): bool
-----
FUNCTION dio_write
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fd
     * @param string $data
     * @param int $len
     * @return int
     */
    function dio_write(resource $fd, string $data, int $len = 0): int
-----
FUNCTION dir
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $directory
     * @param resource|null $context
     * @return Directory|false
     */
    function dir(string $directory, resource|null $context = null): Directory|false
-----
FUNCTION dirname
-----
Variants: 1
    /**
     * @param string $path
     * @param int<1, max> $levels
     * @return string
     */
    function dirname(string $path, int<1, max> $levels = 1): string
-----
FUNCTION disk_free_space
-----
Variants: 1
    /**
     * @param string $directory
     * @return float|false
     */
    function disk_free_space(string $directory): float|false
-----
FUNCTION disk_total_space
-----
Variants: 1
    /**
     * @param string $directory
     * @return float|false
     */
    function disk_total_space(string $directory): float|false
-----
FUNCTION diskfreespace
-----
Variants: 1
    /**
     * @param string $directory
     * @return float|false
     */
    function diskfreespace(string $directory): float|false
-----
FUNCTION dl
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $extension_filename
     * @return bool
     */
    function dl(string $extension_filename): bool
-----
FUNCTION dngettext
-----
Variants: 1
    /**
     * @param string $domain
     * @param string $singular
     * @param string $plural
     * @param int $count
     * @return string
     */
    function dngettext(string $domain, string $singular, string $plural, int $count): string
-----
FUNCTION dns_check_record
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $hostname
     * @param string $type
     * @return bool
     */
    function dns_check_record(string $hostname, string $type = 'MX'): bool
-----
FUNCTION dns_get_mx
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $hostname
     * @param array $hosts
     * @param array $weights
     * @return bool
     */
    function dns_get_mx(string $hostname, array &rw$hosts, array &rw$weights = null): bool
-----
FUNCTION dns_get_record
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $hostname
     * @param int $type
     * @param array $authoritative_name_servers
     * @param array $additional_records
     * @param bool $raw
     * @return array<int, array>|false
     */
    function dns_get_record(string $hostname, int $type = 268435456, array &rw$authoritative_name_servers = null, array &rw$additional_records = null, bool $raw = false): array<int, array>|false
-----
FUNCTION dom_import_simplexml
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param SimpleXMLElement $node
     * @return DOMElement
     */
    function dom_import_simplexml(SimpleXMLElement $node): DOMElement
-----
FUNCTION doubleval
-----
Variants: 1
    /**
     * @param array|bool|float|int|resource|string|null $value
     * @return float
     */
    function doubleval(array|bool|float|int|resource|string|null $value): float
-----
FUNCTION each
-----
MISSING
-----
FUNCTION easter_date
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int|null $year
     * @param int $mode
     * @return int
     */
    function easter_date(int|null $year = null, int $mode = 0): int
-----
FUNCTION easter_days
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int|null $year
     * @param int $mode
     * @return int
     */
    function easter_days(int|null $year = null, int $mode = 0): int
-----
FUNCTION echo
-----
MISSING
-----
FUNCTION eio_busy
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $delay
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_busy(int $delay, int $pri = 0, callable(): mixed $callback = null, mixed $data = null): resource
-----
FUNCTION eio_cancel
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $req
     * @return void
     */
    function eio_cancel(resource $req): void
-----
FUNCTION eio_chmod
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $path
     * @param int $mode
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_chmod(string $path, int $mode, int $pri = 0, callable(): mixed $callback = null, mixed $data = null): resource
-----
FUNCTION eio_chown
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $path
     * @param int $uid
     * @param int $gid
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_chown(string $path, int $uid, int $gid = -1, int $pri = 0, callable(): mixed $callback = null, mixed $data = null): resource
-----
FUNCTION eio_close
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $fd
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_close(mixed $fd, int $pri = 0, callable(): mixed $callback = null, mixed $data = null): resource
-----
FUNCTION eio_custom
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param callable(): mixed $execute
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_custom(callable(): mixed $execute, int $pri, callable(): mixed $callback, mixed $data = null): resource
-----
FUNCTION eio_dup2
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $fd
     * @param mixed $fd2
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_dup2(mixed $fd, mixed $fd2, int $pri = 0, callable(): mixed $callback = null, mixed $data = null): resource
-----
FUNCTION eio_event_loop
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return bool
     */
    function eio_event_loop(): bool
-----
FUNCTION eio_fallocate
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $fd
     * @param int $mode
     * @param int $offset
     * @param int $length
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_fallocate(mixed $fd, int $mode, int $offset, int $length, int $pri = 0, callable(): mixed $callback = null, mixed $data = null): resource
-----
FUNCTION eio_fchmod
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $fd
     * @param int $mode
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_fchmod(mixed $fd, int $mode, int $pri = 0, callable(): mixed $callback = null, mixed $data = null): resource
-----
FUNCTION eio_fchown
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $fd
     * @param int $uid
     * @param int $gid
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_fchown(mixed $fd, int $uid, int $gid = -1, int $pri = 0, callable(): mixed $callback = null, mixed $data = null): resource
-----
FUNCTION eio_fdatasync
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $fd
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_fdatasync(mixed $fd, int $pri = 0, callable(): mixed $callback = null, mixed $data = null): resource
-----
FUNCTION eio_fstat
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $fd
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_fstat(mixed $fd, int $pri, callable(): mixed $callback, mixed $data = null): resource
-----
FUNCTION eio_fstatvfs
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $fd
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_fstatvfs(mixed $fd, int $pri, callable(): mixed $callback, mixed $data = null): resource
-----
FUNCTION eio_fsync
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $fd
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_fsync(mixed $fd, int $pri = 0, callable(): mixed $callback = null, mixed $data = null): resource
-----
FUNCTION eio_ftruncate
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $fd
     * @param int $offset
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_ftruncate(mixed $fd, int $offset = 0, int $pri = 0, callable(): mixed $callback = null, mixed $data = null): resource
-----
FUNCTION eio_futime
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $fd
     * @param float $atime
     * @param float $mtime
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_futime(mixed $fd, float $atime, float $mtime, int $pri = 0, callable(): mixed $callback = null, mixed $data = null): resource
-----
FUNCTION eio_get_event_stream
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return mixed
     */
    function eio_get_event_stream(): mixed
-----
FUNCTION eio_get_last_error
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $req
     * @return string
     */
    function eio_get_last_error(resource $req): string
-----
FUNCTION eio_grp
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @param string $data
     * @return resource
     */
    function eio_grp(callable(): mixed $callback, string $data = null): resource
-----
FUNCTION eio_grp_add
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $grp
     * @param resource $req
     * @return void
     */
    function eio_grp_add(resource $grp, resource $req): void
-----
FUNCTION eio_grp_cancel
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $grp
     * @return void
     */
    function eio_grp_cancel(resource $grp): void
-----
FUNCTION eio_grp_limit
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $grp
     * @param int $limit
     * @return void
     */
    function eio_grp_limit(resource $grp, int $limit): void
-----
FUNCTION eio_init
-----
Returns by reference: Maybe
Has side-effects: Yes
Variants: 1
    /**
     * @return void
     */
    function eio_init(): void
-----
FUNCTION eio_link
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $path
     * @param string $new_path
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_link(string $path, string $new_path, int $pri = 0, callable(): mixed $callback = null, mixed $data = null): resource
-----
FUNCTION eio_lstat
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $path
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_lstat(string $path, int $pri, callable(): mixed $callback, mixed $data = null): resource
-----
FUNCTION eio_mkdir
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $path
     * @param int $mode
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_mkdir(string $path, int $mode, int $pri = 0, callable(): mixed $callback = null, mixed $data = null): resource
-----
FUNCTION eio_mknod
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $path
     * @param int $mode
     * @param int $dev
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_mknod(string $path, int $mode, int $dev, int $pri = 0, callable(): mixed $callback = null, mixed $data = null): resource
-----
FUNCTION eio_nop
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_nop(int $pri = 0, callable(): mixed $callback = null, mixed $data = null): resource
-----
FUNCTION eio_npending
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return int
     */
    function eio_npending(): int
-----
FUNCTION eio_nready
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return int
     */
    function eio_nready(): int
-----
FUNCTION eio_nreqs
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return int
     */
    function eio_nreqs(): int
-----
FUNCTION eio_nthreads
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return int
     */
    function eio_nthreads(): int
-----
FUNCTION eio_open
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $path
     * @param int $flags
     * @param int $mode
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_open(string $path, int $flags, int $mode, int $pri, callable(): mixed $callback, mixed $data = null): resource
-----
FUNCTION eio_poll
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return int
     */
    function eio_poll(): int
-----
FUNCTION eio_read
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $fd
     * @param int $length
     * @param int $offset
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_read(mixed $fd, int $length, int $offset, int $pri, callable(): mixed $callback, mixed $data = null): resource
-----
FUNCTION eio_readahead
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $fd
     * @param int $offset
     * @param int $length
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_readahead(mixed $fd, int $offset, int $length, int $pri = 0, callable(): mixed $callback = null, mixed $data = null): resource
-----
FUNCTION eio_readdir
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $path
     * @param int $flags
     * @param int $pri
     * @param callable(): mixed $callback
     * @param string $data
     * @return resource
     */
    function eio_readdir(string $path, int $flags, int $pri, callable(): mixed $callback, string $data = null): resource
-----
FUNCTION eio_readlink
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $path
     * @param int $pri
     * @param callable(): mixed $callback
     * @param string $data
     * @return resource
     */
    function eio_readlink(string $path, int $pri, callable(): mixed $callback, string $data = null): resource
-----
FUNCTION eio_realpath
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $path
     * @param int $pri
     * @param callable(): mixed $callback
     * @param string $data
     * @return resource
     */
    function eio_realpath(string $path, int $pri, callable(): mixed $callback, string $data = null): resource
-----
FUNCTION eio_rename
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $path
     * @param string $new_path
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_rename(string $path, string $new_path, int $pri = 0, callable(): mixed $callback = null, mixed $data = null): resource
-----
FUNCTION eio_rmdir
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $path
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_rmdir(string $path, int $pri = 0, callable(): mixed $callback = null, mixed $data = null): resource
-----
FUNCTION eio_seek
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $fd
     * @param int $offset
     * @param int $whence
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_seek(mixed $fd, int $offset, int $whence, int $pri = 0, callable(): mixed $callback = null, mixed $data = null): resource
-----
FUNCTION eio_sendfile
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $out_fd
     * @param mixed $in_fd
     * @param int $offset
     * @param int $length
     * @param int $pri
     * @param callable(): mixed $callback
     * @param string $data
     * @return resource
     */
    function eio_sendfile(mixed $out_fd, mixed $in_fd, int $offset, int $length, int $pri, callable(): mixed $callback, string $data = null): resource
-----
FUNCTION eio_set_max_idle
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param int $nthreads
     * @return void
     */
    function eio_set_max_idle(int $nthreads): void
-----
FUNCTION eio_set_max_parallel
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param int $nthreads
     * @return void
     */
    function eio_set_max_parallel(int $nthreads): void
-----
FUNCTION eio_set_max_poll_reqs
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param int $nreqs
     * @return void
     */
    function eio_set_max_poll_reqs(int $nreqs): void
-----
FUNCTION eio_set_max_poll_time
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param float $nseconds
     * @return void
     */
    function eio_set_max_poll_time(float $nseconds): void
-----
FUNCTION eio_set_min_parallel
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $nthreads
     * @return void
     */
    function eio_set_min_parallel(string $nthreads): void
-----
FUNCTION eio_stat
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $path
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_stat(string $path, int $pri, callable(): mixed $callback, mixed $data = null): resource
-----
FUNCTION eio_statvfs
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $path
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_statvfs(string $path, int $pri, callable(): mixed $callback, mixed $data = null): resource
-----
FUNCTION eio_symlink
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $path
     * @param string $new_path
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_symlink(string $path, string $new_path, int $pri = 0, callable(): mixed $callback = null, mixed $data = null): resource
-----
FUNCTION eio_sync
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_sync(int $pri = 0, callable(): mixed $callback = null, mixed $data = null): resource
-----
FUNCTION eio_sync_file_range
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $fd
     * @param int $offset
     * @param int $nbytes
     * @param int $flags
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_sync_file_range(mixed $fd, int $offset, int $nbytes, int $flags, int $pri = 0, callable(): mixed $callback = null, mixed $data = null): resource
-----
FUNCTION eio_syncfs
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $fd
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_syncfs(mixed $fd, int $pri = 0, callable(): mixed $callback = null, mixed $data = null): resource
-----
FUNCTION eio_truncate
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $path
     * @param int $offset
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_truncate(string $path, int $offset = 0, int $pri = 0, callable(): mixed $callback = null, mixed $data = null): resource
-----
FUNCTION eio_unlink
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $path
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_unlink(string $path, int $pri = 0, callable(): mixed $callback = null, mixed $data = null): resource
-----
FUNCTION eio_utime
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $path
     * @param float $atime
     * @param float $mtime
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_utime(string $path, float $atime, float $mtime, int $pri = 0, callable(): mixed $callback = null, mixed $data = null): resource
-----
FUNCTION eio_write
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $fd
     * @param string $str
     * @param int $length
     * @param int $offset
     * @param int $pri
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return resource
     */
    function eio_write(mixed $fd, string $str, int $length = 0, int $offset = 0, int $pri = 0, callable(): mixed $callback = null, mixed $data = null): resource
-----
FUNCTION empty
-----
MISSING
-----
FUNCTION enchant_broker_describe
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param EnchantBroker $broker
     * @return array
     */
    function enchant_broker_describe(EnchantBroker $broker): array
-----
FUNCTION enchant_broker_dict_exists
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param EnchantBroker $broker
     * @param string $tag
     * @return bool
     */
    function enchant_broker_dict_exists(EnchantBroker $broker, string $tag): bool
-----
FUNCTION enchant_broker_free
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param EnchantBroker $broker
     * @return bool
     */
    function enchant_broker_free(EnchantBroker $broker): bool
-----
FUNCTION enchant_broker_free_dict
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param EnchantDictionary $dictionary
     * @return bool
     */
    function enchant_broker_free_dict(EnchantDictionary $dictionary): bool
-----
FUNCTION enchant_broker_get_dict_path
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param EnchantBroker $broker
     * @param int $type
     * @return string|false
     */
    function enchant_broker_get_dict_path(EnchantBroker $broker, int $type): string|false
-----
FUNCTION enchant_broker_get_error
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param EnchantBroker $broker
     * @return string|false
     */
    function enchant_broker_get_error(EnchantBroker $broker): string|false
-----
FUNCTION enchant_broker_init
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return EnchantBroker|false
     */
    function enchant_broker_init(): EnchantBroker|false
-----
FUNCTION enchant_broker_list_dicts
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param EnchantBroker $broker
     * @return array
     */
    function enchant_broker_list_dicts(EnchantBroker $broker): array
-----
FUNCTION enchant_broker_request_dict
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param EnchantBroker $broker
     * @param string $tag
     * @return EnchantDictionary|false
     */
    function enchant_broker_request_dict(EnchantBroker $broker, string $tag): EnchantDictionary|false
-----
FUNCTION enchant_broker_request_pwl_dict
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param EnchantBroker $broker
     * @param string $filename
     * @return EnchantDictionary|false
     */
    function enchant_broker_request_pwl_dict(EnchantBroker $broker, string $filename): EnchantDictionary|false
-----
FUNCTION enchant_broker_set_dict_path
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param EnchantBroker $broker
     * @param int $type
     * @param string $path
     * @return bool
     */
    function enchant_broker_set_dict_path(EnchantBroker $broker, int $type, string $path): bool
-----
FUNCTION enchant_broker_set_ordering
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param EnchantBroker $broker
     * @param string $tag
     * @param string $ordering
     * @return bool
     */
    function enchant_broker_set_ordering(EnchantBroker $broker, string $tag, string $ordering): bool
-----
FUNCTION enchant_dict_add
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param EnchantDictionary $dictionary
     * @param string $word
     * @return void
     */
    function enchant_dict_add(EnchantDictionary $dictionary, string $word): void
-----
FUNCTION enchant_dict_add_to_personal
-----
Is deprecated: Yes
Has side-effects: Yes
Variants: 1
    /**
     * @param EnchantDictionary $dictionary
     * @param string $word
     * @return void
     */
    function enchant_dict_add_to_personal(EnchantDictionary $dictionary, string $word): void
-----
FUNCTION enchant_dict_add_to_session
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param EnchantDictionary $dictionary
     * @param string $word
     * @return void
     */
    function enchant_dict_add_to_session(EnchantDictionary $dictionary, string $word): void
-----
FUNCTION enchant_dict_check
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param EnchantDictionary $dictionary
     * @param string $word
     * @return bool
     */
    function enchant_dict_check(EnchantDictionary $dictionary, string $word): bool
-----
FUNCTION enchant_dict_describe
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param EnchantDictionary $dictionary
     * @return array
     */
    function enchant_dict_describe(EnchantDictionary $dictionary): array
-----
FUNCTION enchant_dict_get_error
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param EnchantDictionary $dictionary
     * @return string|false
     */
    function enchant_dict_get_error(EnchantDictionary $dictionary): string|false
-----
FUNCTION enchant_dict_is_added
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param EnchantDictionary $dictionary
     * @param string $word
     * @return bool
     */
    function enchant_dict_is_added(EnchantDictionary $dictionary, string $word): bool
-----
FUNCTION enchant_dict_is_in_session
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param EnchantDictionary $dictionary
     * @param string $word
     * @return bool
     */
    function enchant_dict_is_in_session(EnchantDictionary $dictionary, string $word): bool
-----
FUNCTION enchant_dict_quick_check
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param EnchantDictionary $dictionary
     * @param string $word
     * @param array $suggestions
     * @return bool
     */
    function enchant_dict_quick_check(EnchantDictionary $dictionary, string $word, array $suggestions = null): bool
-----
FUNCTION enchant_dict_store_replacement
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param EnchantDictionary $dictionary
     * @param string $misspelled
     * @param string $correct
     * @return void
     */
    function enchant_dict_store_replacement(EnchantDictionary $dictionary, string $misspelled, string $correct): void
-----
FUNCTION enchant_dict_suggest
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param EnchantDictionary $dictionary
     * @param string $word
     * @return array
     */
    function enchant_dict_suggest(EnchantDictionary $dictionary, string $word): array
-----
FUNCTION end
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array|object $array
     * @return mixed
     */
    function end(array|object &r$array): mixed
-----
FUNCTION enum_exists
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $enum
     * @param bool $autoload
     * @return bool
     */
    function enum_exists(string $enum, bool $autoload = true): bool
-----
FUNCTION error_clear_last
-----
Has side-effects: Yes
Variants: 1
    /**
     * @return void
     */
    function error_clear_last(): void
-----
FUNCTION error_get_last
-----
Variants: 1
    /**
     * @return array{type: int, message: string, file: string, line: int}|null
     */
    function error_get_last(): array{type: int, message: string, file: string, line: int}|null
-----
FUNCTION error_log
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $message
     * @param int $message_type
     * @param string|null $destination
     * @param string|null $additional_headers
     * @return bool
     */
    function error_log(string $message, int $message_type = 0, string|null $destination = null, string|null $additional_headers = null): bool
-----
FUNCTION error_reporting
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int|null $error_level
     * @return int
     */
    function error_reporting(int|null $error_level = null): int
-----
FUNCTION escapeshellarg
-----
Variants: 1
    /**
     * @param string $arg
     * @return string
     */
    function escapeshellarg(string $arg): string
-----
FUNCTION escapeshellcmd
-----
Variants: 1
    /**
     * @param string $command
     * @return string
     */
    function escapeshellcmd(string $command): string
-----
FUNCTION eval
-----
MISSING
-----
FUNCTION exec
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $command
     * @param array $output
     * @param-out array<int, string> $output
     * @param int $result_code
     * @param-out int $result_code
     * @return string|false
     */
    function exec(string $command, array &rw$output = null, int &rw$result_code = null): string|false
-----
FUNCTION exif_imagetype
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @return int|false
     */
    function exif_imagetype(string $filename): int|false
-----
FUNCTION exif_read_data
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource|string $file
     * @param string|null $required_sections
     * @param bool $as_arrays
     * @param bool $read_thumbnail
     * @return array|false
     */
    function exif_read_data(resource|string $file, string|null $required_sections = null, bool $as_arrays = false, bool $read_thumbnail = false): array|false
-----
FUNCTION exif_tagname
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $index
     * @return string|false
     */
    function exif_tagname(int $index): string|false
-----
FUNCTION exif_thumbnail
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource|string $file
     * @param int $width
     * @param int $height
     * @param int $image_type
     * @return string|false
     */
    function exif_thumbnail(resource|string $file, int &rw$width = null, int &rw$height = null, int &rw$image_type = null): string|false
-----
FUNCTION exit
-----
MISSING
-----
FUNCTION exp
-----
Variants: 1
    /**
     * @param float $num
     * @return float
     */
    function exp(float $num): float
-----
FUNCTION expect://
-----
MISSING
-----
FUNCTION expect_expectl
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $expect
     * @param array $cases
     * @param array $match
     * @return int
     */
    function expect_expectl(resource $expect, array $cases, array $match = array{}): int
-----
FUNCTION expect_popen
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $command
     * @return resource|false
     */
    function expect_popen(string $command): resource|false
-----
FUNCTION explode
-----
Variants: 1
    /**
     * @param non-empty-string $separator
     * @param string $string
     * @param int $limit
     * @return array<int, string>
     */
    function explode(non-empty-string $separator, string $string, int $limit = 2147483647|9223372036854775807): array<int, string>
-----
FUNCTION expm1
-----
Variants: 1
    /**
     * @param float $num
     * @return float
     */
    function expm1(float $num): float
-----
FUNCTION expression
-----
MISSING
-----
FUNCTION extension_loaded
-----
Variants: 1
    /**
     * @param string $extension
     * @return bool
     */
    function extension_loaded(string $extension): bool
-----
FUNCTION extract
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $array
     * @param int $flags
     * @param string $prefix
     * @return int
     */
    function extract(array &r$array, int $flags = 0, string $prefix = ''): int
-----
FUNCTION ezmlm_hash
-----
MISSING
-----
FUNCTION fann_cascadetrain_on_data
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param resource $data
     * @param int $max_neurons
     * @param int $neurons_between_reports
     * @param float $desired_error
     * @return bool
     */
    function fann_cascadetrain_on_data(resource $ann, resource $data, int $max_neurons, int $neurons_between_reports, float $desired_error): bool
-----
FUNCTION fann_cascadetrain_on_file
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param string $filename
     * @param int $max_neurons
     * @param int $neurons_between_reports
     * @param float $desired_error
     * @return bool
     */
    function fann_cascadetrain_on_file(resource $ann, string $filename, int $max_neurons, int $neurons_between_reports, float $desired_error): bool
-----
FUNCTION fann_clear_scaling_params
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return bool
     */
    function fann_clear_scaling_params(resource $ann): bool
-----
FUNCTION fann_copy
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return resource
     */
    function fann_copy(resource $ann): resource
-----
FUNCTION fann_create_from_file
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $configuration_file
     * @return resource
     */
    function fann_create_from_file(string $configuration_file): resource
-----
FUNCTION fann_create_shortcut
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $num_layers
     * @param int $num_neurons1
     * @param int $num_neurons2
     * @param int $args
     * @return reference
     */
    function fann_create_shortcut(int $num_layers, int $num_neurons1, int $num_neurons2, int ...$args): reference
-----
FUNCTION fann_create_shortcut_array
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $num_layers
     * @param array $layers
     * @return resource
     */
    function fann_create_shortcut_array(int $num_layers, array $layers): resource
-----
FUNCTION fann_create_sparse
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $connection_rate
     * @param int $num_layers
     * @param int $num_neurons1
     * @param int $num_neurons2
     * @param int $args
     * @return resource|false
     */
    function fann_create_sparse(float $connection_rate, int $num_layers, int $num_neurons1, int $num_neurons2, int ...$args): resource|false
-----
FUNCTION fann_create_sparse_array
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $connection_rate
     * @param int $num_layers
     * @param array $layers
     * @return resource|false
     */
    function fann_create_sparse_array(float $connection_rate, int $num_layers, array $layers): resource|false
-----
FUNCTION fann_create_standard
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $num_layers
     * @param int $num_neurons1
     * @param int $num_neurons2
     * @param int $args
     * @return resource
     */
    function fann_create_standard(int $num_layers, int $num_neurons1, int $num_neurons2, int ...$args): resource
-----
FUNCTION fann_create_standard_array
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $num_layers
     * @param array $layers
     * @return resource
     */
    function fann_create_standard_array(int $num_layers, array $layers): resource
-----
FUNCTION fann_create_train
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $num_data
     * @param int $num_input
     * @param int $num_output
     * @return resource
     */
    function fann_create_train(int $num_data, int $num_input, int $num_output): resource
-----
FUNCTION fann_create_train_from_callback
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $num_data
     * @param int $num_input
     * @param int $num_output
     * @param callable(): mixed $user_function
     * @return resource
     */
    function fann_create_train_from_callback(int $num_data, int $num_input, int $num_output, callable(): mixed $user_function): resource
-----
FUNCTION fann_descale_input
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param array $input_vector
     * @return bool
     */
    function fann_descale_input(resource $ann, array $input_vector): bool
-----
FUNCTION fann_descale_output
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param array $output_vector
     * @return bool
     */
    function fann_descale_output(resource $ann, array $output_vector): bool
-----
FUNCTION fann_descale_train
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param resource $train_data
     * @return bool
     */
    function fann_descale_train(resource $ann, resource $train_data): bool
-----
FUNCTION fann_destroy
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return bool
     */
    function fann_destroy(resource $ann): bool
-----
FUNCTION fann_destroy_train
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $train_data
     * @return bool
     */
    function fann_destroy_train(resource $train_data): bool
-----
FUNCTION fann_duplicate_train_data
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $data
     * @return resource
     */
    function fann_duplicate_train_data(resource $data): resource
-----
FUNCTION fann_get_MSE
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return float
     */
    function fann_get_MSE(resource $ann): float
-----
FUNCTION fann_get_activation_function
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param int $layer
     * @param int $neuron
     * @return int
     */
    function fann_get_activation_function(resource $ann, int $layer, int $neuron): int
-----
FUNCTION fann_get_activation_steepness
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param int $layer
     * @param int $neuron
     * @return float
     */
    function fann_get_activation_steepness(resource $ann, int $layer, int $neuron): float
-----
FUNCTION fann_get_bias_array
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return array
     */
    function fann_get_bias_array(resource $ann): array
-----
FUNCTION fann_get_bit_fail
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return int
     */
    function fann_get_bit_fail(resource $ann): int
-----
FUNCTION fann_get_bit_fail_limit
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return float
     */
    function fann_get_bit_fail_limit(resource $ann): float
-----
FUNCTION fann_get_cascade_activation_functions
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return array
     */
    function fann_get_cascade_activation_functions(resource $ann): array
-----
FUNCTION fann_get_cascade_activation_functions_count
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return int
     */
    function fann_get_cascade_activation_functions_count(resource $ann): int
-----
FUNCTION fann_get_cascade_activation_steepnesses
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return array
     */
    function fann_get_cascade_activation_steepnesses(resource $ann): array
-----
FUNCTION fann_get_cascade_activation_steepnesses_count
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return int
     */
    function fann_get_cascade_activation_steepnesses_count(resource $ann): int
-----
FUNCTION fann_get_cascade_candidate_change_fraction
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return float
     */
    function fann_get_cascade_candidate_change_fraction(resource $ann): float
-----
FUNCTION fann_get_cascade_candidate_limit
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return float
     */
    function fann_get_cascade_candidate_limit(resource $ann): float
-----
FUNCTION fann_get_cascade_candidate_stagnation_epochs
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return float
     */
    function fann_get_cascade_candidate_stagnation_epochs(resource $ann): float
-----
FUNCTION fann_get_cascade_max_cand_epochs
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return int
     */
    function fann_get_cascade_max_cand_epochs(resource $ann): int
-----
FUNCTION fann_get_cascade_max_out_epochs
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return int
     */
    function fann_get_cascade_max_out_epochs(resource $ann): int
-----
FUNCTION fann_get_cascade_min_cand_epochs
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return int
     */
    function fann_get_cascade_min_cand_epochs(resource $ann): int
-----
FUNCTION fann_get_cascade_min_out_epochs
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return int
     */
    function fann_get_cascade_min_out_epochs(resource $ann): int
-----
FUNCTION fann_get_cascade_num_candidate_groups
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return int
     */
    function fann_get_cascade_num_candidate_groups(resource $ann): int
-----
FUNCTION fann_get_cascade_num_candidates
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return int
     */
    function fann_get_cascade_num_candidates(resource $ann): int
-----
FUNCTION fann_get_cascade_output_change_fraction
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return float
     */
    function fann_get_cascade_output_change_fraction(resource $ann): float
-----
FUNCTION fann_get_cascade_output_stagnation_epochs
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return int
     */
    function fann_get_cascade_output_stagnation_epochs(resource $ann): int
-----
FUNCTION fann_get_cascade_weight_multiplier
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return float
     */
    function fann_get_cascade_weight_multiplier(resource $ann): float
-----
FUNCTION fann_get_connection_array
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return array
     */
    function fann_get_connection_array(resource $ann): array
-----
FUNCTION fann_get_connection_rate
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return float
     */
    function fann_get_connection_rate(resource $ann): float
-----
FUNCTION fann_get_errno
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $errdat
     * @return int
     */
    function fann_get_errno(resource $errdat): int
-----
FUNCTION fann_get_errstr
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $errdat
     * @return string
     */
    function fann_get_errstr(resource $errdat): string
-----
FUNCTION fann_get_layer_array
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return array
     */
    function fann_get_layer_array(resource $ann): array
-----
FUNCTION fann_get_learning_momentum
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return float
     */
    function fann_get_learning_momentum(resource $ann): float
-----
FUNCTION fann_get_learning_rate
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return float
     */
    function fann_get_learning_rate(resource $ann): float
-----
FUNCTION fann_get_network_type
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return int
     */
    function fann_get_network_type(resource $ann): int
-----
FUNCTION fann_get_num_input
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return int
     */
    function fann_get_num_input(resource $ann): int
-----
FUNCTION fann_get_num_layers
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return int
     */
    function fann_get_num_layers(resource $ann): int
-----
FUNCTION fann_get_num_output
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return int
     */
    function fann_get_num_output(resource $ann): int
-----
FUNCTION fann_get_quickprop_decay
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return float
     */
    function fann_get_quickprop_decay(resource $ann): float
-----
FUNCTION fann_get_quickprop_mu
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return float
     */
    function fann_get_quickprop_mu(resource $ann): float
-----
FUNCTION fann_get_rprop_decrease_factor
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return float
     */
    function fann_get_rprop_decrease_factor(resource $ann): float
-----
FUNCTION fann_get_rprop_delta_max
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return float
     */
    function fann_get_rprop_delta_max(resource $ann): float
-----
FUNCTION fann_get_rprop_delta_min
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return float
     */
    function fann_get_rprop_delta_min(resource $ann): float
-----
FUNCTION fann_get_rprop_delta_zero
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return float|false
     */
    function fann_get_rprop_delta_zero(resource $ann): float|false
-----
FUNCTION fann_get_rprop_increase_factor
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return float
     */
    function fann_get_rprop_increase_factor(resource $ann): float
-----
FUNCTION fann_get_sarprop_step_error_shift
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return float
     */
    function fann_get_sarprop_step_error_shift(resource $ann): float
-----
FUNCTION fann_get_sarprop_step_error_threshold_factor
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return float
     */
    function fann_get_sarprop_step_error_threshold_factor(resource $ann): float
-----
FUNCTION fann_get_sarprop_temperature
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return float
     */
    function fann_get_sarprop_temperature(resource $ann): float
-----
FUNCTION fann_get_sarprop_weight_decay_shift
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return float
     */
    function fann_get_sarprop_weight_decay_shift(resource $ann): float
-----
FUNCTION fann_get_total_connections
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return int
     */
    function fann_get_total_connections(resource $ann): int
-----
FUNCTION fann_get_total_neurons
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return int
     */
    function fann_get_total_neurons(resource $ann): int
-----
FUNCTION fann_get_train_error_function
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return int
     */
    function fann_get_train_error_function(resource $ann): int
-----
FUNCTION fann_get_train_stop_function
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return int
     */
    function fann_get_train_stop_function(resource $ann): int
-----
FUNCTION fann_get_training_algorithm
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @return int
     */
    function fann_get_training_algorithm(resource $ann): int
-----
FUNCTION fann_init_weights
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param resource $train_data
     * @return bool
     */
    function fann_init_weights(resource $ann, resource $train_data): bool
-----
FUNCTION fann_length_train_data
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $data
     * @return int
     */
    function fann_length_train_data(resource $data): int
-----
FUNCTION fann_merge_train_data
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $data1
     * @param resource $data2
     * @return resource
     */
    function fann_merge_train_data(resource $data1, resource $data2): resource
-----
FUNCTION fann_num_input_train_data
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $data
     * @return int
     */
    function fann_num_input_train_data(resource $data): int
-----
FUNCTION fann_num_output_train_data
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $data
     * @return int
     */
    function fann_num_output_train_data(resource $data): int
-----
FUNCTION fann_print_error
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $errdat
     * @return void
     */
    function fann_print_error(string $errdat): void
-----
FUNCTION fann_randomize_weights
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param float $min_weight
     * @param float $max_weight
     * @return bool
     */
    function fann_randomize_weights(resource $ann, float $min_weight, float $max_weight): bool
-----
FUNCTION fann_read_train_from_file
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @return resource
     */
    function fann_read_train_from_file(string $filename): resource
-----
FUNCTION fann_reset_MSE
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $ann
     * @return bool
     */
    function fann_reset_MSE(string $ann): bool
-----
FUNCTION fann_reset_errno
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $errdat
     * @return void
     */
    function fann_reset_errno(resource $errdat): void
-----
FUNCTION fann_reset_errstr
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $errdat
     * @return void
     */
    function fann_reset_errstr(resource $errdat): void
-----
FUNCTION fann_run
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param array $input
     * @return array
     */
    function fann_run(resource $ann, array $input): array
-----
FUNCTION fann_save
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param string $configuration_file
     * @return bool
     */
    function fann_save(resource $ann, string $configuration_file): bool
-----
FUNCTION fann_save_train
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $data
     * @param string $file_name
     * @return bool
     */
    function fann_save_train(resource $data, string $file_name): bool
-----
FUNCTION fann_scale_input
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param array $input_vector
     * @return bool
     */
    function fann_scale_input(resource $ann, array $input_vector): bool
-----
FUNCTION fann_scale_input_train_data
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $train_data
     * @param float $new_min
     * @param float $new_max
     * @return bool
     */
    function fann_scale_input_train_data(resource $train_data, float $new_min, float $new_max): bool
-----
FUNCTION fann_scale_output
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param array $output_vector
     * @return bool
     */
    function fann_scale_output(resource $ann, array $output_vector): bool
-----
FUNCTION fann_scale_output_train_data
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $train_data
     * @param float $new_min
     * @param float $new_max
     * @return bool
     */
    function fann_scale_output_train_data(resource $train_data, float $new_min, float $new_max): bool
-----
FUNCTION fann_scale_train
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param resource $train_data
     * @return bool
     */
    function fann_scale_train(resource $ann, resource $train_data): bool
-----
FUNCTION fann_scale_train_data
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $train_data
     * @param float $new_min
     * @param float $new_max
     * @return bool
     */
    function fann_scale_train_data(resource $train_data, float $new_min, float $new_max): bool
-----
FUNCTION fann_set_activation_function
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param int $activation_function
     * @param int $layer
     * @param int $neuron
     * @return bool
     */
    function fann_set_activation_function(resource $ann, int $activation_function, int $layer, int $neuron): bool
-----
FUNCTION fann_set_activation_function_hidden
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param int $activation_function
     * @return bool
     */
    function fann_set_activation_function_hidden(resource $ann, int $activation_function): bool
-----
FUNCTION fann_set_activation_function_layer
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param int $activation_function
     * @param int $layer
     * @return bool
     */
    function fann_set_activation_function_layer(resource $ann, int $activation_function, int $layer): bool
-----
FUNCTION fann_set_activation_function_output
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param int $activation_function
     * @return bool
     */
    function fann_set_activation_function_output(resource $ann, int $activation_function): bool
-----
FUNCTION fann_set_activation_steepness
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param float $activation_steepness
     * @param int $layer
     * @param int $neuron
     * @return bool
     */
    function fann_set_activation_steepness(resource $ann, float $activation_steepness, int $layer, int $neuron): bool
-----
FUNCTION fann_set_activation_steepness_hidden
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param float $activation_steepness
     * @return bool
     */
    function fann_set_activation_steepness_hidden(resource $ann, float $activation_steepness): bool
-----
FUNCTION fann_set_activation_steepness_layer
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param float $activation_steepness
     * @param int $layer
     * @return bool
     */
    function fann_set_activation_steepness_layer(resource $ann, float $activation_steepness, int $layer): bool
-----
FUNCTION fann_set_activation_steepness_output
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param float $activation_steepness
     * @return bool
     */
    function fann_set_activation_steepness_output(resource $ann, float $activation_steepness): bool
-----
FUNCTION fann_set_bit_fail_limit
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param float $bit_fail_limit
     * @return bool
     */
    function fann_set_bit_fail_limit(resource $ann, float $bit_fail_limit): bool
-----
FUNCTION fann_set_callback
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param callable(): mixed $callback
     * @return bool
     */
    function fann_set_callback(resource $ann, callable(): mixed $callback): bool
-----
FUNCTION fann_set_cascade_activation_functions
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param array $cascade_activation_functions
     * @return bool
     */
    function fann_set_cascade_activation_functions(resource $ann, array $cascade_activation_functions): bool
-----
FUNCTION fann_set_cascade_activation_steepnesses
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param array $cascade_activation_steepnesses_count
     * @return bool
     */
    function fann_set_cascade_activation_steepnesses(resource $ann, array $cascade_activation_steepnesses_count): bool
-----
FUNCTION fann_set_cascade_candidate_change_fraction
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param float $cascade_candidate_change_fraction
     * @return bool
     */
    function fann_set_cascade_candidate_change_fraction(resource $ann, float $cascade_candidate_change_fraction): bool
-----
FUNCTION fann_set_cascade_candidate_limit
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param float $cascade_candidate_limit
     * @return bool
     */
    function fann_set_cascade_candidate_limit(resource $ann, float $cascade_candidate_limit): bool
-----
FUNCTION fann_set_cascade_candidate_stagnation_epochs
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param int $cascade_candidate_stagnation_epochs
     * @return bool
     */
    function fann_set_cascade_candidate_stagnation_epochs(resource $ann, int $cascade_candidate_stagnation_epochs): bool
-----
FUNCTION fann_set_cascade_max_cand_epochs
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param int $cascade_max_cand_epochs
     * @return bool
     */
    function fann_set_cascade_max_cand_epochs(resource $ann, int $cascade_max_cand_epochs): bool
-----
FUNCTION fann_set_cascade_max_out_epochs
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param int $cascade_max_out_epochs
     * @return bool
     */
    function fann_set_cascade_max_out_epochs(resource $ann, int $cascade_max_out_epochs): bool
-----
FUNCTION fann_set_cascade_min_cand_epochs
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param int $cascade_min_cand_epochs
     * @return bool
     */
    function fann_set_cascade_min_cand_epochs(resource $ann, int $cascade_min_cand_epochs): bool
-----
FUNCTION fann_set_cascade_min_out_epochs
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param int $cascade_min_out_epochs
     * @return bool
     */
    function fann_set_cascade_min_out_epochs(resource $ann, int $cascade_min_out_epochs): bool
-----
FUNCTION fann_set_cascade_num_candidate_groups
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param int $cascade_num_candidate_groups
     * @return bool
     */
    function fann_set_cascade_num_candidate_groups(resource $ann, int $cascade_num_candidate_groups): bool
-----
FUNCTION fann_set_cascade_output_change_fraction
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param float $cascade_output_change_fraction
     * @return bool
     */
    function fann_set_cascade_output_change_fraction(resource $ann, float $cascade_output_change_fraction): bool
-----
FUNCTION fann_set_cascade_output_stagnation_epochs
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param int $cascade_output_stagnation_epochs
     * @return bool
     */
    function fann_set_cascade_output_stagnation_epochs(resource $ann, int $cascade_output_stagnation_epochs): bool
-----
FUNCTION fann_set_cascade_weight_multiplier
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param float $cascade_weight_multiplier
     * @return bool
     */
    function fann_set_cascade_weight_multiplier(resource $ann, float $cascade_weight_multiplier): bool
-----
FUNCTION fann_set_error_log
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $errdat
     * @param string $log_file
     * @return void
     */
    function fann_set_error_log(resource $errdat, string $log_file): void
-----
FUNCTION fann_set_input_scaling_params
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param resource $train_data
     * @param float $new_input_min
     * @param float $new_input_max
     * @return bool
     */
    function fann_set_input_scaling_params(resource $ann, resource $train_data, float $new_input_min, float $new_input_max): bool
-----
FUNCTION fann_set_learning_momentum
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param float $learning_momentum
     * @return bool
     */
    function fann_set_learning_momentum(resource $ann, float $learning_momentum): bool
-----
FUNCTION fann_set_learning_rate
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param float $learning_rate
     * @return bool
     */
    function fann_set_learning_rate(resource $ann, float $learning_rate): bool
-----
FUNCTION fann_set_output_scaling_params
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param resource $train_data
     * @param float $new_output_min
     * @param float $new_output_max
     * @return bool
     */
    function fann_set_output_scaling_params(resource $ann, resource $train_data, float $new_output_min, float $new_output_max): bool
-----
FUNCTION fann_set_quickprop_decay
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param float $quickprop_decay
     * @return bool
     */
    function fann_set_quickprop_decay(resource $ann, float $quickprop_decay): bool
-----
FUNCTION fann_set_quickprop_mu
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param float $quickprop_mu
     * @return bool
     */
    function fann_set_quickprop_mu(resource $ann, float $quickprop_mu): bool
-----
FUNCTION fann_set_rprop_decrease_factor
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param float $rprop_decrease_factor
     * @return bool
     */
    function fann_set_rprop_decrease_factor(resource $ann, float $rprop_decrease_factor): bool
-----
FUNCTION fann_set_rprop_delta_max
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param float $rprop_delta_max
     * @return bool
     */
    function fann_set_rprop_delta_max(resource $ann, float $rprop_delta_max): bool
-----
FUNCTION fann_set_rprop_delta_min
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param float $rprop_delta_min
     * @return bool
     */
    function fann_set_rprop_delta_min(resource $ann, float $rprop_delta_min): bool
-----
FUNCTION fann_set_rprop_delta_zero
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param float $rprop_delta_zero
     * @return bool
     */
    function fann_set_rprop_delta_zero(resource $ann, float $rprop_delta_zero): bool
-----
FUNCTION fann_set_rprop_increase_factor
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param float $rprop_increase_factor
     * @return bool
     */
    function fann_set_rprop_increase_factor(resource $ann, float $rprop_increase_factor): bool
-----
FUNCTION fann_set_sarprop_step_error_shift
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param float $sarprop_step_error_shift
     * @return bool
     */
    function fann_set_sarprop_step_error_shift(resource $ann, float $sarprop_step_error_shift): bool
-----
FUNCTION fann_set_sarprop_step_error_threshold_factor
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param float $sarprop_step_error_threshold_factor
     * @return bool
     */
    function fann_set_sarprop_step_error_threshold_factor(resource $ann, float $sarprop_step_error_threshold_factor): bool
-----
FUNCTION fann_set_sarprop_temperature
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param float $sarprop_temperature
     * @return bool
     */
    function fann_set_sarprop_temperature(resource $ann, float $sarprop_temperature): bool
-----
FUNCTION fann_set_sarprop_weight_decay_shift
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param float $sarprop_weight_decay_shift
     * @return bool
     */
    function fann_set_sarprop_weight_decay_shift(resource $ann, float $sarprop_weight_decay_shift): bool
-----
FUNCTION fann_set_scaling_params
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param resource $train_data
     * @param float $new_input_min
     * @param float $new_input_max
     * @param float $new_output_min
     * @param float $new_output_max
     * @return bool
     */
    function fann_set_scaling_params(resource $ann, resource $train_data, float $new_input_min, float $new_input_max, float $new_output_min, float $new_output_max): bool
-----
FUNCTION fann_set_train_error_function
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param int $error_function
     * @return bool
     */
    function fann_set_train_error_function(resource $ann, int $error_function): bool
-----
FUNCTION fann_set_train_stop_function
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param int $stop_function
     * @return bool
     */
    function fann_set_train_stop_function(resource $ann, int $stop_function): bool
-----
FUNCTION fann_set_training_algorithm
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param int $training_algorithm
     * @return bool
     */
    function fann_set_training_algorithm(resource $ann, int $training_algorithm): bool
-----
FUNCTION fann_set_weight
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param int $from_neuron
     * @param int $to_neuron
     * @param float $weight
     * @return bool
     */
    function fann_set_weight(resource $ann, int $from_neuron, int $to_neuron, float $weight): bool
-----
FUNCTION fann_set_weight_array
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param array $connections
     * @return bool
     */
    function fann_set_weight_array(resource $ann, array $connections): bool
-----
FUNCTION fann_shuffle_train_data
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $train_data
     * @return bool
     */
    function fann_shuffle_train_data(resource $train_data): bool
-----
FUNCTION fann_subset_train_data
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $data
     * @param int $pos
     * @param int $length
     * @return resource
     */
    function fann_subset_train_data(resource $data, int $pos, int $length): resource
-----
FUNCTION fann_test
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param array $input
     * @param array $desired_output
     * @return bool
     */
    function fann_test(resource $ann, array $input, array $desired_output): bool
-----
FUNCTION fann_test_data
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param resource $data
     * @return float
     */
    function fann_test_data(resource $ann, resource $data): float
-----
FUNCTION fann_train
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param array $input
     * @param array $desired_output
     * @return bool
     */
    function fann_train(resource $ann, array $input, array $desired_output): bool
-----
FUNCTION fann_train_epoch
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param resource $data
     * @return float
     */
    function fann_train_epoch(resource $ann, resource $data): float
-----
FUNCTION fann_train_on_data
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param resource $data
     * @param int $max_epochs
     * @param int $epochs_between_reports
     * @param float $desired_error
     * @return bool
     */
    function fann_train_on_data(resource $ann, resource $data, int $max_epochs, int $epochs_between_reports, float $desired_error): bool
-----
FUNCTION fann_train_on_file
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $ann
     * @param string $filename
     * @param int $max_epochs
     * @param int $epochs_between_reports
     * @param float $desired_error
     * @return bool
     */
    function fann_train_on_file(resource $ann, string $filename, int $max_epochs, int $epochs_between_reports, float $desired_error): bool
-----
FUNCTION fastcgi_finish_request
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return bool
     */
    function fastcgi_finish_request(): bool
-----
FUNCTION fbird_add_user
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $service_handle
     * @param string $user_name
     * @param string $password
     * @param string|null $first_name
     * @param string|null $middle_name
     * @param string|null $last_name
     * @return bool
     */
    function fbird_add_user(mixed $service_handle, mixed $user_name, mixed $password, mixed $first_name = null, mixed $middle_name = null, mixed $last_name = null): mixed
-----
FUNCTION fbird_affected_rows
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource|null $link_identifier
     * @return int
     */
    function fbird_affected_rows(mixed $link_identifier = null): mixed
-----
FUNCTION fbird_backup
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $service_handle
     * @param string $source_db
     * @param string $dest_file
     * @param int|null $options
     * @param bool|null $verbose
     * @return mixed
     */
    function fbird_backup(mixed $service_handle, mixed $source_db, mixed $dest_file, mixed $options = null, mixed $verbose = null): mixed
-----
FUNCTION fbird_blob_add
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $blob_handle
     * @param string $data
     * @return void
     */
    function fbird_blob_add(mixed $blob_handle, mixed $data): mixed
-----
FUNCTION fbird_blob_cancel
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $blob_handle
     * @return bool
     */
    function fbird_blob_cancel(mixed $blob_handle): mixed
-----
FUNCTION fbird_blob_close
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $blob_handle
     * @return mixed
     */
    function fbird_blob_close(mixed $blob_handle): mixed
-----
FUNCTION fbird_blob_create
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource|null $link_identifier
     * @return resource|false
     */
    function fbird_blob_create(mixed $link_identifier = null): mixed
-----
FUNCTION fbird_blob_echo
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $blob_id
     * @return bool
     */
    function fbird_blob_echo(mixed $blob_id): mixed
-----
FUNCTION fbird_blob_get
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $blob_handle
     * @param int $len
     * @return string|false
     */
    function fbird_blob_get(mixed $blob_handle, mixed $len): mixed
-----
FUNCTION fbird_blob_import
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $link_identifier
     * @param resource $file_handle
     * @return string|false
     */
    function fbird_blob_import(mixed $link_identifier, mixed $file_handle): mixed
-----
FUNCTION fbird_blob_info
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $link_identifier
     * @param string $blob_id
     * @return array
     */
    function fbird_blob_info(mixed $link_identifier, mixed $blob_id): mixed
-----
FUNCTION fbird_blob_open
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $link_identifier
     * @param string $blob_id
     * @return resource|false
     */
    function fbird_blob_open(mixed $link_identifier, mixed $blob_id): mixed
-----
FUNCTION fbird_close
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource|null $connection_id
     * @return bool
     */
    function fbird_close(mixed $connection_id = null): mixed
-----
FUNCTION fbird_commit
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource|null $link_or_trans_identifier
     * @return bool
     */
    function fbird_commit(mixed $link_or_trans_identifier = null): mixed
-----
FUNCTION fbird_commit_ret
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource|null $link_or_trans_identifier
     * @return bool
     */
    function fbird_commit_ret(mixed $link_or_trans_identifier = null): mixed
-----
FUNCTION fbird_connect
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string|null $database
     * @param string|null $username
     * @param string|null $password
     * @param string|null $charset
     * @param int|null $buffers
     * @param int|null $dialect
     * @param string|null $role
     * @param int|null $sync
     * @return resource|false
     */
    function fbird_connect(mixed $database = null, mixed $username = null, mixed $password = null, mixed $charset = null, mixed $buffers = null, mixed $dialect = null, mixed $role = null, mixed $sync = null): mixed
-----
FUNCTION fbird_db_info
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $service_handle
     * @param string $db
     * @param int $action
     * @param int|null $argument
     * @return string
     */
    function fbird_db_info(mixed $service_handle, mixed $db, mixed $action, mixed $argument = null): mixed
-----
FUNCTION fbird_delete_user
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $service_handle
     * @param string $user_name
     * @return bool
     */
    function fbird_delete_user(mixed $service_handle, mixed $user_name): mixed
-----
FUNCTION fbird_drop_db
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource|null $connection
     * @return bool
     */
    function fbird_drop_db(mixed $connection = null): mixed
-----
FUNCTION fbird_errcode
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return int|false
     */
    function fbird_errcode(): mixed
-----
FUNCTION fbird_errmsg
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return string|false
     */
    function fbird_errmsg(): mixed
-----
FUNCTION fbird_execute
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $query
     * @param mixed $bind_arg
     * @return bool|resource
     */
    function fbird_execute(mixed $query, mixed ...$bind_arg): mixed
-----
FUNCTION fbird_fetch_assoc
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $result
     * @param int|null $fetch_flag
     * @return array|false
     */
    function fbird_fetch_assoc(mixed $result, mixed $fetch_flag = null): mixed
-----
FUNCTION fbird_fetch_object
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $result_id
     * @param int|null $fetch_flag
     * @return object|false
     */
    function fbird_fetch_object(mixed $result_id, mixed $fetch_flag = null): mixed
-----
FUNCTION fbird_fetch_row
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $result_identifier
     * @param int|null $fetch_flag
     * @return array|false
     */
    function fbird_fetch_row(mixed $result_identifier, mixed $fetch_flag = null): mixed
-----
FUNCTION fbird_field_info
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $result
     * @param int $field_number
     * @return array
     */
    function fbird_field_info(mixed $result, mixed $field_number): mixed
-----
FUNCTION fbird_free_event_handler
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $event
     * @return bool
     */
    function fbird_free_event_handler(mixed $event): mixed
-----
FUNCTION fbird_free_query
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $query
     * @return bool
     */
    function fbird_free_query(mixed $query): mixed
-----
FUNCTION fbird_free_result
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $result_identifier
     * @return bool
     */
    function fbird_free_result(mixed $result_identifier): mixed
-----
FUNCTION fbird_gen_id
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $generator
     * @param int|null $increment
     * @param resource|null $link_identifier
     * @return mixed
     */
    function fbird_gen_id(mixed $generator, mixed $increment = null, mixed $link_identifier = null): mixed
-----
FUNCTION fbird_maintain_db
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $service_handle
     * @param string $db
     * @param int $action
     * @param int|null $argument
     * @return bool
     */
    function fbird_maintain_db(mixed $service_handle, mixed $db, mixed $action, mixed $argument = null): mixed
-----
FUNCTION fbird_modify_user
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $service_handle
     * @param string $user_name
     * @param string $password
     * @param string|null $first_name
     * @param string|null $middle_name
     * @param string|null $last_name
     * @return bool
     */
    function fbird_modify_user(mixed $service_handle, mixed $user_name, mixed $password, mixed $first_name = null, mixed $middle_name = null, mixed $last_name = null): mixed
-----
FUNCTION fbird_name_result
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $result
     * @param string $name
     * @return bool
     */
    function fbird_name_result(mixed $result, mixed $name): mixed
-----
FUNCTION fbird_num_fields
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $result_id
     * @return int
     */
    function fbird_num_fields(mixed $result_id): mixed
-----
FUNCTION fbird_num_params
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $query
     * @return int
     */
    function fbird_num_params(mixed $query): mixed
-----
FUNCTION fbird_param_info
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $query
     * @param int $param_number
     * @return array
     */
    function fbird_param_info(mixed $query, mixed $param_number): mixed
-----
FUNCTION fbird_pconnect
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string|null $database
     * @param string|null $username
     * @param string|null $password
     * @param string|null $charset
     * @param int|null $buffers
     * @param int|null $dialect
     * @param string|null $role
     * @param int|null $sync
     * @return resource|false
     */
    function fbird_pconnect(mixed $database = null, mixed $username = null, mixed $password = null, mixed $charset = null, mixed $buffers = null, mixed $dialect = null, mixed $role = null, mixed $sync = null): mixed
-----
FUNCTION fbird_prepare
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $query
     * @return resource|false
     */
    function fbird_prepare(mixed $query): mixed
-----
FUNCTION fbird_query
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource|null $link_identifier
     * @param string $query
     * @param int|null $bind_args
     * @return bool|resource
     */
    function fbird_query(mixed $link_identifier = null, mixed $query, mixed $bind_args = null): mixed
-----
FUNCTION fbird_restore
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $service_handle
     * @param string $source_file
     * @param string $dest_db
     * @param int|null $options
     * @param bool|null $verbose
     * @return mixed
     */
    function fbird_restore(mixed $service_handle, mixed $source_file, mixed $dest_db, mixed $options = null, mixed $verbose = null): mixed
-----
FUNCTION fbird_rollback
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource|null $link_or_trans_identifier
     * @return bool
     */
    function fbird_rollback(mixed $link_or_trans_identifier = null): mixed
-----
FUNCTION fbird_rollback_ret
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource|null $link_or_trans_identifier
     * @return bool
     */
    function fbird_rollback_ret(mixed $link_or_trans_identifier = null): mixed
-----
FUNCTION fbird_server_info
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $service_handle
     * @param int $action
     * @return string
     */
    function fbird_server_info(mixed $service_handle, mixed $action): mixed
-----
FUNCTION fbird_service_attach
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $host
     * @param string $dba_username
     * @param string $dba_password
     * @return resource|false
     */
    function fbird_service_attach(mixed $host, mixed $dba_username, mixed $dba_password): mixed
-----
FUNCTION fbird_service_detach
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $service_handle
     * @return bool
     */
    function fbird_service_detach(mixed $service_handle): mixed
-----
FUNCTION fbird_set_event_handler
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param callable(): mixed $event_handler
     * @param string $event_name1
     * @param string|null $event_name2
     * @param string $_
     * @return resource
     */
    function fbird_set_event_handler(mixed $event_handler, mixed $event_name1, mixed $event_name2 = null, mixed ...$_): mixed
-----
FUNCTION fbird_trans
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int|null $trans_args
     * @param resource|null $link_identifier
     * @return resource|false
     */
    function fbird_trans(mixed $trans_args = null, mixed $link_identifier = null): mixed
-----
FUNCTION fbird_wait_event
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $event_name1
     * @param string|null $event_name2
     * @param string $_
     * @return string
     */
    function fbird_wait_event(mixed $event_name1, mixed $event_name2 = null, mixed ...$_): mixed
-----
FUNCTION fclose
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $stream
     * @return bool
     */
    function fclose(resource $stream): bool
-----
FUNCTION fdatasync
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @return bool
     */
    function fdatasync(resource $stream): bool
-----
FUNCTION fdf_add_doc_javascript
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fdf_document
     * @param string $script_name
     * @param string $script_code
     * @return bool
     */
    function fdf_add_doc_javascript(resource $fdf_document, string $script_name, string $script_code): bool
-----
FUNCTION fdf_add_template
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fdf_document
     * @param int $newpage
     * @param string $filename
     * @param string $template
     * @param int $rename
     * @return bool
     */
    function fdf_add_template(resource $fdf_document, int $newpage, string $filename, string $template, int $rename): bool
-----
FUNCTION fdf_close
-----
Returns by reference: Maybe
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $fdf_document
     * @return void
     */
    function fdf_close(resource $fdf_document): void
-----
FUNCTION fdf_create
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @return resource
     */
    function fdf_create(): resource
-----
FUNCTION fdf_enum_values
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fdf_document
     * @param callable(): mixed $function
     * @param mixed $userdata
     * @return bool
     */
    function fdf_enum_values(resource $fdf_document, callable(): mixed $function, mixed $userdata): bool
-----
FUNCTION fdf_errno
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @return int
     */
    function fdf_errno(): int
-----
FUNCTION fdf_error
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $error_code
     * @return string
     */
    function fdf_error(int $error_code): string
-----
FUNCTION fdf_get_ap
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fdf_document
     * @param string $field
     * @param int $face
     * @param string $filename
     * @return bool
     */
    function fdf_get_ap(resource $fdf_document, string $field, int $face, string $filename): bool
-----
FUNCTION fdf_get_attachment
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fdf_document
     * @param string $fieldname
     * @param string $savepath
     * @return array
     */
    function fdf_get_attachment(resource $fdf_document, string $fieldname, string $savepath): array
-----
FUNCTION fdf_get_encoding
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fdf_document
     * @return string
     */
    function fdf_get_encoding(resource $fdf_document): string
-----
FUNCTION fdf_get_file
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fdf_document
     * @return string
     */
    function fdf_get_file(resource $fdf_document): string
-----
FUNCTION fdf_get_flags
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fdf_document
     * @param string $fieldname
     * @param int $whichflags
     * @return int
     */
    function fdf_get_flags(resource $fdf_document, string $fieldname, int $whichflags): int
-----
FUNCTION fdf_get_opt
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fdf_document
     * @param string $fieldname
     * @param int $element
     * @return mixed
     */
    function fdf_get_opt(resource $fdf_document, string $fieldname, int $element): mixed
-----
FUNCTION fdf_get_status
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fdf_document
     * @return string
     */
    function fdf_get_status(resource $fdf_document): string
-----
FUNCTION fdf_get_value
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fdf_document
     * @param string $fieldname
     * @param int $which
     * @return mixed
     */
    function fdf_get_value(resource $fdf_document, string $fieldname, int $which): mixed
-----
FUNCTION fdf_get_version
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fdf_document
     * @return string
     */
    function fdf_get_version(resource $fdf_document): string
-----
FUNCTION fdf_header
-----
Returns by reference: Maybe
Has side-effects: Yes
Variants: 1
    /**
     * @return void
     */
    function fdf_header(): void
-----
FUNCTION fdf_next_field_name
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fdf_document
     * @param string $fieldname
     * @return string
     */
    function fdf_next_field_name(resource $fdf_document, string $fieldname): string
-----
FUNCTION fdf_open
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @return resource|false
     */
    function fdf_open(string $filename): resource|false
-----
FUNCTION fdf_open_string
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $fdf_data
     * @return resource
     */
    function fdf_open_string(string $fdf_data): resource
-----
FUNCTION fdf_remove_item
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fdf_document
     * @param string $fieldname
     * @param int $item
     * @return bool
     */
    function fdf_remove_item(resource $fdf_document, string $fieldname, int $item): bool
-----
FUNCTION fdf_save
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fdf_document
     * @param string $filename
     * @return bool
     */
    function fdf_save(resource $fdf_document, string $filename): bool
-----
FUNCTION fdf_save_string
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fdf_document
     * @return string
     */
    function fdf_save_string(resource $fdf_document): string
-----
FUNCTION fdf_set_ap
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fdf_document
     * @param string $field_name
     * @param int $face
     * @param string $filename
     * @param int $page_number
     * @return bool
     */
    function fdf_set_ap(resource $fdf_document, string $field_name, int $face, string $filename, int $page_number): bool
-----
FUNCTION fdf_set_encoding
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fdf_document
     * @param string $encoding
     * @return bool
     */
    function fdf_set_encoding(resource $fdf_document, string $encoding): bool
-----
FUNCTION fdf_set_file
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fdf_document
     * @param string $url
     * @param string $target_frame
     * @return bool
     */
    function fdf_set_file(resource $fdf_document, string $url, string $target_frame): bool
-----
FUNCTION fdf_set_flags
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fdf_document
     * @param string $fieldname
     * @param int $whichflags
     * @param int $newflags
     * @return bool
     */
    function fdf_set_flags(resource $fdf_document, string $fieldname, int $whichflags, int $newflags): bool
-----
FUNCTION fdf_set_javascript_action
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fdf_document
     * @param string $fieldname
     * @param int $trigger
     * @param string $script
     * @return bool
     */
    function fdf_set_javascript_action(resource $fdf_document, string $fieldname, int $trigger, string $script): bool
-----
FUNCTION fdf_set_on_import_javascript
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fdf_document
     * @param string $script
     * @param bool $before_data_import
     * @return bool
     */
    function fdf_set_on_import_javascript(resource $fdf_document, string $script, bool $before_data_import): bool
-----
FUNCTION fdf_set_opt
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fdf_document
     * @param string $fieldname
     * @param int $element
     * @param string $str1
     * @param string $str2
     * @return bool
     */
    function fdf_set_opt(resource $fdf_document, string $fieldname, int $element, string $str1, string $str2): bool
-----
FUNCTION fdf_set_status
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fdf_document
     * @param string $status
     * @return bool
     */
    function fdf_set_status(resource $fdf_document, string $status): bool
-----
FUNCTION fdf_set_submit_form_action
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fdf_document
     * @param string $fieldname
     * @param int $trigger
     * @param string $script
     * @param int $flags
     * @return bool
     */
    function fdf_set_submit_form_action(resource $fdf_document, string $fieldname, int $trigger, string $script, int $flags): bool
-----
FUNCTION fdf_set_target_frame
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fdf_document
     * @param string $frame_name
     * @return bool
     */
    function fdf_set_target_frame(resource $fdf_document, string $frame_name): bool
-----
FUNCTION fdf_set_value
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fdf_document
     * @param string $fieldname
     * @param mixed $value
     * @param int $isname
     * @return bool
     */
    function fdf_set_value(resource $fdf_document, string $fieldname, mixed $value, int $isname): bool
-----
FUNCTION fdf_set_version
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fdf_document
     * @param string $version
     * @return bool
     */
    function fdf_set_version(resource $fdf_document, string $version): bool
-----
FUNCTION fdiv
-----
Variants: 1
    /**
     * @param float $num1
     * @param float $num2
     * @return float
     */
    function fdiv(float $num1, float $num2): float
-----
FUNCTION feof
-----
Variants: 1
    /**
     * @param resource $stream
     * @return bool
     */
    function feof(resource $stream): bool
-----
FUNCTION fflush
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $stream
     * @return bool
     */
    function fflush(resource $stream): bool
-----
FUNCTION fgetc
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $stream
     * @return string|false
     */
    function fgetc(resource $stream): string|false
-----
FUNCTION fgetcsv
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $stream
     * @param int<0, max>|null $length
     * @param string $separator
     * @param string $enclosure
     * @param string $escape
     * @return array|false
     */
    function fgetcsv(resource $stream, int<0, max>|null $length = null, string $separator = ',', string $enclosure = '"', string $escape = '\\'): array|false
-----
FUNCTION fgets
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $stream
     * @param int<0, max>|null $length
     * @return string|false
     */
    function fgets(resource $stream, int<0, max>|null $length = null): string|false
-----
FUNCTION fgetss
-----
MISSING
-----
FUNCTION file
-----
Variants: 1
    /**
     * @param string $filename
     * @param int $flags
     * @param resource|null $context
     * @return array<int, string>|false
     */
    function file(string $filename, int $flags = 0, resource|null $context = null): array<int, string>|false
-----
FUNCTION file://
-----
MISSING
-----
FUNCTION file_exists
-----
Variants: 1
    /**
     * @param string $filename
     * @return bool
     */
    function file_exists(string $filename): bool
-----
FUNCTION file_get_contents
-----
Variants: 1
    /**
     * @param string $filename
     * @param bool $use_include_path
     * @param resource|null $context
     * @param int $offset
     * @param int<0, max>|null $length
     * @return string|false
     */
    function file_get_contents(string $filename, bool $use_include_path = false, resource|null $context = null, int $offset = 0, int<0, max>|null $length = null): string|false
-----
FUNCTION file_put_contents
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $filename
     * @param mixed $data
     * @param int $flags
     * @param resource|null $context
     * @return int<0, max>|false
     */
    function file_put_contents(string $filename, mixed $data, int $flags = 0, resource|null $context = null): int<0, max>|false
-----
FUNCTION fileatime
-----
Variants: 1
    /**
     * @param string $filename
     * @return int|false
     */
    function fileatime(string $filename): int|false
-----
FUNCTION filectime
-----
Variants: 1
    /**
     * @param string $filename
     * @return int|false
     */
    function filectime(string $filename): int|false
-----
FUNCTION filegroup
-----
Variants: 1
    /**
     * @param string $filename
     * @return int|false
     */
    function filegroup(string $filename): int|false
-----
FUNCTION fileinode
-----
Variants: 1
    /**
     * @param string $filename
     * @return int|false
     */
    function fileinode(string $filename): int|false
-----
FUNCTION filemtime
-----
Variants: 1
    /**
     * @param string $filename
     * @return int|false
     */
    function filemtime(string $filename): int|false
-----
FUNCTION fileowner
-----
Variants: 1
    /**
     * @param string $filename
     * @return int|false
     */
    function fileowner(string $filename): int|false
-----
FUNCTION fileperms
-----
Variants: 1
    /**
     * @param string $filename
     * @return int|false
     */
    function fileperms(string $filename): int|false
-----
FUNCTION filesize
-----
Variants: 1
    /**
     * @param string $filename
     * @return int<0, max>|false
     */
    function filesize(string $filename): int<0, max>|false
-----
FUNCTION filetype
-----
Variants: 1
    /**
     * @param string $filename
     * @return string|false
     */
    function filetype(string $filename): string|false
-----
FUNCTION filter_has_var
-----
Variants: 1
    /**
     * @param int $input_type
     * @param string $var_name
     * @return bool
     */
    function filter_has_var(int $input_type, string $var_name): bool
-----
FUNCTION filter_id
-----
Variants: 1
    /**
     * @param string $name
     * @return int|false
     */
    function filter_id(string $name): int|false
-----
FUNCTION filter_input
-----
Variants: 1
    /**
     * @param int $type
     * @param string $var_name
     * @param int $filter
     * @param array|int $options
     * @return mixed
     */
    function filter_input(int $type, string $var_name, int $filter = 516, array|int $options = 0): mixed
-----
FUNCTION filter_input_array
-----
Variants: 1
    /**
     * @param int $type
     * @param array|int $options
     * @param bool $add_empty
     * @return array|false|null
     */
    function filter_input_array(int $type, array|int $options = 516, bool $add_empty = true): array|false|null
-----
FUNCTION filter_list
-----
Variants: 1
    /**
     * @return array
     */
    function filter_list(): array
-----
FUNCTION filter_var
-----
Variants: 1
    /**
     * @param mixed $value
     * @param int $filter
     * @param array|int $options
     * @return mixed
     */
    function filter_var(mixed $value, int $filter = 516, array|int $options = 0): mixed
-----
FUNCTION filter_var_array
-----
Variants: 1
    /**
     * @param array $array
     * @param array|int $options
     * @param bool $add_empty
     * @return array|false|null
     */
    function filter_var_array(array $array, array|int $options = 516, bool $add_empty = true): array|false|null
-----
FUNCTION finfo_close
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param finfo $finfo
     * @return bool
     */
    function finfo_close(finfo $finfo): bool
-----
FUNCTION finfo_open
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $flags
     * @param string|null $magic_database
     * @return finfo|false
     */
    function finfo_open(int $flags = 0, string|null $magic_database = null): finfo|false
-----
FUNCTION floatval
-----
Variants: 1
    /**
     * @param array|bool|float|int|resource|string|null $value
     * @return float
     */
    function floatval(array|bool|float|int|resource|string|null $value): float
-----
FUNCTION flock
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $stream
     * @param int $operation
     * @param int $would_block
     * @param-out 0|1 $would_block
     * @return bool
     */
    function flock(resource $stream, int $operation, int &rw$would_block = null): bool
-----
FUNCTION floor
-----
Variants: 1
    /**
     * @param float|int $num
     * @return float
     */
    function floor(float|int $num): float
-----
FUNCTION flush
-----
Has side-effects: Yes
Variants: 1
    /**
     * @return void
     */
    function flush(): void
-----
FUNCTION fmod
-----
Variants: 1
    /**
     * @param float $num1
     * @param float $num2
     * @return float
     */
    function fmod(float $num1, float $num2): float
-----
FUNCTION fnmatch
-----
Variants: 1
    /**
     * @param string $pattern
     * @param string $filename
     * @param int $flags
     * @return bool
     */
    function fnmatch(string $pattern, string $filename, int $flags = 0): bool
-----
FUNCTION fopen
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $filename
     * @param string $mode
     * @param bool $use_include_path
     * @param resource|null $context
     * @return resource|false
     */
    function fopen(string $filename, string $mode, bool $use_include_path = false, resource|null $context = null): resource|false
-----
FUNCTION forward_static_call
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @param mixed $args
     * @return mixed
     */
    function forward_static_call(callable(): mixed $callback, mixed ...$args): mixed
-----
FUNCTION forward_static_call_array
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @param array<int|string, mixed> $args
     * @return mixed
     */
    function forward_static_call_array(callable(): mixed $callback, array<int|string, mixed> $args): mixed
-----
FUNCTION fpassthru
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $stream
     * @return int
     */
    function fpassthru(resource $stream): int
-----
FUNCTION fpm_get_status
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return array{pool: string, process-manager: 'dynamic'|'ondemand'|'static', start-time: int<0, max>, start-since: int<0, max>, accepted-conn: int<0, max>, listen-queue: int<0, max>, max-listen-queue: int<0, max>, listen-queue-len: int<0, max>, idle-processes: int<0, max>, active-processes: int<1, max>, total-processes: int<1, max>, max-active-processes: int<1, max>, max-children-reached: 0|1, slow-requests: int<0, max>, procs: array<int, array{pid: int<2, max>, state: 'Idle'|'Running', start-time: int<0, max>, start-since: int<0, max>, requests: int<0, max>, request-duration: int<0, max>, request-method: string, request-uri: string, query-string: string, request-length: int<0, max>, user: string, script: string, last-request-cpu: float, last-request-memory: int<0, max>}>}|false
     */
    function fpm_get_status(): array{pool: string, process-manager: 'dynamic'|'ondemand'|'static', start-time: int<0, max>, start-since: int<0, max>, accepted-conn: int<0, max>, listen-queue: int<0, max>, max-listen-queue: int<0, max>, listen-queue-len: int<0, max>, idle-processes: int<0, max>, active-processes: int<1, max>, total-processes: int<1, max>, max-active-processes: int<1, max>, max-children-reached: 0|1, slow-requests: int<0, max>, procs: array<int, array{pid: int<2, max>, state: 'Idle'|'Running', start-time: int<0, max>, start-since: int<0, max>, requests: int<0, max>, request-duration: int<0, max>, request-method: string, request-uri: string, query-string: string, request-length: int<0, max>, user: string, script: string, last-request-cpu: float, last-request-memory: int<0, max>}>}|false
-----
FUNCTION fprintf
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @param string $format
     * @param bool|float|int|string|null $values
     * @return int
     */
    function fprintf(resource $stream, string $format, bool|float|int|string|null ...$values): int
-----
FUNCTION fputcsv
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $stream
     * @param array<int|string, bool|float|int|string|null> $fields
     * @param string $separator
     * @param string $enclosure
     * @param string $escape
     * @param string $eol
     * @return int<0, max>|false
     */
    function fputcsv(resource $stream, array<int|string, bool|float|int|string|null> $fields, string $separator = ',', string $enclosure = '"', string $escape = '\\', string $eol = "\n"): int<0, max>|false
-----
FUNCTION fputs
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $stream
     * @param string $data
     * @param int<0, max>|null $length
     * @return int<0, max>|false
     */
    function fputs(resource $stream, string $data, int<0, max>|null $length = null): int<0, max>|false
-----
FUNCTION fread
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $stream
     * @param int<0, max> $length
     * @return string|false
     */
    function fread(resource $stream, int<0, max> $length): string|false
-----
FUNCTION frenchtojd
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $month
     * @param int $day
     * @param int $year
     * @return int
     */
    function frenchtojd(int $month, int $day, int $year): int
-----
FUNCTION fscanf
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $stream
     * @param string $format
     * @param float|int|string|null $vars
     * @param-out float|int|string|null $vars
     * @return array<int, mixed>|int|false|null
     */
    function fscanf(resource $stream, string $format, float|int|string|null ...&rw$vars): array<int, mixed>|int|false|null
-----
FUNCTION fseek
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $stream
     * @param int $offset
     * @param int $whence
     * @return -1|0
     */
    function fseek(resource $stream, int $offset, int $whence = 0): -1|0
-----
FUNCTION fsockopen
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $hostname
     * @param int $port
     * @param int $error_code
     * @param-out int $error_code
     * @param string $error_message
     * @param-out string $error_message
     * @param float|null $timeout
     * @return resource|false
     */
    function fsockopen(string $hostname, int $port = -1, int &rw$error_code = null, string &rw$error_message = null, float|null $timeout = null): resource|false
-----
FUNCTION fstat
-----
Variants: 1
    /**
     * @param resource $stream
     * @return array|false
     */
    function fstat(resource $stream): array|false
-----
FUNCTION fsync
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @return bool
     */
    function fsync(resource $stream): bool
-----
FUNCTION ftell
-----
Variants: 1
    /**
     * @param resource $stream
     * @return int|false
     */
    function ftell(resource $stream): int|false
-----
FUNCTION ftok
-----
Variants: 1
    /**
     * @param string $filename
     * @param string $project_id
     * @return int
     */
    function ftok(string $filename, string $project_id): int
-----
FUNCTION ftp://
-----
MISSING
-----
FUNCTION ftp_alloc
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @param int $size
     * @param string $response
     * @return bool
     */
    function ftp_alloc(FTP\Connection $ftp, int $size, string &rw$response = null): bool
-----
FUNCTION ftp_append
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @param string $remote_filename
     * @param string $local_filename
     * @param int $mode
     * @return bool
     */
    function ftp_append(FTP\Connection $ftp, string $remote_filename, string $local_filename, int $mode = 2): bool
-----
FUNCTION ftp_cdup
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @return bool
     */
    function ftp_cdup(FTP\Connection $ftp): bool
-----
FUNCTION ftp_chdir
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @param string $directory
     * @return bool
     */
    function ftp_chdir(FTP\Connection $ftp, string $directory): bool
-----
FUNCTION ftp_chmod
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @param int $permissions
     * @param string $filename
     * @return int|false
     */
    function ftp_chmod(FTP\Connection $ftp, int $permissions, string $filename): int|false
-----
FUNCTION ftp_close
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @return bool
     */
    function ftp_close(FTP\Connection $ftp): bool
-----
FUNCTION ftp_connect
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $hostname
     * @param int $port
     * @param int $timeout
     * @return FTP\Connection|false
     */
    function ftp_connect(string $hostname, int $port = 21, int $timeout = 90): FTP\Connection|false
-----
FUNCTION ftp_delete
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @param string $filename
     * @return bool
     */
    function ftp_delete(FTP\Connection $ftp, string $filename): bool
-----
FUNCTION ftp_exec
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @param string $command
     * @return bool
     */
    function ftp_exec(FTP\Connection $ftp, string $command): bool
-----
FUNCTION ftp_fget
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @param resource $stream
     * @param string $remote_filename
     * @param int $mode
     * @param int $offset
     * @return bool
     */
    function ftp_fget(FTP\Connection $ftp, resource $stream, string $remote_filename, int $mode = 2, int $offset = 0): bool
-----
FUNCTION ftp_fput
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @param string $remote_filename
     * @param resource $stream
     * @param int $mode
     * @param int $offset
     * @return bool
     */
    function ftp_fput(FTP\Connection $ftp, string $remote_filename, resource $stream, int $mode = 2, int $offset = 0): bool
-----
FUNCTION ftp_get
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @param string $local_filename
     * @param string $remote_filename
     * @param int $mode
     * @param int $offset
     * @return bool
     */
    function ftp_get(FTP\Connection $ftp, string $local_filename, string $remote_filename, int $mode = 2, int $offset = 0): bool
-----
FUNCTION ftp_get_option
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @param int $option
     * @return bool|int
     */
    function ftp_get_option(FTP\Connection $ftp, int $option): bool|int
-----
FUNCTION ftp_login
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @param string $username
     * @param string $password
     * @return bool
     */
    function ftp_login(FTP\Connection $ftp, string $username, string $password): bool
-----
FUNCTION ftp_mdtm
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @param string $filename
     * @return int
     */
    function ftp_mdtm(FTP\Connection $ftp, string $filename): int
-----
FUNCTION ftp_mkdir
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @param string $directory
     * @return string|false
     */
    function ftp_mkdir(FTP\Connection $ftp, string $directory): string|false
-----
FUNCTION ftp_mlsd
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @param string $directory
     * @return array<int, array>|false
     */
    function ftp_mlsd(FTP\Connection $ftp, string $directory): array<int, array>|false
-----
FUNCTION ftp_nb_continue
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @return int
     */
    function ftp_nb_continue(FTP\Connection $ftp): int
-----
FUNCTION ftp_nb_fget
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @param resource $stream
     * @param string $remote_filename
     * @param int $mode
     * @param int $offset
     * @return int
     */
    function ftp_nb_fget(FTP\Connection $ftp, resource $stream, string $remote_filename, int $mode = 2, int $offset = 0): int
-----
FUNCTION ftp_nb_fput
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @param string $remote_filename
     * @param resource $stream
     * @param int $mode
     * @param int $offset
     * @return int
     */
    function ftp_nb_fput(FTP\Connection $ftp, string $remote_filename, resource $stream, int $mode = 2, int $offset = 0): int
-----
FUNCTION ftp_nb_get
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @param string $local_filename
     * @param string $remote_filename
     * @param int $mode
     * @param int $offset
     * @return int|false
     */
    function ftp_nb_get(FTP\Connection $ftp, string $local_filename, string $remote_filename, int $mode = 2, int $offset = 0): int|false
-----
FUNCTION ftp_nb_put
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @param string $remote_filename
     * @param string $local_filename
     * @param int $mode
     * @param int $offset
     * @return int|false
     */
    function ftp_nb_put(FTP\Connection $ftp, string $remote_filename, string $local_filename, int $mode = 2, int $offset = 0): int|false
-----
FUNCTION ftp_nlist
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @param string $directory
     * @return array<int, string>|false
     */
    function ftp_nlist(FTP\Connection $ftp, string $directory): array<int, string>|false
-----
FUNCTION ftp_pasv
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @param bool $enable
     * @return bool
     */
    function ftp_pasv(FTP\Connection $ftp, bool $enable): bool
-----
FUNCTION ftp_put
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @param string $remote_filename
     * @param string $local_filename
     * @param int $mode
     * @param int $offset
     * @return bool
     */
    function ftp_put(FTP\Connection $ftp, string $remote_filename, string $local_filename, int $mode = 2, int $offset = 0): bool
-----
FUNCTION ftp_pwd
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @return string|false
     */
    function ftp_pwd(FTP\Connection $ftp): string|false
-----
FUNCTION ftp_quit
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @return bool
     */
    function ftp_quit(FTP\Connection $ftp): bool
-----
FUNCTION ftp_raw
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @param string $command
     * @return array<int, string>|null
     */
    function ftp_raw(FTP\Connection $ftp, string $command): array<int, string>|null
-----
FUNCTION ftp_rawlist
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @param string $directory
     * @param bool $recursive
     * @return array<int, string>|false
     */
    function ftp_rawlist(FTP\Connection $ftp, string $directory, bool $recursive = false): array<int, string>|false
-----
FUNCTION ftp_rename
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @param string $from
     * @param string $to
     * @return bool
     */
    function ftp_rename(FTP\Connection $ftp, string $from, string $to): bool
-----
FUNCTION ftp_rmdir
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @param string $directory
     * @return bool
     */
    function ftp_rmdir(FTP\Connection $ftp, string $directory): bool
-----
FUNCTION ftp_set_option
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @param int $option
     * @param bool|int $value
     * @return bool
     */
    function ftp_set_option(FTP\Connection $ftp, int $option, bool|int $value): bool
-----
FUNCTION ftp_site
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @param string $command
     * @return bool
     */
    function ftp_site(FTP\Connection $ftp, string $command): bool
-----
FUNCTION ftp_size
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @param string $filename
     * @return int
     */
    function ftp_size(FTP\Connection $ftp, string $filename): int
-----
FUNCTION ftp_ssl_connect
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $hostname
     * @param int $port
     * @param int $timeout
     * @return FTP\Connection|false
     */
    function ftp_ssl_connect(string $hostname, int $port = 21, int $timeout = 90): FTP\Connection|false
-----
FUNCTION ftp_systype
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param FTP\Connection $ftp
     * @return string|false
     */
    function ftp_systype(FTP\Connection $ftp): string|false
-----
FUNCTION ftruncate
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $stream
     * @param int<0, max> $size
     * @return bool
     */
    function ftruncate(resource $stream, int<0, max> $size): bool
-----
FUNCTION func_get_arg
-----
Variants: 1
    /**
     * @param int<0, max> $position
     * @return mixed
     */
    function func_get_arg(int<0, max> $position): mixed
-----
FUNCTION func_get_args
-----
Variants: 1
    /**
     * @return array<int, mixed>
     */
    function func_get_args(): array<int, mixed>
-----
FUNCTION func_num_args
-----
Variants: 1
    /**
     * @return int<0, max>
     */
    function func_num_args(): int<0, max>
-----
FUNCTION function_exists
-----
Variants: 1
    /**
     * @param string $function
     * @return bool
     */
    function function_exists(string $function): bool
-----
FUNCTION fwrite
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $stream
     * @param string $data
     * @param int<0, max>|null $length
     * @return int<0, max>|false
     */
    function fwrite(resource $stream, string $data, int<0, max>|null $length = null): int<0, max>|false
-----
FUNCTION gc_collect_cycles
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return int
     */
    function gc_collect_cycles(): int
-----
FUNCTION gc_disable
-----
Has side-effects: Yes
Variants: 1
    /**
     * @return void
     */
    function gc_disable(): void
-----
FUNCTION gc_enable
-----
Has side-effects: Yes
Variants: 1
    /**
     * @return void
     */
    function gc_enable(): void
-----
FUNCTION gc_enabled
-----
Variants: 1
    /**
     * @return bool
     */
    function gc_enabled(): bool
-----
FUNCTION gc_mem_caches
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return int
     */
    function gc_mem_caches(): int
-----
FUNCTION gc_status
-----
Variants: 1
    /**
     * @return array{runs: int, collected: int, threshold: int, roots: int}
     */
    function gc_status(): array{runs: int, collected: int, threshold: int, roots: int}
-----
FUNCTION gd_info
-----
Variants: 1
    /**
     * @return array
     */
    function gd_info(): array
-----
FUNCTION geoip_asnum_by_name
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $hostname
     * @return string
     */
    function geoip_asnum_by_name(string $hostname): string
-----
FUNCTION geoip_continent_code_by_name
-----
Variants: 1
    /**
     * @param string $hostname
     * @return string
     */
    function geoip_continent_code_by_name(string $hostname): string
-----
FUNCTION geoip_country_code3_by_name
-----
Variants: 1
    /**
     * @param string $hostname
     * @return string
     */
    function geoip_country_code3_by_name(string $hostname): string
-----
FUNCTION geoip_country_code_by_name
-----
Variants: 1
    /**
     * @param string $hostname
     * @return string
     */
    function geoip_country_code_by_name(string $hostname): string
-----
FUNCTION geoip_country_name_by_name
-----
Variants: 1
    /**
     * @param string $hostname
     * @return string
     */
    function geoip_country_name_by_name(string $hostname): string
-----
FUNCTION geoip_database_info
-----
Variants: 1
    /**
     * @param int $database
     * @return string
     */
    function geoip_database_info(int $database = 1): string
-----
FUNCTION geoip_db_avail
-----
Variants: 1
    /**
     * @param int $database
     * @return bool
     */
    function geoip_db_avail(int $database): bool
-----
FUNCTION geoip_db_filename
-----
Variants: 1
    /**
     * @param int $database
     * @return string
     */
    function geoip_db_filename(int $database): string
-----
FUNCTION geoip_db_get_all_info
-----
Variants: 1
    /**
     * @return array
     */
    function geoip_db_get_all_info(): array
-----
FUNCTION geoip_domain_by_name
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $hostname
     * @return string
     */
    function geoip_domain_by_name(string $hostname): string
-----
FUNCTION geoip_id_by_name
-----
Variants: 1
    /**
     * @param string $hostname
     * @return int
     */
    function geoip_id_by_name(string $hostname): int
-----
FUNCTION geoip_isp_by_name
-----
Variants: 1
    /**
     * @param string $hostname
     * @return string
     */
    function geoip_isp_by_name(string $hostname): string
-----
FUNCTION geoip_netspeedcell_by_name
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $hostname
     * @return string
     */
    function geoip_netspeedcell_by_name(string $hostname): string
-----
FUNCTION geoip_org_by_name
-----
Variants: 1
    /**
     * @param string $hostname
     * @return string
     */
    function geoip_org_by_name(string $hostname): string
-----
FUNCTION geoip_record_by_name
-----
Variants: 1
    /**
     * @param string $hostname
     * @return array
     */
    function geoip_record_by_name(string $hostname): array
-----
FUNCTION geoip_region_by_name
-----
Variants: 1
    /**
     * @param string $hostname
     * @return array
     */
    function geoip_region_by_name(string $hostname): array
-----
FUNCTION geoip_region_name_by_code
-----
Variants: 1
    /**
     * @param string $country_code
     * @param string $region_code
     * @return string
     */
    function geoip_region_name_by_code(string $country_code, string $region_code): string
-----
FUNCTION geoip_setup_custom_directory
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $path
     * @return void
     */
    function geoip_setup_custom_directory(string $path): void
-----
FUNCTION geoip_time_zone_by_country_and_region
-----
Variants: 1
    /**
     * @param string $country_code
     * @param string $region_code
     * @return string|false
     */
    function geoip_time_zone_by_country_and_region(string $country_code, string $region_code = null): string|false
-----
FUNCTION getSession
-----
MISSING
-----
FUNCTION get_browser
-----
Variants: 1
    /**
     * @param string|null $user_agent
     * @param bool $return_array
     * @return array|object|false
     */
    function get_browser(string|null $user_agent = null, bool $return_array = false): array|object|false
-----
FUNCTION get_called_class
-----
Variants: 1
    /**
     * @return class-string
     */
    function get_called_class(): class-string
-----
FUNCTION get_cfg_var
-----
Variants: 1
    /**
     * @param string $option
     * @return array|string|false
     */
    function get_cfg_var(string $option): array|string|false
-----
FUNCTION get_class
-----
Variants: 1
    /**
     * @param object $object
     * @return class-string
     */
    function get_class(object $object = *ERROR*): class-string
-----
FUNCTION get_class_methods
-----
Variants: 1
    /**
     * @param object|string $object_or_class
     * @return array<int, string>
     */
    function get_class_methods(object|string $object_or_class): array<int, string>
-----
FUNCTION get_class_vars
-----
Variants: 1
    /**
     * @param string $class
     * @return array
     */
    function get_class_vars(string $class): array
-----
FUNCTION get_current_user
-----
Variants: 1
    /**
     * @return string
     */
    function get_current_user(): string
-----
FUNCTION get_debug_type
-----
Variants: 1
    /**
     * @param mixed $value
     * @return string
     */
    function get_debug_type(mixed $value): string
-----
FUNCTION get_declared_classes
-----
Variants: 1
    /**
     * @return array<int, class-string>
     */
    function get_declared_classes(): array<int, class-string>
-----
FUNCTION get_declared_interfaces
-----
Variants: 1
    /**
     * @return array<int, class-string>
     */
    function get_declared_interfaces(): array<int, class-string>
-----
FUNCTION get_declared_traits
-----
Variants: 1
    /**
     * @return array<int, class-string>
     */
    function get_declared_traits(): array<int, class-string>
-----
FUNCTION get_defined_constants
-----
Variants: 1
    /**
     * @param bool $categorize
     * @return array
     */
    function get_defined_constants(bool $categorize = false): array
-----
FUNCTION get_defined_functions
-----
Variants: 1
    /**
     * @param bool $exclude_disabled
     * @return array{internal: non-empty-array<int, callable-string>, user: array<int, callable-string>}
     */
    function get_defined_functions(bool $exclude_disabled = true): array{internal: non-empty-array<int, callable-string>, user: array<int, callable-string>}
-----
FUNCTION get_defined_vars
-----
Variants: 1
    /**
     * @return array
     */
    function get_defined_vars(): array
-----
FUNCTION get_extension_funcs
-----
Variants: 1
    /**
     * @param string $extension
     * @return array<int, callable-string>|false
     */
    function get_extension_funcs(string $extension): array<int, callable-string>|false
-----
FUNCTION get_headers
-----
Variants: 1
    /**
     * @param string $url
     * @param bool $associative
     * @param resource|null $context
     * @return array|false
     */
    function get_headers(string $url, bool $associative = false, resource|null $context = null): array|false
-----
FUNCTION get_html_translation_table
-----
Variants: 1
    /**
     * @param int $table
     * @param int $flags
     * @param string $encoding
     * @return array<string, string>
     */
    function get_html_translation_table(int $table = 0, int $flags = 11, string $encoding = 'UTF-8'): array<string, string>
-----
FUNCTION get_include_path
-----
Variants: 1
    /**
     * @return string|false
     */
    function get_include_path(): string|false
-----
FUNCTION get_included_files
-----
Variants: 1
    /**
     * @return array<int, string>
     */
    function get_included_files(): array<int, string>
-----
FUNCTION get_loaded_extensions
-----
Variants: 1
    /**
     * @param bool $zend_extensions
     * @return array<int, string>
     */
    function get_loaded_extensions(bool $zend_extensions = false): array<int, string>
-----
FUNCTION get_magic_quotes_gpc
-----
MISSING
-----
FUNCTION get_magic_quotes_runtime
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @return false
     */
    function get_magic_quotes_runtime(): false
-----
FUNCTION get_mangled_object_vars
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param object $object
     * @return array
     */
    function get_mangled_object_vars(object $object): array
-----
FUNCTION get_meta_tags
-----
Variants: 1
    /**
     * @param string $filename
     * @param bool $use_include_path
     * @return array|false
     */
    function get_meta_tags(string $filename, bool $use_include_path = false): array|false
-----
FUNCTION get_object_vars
-----
Variants: 1
    /**
     * @param object $object
     * @return array<string, mixed>
     */
    function get_object_vars(object $object): array<string, mixed>
-----
FUNCTION get_parent_class
-----
Variants: 1
    /**
     * @param object|string $object_or_class
     * @return class-string|false
     */
    function get_parent_class(object|string $object_or_class = *ERROR*): class-string|false
-----
FUNCTION get_required_files
-----
Variants: 1
    /**
     * @return array<int, string>
     */
    function get_required_files(): array<int, string>
-----
FUNCTION get_resource_id
-----
Variants: 1
    /**
     * @param resource $resource
     * @return int
     */
    function get_resource_id(resource $resource): int
-----
FUNCTION get_resource_type
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $resource
     * @return string
     */
    function get_resource_type(resource $resource): string
-----
FUNCTION get_resources
-----
Variants: 1
    /**
     * @param string|null $type
     * @return array<int, resource>
     */
    function get_resources(string|null $type = null): array<int, resource>
-----
FUNCTION getallheaders
-----
Variants: 1
    /**
     * @return array
     */
    function getallheaders(): array
-----
FUNCTION getcwd
-----
Variants: 1
    /**
     * @return non-empty-string|false
     */
    function getcwd(): non-empty-string|false
-----
FUNCTION getdate
-----
Variants: 1
    /**
     * @param int|null $timestamp
     * @return array{seconds: int<0, 59>, minutes: int<0, 59>, hours: int<0, 23>, mday: int<1, 31>, wday: int<0, 6>, mon: int<1, 12>, year: int, yday: int<0, 365>, weekday: 'Friday'|'Monday'|'Saturday'|'Sunday'|'Thursday'|'Tuesday'|'Wednesday', month: 'April'|'August'|'December'|'February'|'January'|'July'|'June'|'March'|'May'|'November'|'October'|'September', 0: int}
     */
    function getdate(int|null $timestamp = null): array{seconds: int<0, 59>, minutes: int<0, 59>, hours: int<0, 23>, mday: int<1, 31>, wday: int<0, 6>, mon: int<1, 12>, year: int, yday: int<0, 365>, weekday: 'Friday'|'Monday'|'Saturday'|'Sunday'|'Thursday'|'Tuesday'|'Wednesday', month: 'April'|'August'|'December'|'February'|'January'|'July'|'June'|'March'|'May'|'November'|'October'|'September', 0: int}
-----
FUNCTION getenv
-----
Variants: 2
    /**
     * @param string $varname
     * @param bool $local_only
     * @return string|false
     */
    function getenv(string $varname = null, bool $local_only = false): string|false
    /**
     * @return array<string, string>
     */
    function getenv(): array<string, string>
-----
FUNCTION gethostbyaddr
-----
Variants: 1
    /**
     * @param string $ip
     * @return string|false
     */
    function gethostbyaddr(string $ip): string|false
-----
FUNCTION gethostbyname
-----
Variants: 1
    /**
     * @param string $hostname
     * @return string
     */
    function gethostbyname(string $hostname): string
-----
FUNCTION gethostbynamel
-----
Variants: 1
    /**
     * @param string $hostname
     * @return array<int, string>|false
     */
    function gethostbynamel(string $hostname): array<int, string>|false
-----
FUNCTION gethostname
-----
Variants: 1
    /**
     * @return string|false
     */
    function gethostname(): string|false
-----
FUNCTION getimagesize
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param array $image_info
     * @return array{0: int, 1: int, 2: int, 3: string, mime: string, channels?: int, bits?: int}|false
     */
    function getimagesize(string $filename, array &rw$image_info = null): array{0: int, 1: int, 2: int, 3: string, mime: string, channels?: int, bits?: int}|false
-----
FUNCTION getimagesizefromstring
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $string
     * @param array $image_info
     * @return array{0: int, 1: int, 2: int, 3: string, mime: string, channels?: int, bits?: int}|false
     */
    function getimagesizefromstring(string $string, array &rw$image_info = null): array{0: int, 1: int, 2: int, 3: string, mime: string, channels?: int, bits?: int}|false
-----
FUNCTION getlastmod
-----
Variants: 1
    /**
     * @return int|false
     */
    function getlastmod(): int|false
-----
FUNCTION getmxrr
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $hostname
     * @param array $hosts
     * @param array $weights
     * @return bool
     */
    function getmxrr(string $hostname, array &rw$hosts, array &rw$weights = null): bool
-----
FUNCTION getmygid
-----
Variants: 1
    /**
     * @return int|false
     */
    function getmygid(): int|false
-----
FUNCTION getmyinode
-----
Variants: 1
    /**
     * @return int|false
     */
    function getmyinode(): int|false
-----
FUNCTION getmypid
-----
Variants: 1
    /**
     * @return int|false
     */
    function getmypid(): int|false
-----
FUNCTION getmyuid
-----
Variants: 1
    /**
     * @return int|false
     */
    function getmyuid(): int|false
-----
FUNCTION getopt
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $short_options
     * @param array $long_options
     * @param int $rest_index
     * @return (array<string, array<int, mixed>|string|false>|false)
     */
    function getopt(string $short_options, array $long_options = array{}, int &rw$rest_index = null): (array<string, array<int, mixed>|string|false>|false)
-----
FUNCTION getprotobyname
-----
Variants: 1
    /**
     * @param string $protocol
     * @return int|false
     */
    function getprotobyname(string $protocol): int|false
-----
FUNCTION getprotobynumber
-----
Variants: 1
    /**
     * @param int $protocol
     * @return string|false
     */
    function getprotobynumber(int $protocol): string|false
-----
FUNCTION getrandmax
-----
Variants: 1
    /**
     * @return int
     */
    function getrandmax(): int
-----
FUNCTION getrusage
-----
Variants: 1
    /**
     * @param int $mode
     * @return array|false
     */
    function getrusage(int $mode = 0): array|false
-----
FUNCTION getservbyname
-----
Variants: 1
    /**
     * @param string $service
     * @param string $protocol
     * @return int|false
     */
    function getservbyname(string $service, string $protocol): int|false
-----
FUNCTION getservbyport
-----
Variants: 1
    /**
     * @param int $port
     * @param string $protocol
     * @return string|false
     */
    function getservbyport(int $port, string $protocol): string|false
-----
FUNCTION gettext
-----
Variants: 1
    /**
     * @param string $message
     * @return string
     */
    function gettext(string $message): string
-----
FUNCTION gettimeofday
-----
Variants: 1
    /**
     * @param bool $as_float
     * @return array|float
     */
    function gettimeofday(bool $as_float = false): array|float
-----
FUNCTION gettype
-----
Variants: 1
    /**
     * @param mixed $value
     * @return string
     */
    function gettype(mixed $value): string
-----
FUNCTION glob
-----
Variants: 1
    /**
     * @param string $pattern
     * @param int $flags
     * @return array<int, string>|false
     */
    function glob(string $pattern, int $flags = 0): array<int, string>|false
-----
FUNCTION glob://
-----
MISSING
-----
FUNCTION gmdate
-----
Variants: 1
    /**
     * @param string $format
     * @param int|null $timestamp
     * @return string
     */
    function gmdate(string $format, int|null $timestamp = null): string
-----
FUNCTION gmmktime
-----
Variants: 1
    /**
     * @param int $hour
     * @param int|null $minute
     * @param int|null $second
     * @param int|null $month
     * @param int|null $day
     * @param int|null $year
     * @return int|false
     */
    function gmmktime(int $hour, int|null $minute = null, int|null $second = null, int|null $month = null, int|null $day = null, int|null $year = null): int|false
-----
FUNCTION gmp_abs
-----
Variants: 1
    /**
     * @param GMP|int|string $num
     * @return GMP
     */
    function gmp_abs(GMP|int|string $num): GMP
-----
FUNCTION gmp_add
-----
Variants: 1
    /**
     * @param GMP|int|string $num1
     * @param GMP|int|string $num2
     * @return GMP
     */
    function gmp_add(GMP|int|string $num1, GMP|int|string $num2): GMP
-----
FUNCTION gmp_and
-----
Variants: 1
    /**
     * @param GMP|int|string $num1
     * @param GMP|int|string $num2
     * @return GMP
     */
    function gmp_and(GMP|int|string $num1, GMP|int|string $num2): GMP
-----
FUNCTION gmp_binomial
-----
Variants: 1
    /**
     * @param GMP|int|string $n
     * @param int $k
     * @return GMP
     */
    function gmp_binomial(GMP|int|string $n, int $k): GMP
-----
FUNCTION gmp_clrbit
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param GMP $num
     * @param int $index
     * @return void
     */
    function gmp_clrbit(GMP $num, int $index): void
-----
FUNCTION gmp_cmp
-----
Variants: 1
    /**
     * @param GMP|int|string $num1
     * @param GMP|int|string $num2
     * @return int
     */
    function gmp_cmp(GMP|int|string $num1, GMP|int|string $num2): int
-----
FUNCTION gmp_com
-----
Variants: 1
    /**
     * @param GMP|int|string $num
     * @return GMP
     */
    function gmp_com(GMP|int|string $num): GMP
-----
FUNCTION gmp_div
-----
Variants: 1
    /**
     * @param GMP|int|string $num1
     * @param GMP|int|string $num2
     * @param int $rounding_mode
     * @return GMP
     */
    function gmp_div(GMP|int|string $num1, GMP|int|string $num2, int $rounding_mode = 0): GMP
-----
FUNCTION gmp_div_q
-----
Variants: 1
    /**
     * @param GMP|int|string $num1
     * @param GMP|int|string $num2
     * @param int $rounding_mode
     * @return GMP
     */
    function gmp_div_q(GMP|int|string $num1, GMP|int|string $num2, int $rounding_mode = 0): GMP
-----
FUNCTION gmp_div_qr
-----
Variants: 1
    /**
     * @param GMP|int|string $num1
     * @param GMP|int|string $num2
     * @param int $rounding_mode
     * @return array
     */
    function gmp_div_qr(GMP|int|string $num1, GMP|int|string $num2, int $rounding_mode = 0): array
-----
FUNCTION gmp_div_r
-----
Variants: 1
    /**
     * @param GMP|int|string $num1
     * @param GMP|int|string $num2
     * @param int $rounding_mode
     * @return GMP
     */
    function gmp_div_r(GMP|int|string $num1, GMP|int|string $num2, int $rounding_mode = 0): GMP
-----
FUNCTION gmp_divexact
-----
Variants: 1
    /**
     * @param GMP|int|string $num1
     * @param GMP|int|string $num2
     * @return GMP
     */
    function gmp_divexact(GMP|int|string $num1, GMP|int|string $num2): GMP
-----
FUNCTION gmp_export
-----
Variants: 1
    /**
     * @param GMP|int|string $num
     * @param int $word_size
     * @param int $flags
     * @return string
     */
    function gmp_export(GMP|int|string $num, int $word_size = 1, int $flags = 17): string
-----
FUNCTION gmp_fact
-----
Variants: 1
    /**
     * @param GMP|int|string $num
     * @return GMP
     */
    function gmp_fact(GMP|int|string $num): GMP
-----
FUNCTION gmp_gcd
-----
Variants: 1
    /**
     * @param GMP|int|string $num1
     * @param GMP|int|string $num2
     * @return GMP
     */
    function gmp_gcd(GMP|int|string $num1, GMP|int|string $num2): GMP
-----
FUNCTION gmp_gcdext
-----
Variants: 1
    /**
     * @param GMP|int|string $num1
     * @param GMP|int|string $num2
     * @return array
     */
    function gmp_gcdext(GMP|int|string $num1, GMP|int|string $num2): array
-----
FUNCTION gmp_hamdist
-----
Variants: 1
    /**
     * @param GMP|int|string $num1
     * @param GMP|int|string $num2
     * @return int
     */
    function gmp_hamdist(GMP|int|string $num1, GMP|int|string $num2): int
-----
FUNCTION gmp_import
-----
Variants: 1
    /**
     * @param string $data
     * @param int $word_size
     * @param int $flags
     * @return GMP
     */
    function gmp_import(string $data, int $word_size = 1, int $flags = 17): GMP
-----
FUNCTION gmp_init
-----
Variants: 1
    /**
     * @param int|string $num
     * @param int $base
     * @return GMP
     */
    function gmp_init(int|string $num, int $base = 0): GMP
-----
FUNCTION gmp_intval
-----
Variants: 1
    /**
     * @param GMP|int|string $num
     * @return int
     */
    function gmp_intval(GMP|int|string $num): int
-----
FUNCTION gmp_invert
-----
Variants: 1
    /**
     * @param GMP|int|string $num1
     * @param GMP|int|string $num2
     * @return GMP|false
     */
    function gmp_invert(GMP|int|string $num1, GMP|int|string $num2): GMP|false
-----
FUNCTION gmp_jacobi
-----
Variants: 1
    /**
     * @param GMP|int|string $num1
     * @param GMP|int|string $num2
     * @return int
     */
    function gmp_jacobi(GMP|int|string $num1, GMP|int|string $num2): int
-----
FUNCTION gmp_kronecker
-----
Variants: 1
    /**
     * @param GMP|int|string $num1
     * @param GMP|int|string $num2
     * @return int
     */
    function gmp_kronecker(GMP|int|string $num1, GMP|int|string $num2): int
-----
FUNCTION gmp_lcm
-----
Variants: 1
    /**
     * @param GMP|int|string $num1
     * @param GMP|int|string $num2
     * @return GMP
     */
    function gmp_lcm(GMP|int|string $num1, GMP|int|string $num2): GMP
-----
FUNCTION gmp_legendre
-----
Variants: 1
    /**
     * @param GMP|int|string $num1
     * @param GMP|int|string $num2
     * @return int
     */
    function gmp_legendre(GMP|int|string $num1, GMP|int|string $num2): int
-----
FUNCTION gmp_mod
-----
Variants: 1
    /**
     * @param GMP|int|string $num1
     * @param GMP|int|string $num2
     * @return GMP
     */
    function gmp_mod(GMP|int|string $num1, GMP|int|string $num2): GMP
-----
FUNCTION gmp_mul
-----
Variants: 1
    /**
     * @param GMP|int|string $num1
     * @param GMP|int|string $num2
     * @return GMP
     */
    function gmp_mul(GMP|int|string $num1, GMP|int|string $num2): GMP
-----
FUNCTION gmp_neg
-----
Variants: 1
    /**
     * @param GMP|int|string $num
     * @return GMP
     */
    function gmp_neg(GMP|int|string $num): GMP
-----
FUNCTION gmp_nextprime
-----
Variants: 1
    /**
     * @param GMP|int|string $num
     * @return GMP
     */
    function gmp_nextprime(GMP|int|string $num): GMP
-----
FUNCTION gmp_or
-----
Variants: 1
    /**
     * @param GMP|int|string $num1
     * @param GMP|int|string $num2
     * @return GMP
     */
    function gmp_or(GMP|int|string $num1, GMP|int|string $num2): GMP
-----
FUNCTION gmp_perfect_power
-----
Variants: 1
    /**
     * @param GMP|int|string $num
     * @return bool
     */
    function gmp_perfect_power(GMP|int|string $num): bool
-----
FUNCTION gmp_perfect_square
-----
Variants: 1
    /**
     * @param GMP|int|string $num
     * @return bool
     */
    function gmp_perfect_square(GMP|int|string $num): bool
-----
FUNCTION gmp_popcount
-----
Variants: 1
    /**
     * @param GMP|int|string $num
     * @return int
     */
    function gmp_popcount(GMP|int|string $num): int
-----
FUNCTION gmp_pow
-----
Variants: 1
    /**
     * @param GMP|int|string $num
     * @param int $exponent
     * @return GMP
     */
    function gmp_pow(GMP|int|string $num, int $exponent): GMP
-----
FUNCTION gmp_powm
-----
Variants: 1
    /**
     * @param GMP|int|string $num
     * @param GMP|int|string $exponent
     * @param GMP|int|string $modulus
     * @return GMP
     */
    function gmp_powm(GMP|int|string $num, GMP|int|string $exponent, GMP|int|string $modulus): GMP
-----
FUNCTION gmp_prob_prime
-----
Variants: 1
    /**
     * @param GMP|int|string $num
     * @param int $repetitions
     * @return int
     */
    function gmp_prob_prime(GMP|int|string $num, int $repetitions = 10): int
-----
FUNCTION gmp_random
-----
MISSING
-----
FUNCTION gmp_random_bits
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $bits
     * @return GMP
     */
    function gmp_random_bits(int $bits): GMP
-----
FUNCTION gmp_random_range
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GMP|int|string $min
     * @param GMP|int|string $max
     * @return GMP
     */
    function gmp_random_range(GMP|int|string $min, GMP|int|string $max): GMP
-----
FUNCTION gmp_random_seed
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param GMP|int|string $seed
     * @return void
     */
    function gmp_random_seed(GMP|int|string $seed): void
-----
FUNCTION gmp_root
-----
Variants: 1
    /**
     * @param GMP|int|string $num
     * @param int $nth
     * @return GMP
     */
    function gmp_root(GMP|int|string $num, int $nth): GMP
-----
FUNCTION gmp_rootrem
-----
Variants: 1
    /**
     * @param GMP|int|string $num
     * @param int $nth
     * @return array<int, GMP>
     */
    function gmp_rootrem(GMP|int|string $num, int $nth): array<int, GMP>
-----
FUNCTION gmp_scan0
-----
Variants: 1
    /**
     * @param GMP|int|string $num1
     * @param int $start
     * @return int
     */
    function gmp_scan0(GMP|int|string $num1, int $start): int
-----
FUNCTION gmp_scan1
-----
Variants: 1
    /**
     * @param GMP|int|string $num1
     * @param int $start
     * @return int
     */
    function gmp_scan1(GMP|int|string $num1, int $start): int
-----
FUNCTION gmp_setbit
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param GMP $num
     * @param int $index
     * @param bool $value
     * @return void
     */
    function gmp_setbit(GMP $num, int $index, bool $value = true): void
-----
FUNCTION gmp_sign
-----
Variants: 1
    /**
     * @param GMP|int|string $num
     * @return int
     */
    function gmp_sign(GMP|int|string $num): int
-----
FUNCTION gmp_sqrt
-----
Variants: 1
    /**
     * @param GMP|int|string $num
     * @return GMP
     */
    function gmp_sqrt(GMP|int|string $num): GMP
-----
FUNCTION gmp_sqrtrem
-----
Variants: 1
    /**
     * @param GMP|int|string $num
     * @return array
     */
    function gmp_sqrtrem(GMP|int|string $num): array
-----
FUNCTION gmp_strval
-----
Variants: 1
    /**
     * @param GMP|int|string $num
     * @param int $base
     * @return string
     */
    function gmp_strval(GMP|int|string $num, int $base = 10): string
-----
FUNCTION gmp_sub
-----
Variants: 1
    /**
     * @param GMP|int|string $num1
     * @param GMP|int|string $num2
     * @return GMP
     */
    function gmp_sub(GMP|int|string $num1, GMP|int|string $num2): GMP
-----
FUNCTION gmp_testbit
-----
Variants: 1
    /**
     * @param GMP|int|string $num
     * @param int $index
     * @return bool
     */
    function gmp_testbit(GMP|int|string $num, int $index): bool
-----
FUNCTION gmp_xor
-----
Variants: 1
    /**
     * @param GMP|int|string $num1
     * @param GMP|int|string $num2
     * @return GMP
     */
    function gmp_xor(GMP|int|string $num1, GMP|int|string $num2): GMP
-----
FUNCTION gmstrftime
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $format
     * @param int|null $timestamp
     * @return string|false
     */
    function gmstrftime(string $format, int|null $timestamp = null): string|false
-----
FUNCTION gnupg_adddecryptkey
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $identifier
     * @param string $fingerprint
     * @param string $passphrase
     * @return bool
     */
    function gnupg_adddecryptkey(resource $identifier, string $fingerprint, string $passphrase): bool
-----
FUNCTION gnupg_addencryptkey
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $identifier
     * @param string $fingerprint
     * @return bool
     */
    function gnupg_addencryptkey(resource $identifier, string $fingerprint): bool
-----
FUNCTION gnupg_addsignkey
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $identifier
     * @param string $fingerprint
     * @param string $passphrase
     * @return bool
     */
    function gnupg_addsignkey(resource $identifier, string $fingerprint, string $passphrase): bool
-----
FUNCTION gnupg_cleardecryptkeys
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $identifier
     * @return bool
     */
    function gnupg_cleardecryptkeys(resource $identifier): bool
-----
FUNCTION gnupg_clearencryptkeys
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $identifier
     * @return bool
     */
    function gnupg_clearencryptkeys(resource $identifier): bool
-----
FUNCTION gnupg_clearsignkeys
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $identifier
     * @return bool
     */
    function gnupg_clearsignkeys(resource $identifier): bool
-----
FUNCTION gnupg_decrypt
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $identifier
     * @param string $text
     * @return string|false
     */
    function gnupg_decrypt(resource $identifier, string $text): string|false
-----
FUNCTION gnupg_decryptverify
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $identifier
     * @param string $text
     * @param string $plaintext
     * @return array
     */
    function gnupg_decryptverify(resource $identifier, string $text, string $plaintext): array
-----
FUNCTION gnupg_deletekey
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $identifier
     * @param string $key
     * @param bool $allow_secret
     * @return bool
     */
    function gnupg_deletekey(resource $identifier, string $key, bool $allow_secret): bool
-----
FUNCTION gnupg_encrypt
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $identifier
     * @param string $plaintext
     * @return string|false
     */
    function gnupg_encrypt(resource $identifier, string $plaintext): string|false
-----
FUNCTION gnupg_encryptsign
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $identifier
     * @param string $plaintext
     * @return string|false
     */
    function gnupg_encryptsign(resource $identifier, string $plaintext): string|false
-----
FUNCTION gnupg_export
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $identifier
     * @param string $fingerprint
     * @return string|false
     */
    function gnupg_export(resource $identifier, string $fingerprint): string|false
-----
FUNCTION gnupg_getengineinfo
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $identifier
     * @return array
     */
    function gnupg_getengineinfo(resource $identifier): array
-----
FUNCTION gnupg_geterror
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $identifier
     * @return string|false
     */
    function gnupg_geterror(resource $identifier): string|false
-----
FUNCTION gnupg_geterrorinfo
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $res
     * @return mixed
     */
    function gnupg_geterrorinfo(mixed $res): mixed
-----
FUNCTION gnupg_getprotocol
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $identifier
     * @return int
     */
    function gnupg_getprotocol(resource $identifier): int
-----
FUNCTION gnupg_gettrustlist
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $identifier
     * @param string $pattern
     * @return array
     */
    function gnupg_gettrustlist(resource $identifier, string $pattern): array
-----
FUNCTION gnupg_import
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $identifier
     * @param string $keydata
     * @return array|false
     */
    function gnupg_import(resource $identifier, string $keydata): array|false
-----
FUNCTION gnupg_init
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return resource
     */
    function gnupg_init(): resource
-----
FUNCTION gnupg_keyinfo
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $identifier
     * @param string $pattern
     * @return array|false
     */
    function gnupg_keyinfo(resource $identifier, string $pattern): array|false
-----
FUNCTION gnupg_listsignatures
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $identifier
     * @param string $keyid
     * @return array|null
     */
    function gnupg_listsignatures(resource $identifier, string $keyid): array|null
-----
FUNCTION gnupg_setarmor
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $identifier
     * @param int $armor
     * @return bool
     */
    function gnupg_setarmor(resource $identifier, int $armor): bool
-----
FUNCTION gnupg_seterrormode
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $identifier
     * @param int $errormode
     * @return void
     */
    function gnupg_seterrormode(resource $identifier, int $errormode): void
-----
FUNCTION gnupg_setsignmode
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $identifier
     * @param int $signmode
     * @return bool
     */
    function gnupg_setsignmode(resource $identifier, int $signmode): bool
-----
FUNCTION gnupg_sign
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $identifier
     * @param string $plaintext
     * @return string|false
     */
    function gnupg_sign(resource $identifier, string $plaintext): string|false
-----
FUNCTION gnupg_verify
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $identifier
     * @param string $signed_text
     * @param string|false $signature
     * @param string $plaintext
     * @return array|false
     */
    function gnupg_verify(resource $identifier, string $signed_text, string|false $signature, string &rw$plaintext = ''): array|false
-----
FUNCTION grapheme_extract
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $haystack
     * @param int $size
     * @param int $type
     * @param int $offset
     * @param int $next
     * @return string|false
     */
    function grapheme_extract(string $haystack, int $size, int $type = 0, int $offset = 0, int &rw$next = null): string|false
-----
FUNCTION grapheme_stripos
-----
Variants: 1
    /**
     * @param string $haystack
     * @param string $needle
     * @param int $offset
     * @return int|false
     */
    function grapheme_stripos(string $haystack, string $needle, int $offset = 0): int|false
-----
FUNCTION grapheme_stristr
-----
Variants: 1
    /**
     * @param string $haystack
     * @param string $needle
     * @param bool $beforeNeedle
     * @return string|false
     */
    function grapheme_stristr(string $haystack, string $needle, bool $beforeNeedle = false): string|false
-----
FUNCTION grapheme_strlen
-----
Variants: 1
    /**
     * @param string $string
     * @return int<0, max>|false|null
     */
    function grapheme_strlen(string $string): int<0, max>|false|null
-----
FUNCTION grapheme_strpos
-----
Variants: 1
    /**
     * @param string $haystack
     * @param string $needle
     * @param int $offset
     * @return int|false
     */
    function grapheme_strpos(string $haystack, string $needle, int $offset = 0): int|false
-----
FUNCTION grapheme_strripos
-----
Variants: 1
    /**
     * @param string $haystack
     * @param string $needle
     * @param int $offset
     * @return int|false
     */
    function grapheme_strripos(string $haystack, string $needle, int $offset = 0): int|false
-----
FUNCTION grapheme_strrpos
-----
Variants: 1
    /**
     * @param string $haystack
     * @param string $needle
     * @param int $offset
     * @return int|false
     */
    function grapheme_strrpos(string $haystack, string $needle, int $offset = 0): int|false
-----
FUNCTION grapheme_strstr
-----
Variants: 1
    /**
     * @param string $haystack
     * @param string $needle
     * @param bool $beforeNeedle
     * @return string|false
     */
    function grapheme_strstr(string $haystack, string $needle, bool $beforeNeedle = false): string|false
-----
FUNCTION grapheme_substr
-----
Variants: 1
    /**
     * @param string $string
     * @param int $offset
     * @param int|null $length
     * @return string|false
     */
    function grapheme_substr(string $string, int $offset, int|null $length = null): string|false
-----
FUNCTION gregoriantojd
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $month
     * @param int $day
     * @param int $year
     * @return int
     */
    function gregoriantojd(int $month, int $day, int $year): int
-----
FUNCTION gzclose
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @return bool
     */
    function gzclose(resource $stream): bool
-----
FUNCTION gzcompress
-----
Variants: 1
    /**
     * @param string $data
     * @param int $level
     * @param int $encoding
     * @return string|false
     */
    function gzcompress(string $data, int $level = -1, int $encoding = 15): string|false
-----
FUNCTION gzdecode
-----
Variants: 1
    /**
     * @param string $data
     * @param int $max_length
     * @return string|false
     */
    function gzdecode(string $data, int $max_length = 0): string|false
-----
FUNCTION gzdeflate
-----
Variants: 1
    /**
     * @param string $data
     * @param int $level
     * @param int $encoding
     * @return string|false
     */
    function gzdeflate(string $data, int $level = -1, int $encoding = -15): string|false
-----
FUNCTION gzencode
-----
Variants: 1
    /**
     * @param string $data
     * @param int $level
     * @param int $encoding
     * @return string|false
     */
    function gzencode(string $data, int $level = -1, int $encoding = 31): string|false
-----
FUNCTION gzeof
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @return bool
     */
    function gzeof(resource $stream): bool
-----
FUNCTION gzfile
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param int $use_include_path
     * @return array<int, string>|false
     */
    function gzfile(string $filename, int $use_include_path = 0): array<int, string>|false
-----
FUNCTION gzgetc
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @return string|false
     */
    function gzgetc(resource $stream): string|false
-----
FUNCTION gzgets
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @param int|null $length
     * @return string|false
     */
    function gzgets(resource $stream, int|null $length = null): string|false
-----
FUNCTION gzgetss
-----
MISSING
-----
FUNCTION gzinflate
-----
Variants: 1
    /**
     * @param string $data
     * @param int $max_length
     * @return string|false
     */
    function gzinflate(string $data, int $max_length = 0): string|false
-----
FUNCTION gzopen
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param string $mode
     * @param int $use_include_path
     * @return resource|false
     */
    function gzopen(string $filename, string $mode, int $use_include_path = 0): resource|false
-----
FUNCTION gzpassthru
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @return int
     */
    function gzpassthru(resource $stream): int
-----
FUNCTION gzputs
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @param string $data
     * @param int|null $length
     * @return int|false
     */
    function gzputs(resource $stream, string $data, int|null $length = null): int|false
-----
FUNCTION gzread
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @param int $length
     * @return string|false
     */
    function gzread(resource $stream, int $length): string|false
-----
FUNCTION gzrewind
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @return bool
     */
    function gzrewind(resource $stream): bool
-----
FUNCTION gzseek
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @param int $offset
     * @param int $whence
     * @return int
     */
    function gzseek(resource $stream, int $offset, int $whence = 0): int
-----
FUNCTION gztell
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @return int|false
     */
    function gztell(resource $stream): int|false
-----
FUNCTION gzuncompress
-----
Variants: 1
    /**
     * @param string $data
     * @param int $max_length
     * @return string|false
     */
    function gzuncompress(string $data, int $max_length = 0): string|false
-----
FUNCTION gzwrite
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @param string $data
     * @param int|null $length
     * @return int|false
     */
    function gzwrite(resource $stream, string $data, int|null $length = null): int|false
-----
FUNCTION hash
-----
Variants: 1
    /**
     * @param string $algo
     * @param string $data
     * @param bool $binary
     * @param array $options
     * @return non-empty-string
     */
    function hash(string $algo, string $data, bool $binary = false, array $options = array{}): non-empty-string
-----
FUNCTION hash_algos
-----
Variants: 1
    /**
     * @return array<int, non-empty-string>
     */
    function hash_algos(): array<int, non-empty-string>
-----
FUNCTION hash_copy
-----
Variants: 1
    /**
     * @param HashContext $context
     * @return HashContext
     */
    function hash_copy(HashContext $context): HashContext
-----
FUNCTION hash_equals
-----
Variants: 1
    /**
     * @param string $known_string
     * @param string $user_string
     * @return bool
     */
    function hash_equals(string $known_string, string $user_string): bool
-----
FUNCTION hash_file
-----
Variants: 1
    /**
     * @param string $algo
     * @param string $filename
     * @param bool $binary
     * @param array $options
     * @return non-empty-string|false
     */
    function hash_file(string $algo, string $filename, bool $binary = false, array $options = array{}): non-empty-string|false
-----
FUNCTION hash_final
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param HashContext $context
     * @param bool $binary
     * @return non-empty-string
     */
    function hash_final(HashContext $context, bool $binary = false): non-empty-string
-----
FUNCTION hash_hkdf
-----
Variants: 1
    /**
     * @param string $algo
     * @param string $key
     * @param int $length
     * @param string $info
     * @param string $salt
     * @return non-empty-string
     */
    function hash_hkdf(string $algo, string $key, int $length = 0, string $info = '', string $salt = ''): non-empty-string
-----
FUNCTION hash_hmac
-----
Variants: 1
    /**
     * @param string $algo
     * @param string $data
     * @param string $key
     * @param bool $binary
     * @return non-empty-string
     */
    function hash_hmac(string $algo, string $data, string $key, bool $binary = false): non-empty-string
-----
FUNCTION hash_hmac_algos
-----
Variants: 1
    /**
     * @return array<int, non-empty-string>
     */
    function hash_hmac_algos(): array<int, non-empty-string>
-----
FUNCTION hash_hmac_file
-----
Variants: 1
    /**
     * @param string $algo
     * @param string $filename
     * @param string $key
     * @param bool $binary
     * @return non-empty-string|false
     */
    function hash_hmac_file(string $algo, string $filename, string $key, bool $binary = false): non-empty-string|false
-----
FUNCTION hash_init
-----
Variants: 1
    /**
     * @param string $algo
     * @param int $flags
     * @param string $key
     * @param array $options
     * @return HashContext
     */
    function hash_init(string $algo, int $flags = 0, string $key = '', array $options = array{}): HashContext
-----
FUNCTION hash_pbkdf2
-----
Variants: 1
    /**
     * @param string $algo
     * @param string $password
     * @param string $salt
     * @param int $iterations
     * @param int $length
     * @param bool $binary
     * @param array $options
     * @return non-empty-string
     */
    function hash_pbkdf2(string $algo, string $password, string $salt, int $iterations, int $length = 0, bool $binary = false, array $options = array{}): non-empty-string
-----
FUNCTION hash_update
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param HashContext $context
     * @param string $data
     * @return bool
     */
    function hash_update(HashContext $context, string $data): bool
-----
FUNCTION hash_update_file
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param HashContext $context
     * @param string $filename
     * @param resource|null $stream_context
     * @return bool
     */
    function hash_update_file(HashContext $context, string $filename, resource|null $stream_context = null): bool
-----
FUNCTION hash_update_stream
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param HashContext $context
     * @param resource $stream
     * @param int $length
     * @return int
     */
    function hash_update_stream(HashContext $context, resource $stream, int $length = -1): int
-----
FUNCTION header
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $header
     * @param bool $replace
     * @param int $response_code
     * @return void
     */
    function header(string $header, bool $replace = true, int $response_code = 0): void
-----
FUNCTION header_register_callback
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @return bool
     */
    function header_register_callback(callable(): mixed $callback): bool
-----
FUNCTION header_remove
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string|null $name
     * @return void
     */
    function header_remove(string|null $name = null): void
-----
FUNCTION headers_list
-----
Variants: 1
    /**
     * @return array<int, non-empty-string>
     */
    function headers_list(): array<int, non-empty-string>
-----
FUNCTION headers_sent
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param-out string $filename
     * @param int $line
     * @param-out int $line
     * @return bool
     */
    function headers_sent(string &rw$filename = null, int &rw$line = null): bool
-----
FUNCTION hebrev
-----
Variants: 1
    /**
     * @param string $string
     * @param int $max_chars_per_line
     * @return string
     */
    function hebrev(string $string, int $max_chars_per_line = 0): string
-----
FUNCTION hebrevc
-----
MISSING
-----
FUNCTION hex2bin
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $string
     * @return string|false
     */
    function hex2bin(string $string): string|false
-----
FUNCTION hexdec
-----
Variants: 1
    /**
     * @param string $hex_string
     * @return float|int
     */
    function hexdec(string $hex_string): float|int
-----
FUNCTION highlight_file
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param bool $return
     * @return ($return is true ? string : bool)
     */
    function highlight_file(string $filename, bool $return = false): bool|string
-----
FUNCTION highlight_string
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $string
     * @param bool $return
     * @return ($return is true ? string : bool)
     */
    function highlight_string(string $string, bool $return = false): bool|string
-----
FUNCTION hrtime
-----
Variants: 1
    /**
     * @param bool $as_number
     * @return array{int, int}|float|int|false
     */
    function hrtime(bool $as_number = false): array{int, int}|float|int|false
-----
FUNCTION html_entity_decode
-----
Variants: 1
    /**
     * @param string $string
     * @param int $flags
     * @param string|null $encoding
     * @return string
     */
    function html_entity_decode(string $string, int $flags = 11, string|null $encoding = null): string
-----
FUNCTION htmlentities
-----
Variants: 1
    /**
     * @param string $string
     * @param int $flags
     * @param string|null $encoding
     * @param bool $double_encode
     * @return string
     */
    function htmlentities(string $string, int $flags = 11, string|null $encoding = null, bool $double_encode = true): string
-----
FUNCTION htmlspecialchars
-----
Variants: 1
    /**
     * @param string $string
     * @param int $flags
     * @param string|null $encoding
     * @param bool $double_encode
     * @return string
     */
    function htmlspecialchars(string $string, int $flags = 11, string|null $encoding = null, bool $double_encode = true): string
-----
FUNCTION htmlspecialchars_decode
-----
Variants: 1
    /**
     * @param string $string
     * @param int $flags
     * @return string
     */
    function htmlspecialchars_decode(string $string, int $flags = 11): string
-----
FUNCTION http://
-----
MISSING
-----
FUNCTION http_build_query
-----
Variants: 1
    /**
     * @param array|object $data
     * @param string $numeric_prefix
     * @param string|null $arg_separator
     * @param int $encoding_type
     * @return string
     */
    function http_build_query(array|object $data, string $numeric_prefix = '', string|null $arg_separator = null, int $encoding_type = 1): string
-----
FUNCTION http_response_code
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $response_code
     * @return bool|int
     */
    function http_response_code(int $response_code = 0): bool|int
-----
FUNCTION hypot
-----
Variants: 1
    /**
     * @param float $x
     * @param float $y
     * @return float
     */
    function hypot(float $x, float $y): float
-----
FUNCTION ibase_add_user
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $service_handle
     * @param string $user_name
     * @param string $password
     * @param string $first_name
     * @param string $middle_name
     * @param string $last_name
     * @return bool
     */
    function ibase_add_user(resource $service_handle, string $user_name, string $password, string $first_name = null, string $middle_name = null, string $last_name = null): bool
-----
FUNCTION ibase_affected_rows
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $link_identifier
     * @return int
     */
    function ibase_affected_rows(resource $link_identifier = null): int
-----
FUNCTION ibase_backup
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $service_handle
     * @param string $source_db
     * @param string $dest_file
     * @param int $options
     * @param bool $verbose
     * @return mixed
     */
    function ibase_backup(resource $service_handle, string $source_db, string $dest_file, int $options = null, bool $verbose = null): mixed
-----
FUNCTION ibase_blob_add
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $blob_handle
     * @param string $data
     * @return void
     */
    function ibase_blob_add(resource $blob_handle, string $data): void
-----
FUNCTION ibase_blob_cancel
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $blob_handle
     * @return bool
     */
    function ibase_blob_cancel(resource $blob_handle): bool
-----
FUNCTION ibase_blob_close
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $blob_handle
     * @return string
     */
    function ibase_blob_close(resource $blob_handle): string
-----
FUNCTION ibase_blob_create
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $link_identifier
     * @return resource
     */
    function ibase_blob_create(resource $link_identifier = null): resource
-----
FUNCTION ibase_blob_echo
-----
Has side-effects: Maybe
Variants: 2
    /**
     * @param mixed $link_identifier
     * @param string $blob_id
     * @return bool
     */
    function ibase_blob_echo(mixed $link_identifier, string $blob_id): bool
    /**
     * @param string $blob_id
     * @return bool
     */
    function ibase_blob_echo(string $blob_id): bool
-----
FUNCTION ibase_blob_get
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $blob_handle
     * @param int $len
     * @return string
     */
    function ibase_blob_get(resource $blob_handle, int $len): string
-----
FUNCTION ibase_blob_import
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $link_identifier
     * @param mixed $file_handle
     * @return string
     */
    function ibase_blob_import(mixed $link_identifier, mixed $file_handle): string
-----
FUNCTION ibase_blob_info
-----
Has side-effects: Maybe
Variants: 2
    /**
     * @param mixed $link_identifier
     * @param string $blob_id
     * @return array
     */
    function ibase_blob_info(mixed $link_identifier, string $blob_id): array
    /**
     * @param string $blob_id
     * @return array
     */
    function ibase_blob_info(string $blob_id): array
-----
FUNCTION ibase_blob_open
-----
Has side-effects: Maybe
Variants: 2
    /**
     * @param mixed $link_identifier
     * @param string $blob_id
     * @return resource|false
     */
    function ibase_blob_open(mixed $link_identifier, string $blob_id): resource|false
    /**
     * @param string $blob_id
     * @return resource
     */
    function ibase_blob_open(string $blob_id): resource
-----
FUNCTION ibase_close
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $link_identifier
     * @return bool
     */
    function ibase_close(resource $link_identifier = null): bool
-----
FUNCTION ibase_commit
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $link_identifier
     * @return bool
     */
    function ibase_commit(resource $link_identifier = null): bool
-----
FUNCTION ibase_commit_ret
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $link_identifier
     * @return bool
     */
    function ibase_commit_ret(resource $link_identifier = null): bool
-----
FUNCTION ibase_connect
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $database
     * @param string $username
     * @param string $password
     * @param string $charset
     * @param int $buffers
     * @param int $dialect
     * @param string $role
     * @return resource
     */
    function ibase_connect(string $database = null, string $username = null, string $password = null, string $charset = null, int $buffers = null, int $dialect = null, string $role = null): resource
-----
FUNCTION ibase_db_info
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $service_handle
     * @param string $db
     * @param int $action
     * @param int $argument
     * @return string
     */
    function ibase_db_info(resource $service_handle, string $db, int $action, int $argument = null): string
-----
FUNCTION ibase_delete_user
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $service_handle
     * @param string $user_name
     * @param string $password
     * @param string $first_name
     * @param string $middle_name
     * @param string $last_name
     * @return bool
     */
    function ibase_delete_user(resource $service_handle, string $user_name, string $password, string $first_name, string $middle_name, string $last_name): bool
-----
FUNCTION ibase_drop_db
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $link_identifier
     * @return bool
     */
    function ibase_drop_db(resource $link_identifier = null): bool
-----
FUNCTION ibase_errcode
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return int
     */
    function ibase_errcode(): int
-----
FUNCTION ibase_errmsg
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return string
     */
    function ibase_errmsg(): string
-----
FUNCTION ibase_execute
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $query
     * @param mixed $bind_arg
     * @param mixed $args
     * @return resource
     */
    function ibase_execute(resource $query, mixed $bind_arg, mixed ...$args): resource
-----
FUNCTION ibase_fetch_assoc
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $result
     * @param int $fetch_flags
     * @return array
     */
    function ibase_fetch_assoc(resource $result, int $fetch_flags = null): array
-----
FUNCTION ibase_fetch_object
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $result
     * @param int $fetch_flags
     * @return object
     */
    function ibase_fetch_object(resource $result, int $fetch_flags = null): object
-----
FUNCTION ibase_fetch_row
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $result
     * @param int $fetch_flags
     * @return array
     */
    function ibase_fetch_row(resource $result, int $fetch_flags = null): array
-----
FUNCTION ibase_field_info
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $query_result
     * @param int $field_number
     * @return array
     */
    function ibase_field_info(resource $query_result, int $field_number): array
-----
FUNCTION ibase_free_event_handler
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $event
     * @return bool
     */
    function ibase_free_event_handler(resource $event): bool
-----
FUNCTION ibase_free_query
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $query
     * @return bool
     */
    function ibase_free_query(resource $query): bool
-----
FUNCTION ibase_free_result
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $result
     * @return bool
     */
    function ibase_free_result(resource $result): bool
-----
FUNCTION ibase_gen_id
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $generator
     * @param int $increment
     * @param resource $link_identifier
     * @return int
     */
    function ibase_gen_id(string $generator, int $increment = null, resource $link_identifier = null): int
-----
FUNCTION ibase_maintain_db
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $service_handle
     * @param string $db
     * @param int $action
     * @param int $argument
     * @return bool
     */
    function ibase_maintain_db(resource $service_handle, string $db, int $action, int $argument = null): bool
-----
FUNCTION ibase_modify_user
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $service_handle
     * @param string $user_name
     * @param string $password
     * @param string $first_name
     * @param string $middle_name
     * @param string $last_name
     * @return bool
     */
    function ibase_modify_user(resource $service_handle, string $user_name, string $password, string $first_name = null, string $middle_name = null, string $last_name = null): bool
-----
FUNCTION ibase_name_result
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $result
     * @param string $name
     * @return bool
     */
    function ibase_name_result(resource $result, string $name): bool
-----
FUNCTION ibase_num_fields
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $query_result
     * @return int
     */
    function ibase_num_fields(resource $query_result): int
-----
FUNCTION ibase_num_params
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $query
     * @return int
     */
    function ibase_num_params(resource $query): int
-----
FUNCTION ibase_param_info
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $query
     * @param int $field_number
     * @return array
     */
    function ibase_param_info(resource $query, int $field_number): array
-----
FUNCTION ibase_pconnect
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $database
     * @param string $username
     * @param string $password
     * @param string $charset
     * @param int $buffers
     * @param int $dialect
     * @param string $role
     * @return resource
     */
    function ibase_pconnect(string $database = null, string $username = null, string $password = null, string $charset = null, int $buffers = null, int $dialect = null, string $role = null): resource
-----
FUNCTION ibase_prepare
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $link_identifier
     * @param string $query
     * @param mixed $trans_identifier
     * @return resource
     */
    function ibase_prepare(mixed $link_identifier, string $query, mixed $trans_identifier): resource
-----
FUNCTION ibase_query
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $link_identifier
     * @param string $string
     * @param int $bind_arg
     * @param mixed $args
     * @return resource
     */
    function ibase_query(resource $link_identifier = null, string $string, int $bind_arg = null, mixed ...$args): resource
-----
FUNCTION ibase_restore
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $service_handle
     * @param string $source_file
     * @param string $dest_db
     * @param int $options
     * @param bool $verbose
     * @return mixed
     */
    function ibase_restore(resource $service_handle, string $source_file, string $dest_db, int $options = null, bool $verbose = null): mixed
-----
FUNCTION ibase_rollback
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $link_identifier
     * @return bool
     */
    function ibase_rollback(resource $link_identifier = null): bool
-----
FUNCTION ibase_rollback_ret
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $link_identifier
     * @return bool
     */
    function ibase_rollback_ret(resource $link_identifier = null): bool
-----
FUNCTION ibase_server_info
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $service_handle
     * @param int $action
     * @return string
     */
    function ibase_server_info(resource $service_handle, int $action): string
-----
FUNCTION ibase_service_attach
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $host
     * @param string $dba_username
     * @param string $dba_password
     * @return resource
     */
    function ibase_service_attach(string $host, string $dba_username, string $dba_password): resource
-----
FUNCTION ibase_service_detach
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $service_handle
     * @return bool
     */
    function ibase_service_detach(resource $service_handle): bool
-----
FUNCTION ibase_set_event_handler
-----
Has side-effects: Maybe
Variants: 2
    /**
     * @param mixed $link_identifier
     * @param callable(): mixed $callback
     * @param string $event
     * @param mixed $args
     * @return resource
     */
    function ibase_set_event_handler(mixed $link_identifier, callable(): mixed $callback, string $event = null, mixed ...$args): resource
    /**
     * @param callable(): mixed $callback
     * @param string $event
     * @param mixed $args
     * @return resource
     */
    function ibase_set_event_handler(callable(): mixed $callback, string $event, mixed ...$args = null): resource
-----
FUNCTION ibase_trans
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $trans_args
     * @param mixed $link_identifier
     * @param mixed $args
     * @return resource
     */
    function ibase_trans(int $trans_args = null, mixed $link_identifier = null, mixed ...$args): resource
-----
FUNCTION ibase_wait_event
-----
Has side-effects: Maybe
Variants: 2
    /**
     * @param mixed $link_identifier
     * @param string $event
     * @param mixed $args
     * @return string
     */
    function ibase_wait_event(mixed $link_identifier, string $event, mixed ...$args): string
    /**
     * @param string $event
     * @param mixed $args
     * @return string
     */
    function ibase_wait_event(string $event, mixed ...$args): string
-----
FUNCTION iconv
-----
Variants: 1
    /**
     * @param string $from_encoding
     * @param string $to_encoding
     * @param string $string
     * @return string|false
     */
    function iconv(string $from_encoding, string $to_encoding, string $string): string|false
-----
FUNCTION iconv_get_encoding
-----
Variants: 1
    /**
     * @param string $type
     * @return array|string|false
     */
    function iconv_get_encoding(string $type = 'all'): array|string|false
-----
FUNCTION iconv_mime_decode
-----
Variants: 1
    /**
     * @param string $string
     * @param int $mode
     * @param string|null $encoding
     * @return string|false
     */
    function iconv_mime_decode(string $string, int $mode = 0, string|null $encoding = null): string|false
-----
FUNCTION iconv_mime_decode_headers
-----
Variants: 1
    /**
     * @param string $headers
     * @param int $mode
     * @param string|null $encoding
     * @return array|false
     */
    function iconv_mime_decode_headers(string $headers, int $mode = 0, string|null $encoding = null): array|false
-----
FUNCTION iconv_mime_encode
-----
Variants: 1
    /**
     * @param string $field_name
     * @param string $field_value
     * @param array $options
     * @return string|false
     */
    function iconv_mime_encode(string $field_name, string $field_value, array $options = array{}): string|false
-----
FUNCTION iconv_set_encoding
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $type
     * @param string $encoding
     * @return bool
     */
    function iconv_set_encoding(string $type, string $encoding): bool
-----
FUNCTION iconv_strlen
-----
Variants: 1
    /**
     * @param string $string
     * @param string|null $encoding
     * @return int<0, max>|false
     */
    function iconv_strlen(string $string, string|null $encoding = null): int<0, max>|false
-----
FUNCTION iconv_strpos
-----
Variants: 1
    /**
     * @param string $haystack
     * @param string $needle
     * @param int $offset
     * @param string|null $encoding
     * @return int|false
     */
    function iconv_strpos(string $haystack, string $needle, int $offset = 0, string|null $encoding = null): int|false
-----
FUNCTION iconv_strrpos
-----
Variants: 1
    /**
     * @param string $haystack
     * @param string $needle
     * @param string|null $encoding
     * @return int|false
     */
    function iconv_strrpos(string $haystack, string $needle, string|null $encoding = null): int|false
-----
FUNCTION iconv_substr
-----
Variants: 1
    /**
     * @param string $string
     * @param int $offset
     * @param int|null $length
     * @param string|null $encoding
     * @return string|false
     */
    function iconv_substr(string $string, int $offset, int|null $length = null, string|null $encoding = null): string|false
-----
FUNCTION idate
-----
Variants: 1
    /**
     * @param string $format
     * @param int|null $timestamp
     * @return int|false
     */
    function idate(string $format, int|null $timestamp = null): int|false
-----
FUNCTION idn_to_ascii
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $domain
     * @param int $flags
     * @param int $variant
     * @param array $idna_info
     * @return string|false
     */
    function idn_to_ascii(string $domain, int $flags = 0, int $variant = 1, array &rw$idna_info = null): string|false
-----
FUNCTION idn_to_utf8
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $domain
     * @param int $flags
     * @param int $variant
     * @param array $idna_info
     * @return string|false
     */
    function idn_to_utf8(string $domain, int $flags = 0, int $variant = 1, array &rw$idna_info = null): string|false
-----
FUNCTION igbinary_serialize
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $value
     * @return string|null
     */
    function igbinary_serialize(mixed $value): string|null
-----
FUNCTION igbinary_unserialize
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $str
     * @return mixed
     */
    function igbinary_unserialize(string $str): mixed
-----
FUNCTION ignore_user_abort
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param bool|null $enable
     * @return 0|1
     */
    function ignore_user_abort(bool|null $enable = null): 0|1
-----
FUNCTION image2wbmp
-----
MISSING
-----
FUNCTION image_type_to_extension
-----
Variants: 1
    /**
     * @param int $image_type
     * @param bool $include_dot
     * @return string|false
     */
    function image_type_to_extension(int $image_type, bool $include_dot = true): string|false
-----
FUNCTION image_type_to_mime_type
-----
Variants: 1
    /**
     * @param int $image_type
     * @return string
     */
    function image_type_to_mime_type(int $image_type): string
-----
FUNCTION imageaffine
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param array $affine
     * @param array|null $clip
     * @return GdImage|false
     */
    function imageaffine(GdImage $image, array $affine, array|null $clip = null): GdImage|false
-----
FUNCTION imageaffinematrixconcat
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $matrix1
     * @param array $matrix2
     * @return array{float, float, float, float, float, float}|false
     */
    function imageaffinematrixconcat(array $matrix1, array $matrix2): array{float, float, float, float, float, float}|false
-----
FUNCTION imageaffinematrixget
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $type
     * @param array|float $options
     * @return array{float, float, float, float, float, float}|false
     */
    function imageaffinematrixget(int $type, array|float $options): array{float, float, float, float, float, float}|false
-----
FUNCTION imagealphablending
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param bool $enable
     * @return bool
     */
    function imagealphablending(GdImage $image, bool $enable): bool
-----
FUNCTION imageantialias
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param bool $enable
     * @return bool
     */
    function imageantialias(GdImage $image, bool $enable): bool
-----
FUNCTION imagearc
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param int $center_x
     * @param int $center_y
     * @param int $width
     * @param int $height
     * @param int $start_angle
     * @param int $end_angle
     * @param int $color
     * @return bool
     */
    function imagearc(GdImage $image, int $center_x, int $center_y, int $width, int $height, int $start_angle, int $end_angle, int $color): bool
-----
FUNCTION imageavif
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param resource|string|null $file
     * @param int $quality
     * @param int $speed
     * @return bool
     */
    function imageavif(GdImage $image, resource|string|null $file = null, int $quality = -1, int $speed = -1): bool
-----
FUNCTION imagebmp
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param resource|string|null $file
     * @param bool $compressed
     * @return bool
     */
    function imagebmp(GdImage $image, resource|string|null $file = null, bool $compressed = true): bool
-----
FUNCTION imagechar
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param GdFont|int $font
     * @param int $x
     * @param int $y
     * @param string $char
     * @param int $color
     * @return bool
     */
    function imagechar(GdImage $image, GdFont|int $font, int $x, int $y, string $char, int $color): bool
-----
FUNCTION imagecharup
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param GdFont|int $font
     * @param int $x
     * @param int $y
     * @param string $char
     * @param int $color
     * @return bool
     */
    function imagecharup(GdImage $image, GdFont|int $font, int $x, int $y, string $char, int $color): bool
-----
FUNCTION imagecolorallocate
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param int $red
     * @param int $green
     * @param int $blue
     * @return int|false
     */
    function imagecolorallocate(GdImage $image, int $red, int $green, int $blue): int|false
-----
FUNCTION imagecolorallocatealpha
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param int $red
     * @param int $green
     * @param int $blue
     * @param int $alpha
     * @return int|false
     */
    function imagecolorallocatealpha(GdImage $image, int $red, int $green, int $blue, int $alpha): int|false
-----
FUNCTION imagecolorat
-----
Variants: 1
    /**
     * @param GdImage $image
     * @param int $x
     * @param int $y
     * @return int|false
     */
    function imagecolorat(GdImage $image, int $x, int $y): int|false
-----
FUNCTION imagecolorclosest
-----
Variants: 1
    /**
     * @param GdImage $image
     * @param int $red
     * @param int $green
     * @param int $blue
     * @return int
     */
    function imagecolorclosest(GdImage $image, int $red, int $green, int $blue): int
-----
FUNCTION imagecolorclosestalpha
-----
Variants: 1
    /**
     * @param GdImage $image
     * @param int $red
     * @param int $green
     * @param int $blue
     * @param int $alpha
     * @return int
     */
    function imagecolorclosestalpha(GdImage $image, int $red, int $green, int $blue, int $alpha): int
-----
FUNCTION imagecolorclosesthwb
-----
Variants: 1
    /**
     * @param GdImage $image
     * @param int $red
     * @param int $green
     * @param int $blue
     * @return int
     */
    function imagecolorclosesthwb(GdImage $image, int $red, int $green, int $blue): int
-----
FUNCTION imagecolordeallocate
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param int $color
     * @return bool
     */
    function imagecolordeallocate(GdImage $image, int $color): bool
-----
FUNCTION imagecolorexact
-----
Variants: 1
    /**
     * @param GdImage $image
     * @param int $red
     * @param int $green
     * @param int $blue
     * @return int
     */
    function imagecolorexact(GdImage $image, int $red, int $green, int $blue): int
-----
FUNCTION imagecolorexactalpha
-----
Variants: 1
    /**
     * @param GdImage $image
     * @param int $red
     * @param int $green
     * @param int $blue
     * @param int $alpha
     * @return int
     */
    function imagecolorexactalpha(GdImage $image, int $red, int $green, int $blue, int $alpha): int
-----
FUNCTION imagecolormatch
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image1
     * @param GdImage $image2
     * @return bool
     */
    function imagecolormatch(GdImage $image1, GdImage $image2): bool
-----
FUNCTION imagecolorresolve
-----
Variants: 1
    /**
     * @param GdImage $image
     * @param int $red
     * @param int $green
     * @param int $blue
     * @return int
     */
    function imagecolorresolve(GdImage $image, int $red, int $green, int $blue): int
-----
FUNCTION imagecolorresolvealpha
-----
Variants: 1
    /**
     * @param GdImage $image
     * @param int $red
     * @param int $green
     * @param int $blue
     * @param int $alpha
     * @return int
     */
    function imagecolorresolvealpha(GdImage $image, int $red, int $green, int $blue, int $alpha): int
-----
FUNCTION imagecolorset
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param int $color
     * @param int $red
     * @param int $green
     * @param int $blue
     * @param int $alpha
     * @return false|null
     */
    function imagecolorset(GdImage $image, int $color, int $red, int $green, int $blue, int $alpha = 0): false|null
-----
FUNCTION imagecolorsforindex
-----
Variants: 1
    /**
     * @param GdImage $image
     * @param int $color
     * @return array
     */
    function imagecolorsforindex(GdImage $image, int $color): array
-----
FUNCTION imagecolorstotal
-----
Variants: 1
    /**
     * @param GdImage $image
     * @return int
     */
    function imagecolorstotal(GdImage $image): int
-----
FUNCTION imagecolortransparent
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param int|null $color
     * @return int
     */
    function imagecolortransparent(GdImage $image, int|null $color = null): int
-----
FUNCTION imageconvolution
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param array $matrix
     * @param float $divisor
     * @param float $offset
     * @return bool
     */
    function imageconvolution(GdImage $image, array $matrix, float $divisor, float $offset): bool
-----
FUNCTION imagecopy
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $dst_image
     * @param GdImage $src_image
     * @param int $dst_x
     * @param int $dst_y
     * @param int $src_x
     * @param int $src_y
     * @param int $src_width
     * @param int $src_height
     * @return bool
     */
    function imagecopy(GdImage $dst_image, GdImage $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_width, int $src_height): bool
-----
FUNCTION imagecopymerge
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $dst_image
     * @param GdImage $src_image
     * @param int $dst_x
     * @param int $dst_y
     * @param int $src_x
     * @param int $src_y
     * @param int $src_width
     * @param int $src_height
     * @param int $pct
     * @return bool
     */
    function imagecopymerge(GdImage $dst_image, GdImage $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_width, int $src_height, int $pct): bool
-----
FUNCTION imagecopymergegray
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $dst_image
     * @param GdImage $src_image
     * @param int $dst_x
     * @param int $dst_y
     * @param int $src_x
     * @param int $src_y
     * @param int $src_width
     * @param int $src_height
     * @param int $pct
     * @return bool
     */
    function imagecopymergegray(GdImage $dst_image, GdImage $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_width, int $src_height, int $pct): bool
-----
FUNCTION imagecopyresampled
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $dst_image
     * @param GdImage $src_image
     * @param int $dst_x
     * @param int $dst_y
     * @param int $src_x
     * @param int $src_y
     * @param int $dst_width
     * @param int $dst_height
     * @param int $src_width
     * @param int $src_height
     * @return bool
     */
    function imagecopyresampled(GdImage $dst_image, GdImage $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $dst_width, int $dst_height, int $src_width, int $src_height): bool
-----
FUNCTION imagecopyresized
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $dst_image
     * @param GdImage $src_image
     * @param int $dst_x
     * @param int $dst_y
     * @param int $src_x
     * @param int $src_y
     * @param int $dst_width
     * @param int $dst_height
     * @param int $src_width
     * @param int $src_height
     * @return bool
     */
    function imagecopyresized(GdImage $dst_image, GdImage $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $dst_width, int $dst_height, int $src_width, int $src_height): bool
-----
FUNCTION imagecreate
-----
Variants: 1
    /**
     * @param int $width
     * @param int $height
     * @return GdImage|false
     */
    function imagecreate(int $width, int $height): GdImage|false
-----
FUNCTION imagecreatefromavif
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @return GdImage|false
     */
    function imagecreatefromavif(string $filename): GdImage|false
-----
FUNCTION imagecreatefrombmp
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @return GdImage|false
     */
    function imagecreatefrombmp(string $filename): GdImage|false
-----
FUNCTION imagecreatefromgd
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @return GdImage|false
     */
    function imagecreatefromgd(string $filename): GdImage|false
-----
FUNCTION imagecreatefromgd2
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @return GdImage|false
     */
    function imagecreatefromgd2(string $filename): GdImage|false
-----
FUNCTION imagecreatefromgd2part
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param int $x
     * @param int $y
     * @param int $width
     * @param int $height
     * @return GdImage|false
     */
    function imagecreatefromgd2part(string $filename, int $x, int $y, int $width, int $height): GdImage|false
-----
FUNCTION imagecreatefromgif
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @return GdImage|false
     */
    function imagecreatefromgif(string $filename): GdImage|false
-----
FUNCTION imagecreatefromjpeg
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @return GdImage|false
     */
    function imagecreatefromjpeg(string $filename): GdImage|false
-----
FUNCTION imagecreatefrompng
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @return GdImage|false
     */
    function imagecreatefrompng(string $filename): GdImage|false
-----
FUNCTION imagecreatefromstring
-----
Variants: 1
    /**
     * @param string $data
     * @return GdImage|false
     */
    function imagecreatefromstring(string $data): GdImage|false
-----
FUNCTION imagecreatefromtga
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @return GdImage|false
     */
    function imagecreatefromtga(string $filename): GdImage|false
-----
FUNCTION imagecreatefromwbmp
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @return GdImage|false
     */
    function imagecreatefromwbmp(string $filename): GdImage|false
-----
FUNCTION imagecreatefromwebp
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @return GdImage|false
     */
    function imagecreatefromwebp(string $filename): GdImage|false
-----
FUNCTION imagecreatefromxbm
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @return GdImage|false
     */
    function imagecreatefromxbm(string $filename): GdImage|false
-----
FUNCTION imagecreatefromxpm
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @return GdImage|false
     */
    function imagecreatefromxpm(string $filename): GdImage|false
-----
FUNCTION imagecreatetruecolor
-----
Variants: 1
    /**
     * @param int $width
     * @param int $height
     * @return GdImage|false
     */
    function imagecreatetruecolor(int $width, int $height): GdImage|false
-----
FUNCTION imagecrop
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param array $rectangle
     * @return GdImage|false
     */
    function imagecrop(GdImage $image, array $rectangle): GdImage|false
-----
FUNCTION imagecropauto
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param int $mode
     * @param float $threshold
     * @param int $color
     * @return GdImage|false
     */
    function imagecropauto(GdImage $image, int $mode = 0, float $threshold = 0.5, int $color = -1): GdImage|false
-----
FUNCTION imagedashedline
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param int $x1
     * @param int $y1
     * @param int $x2
     * @param int $y2
     * @param int $color
     * @return bool
     */
    function imagedashedline(GdImage $image, int $x1, int $y1, int $x2, int $y2, int $color): bool
-----
FUNCTION imagedestroy
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @return bool
     */
    function imagedestroy(GdImage $image): bool
-----
FUNCTION imageellipse
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param int $center_x
     * @param int $center_y
     * @param int $width
     * @param int $height
     * @param int $color
     * @return bool
     */
    function imageellipse(GdImage $image, int $center_x, int $center_y, int $width, int $height, int $color): bool
-----
FUNCTION imagefill
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param int $x
     * @param int $y
     * @param int $color
     * @return bool
     */
    function imagefill(GdImage $image, int $x, int $y, int $color): bool
-----
FUNCTION imagefilledarc
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param int $center_x
     * @param int $center_y
     * @param int $width
     * @param int $height
     * @param int $start_angle
     * @param int $end_angle
     * @param int $color
     * @param int $style
     * @return bool
     */
    function imagefilledarc(GdImage $image, int $center_x, int $center_y, int $width, int $height, int $start_angle, int $end_angle, int $color, int $style): bool
-----
FUNCTION imagefilledellipse
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param int $center_x
     * @param int $center_y
     * @param int $width
     * @param int $height
     * @param int $color
     * @return bool
     */
    function imagefilledellipse(GdImage $image, int $center_x, int $center_y, int $width, int $height, int $color): bool
-----
FUNCTION imagefilledpolygon
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param array $points
     * @param int $num_points_or_color
     * @param int|null $color
     * @return bool
     */
    function imagefilledpolygon(GdImage $image, array $points, int $num_points_or_color, int|null $color = null): bool
-----
FUNCTION imagefilledrectangle
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param int $x1
     * @param int $y1
     * @param int $x2
     * @param int $y2
     * @param int $color
     * @return bool
     */
    function imagefilledrectangle(GdImage $image, int $x1, int $y1, int $x2, int $y2, int $color): bool
-----
FUNCTION imagefilltoborder
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param int $x
     * @param int $y
     * @param int $border_color
     * @param int $color
     * @return bool
     */
    function imagefilltoborder(GdImage $image, int $x, int $y, int $border_color, int $color): bool
-----
FUNCTION imagefilter
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param int $filter
     * @param array|bool|float|int $args
     * @return bool
     */
    function imagefilter(GdImage $image, int $filter, array|bool|float|int ...$args): bool
-----
FUNCTION imageflip
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param int $mode
     * @return bool
     */
    function imageflip(GdImage $image, int $mode): bool
-----
FUNCTION imagefontheight
-----
Variants: 1
    /**
     * @param GdFont|int $font
     * @return int
     */
    function imagefontheight(GdFont|int $font): int
-----
FUNCTION imagefontwidth
-----
Variants: 1
    /**
     * @param GdFont|int $font
     * @return int
     */
    function imagefontwidth(GdFont|int $font): int
-----
FUNCTION imageftbbox
-----
Variants: 1
    /**
     * @param float $size
     * @param float $angle
     * @param string $font_filename
     * @param string $string
     * @param array $options
     * @return array|false
     */
    function imageftbbox(float $size, float $angle, string $font_filename, string $string, array $options = array{}): array|false
-----
FUNCTION imagefttext
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param float $size
     * @param float $angle
     * @param int $x
     * @param int $y
     * @param int $color
     * @param string $font_filename
     * @param string $text
     * @param array $options
     * @return array|false
     */
    function imagefttext(GdImage $image, float $size, float $angle, int $x, int $y, int $color, string $font_filename, string $text, array $options = array{}): array|false
-----
FUNCTION imagegammacorrect
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param float $input_gamma
     * @param float $output_gamma
     * @return bool
     */
    function imagegammacorrect(GdImage $image, float $input_gamma, float $output_gamma): bool
-----
FUNCTION imagegd
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param string|null $file
     * @return bool
     */
    function imagegd(GdImage $image, string|null $file = null): bool
-----
FUNCTION imagegd2
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param string|null $file
     * @param int $chunk_size
     * @param int $mode
     * @return bool
     */
    function imagegd2(GdImage $image, string|null $file = null, int $chunk_size = *ERROR*, int $mode = *ERROR*): bool
-----
FUNCTION imagegetclip
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @return array<int, int>
     */
    function imagegetclip(GdImage $image): array<int, int>
-----
FUNCTION imagegetinterpolation
-----
Variants: 1
    /**
     * @param GdImage $image
     * @return int
     */
    function imagegetinterpolation(GdImage $image): int
-----
FUNCTION imagegif
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param resource|string|null $file
     * @return bool
     */
    function imagegif(GdImage $image, resource|string|null $file = null): bool
-----
FUNCTION imagegrabscreen
-----
Variants: 1
    /**
     * @return GdImage|false
     */
    function imagegrabscreen(): GdImage|false
-----
FUNCTION imagegrabwindow
-----
Variants: 1
    /**
     * @param int $handle
     * @param bool $client_area
     * @return GdImage|false
     */
    function imagegrabwindow(int $handle, bool $client_area = false): GdImage|false
-----
FUNCTION imageinterlace
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param bool|null $enable
     * @return bool
     */
    function imageinterlace(GdImage $image, bool|null $enable = null): bool
-----
FUNCTION imageistruecolor
-----
Variants: 1
    /**
     * @param GdImage $image
     * @return bool
     */
    function imageistruecolor(GdImage $image): bool
-----
FUNCTION imagejpeg
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param resource|string|null $file
     * @param int $quality
     * @return bool
     */
    function imagejpeg(GdImage $image, resource|string|null $file = null, int $quality = -1): bool
-----
FUNCTION imagelayereffect
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param int $effect
     * @return bool
     */
    function imagelayereffect(GdImage $image, int $effect): bool
-----
FUNCTION imageline
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param int $x1
     * @param int $y1
     * @param int $x2
     * @param int $y2
     * @param int $color
     * @return bool
     */
    function imageline(GdImage $image, int $x1, int $y1, int $x2, int $y2, int $color): bool
-----
FUNCTION imageloadfont
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @return GdFont|false
     */
    function imageloadfont(string $filename): GdFont|false
-----
FUNCTION imageopenpolygon
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param array $points
     * @param int $num_points_or_color
     * @param int|null $color
     * @return bool
     */
    function imageopenpolygon(GdImage $image, array $points, int $num_points_or_color, int|null $color = null): bool
-----
FUNCTION imagepalettecopy
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param GdImage $dst
     * @param GdImage $src
     * @return void
     */
    function imagepalettecopy(GdImage $dst, GdImage $src): void
-----
FUNCTION imagepalettetotruecolor
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @return bool
     */
    function imagepalettetotruecolor(GdImage $image): bool
-----
FUNCTION imagepng
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param resource|string|null $file
     * @param int $quality
     * @param int $filters
     * @return bool
     */
    function imagepng(GdImage $image, resource|string|null $file = null, int $quality = -1, int $filters = -1): bool
-----
FUNCTION imagepolygon
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param array $points
     * @param int $num_points_or_color
     * @param int|null $color
     * @return bool
     */
    function imagepolygon(GdImage $image, array $points, int $num_points_or_color, int|null $color = null): bool
-----
FUNCTION imagerectangle
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param int $x1
     * @param int $y1
     * @param int $x2
     * @param int $y2
     * @param int $color
     * @return bool
     */
    function imagerectangle(GdImage $image, int $x1, int $y1, int $x2, int $y2, int $color): bool
-----
FUNCTION imageresolution
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param int|null $resolution_x
     * @param int|null $resolution_y
     * @return array|bool
     */
    function imageresolution(GdImage $image, int|null $resolution_x = null, int|null $resolution_y = null): array|bool
-----
FUNCTION imagerotate
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param float $angle
     * @param int $background_color
     * @param bool $ignore_transparent
     * @return GdImage|false
     */
    function imagerotate(GdImage $image, float $angle, int $background_color, bool $ignore_transparent = false): GdImage|false
-----
FUNCTION imagesavealpha
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param bool $enable
     * @return bool
     */
    function imagesavealpha(GdImage $image, bool $enable): bool
-----
FUNCTION imagescale
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param int $width
     * @param int $height
     * @param int $mode
     * @return GdImage|false
     */
    function imagescale(GdImage $image, int $width, int $height = -1, int $mode = 3): GdImage|false
-----
FUNCTION imagesetbrush
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param GdImage $brush
     * @return bool
     */
    function imagesetbrush(GdImage $image, GdImage $brush): bool
-----
FUNCTION imagesetclip
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param int $x1
     * @param int $y1
     * @param int $x2
     * @param int $y2
     * @return bool
     */
    function imagesetclip(GdImage $image, int $x1, int $y1, int $x2, int $y2): bool
-----
FUNCTION imagesetinterpolation
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param int $method
     * @return bool
     */
    function imagesetinterpolation(GdImage $image, int $method = 3): bool
-----
FUNCTION imagesetpixel
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param int $x
     * @param int $y
     * @param int $color
     * @return bool
     */
    function imagesetpixel(GdImage $image, int $x, int $y, int $color): bool
-----
FUNCTION imagesetstyle
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param array $style
     * @return bool
     */
    function imagesetstyle(GdImage $image, array $style): bool
-----
FUNCTION imagesetthickness
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param int $thickness
     * @return bool
     */
    function imagesetthickness(GdImage $image, int $thickness): bool
-----
FUNCTION imagesettile
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param GdImage $tile
     * @return bool
     */
    function imagesettile(GdImage $image, GdImage $tile): bool
-----
FUNCTION imagestring
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param GdFont|int $font
     * @param int $x
     * @param int $y
     * @param string $string
     * @param int $color
     * @return bool
     */
    function imagestring(GdImage $image, GdFont|int $font, int $x, int $y, string $string, int $color): bool
-----
FUNCTION imagestringup
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param GdFont|int $font
     * @param int $x
     * @param int $y
     * @param string $string
     * @param int $color
     * @return bool
     */
    function imagestringup(GdImage $image, GdFont|int $font, int $x, int $y, string $string, int $color): bool
-----
FUNCTION imagesx
-----
Variants: 1
    /**
     * @param GdImage $image
     * @return int
     */
    function imagesx(GdImage $image): int
-----
FUNCTION imagesy
-----
Variants: 1
    /**
     * @param GdImage $image
     * @return int
     */
    function imagesy(GdImage $image): int
-----
FUNCTION imagetruecolortopalette
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param bool $dither
     * @param int $num_colors
     * @return bool
     */
    function imagetruecolortopalette(GdImage $image, bool $dither, int $num_colors): bool
-----
FUNCTION imagettfbbox
-----
Variants: 1
    /**
     * @param float $size
     * @param float $angle
     * @param string $font_filename
     * @param string $string
     * @param array $options
     * @return array|false
     */
    function imagettfbbox(float $size, float $angle, string $font_filename, string $string, array $options = array{}): array|false
-----
FUNCTION imagettftext
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param float $size
     * @param float $angle
     * @param int $x
     * @param int $y
     * @param int $color
     * @param string $font_filename
     * @param string $text
     * @param array $options
     * @return array|false
     */
    function imagettftext(GdImage $image, float $size, float $angle, int $x, int $y, int $color, string $font_filename, string $text, array $options = array{}): array|false
-----
FUNCTION imagetypes
-----
Variants: 1
    /**
     * @return int
     */
    function imagetypes(): int
-----
FUNCTION imagewbmp
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param resource|string|null $file
     * @param int|null $foreground_color
     * @return bool
     */
    function imagewbmp(GdImage $image, resource|string|null $file = null, int|null $foreground_color = null): bool
-----
FUNCTION imagewebp
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param resource|string|null $file
     * @param int $quality
     * @return bool
     */
    function imagewebp(GdImage $image, resource|string|null $file = null, int $quality = -1): bool
-----
FUNCTION imagexbm
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param GdImage $image
     * @param string|null $filename
     * @param int|null $foreground_color
     * @return bool
     */
    function imagexbm(GdImage $image, string|null $filename, int|null $foreground_color = null): bool
-----
FUNCTION imap_8bit
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $string
     * @return string|false
     */
    function imap_8bit(string $string): string|false
-----
FUNCTION imap_alerts
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return array|false
     */
    function imap_alerts(): array|false
-----
FUNCTION imap_append
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param string $folder
     * @param string $message
     * @param string|null $options
     * @param string|null $internal_date
     * @return bool
     */
    function imap_append(IMAP\Connection $imap, string $folder, string $message, string|null $options = null, string|null $internal_date = null): bool
-----
FUNCTION imap_base64
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $string
     * @return string|false
     */
    function imap_base64(string $string): string|false
-----
FUNCTION imap_binary
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $string
     * @return string|false
     */
    function imap_binary(string $string): string|false
-----
FUNCTION imap_body
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param int $message_num
     * @param int $flags
     * @return string|false
     */
    function imap_body(IMAP\Connection $imap, int $message_num, int $flags = 0): string|false
-----
FUNCTION imap_bodystruct
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param int $message_num
     * @param string $section
     * @return stdClass|false
     */
    function imap_bodystruct(IMAP\Connection $imap, int $message_num, string $section): stdClass|false
-----
FUNCTION imap_check
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @return stdClass|false
     */
    function imap_check(IMAP\Connection $imap): stdClass|false
-----
FUNCTION imap_clearflag_full
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param string $sequence
     * @param string $flag
     * @param int $options
     * @return bool
     */
    function imap_clearflag_full(IMAP\Connection $imap, string $sequence, string $flag, int $options = 0): bool
-----
FUNCTION imap_close
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param int $flags
     * @return bool
     */
    function imap_close(IMAP\Connection $imap, int $flags = 0): bool
-----
FUNCTION imap_create
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param string $mailbox
     * @return bool
     */
    function imap_create(IMAP\Connection $imap, string $mailbox): bool
-----
FUNCTION imap_createmailbox
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param string $mailbox
     * @return bool
     */
    function imap_createmailbox(IMAP\Connection $imap, string $mailbox): bool
-----
FUNCTION imap_delete
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param string $message_nums
     * @param int $flags
     * @return bool
     */
    function imap_delete(IMAP\Connection $imap, string $message_nums, int $flags = 0): bool
-----
FUNCTION imap_deletemailbox
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param string $mailbox
     * @return bool
     */
    function imap_deletemailbox(IMAP\Connection $imap, string $mailbox): bool
-----
FUNCTION imap_errors
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return array|false
     */
    function imap_errors(): array|false
-----
FUNCTION imap_expunge
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @return bool
     */
    function imap_expunge(IMAP\Connection $imap): bool
-----
FUNCTION imap_fetch_overview
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param string $sequence
     * @param int $flags
     * @return array|false
     */
    function imap_fetch_overview(IMAP\Connection $imap, string $sequence, int $flags = 0): array|false
-----
FUNCTION imap_fetchbody
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param int $message_num
     * @param string $section
     * @param int $flags
     * @return string|false
     */
    function imap_fetchbody(IMAP\Connection $imap, int $message_num, string $section, int $flags = 0): string|false
-----
FUNCTION imap_fetchheader
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param int $message_num
     * @param int $flags
     * @return string|false
     */
    function imap_fetchheader(IMAP\Connection $imap, int $message_num, int $flags = 0): string|false
-----
FUNCTION imap_fetchmime
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param int $message_num
     * @param string $section
     * @param int $flags
     * @return string|false
     */
    function imap_fetchmime(IMAP\Connection $imap, int $message_num, string $section, int $flags = 0): string|false
-----
FUNCTION imap_fetchstructure
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param int $message_num
     * @param int $flags
     * @return stdClass|false
     */
    function imap_fetchstructure(IMAP\Connection $imap, int $message_num, int $flags = 0): stdClass|false
-----
FUNCTION imap_fetchtext
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param int $message_num
     * @param int $flags
     * @return string|false
     */
    function imap_fetchtext(IMAP\Connection $imap, int $message_num, int $flags = 0): string|false
-----
FUNCTION imap_gc
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param int $flags
     * @return bool
     */
    function imap_gc(IMAP\Connection $imap, int $flags): bool
-----
FUNCTION imap_get_quota
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param string $quota_root
     * @return array|false
     */
    function imap_get_quota(IMAP\Connection $imap, string $quota_root): array|false
-----
FUNCTION imap_get_quotaroot
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param string $mailbox
     * @return array|false
     */
    function imap_get_quotaroot(IMAP\Connection $imap, string $mailbox): array|false
-----
FUNCTION imap_getacl
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param string $mailbox
     * @return array|false
     */
    function imap_getacl(IMAP\Connection $imap, string $mailbox): array|false
-----
FUNCTION imap_getmailboxes
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param string $reference
     * @param string $pattern
     * @return array|false
     */
    function imap_getmailboxes(IMAP\Connection $imap, string $reference, string $pattern): array|false
-----
FUNCTION imap_getsubscribed
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param string $reference
     * @param string $pattern
     * @return array|false
     */
    function imap_getsubscribed(IMAP\Connection $imap, string $reference, string $pattern): array|false
-----
FUNCTION imap_header
-----
MISSING
-----
FUNCTION imap_headerinfo
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param int $message_num
     * @param int $from_length
     * @param int $subject_length
     * @return stdClass|false
     */
    function imap_headerinfo(IMAP\Connection $imap, int $message_num, int $from_length = 0, int $subject_length = 0): stdClass|false
-----
FUNCTION imap_headers
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @return array|false
     */
    function imap_headers(IMAP\Connection $imap): array|false
-----
FUNCTION imap_is_open
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @return bool
     */
    function imap_is_open(IMAP\Connection $imap): bool
-----
FUNCTION imap_last_error
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return string|false
     */
    function imap_last_error(): string|false
-----
FUNCTION imap_list
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param string $reference
     * @param string $pattern
     * @return array|false
     */
    function imap_list(IMAP\Connection $imap, string $reference, string $pattern): array|false
-----
FUNCTION imap_listmailbox
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param string $reference
     * @param string $pattern
     * @return array|false
     */
    function imap_listmailbox(IMAP\Connection $imap, string $reference, string $pattern): array|false
-----
FUNCTION imap_listscan
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param string $reference
     * @param string $pattern
     * @param string $content
     * @return array|false
     */
    function imap_listscan(IMAP\Connection $imap, string $reference, string $pattern, string $content): array|false
-----
FUNCTION imap_listsubscribed
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param string $reference
     * @param string $pattern
     * @return array|false
     */
    function imap_listsubscribed(IMAP\Connection $imap, string $reference, string $pattern): array|false
-----
FUNCTION imap_lsub
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param string $reference
     * @param string $pattern
     * @return array|false
     */
    function imap_lsub(IMAP\Connection $imap, string $reference, string $pattern): array|false
-----
FUNCTION imap_mail
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $to
     * @param string $subject
     * @param string $message
     * @param string|null $additional_headers
     * @param string|null $cc
     * @param string|null $bcc
     * @param string|null $return_path
     * @return bool
     */
    function imap_mail(string $to, string $subject, string $message, string|null $additional_headers = null, string|null $cc = null, string|null $bcc = null, string|null $return_path = null): bool
-----
FUNCTION imap_mail_compose
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $envelope
     * @param array $bodies
     * @return string|false
     */
    function imap_mail_compose(array $envelope, array $bodies): string|false
-----
FUNCTION imap_mail_copy
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param string $message_nums
     * @param string $mailbox
     * @param int $flags
     * @return bool
     */
    function imap_mail_copy(IMAP\Connection $imap, string $message_nums, string $mailbox, int $flags = 0): bool
-----
FUNCTION imap_mail_move
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param string $message_nums
     * @param string $mailbox
     * @param int $flags
     * @return bool
     */
    function imap_mail_move(IMAP\Connection $imap, string $message_nums, string $mailbox, int $flags = 0): bool
-----
FUNCTION imap_mailboxmsginfo
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @return stdClass
     */
    function imap_mailboxmsginfo(IMAP\Connection $imap): stdClass
-----
FUNCTION imap_mime_header_decode
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $string
     * @return array|false
     */
    function imap_mime_header_decode(string $string): array|false
-----
FUNCTION imap_msgno
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param int $message_uid
     * @return int
     */
    function imap_msgno(IMAP\Connection $imap, int $message_uid): int
-----
FUNCTION imap_mutf7_to_utf8
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $string
     * @return string|false
     */
    function imap_mutf7_to_utf8(string $string): string|false
-----
FUNCTION imap_num_msg
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @return int|false
     */
    function imap_num_msg(IMAP\Connection $imap): int|false
-----
FUNCTION imap_num_recent
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @return int
     */
    function imap_num_recent(IMAP\Connection $imap): int
-----
FUNCTION imap_open
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $mailbox
     * @param string $user
     * @param string $password
     * @param int $flags
     * @param int $retries
     * @param array $options
     * @return IMAP\Connection|false
     */
    function imap_open(string $mailbox, string $user, string $password, int $flags = 0, int $retries = 0, array $options = array{}): IMAP\Connection|false
-----
FUNCTION imap_ping
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @return bool
     */
    function imap_ping(IMAP\Connection $imap): bool
-----
FUNCTION imap_qprint
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $string
     * @return string|false
     */
    function imap_qprint(string $string): string|false
-----
FUNCTION imap_rename
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param string $from
     * @param string $to
     * @return bool
     */
    function imap_rename(IMAP\Connection $imap, string $from, string $to): bool
-----
FUNCTION imap_renamemailbox
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param string $from
     * @param string $to
     * @return bool
     */
    function imap_renamemailbox(IMAP\Connection $imap, string $from, string $to): bool
-----
FUNCTION imap_reopen
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param string $mailbox
     * @param int $flags
     * @param int $retries
     * @return bool
     */
    function imap_reopen(IMAP\Connection $imap, string $mailbox, int $flags = 0, int $retries = 0): bool
-----
FUNCTION imap_rfc822_parse_adrlist
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $string
     * @param string $default_hostname
     * @return array
     */
    function imap_rfc822_parse_adrlist(string $string, string $default_hostname): array
-----
FUNCTION imap_rfc822_parse_headers
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $headers
     * @param string $default_hostname
     * @return stdClass
     */
    function imap_rfc822_parse_headers(string $headers, string $default_hostname = 'UNKNOWN'): stdClass
-----
FUNCTION imap_rfc822_write_address
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $mailbox
     * @param string $hostname
     * @param string $personal
     * @return string|false
     */
    function imap_rfc822_write_address(string $mailbox, string $hostname, string $personal): string|false
-----
FUNCTION imap_savebody
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param int|resource|string $file
     * @param int $message_num
     * @param string $section
     * @param int $flags
     * @return bool
     */
    function imap_savebody(IMAP\Connection $imap, int|resource|string $file, int $message_num, string $section = '', int $flags = 0): bool
-----
FUNCTION imap_scan
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param string $reference
     * @param string $pattern
     * @param string $content
     * @return array|false
     */
    function imap_scan(IMAP\Connection $imap, string $reference, string $pattern, string $content): array|false
-----
FUNCTION imap_scanmailbox
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param string $reference
     * @param string $pattern
     * @param string $content
     * @return array|false
     */
    function imap_scanmailbox(IMAP\Connection $imap, string $reference, string $pattern, string $content): array|false
-----
FUNCTION imap_search
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param string $criteria
     * @param int $flags
     * @param string $charset
     * @return array|false
     */
    function imap_search(IMAP\Connection $imap, string $criteria, int $flags = 2, string $charset = ''): array|false
-----
FUNCTION imap_set_quota
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param string $quota_root
     * @param int $mailbox_size
     * @return bool
     */
    function imap_set_quota(IMAP\Connection $imap, string $quota_root, int $mailbox_size): bool
-----
FUNCTION imap_setacl
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param string $mailbox
     * @param string $user_id
     * @param string $rights
     * @return bool
     */
    function imap_setacl(IMAP\Connection $imap, string $mailbox, string $user_id, string $rights): bool
-----
FUNCTION imap_setflag_full
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param string $sequence
     * @param string $flag
     * @param int $options
     * @return bool
     */
    function imap_setflag_full(IMAP\Connection $imap, string $sequence, string $flag, int $options = 0): bool
-----
FUNCTION imap_sort
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param int $criteria
     * @param bool $reverse
     * @param int $flags
     * @param string|null $search_criteria
     * @param string|null $charset
     * @return array|false
     */
    function imap_sort(IMAP\Connection $imap, int $criteria, bool $reverse, int $flags = 0, string|null $search_criteria = null, string|null $charset = null): array|false
-----
FUNCTION imap_status
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param string $mailbox
     * @param int $flags
     * @return stdClass|false
     */
    function imap_status(IMAP\Connection $imap, string $mailbox, int $flags): stdClass|false
-----
FUNCTION imap_subscribe
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param string $mailbox
     * @return bool
     */
    function imap_subscribe(IMAP\Connection $imap, string $mailbox): bool
-----
FUNCTION imap_thread
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param int $flags
     * @return array|false
     */
    function imap_thread(IMAP\Connection $imap, int $flags = 2): array|false
-----
FUNCTION imap_timeout
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $timeout_type
     * @param int $timeout
     * @return bool|int
     */
    function imap_timeout(int $timeout_type, int $timeout = -1): bool|int
-----
FUNCTION imap_uid
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param int $message_num
     * @return int|false
     */
    function imap_uid(IMAP\Connection $imap, int $message_num): int|false
-----
FUNCTION imap_undelete
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param string $message_nums
     * @param int $flags
     * @return bool
     */
    function imap_undelete(IMAP\Connection $imap, string $message_nums, int $flags = 0): bool
-----
FUNCTION imap_unsubscribe
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param IMAP\Connection $imap
     * @param string $mailbox
     * @return bool
     */
    function imap_unsubscribe(IMAP\Connection $imap, string $mailbox): bool
-----
FUNCTION imap_utf7_decode
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $string
     * @return string|false
     */
    function imap_utf7_decode(string $string): string|false
-----
FUNCTION imap_utf7_encode
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $string
     * @return string
     */
    function imap_utf7_encode(string $string): string
-----
FUNCTION imap_utf8
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $mime_encoded_text
     * @return string
     */
    function imap_utf8(string $mime_encoded_text): string
-----
FUNCTION imap_utf8_to_mutf7
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $string
     * @return string|false
     */
    function imap_utf8_to_mutf7(string $string): string|false
-----
FUNCTION implode
-----
Variants: 1
    /**
     * @param array|string $separator
     * @param array|null $array
     * @return string
     */
    function implode(array|string $separator, array|null $array = null): string
-----
FUNCTION in_array
-----
Variants: 1
    /**
     * @param mixed $needle
     * @param array $haystack
     * @param bool $strict
     * @return bool
     */
    function in_array(mixed $needle, array $haystack, bool $strict = false): bool
-----
FUNCTION inet_ntop
-----
Variants: 1
    /**
     * @param string $ip
     * @return string|false
     */
    function inet_ntop(string $ip): string|false
-----
FUNCTION inet_pton
-----
Variants: 1
    /**
     * @param string $ip
     * @return string|false
     */
    function inet_pton(string $ip): string|false
-----
FUNCTION inflate_add
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param InflateContext $context
     * @param string $data
     * @param int $flush_mode
     * @return string|false
     */
    function inflate_add(InflateContext $context, string $data, int $flush_mode = 2): string|false
-----
FUNCTION inflate_get_read_len
-----
Variants: 1
    /**
     * @param InflateContext $context
     * @return int
     */
    function inflate_get_read_len(InflateContext $context): int
-----
FUNCTION inflate_get_status
-----
Variants: 1
    /**
     * @param InflateContext $context
     * @return int
     */
    function inflate_get_status(InflateContext $context): int
-----
FUNCTION inflate_init
-----
Variants: 1
    /**
     * @param int $encoding
     * @param array $options
     * @return InflateContext|false
     */
    function inflate_init(int $encoding, array $options = array{}): InflateContext|false
-----
FUNCTION ini_alter
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $option
     * @param bool|float|int|string|null $value
     * @return string|false
     */
    function ini_alter(string $option, bool|float|int|string|null $value): string|false
-----
FUNCTION ini_get
-----
Variants: 1
    /**
     * @param string $option
     * @return string|false
     */
    function ini_get(string $option): string|false
-----
FUNCTION ini_get_all
-----
Variants: 1
    /**
     * @param string|null $extension
     * @param bool $details
     * @return array|false
     */
    function ini_get_all(string|null $extension = null, bool $details = true): array|false
-----
FUNCTION ini_parse_quantity
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $shorthand
     * @return int
     */
    function ini_parse_quantity(string $shorthand): int
-----
FUNCTION ini_restore
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $option
     * @return void
     */
    function ini_restore(string $option): void
-----
FUNCTION ini_set
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $option
     * @param bool|float|int|string|null $value
     * @return string|false
     */
    function ini_set(string $option, bool|float|int|string|null $value): string|false
-----
FUNCTION inotify_add_watch
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $inotify_instance
     * @param string $pathname
     * @param int $mask
     * @return int<1, max>|false
     */
    function inotify_add_watch(resource $inotify_instance, string $pathname, int $mask): int<1, max>|false
-----
FUNCTION inotify_init
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return resource
     */
    function inotify_init(): resource
-----
FUNCTION inotify_queue_len
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $inotify_instance
     * @return int<0, max>
     */
    function inotify_queue_len(resource $inotify_instance): int<0, max>
-----
FUNCTION inotify_read
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $inotify_instance
     * @return array<int, array{wd: int<1, max>, mask: int<0, max>, cookie: int<0, max>, name: string}>|false
     */
    function inotify_read(resource $inotify_instance): array<int, array{wd: int<1, max>, mask: int<0, max>, cookie: int<0, max>, name: string}>|false
-----
FUNCTION inotify_rm_watch
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $inotify_instance
     * @param int $watch_descriptor
     * @return bool
     */
    function inotify_rm_watch(resource $inotify_instance, int $watch_descriptor): bool
-----
FUNCTION intdiv
-----
Throw type: ArithmeticError
Variants: 1
    /**
     * @param int $num1
     * @param int $num2
     * @return int
     */
    function intdiv(int $num1, int $num2): int
-----
FUNCTION interface_exists
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $interface
     * @param bool $autoload
     * @return bool
     */
    function interface_exists(string $interface, bool $autoload = true): bool
-----
FUNCTION intl_error_name
-----
Variants: 1
    /**
     * @param int $errorCode
     * @return string
     */
    function intl_error_name(int $errorCode): string
-----
FUNCTION intl_get_error_code
-----
Variants: 1
    /**
     * @return int
     */
    function intl_get_error_code(): int
-----
FUNCTION intl_get_error_message
-----
Variants: 1
    /**
     * @return string
     */
    function intl_get_error_message(): string
-----
FUNCTION intl_is_failure
-----
Variants: 1
    /**
     * @param int $errorCode
     * @return bool
     */
    function intl_is_failure(int $errorCode): bool
-----
FUNCTION intval
-----
Variants: 1
    /**
     * @param array|bool|float|int|resource|string|null $value
     * @param int $base
     * @return int
     */
    function intval(array|bool|float|int|resource|string|null $value, int $base = 10): int
-----
FUNCTION ip2long
-----
Variants: 1
    /**
     * @param string $ip
     * @return int|false
     */
    function ip2long(string $ip): int|false
-----
FUNCTION iptcembed
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $iptc_data
     * @param string $filename
     * @param int $spool
     * @return bool|string
     */
    function iptcembed(string $iptc_data, string $filename, int $spool = 0): bool|string
-----
FUNCTION iptcparse
-----
Variants: 1
    /**
     * @param string $iptc_block
     * @return array|false
     */
    function iptcparse(string $iptc_block): array|false
-----
FUNCTION is_a
-----
Variants: 1
    /**
     * @param ($allow_string is false ? object : object|string) $object_or_class
     * @param string $class
     * @param bool $allow_string
     * @return ($allow_string is false ? ($object_or_class is object ? bool : false) : bool)
     */
    function is_a(object|string $object_or_class, string $class, bool $allow_string = false): bool
-----
FUNCTION is_array
-----
Variants: 1
    /**
     * @param mixed $value
     * @return ($value is array ? true : false)
     */
    function is_array(mixed $value): bool
-----
FUNCTION is_bool
-----
Variants: 1
    /**
     * @param mixed $value
     * @return ($value is bool ? true : false)
     */
    function is_bool(mixed $value): bool
-----
FUNCTION is_callable
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $value
     * @param bool $syntax_only
     * @param string $callable_name
     * @param-out callable-string $callable_name
     * @return ($value is callable(): mixed ? true : false)
     */
    function is_callable(mixed $value, bool $syntax_only = false, string &rw$callable_name = null): bool
-----
FUNCTION is_countable
-----
Variants: 1
    /**
     * @param mixed $value
     * @return ($value is array|Countable ? true : false)
     */
    function is_countable(mixed $value): bool
-----
FUNCTION is_dir
-----
Variants: 1
    /**
     * @param string $filename
     * @return bool
     */
    function is_dir(string $filename): bool
-----
FUNCTION is_double
-----
Variants: 1
    /**
     * @param mixed $value
     * @return ($value is float ? true : false)
     */
    function is_double(mixed $value): bool
-----
FUNCTION is_executable
-----
Variants: 1
    /**
     * @param string $filename
     * @return bool
     */
    function is_executable(string $filename): bool
-----
FUNCTION is_file
-----
Variants: 1
    /**
     * @param string $filename
     * @return bool
     */
    function is_file(string $filename): bool
-----
FUNCTION is_finite
-----
Variants: 1
    /**
     * @param float $num
     * @return bool
     */
    function is_finite(float $num): bool
-----
FUNCTION is_float
-----
Variants: 1
    /**
     * @param mixed $value
     * @return ($value is float ? true : false)
     */
    function is_float(mixed $value): bool
-----
FUNCTION is_infinite
-----
Variants: 1
    /**
     * @param float $num
     * @return bool
     */
    function is_infinite(float $num): bool
-----
FUNCTION is_int
-----
Variants: 1
    /**
     * @param mixed $value
     * @return ($value is int ? true : false)
     */
    function is_int(mixed $value): bool
-----
FUNCTION is_integer
-----
Variants: 1
    /**
     * @param mixed $value
     * @return ($value is int ? true : false)
     */
    function is_integer(mixed $value): bool
-----
FUNCTION is_iterable
-----
Variants: 1
    /**
     * @param mixed $value
     * @return ($value is iterable ? true : false)
     */
    function is_iterable(mixed $value): bool
-----
FUNCTION is_link
-----
Variants: 1
    /**
     * @param string $filename
     * @return bool
     */
    function is_link(string $filename): bool
-----
FUNCTION is_long
-----
Variants: 1
    /**
     * @param mixed $value
     * @return ($value is int ? true : false)
     */
    function is_long(mixed $value): bool
-----
FUNCTION is_nan
-----
Variants: 1
    /**
     * @param float $num
     * @return bool
     */
    function is_nan(float $num): bool
-----
FUNCTION is_null
-----
Variants: 1
    /**
     * @param mixed $value
     * @return ($value is null ? true : false)
     */
    function is_null(mixed $value): bool
-----
FUNCTION is_numeric
-----
Variants: 1
    /**
     * @param mixed $value
     * @return ($value is float|int|numeric-string ? true : false)
     */
    function is_numeric(mixed $value): bool
-----
FUNCTION is_object
-----
Variants: 1
    /**
     * @param mixed $value
     * @return ($value is object ? true : false)
     */
    function is_object(mixed $value): bool
-----
FUNCTION is_readable
-----
Variants: 1
    /**
     * @param string $filename
     * @return bool
     */
    function is_readable(string $filename): bool
-----
FUNCTION is_real
-----
Is deprecated: Yes
Variants: 1
    /**
     * @param mixed $var
     * @return ($var is float ? true : false)
     */
    function is_real(mixed $var): bool
-----
FUNCTION is_resource
-----
Variants: 1
    /**
     * @param mixed $value
     * @return bool
     */
    function is_resource(mixed $value): bool
-----
FUNCTION is_scalar
-----
Variants: 1
    /**
     * @param mixed $value
     * @return ($value is bool|float|int|string ? true : false)
     */
    function is_scalar(mixed $value): bool
-----
FUNCTION is_soap_fault
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $object
     * @return bool
     */
    function is_soap_fault(mixed $object): bool
-----
FUNCTION is_string
-----
Variants: 1
    /**
     * @param mixed $value
     * @return ($value is string ? true : false)
     */
    function is_string(mixed $value): bool
-----
FUNCTION is_subclass_of
-----
Variants: 1
    /**
     * @param ($allow_string is false ? object : object|string) $object_or_class
     * @param string $class
     * @param bool $allow_string
     * @return ($allow_string is false ? ($object_or_class is object ? bool : false) : bool)
     */
    function is_subclass_of(object|string $object_or_class, string $class, bool $allow_string = true): bool
-----
FUNCTION is_tainted
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $string
     * @return bool
     */
    function is_tainted(string $string): bool
-----
FUNCTION is_uploaded_file
-----
Variants: 1
    /**
     * @param string $filename
     * @return bool
     */
    function is_uploaded_file(string $filename): bool
-----
FUNCTION is_writable
-----
Variants: 1
    /**
     * @param string $filename
     * @return bool
     */
    function is_writable(string $filename): bool
-----
FUNCTION is_writeable
-----
Variants: 1
    /**
     * @param string $filename
     * @return bool
     */
    function is_writeable(string $filename): bool
-----
FUNCTION isset
-----
MISSING
-----
FUNCTION iterator_apply
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param Traversable $iterator
     * @param callable(): mixed $callback
     * @param array|null $args
     * @return int<0, max>
     */
    function iterator_apply(Traversable $iterator, callable(): mixed $callback, array|null $args = null): int<0, max>
-----
FUNCTION iterator_count
-----
Variants: 1
    /**
     * @param Traversable $iterator
     * @return int<0, max>
     */
    function iterator_count(Traversable $iterator): int<0, max>
-----
FUNCTION iterator_to_array
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param Traversable $iterator
     * @param bool $preserve_keys
     * @return array
     */
    function iterator_to_array(Traversable $iterator, bool $preserve_keys = true): array
-----
FUNCTION jddayofweek
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $julian_day
     * @param int $mode
     * @return int|string
     */
    function jddayofweek(int $julian_day, int $mode = 0): int|string
-----
FUNCTION jdmonthname
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $julian_day
     * @param int $mode
     * @return string
     */
    function jdmonthname(int $julian_day, int $mode): string
-----
FUNCTION jdtofrench
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $julian_day
     * @return string
     */
    function jdtofrench(int $julian_day): string
-----
FUNCTION jdtogregorian
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $julian_day
     * @return string
     */
    function jdtogregorian(int $julian_day): string
-----
FUNCTION jdtojewish
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $julian_day
     * @param bool $hebrew
     * @param int $flags
     * @return string
     */
    function jdtojewish(int $julian_day, bool $hebrew = false, int $flags = 0): string
-----
FUNCTION jdtojulian
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $julian_day
     * @return string
     */
    function jdtojulian(int $julian_day): string
-----
FUNCTION jdtounix
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $julian_day
     * @return int
     */
    function jdtounix(int $julian_day): int
-----
FUNCTION jewishtojd
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $month
     * @param int $day
     * @param int $year
     * @return int
     */
    function jewishtojd(int $month, int $day, int $year): int
-----
FUNCTION join
-----
Variants: 2
    /**
     * @param string $glue
     * @param array $pieces
     * @return string
     */
    function join(string $glue = '', array $pieces): string
    /**
     * @param array $pieces
     * @return string
     */
    function join(array $pieces = ''): string
-----
FUNCTION jpeg2wbmp
-----
MISSING
-----
FUNCTION json_decode
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $json
     * @param bool|null $associative
     * @param int<1, max> $depth
     * @param int $flags
     * @return mixed
     */
    function json_decode(string $json, bool|null $associative = null, int<1, max> $depth = 512, int $flags = 0): mixed
-----
FUNCTION json_encode
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $value
     * @param int $flags
     * @param int<1, max> $depth
     * @return non-empty-string|false
     */
    function json_encode(mixed $value, int $flags = 0, int<1, max> $depth = 512): non-empty-string|false
-----
FUNCTION json_last_error
-----
Variants: 1
    /**
     * @return int
     */
    function json_last_error(): int
-----
FUNCTION json_last_error_msg
-----
Variants: 1
    /**
     * @return string
     */
    function json_last_error_msg(): string
-----
FUNCTION juliantojd
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $month
     * @param int $day
     * @param int $year
     * @return int
     */
    function juliantojd(int $month, int $day, int $year): int
-----
FUNCTION key
-----
Variants: 1
    /**
     * @param array|object $array
     * @return int|string|null
     */
    function key(array|object $array): int|string|null
-----
FUNCTION key_exists
-----
Variants: 1
    /**
     * @param int|string $key
     * @param array $array
     * @return bool
     */
    function key_exists(int|string $key, array $array): bool
-----
FUNCTION krsort
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $array
     * @param int $flags
     * @return true
     */
    function krsort(array &r$array, int $flags = 0): true
-----
FUNCTION ksort
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $array
     * @param int $flags
     * @return true
     */
    function ksort(array &r$array, int $flags = 0): true
-----
FUNCTION lcfirst
-----
Variants: 1
    /**
     * @param string $string
     * @return string
     */
    function lcfirst(string $string): string
-----
FUNCTION lcg_value
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return float
     */
    function lcg_value(): float
-----
FUNCTION lchgrp
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $filename
     * @param int|string $group
     * @return bool
     */
    function lchgrp(string $filename, int|string $group): bool
-----
FUNCTION lchown
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $filename
     * @param int|string $user
     * @return bool
     */
    function lchown(string $filename, int|string $user): bool
-----
FUNCTION ldap_8859_to_t61
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $value
     * @return string|false
     */
    function ldap_8859_to_t61(string $value): string|false
-----
FUNCTION ldap_add
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param string $dn
     * @param array $entry
     * @param array|null $controls
     * @return bool
     */
    function ldap_add(LDAP\Connection $ldap, string $dn, array $entry, array|null $controls = null): bool
-----
FUNCTION ldap_add_ext
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param string $dn
     * @param array $entry
     * @param array|null $controls
     * @return LDAP\Result|false
     */
    function ldap_add_ext(LDAP\Connection $ldap, string $dn, array $entry, array|null $controls = null): LDAP\Result|false
-----
FUNCTION ldap_bind
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param string|null $dn
     * @param string|null $password
     * @return bool
     */
    function ldap_bind(LDAP\Connection $ldap, string|null $dn = null, string|null $password = null): bool
-----
FUNCTION ldap_bind_ext
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param string|null $dn
     * @param string|null $password
     * @param array|null $controls
     * @return LDAP\Result|false
     */
    function ldap_bind_ext(LDAP\Connection $ldap, string|null $dn = null, string|null $password = null, array|null $controls = null): LDAP\Result|false
-----
FUNCTION ldap_close
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @return bool
     */
    function ldap_close(LDAP\Connection $ldap): bool
-----
FUNCTION ldap_compare
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param string $dn
     * @param string $attribute
     * @param string $value
     * @param array|null $controls
     * @return bool|int
     */
    function ldap_compare(LDAP\Connection $ldap, string $dn, string $attribute, string $value, array|null $controls = null): bool|int
-----
FUNCTION ldap_connect
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string|null $uri
     * @param int $port
     * @param string $wallet
     * @param string $password
     * @param int $auth_mode
     * @return LDAP\Connection|false
     */
    function ldap_connect(string|null $uri = null, int $port = 389, string $wallet = *ERROR*, string $password = *ERROR*, int $auth_mode = *ERROR*): LDAP\Connection|false
-----
FUNCTION ldap_control_paged_result
-----
MISSING
-----
FUNCTION ldap_control_paged_result_response
-----
MISSING
-----
FUNCTION ldap_count_entries
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param LDAP\Result $result
     * @return int
     */
    function ldap_count_entries(LDAP\Connection $ldap, LDAP\Result $result): int
-----
FUNCTION ldap_count_references
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param LDAP\Result $result
     * @return int
     */
    function ldap_count_references(LDAP\Connection $ldap, LDAP\Result $result): int
-----
FUNCTION ldap_delete
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param string $dn
     * @param array|null $controls
     * @return bool
     */
    function ldap_delete(LDAP\Connection $ldap, string $dn, array|null $controls = null): bool
-----
FUNCTION ldap_delete_ext
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param string $dn
     * @param array|null $controls
     * @return LDAP\Result|false
     */
    function ldap_delete_ext(LDAP\Connection $ldap, string $dn, array|null $controls = null): LDAP\Result|false
-----
FUNCTION ldap_dn2ufn
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $dn
     * @return string|false
     */
    function ldap_dn2ufn(string $dn): string|false
-----
FUNCTION ldap_err2str
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $errno
     * @return string
     */
    function ldap_err2str(int $errno): string
-----
FUNCTION ldap_errno
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @return int
     */
    function ldap_errno(LDAP\Connection $ldap): int
-----
FUNCTION ldap_error
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @return string
     */
    function ldap_error(LDAP\Connection $ldap): string
-----
FUNCTION ldap_escape
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $value
     * @param string $ignore
     * @param int $flags
     * @return string
     */
    function ldap_escape(string $value, string $ignore = '', int $flags = 0): string
-----
FUNCTION ldap_exop
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param string $request_oid
     * @param string|null $request_data
     * @param array|null $controls
     * @param string $response_data
     * @param string $response_oid
     * @return bool|LDAP\Result
     */
    function ldap_exop(LDAP\Connection $ldap, string $request_oid, string|null $request_data = null, array|null $controls = null, string &rw$response_data = *ERROR*, string &rw$response_oid = null): bool|LDAP\Result
-----
FUNCTION ldap_exop_passwd
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param string $user
     * @param string $old_password
     * @param string $new_password
     * @param array $controls
     * @return bool|string
     */
    function ldap_exop_passwd(LDAP\Connection $ldap, string $user = '', string $old_password = '', string $new_password = '', array $controls = null): bool|string
-----
FUNCTION ldap_exop_refresh
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param string $dn
     * @param int $ttl
     * @return int|false
     */
    function ldap_exop_refresh(LDAP\Connection $ldap, string $dn, int $ttl): int|false
-----
FUNCTION ldap_exop_whoami
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @return string|false
     */
    function ldap_exop_whoami(LDAP\Connection $ldap): string|false
-----
FUNCTION ldap_explode_dn
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $dn
     * @param int $with_attrib
     * @return array|false
     */
    function ldap_explode_dn(string $dn, int $with_attrib): array|false
-----
FUNCTION ldap_first_attribute
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param LDAP\ResultEntry $entry
     * @return string|false
     */
    function ldap_first_attribute(LDAP\Connection $ldap, LDAP\ResultEntry $entry): string|false
-----
FUNCTION ldap_first_entry
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param LDAP\Result $result
     * @return LDAP\ResultEntry|false
     */
    function ldap_first_entry(LDAP\Connection $ldap, LDAP\Result $result): LDAP\ResultEntry|false
-----
FUNCTION ldap_first_reference
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param LDAP\Result $result
     * @return LDAP\ResultEntry|false
     */
    function ldap_first_reference(LDAP\Connection $ldap, LDAP\Result $result): LDAP\ResultEntry|false
-----
FUNCTION ldap_free_result
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Result $result
     * @return bool
     */
    function ldap_free_result(LDAP\Result $result): bool
-----
FUNCTION ldap_get_attributes
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param LDAP\ResultEntry $entry
     * @return array<int|string, array|int|string>
     */
    function ldap_get_attributes(LDAP\Connection $ldap, LDAP\ResultEntry $entry): array<int|string, array|int|string>
-----
FUNCTION ldap_get_dn
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param LDAP\ResultEntry $entry
     * @return string|false
     */
    function ldap_get_dn(LDAP\Connection $ldap, LDAP\ResultEntry $entry): string|false
-----
FUNCTION ldap_get_entries
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param LDAP\Result $result
     * @return array<int|string, array|int>|false
     */
    function ldap_get_entries(LDAP\Connection $ldap, LDAP\Result $result): array<int|string, array|int>|false
-----
FUNCTION ldap_get_option
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param int $option
     * @param array|int|string $value
     * @return bool
     */
    function ldap_get_option(LDAP\Connection $ldap, int $option, array|int|string &rw$value = null): bool
-----
FUNCTION ldap_get_values
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param LDAP\ResultEntry $entry
     * @param string $attribute
     * @return array<int|string, int|string>|false
     */
    function ldap_get_values(LDAP\Connection $ldap, LDAP\ResultEntry $entry, string $attribute): array<int|string, int|string>|false
-----
FUNCTION ldap_get_values_len
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param LDAP\ResultEntry $entry
     * @param string $attribute
     * @return array<int|string, int|string>|false
     */
    function ldap_get_values_len(LDAP\Connection $ldap, LDAP\ResultEntry $entry, string $attribute): array<int|string, int|string>|false
-----
FUNCTION ldap_list
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array|LDAP\Connection $ldap
     * @param array|string $base
     * @param array|string $filter
     * @param array $attributes
     * @param int $attributes_only
     * @param int $sizelimit
     * @param int $timelimit
     * @param int $deref
     * @param array|null $controls
     * @return array|LDAP\Result|false
     */
    function ldap_list(array|LDAP\Connection $ldap, array|string $base, array|string $filter, array $attributes = array{}, int $attributes_only = 0, int $sizelimit = -1, int $timelimit = -1, int $deref = 0, array|null $controls = null): array|LDAP\Result|false
-----
FUNCTION ldap_mod_add
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param string $dn
     * @param array $entry
     * @param array|null $controls
     * @return bool
     */
    function ldap_mod_add(LDAP\Connection $ldap, string $dn, array $entry, array|null $controls = null): bool
-----
FUNCTION ldap_mod_add_ext
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param string $dn
     * @param array $entry
     * @param array|null $controls
     * @return LDAP\Result|false
     */
    function ldap_mod_add_ext(LDAP\Connection $ldap, string $dn, array $entry, array|null $controls = null): LDAP\Result|false
-----
FUNCTION ldap_mod_del
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param string $dn
     * @param array $entry
     * @param array|null $controls
     * @return bool
     */
    function ldap_mod_del(LDAP\Connection $ldap, string $dn, array $entry, array|null $controls = null): bool
-----
FUNCTION ldap_mod_del_ext
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param string $dn
     * @param array $entry
     * @param array|null $controls
     * @return LDAP\Result|false
     */
    function ldap_mod_del_ext(LDAP\Connection $ldap, string $dn, array $entry, array|null $controls = null): LDAP\Result|false
-----
FUNCTION ldap_mod_replace
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param string $dn
     * @param array $entry
     * @param array|null $controls
     * @return bool
     */
    function ldap_mod_replace(LDAP\Connection $ldap, string $dn, array $entry, array|null $controls = null): bool
-----
FUNCTION ldap_mod_replace_ext
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param string $dn
     * @param array $entry
     * @param array|null $controls
     * @return LDAP\Result|false
     */
    function ldap_mod_replace_ext(LDAP\Connection $ldap, string $dn, array $entry, array|null $controls = null): LDAP\Result|false
-----
FUNCTION ldap_modify
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param string $dn
     * @param array $entry
     * @param array|null $controls
     * @return bool
     */
    function ldap_modify(LDAP\Connection $ldap, string $dn, array $entry, array|null $controls = null): bool
-----
FUNCTION ldap_modify_batch
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param string $dn
     * @param array $modifications_info
     * @param array|null $controls
     * @return bool
     */
    function ldap_modify_batch(LDAP\Connection $ldap, string $dn, array $modifications_info, array|null $controls = null): bool
-----
FUNCTION ldap_next_attribute
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param LDAP\ResultEntry $entry
     * @return string|false
     */
    function ldap_next_attribute(LDAP\Connection $ldap, LDAP\ResultEntry $entry): string|false
-----
FUNCTION ldap_next_entry
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param LDAP\ResultEntry $entry
     * @return LDAP\ResultEntry|false
     */
    function ldap_next_entry(LDAP\Connection $ldap, LDAP\ResultEntry $entry): LDAP\ResultEntry|false
-----
FUNCTION ldap_next_reference
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param LDAP\ResultEntry $entry
     * @return LDAP\ResultEntry|false
     */
    function ldap_next_reference(LDAP\Connection $ldap, LDAP\ResultEntry $entry): LDAP\ResultEntry|false
-----
FUNCTION ldap_parse_exop
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param LDAP\Result $result
     * @param string $response_data
     * @param string $response_oid
     * @return bool
     */
    function ldap_parse_exop(LDAP\Connection $ldap, LDAP\Result $result, string &rw$response_data = null, string &rw$response_oid = null): bool
-----
FUNCTION ldap_parse_reference
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param LDAP\ResultEntry $entry
     * @param array $referrals
     * @return bool
     */
    function ldap_parse_reference(LDAP\Connection $ldap, LDAP\ResultEntry $entry, array $referrals): bool
-----
FUNCTION ldap_parse_result
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param LDAP\Result $result
     * @param int $error_code
     * @param string $matched_dn
     * @param string $error_message
     * @param array $referrals
     * @param array $controls
     * @return bool
     */
    function ldap_parse_result(LDAP\Connection $ldap, LDAP\Result $result, int &rw$error_code, string &rw$matched_dn = null, string &rw$error_message = null, array &rw$referrals = null, array &rw$controls = null): bool
-----
FUNCTION ldap_read
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array|LDAP\Connection $ldap
     * @param array|string $base
     * @param array|string $filter
     * @param array $attributes
     * @param int $attributes_only
     * @param int $sizelimit
     * @param int $timelimit
     * @param int $deref
     * @param array|null $controls
     * @return array|LDAP\Result|false
     */
    function ldap_read(array|LDAP\Connection $ldap, array|string $base, array|string $filter, array $attributes = array{}, int $attributes_only = 0, int $sizelimit = -1, int $timelimit = -1, int $deref = 0, array|null $controls = null): array|LDAP\Result|false
-----
FUNCTION ldap_rename
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param string $dn
     * @param string $new_rdn
     * @param string $new_parent
     * @param bool $delete_old_rdn
     * @param array|null $controls
     * @return bool
     */
    function ldap_rename(LDAP\Connection $ldap, string $dn, string $new_rdn, string $new_parent, bool $delete_old_rdn, array|null $controls = null): bool
-----
FUNCTION ldap_rename_ext
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param string $dn
     * @param string $new_rdn
     * @param string $new_parent
     * @param bool $delete_old_rdn
     * @param array|null $controls
     * @return LDAP\Result|false
     */
    function ldap_rename_ext(LDAP\Connection $ldap, string $dn, string $new_rdn, string $new_parent, bool $delete_old_rdn, array|null $controls = null): LDAP\Result|false
-----
FUNCTION ldap_sasl_bind
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param string|null $dn
     * @param string|null $password
     * @param string|null $mech
     * @param string|null $realm
     * @param string|null $authc_id
     * @param string|null $authz_id
     * @param string|null $props
     * @return bool
     */
    function ldap_sasl_bind(LDAP\Connection $ldap, string|null $dn = null, string|null $password = null, string|null $mech = null, string|null $realm = null, string|null $authc_id = null, string|null $authz_id = null, string|null $props = null): bool
-----
FUNCTION ldap_search
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array|LDAP\Connection $ldap
     * @param array|string $base
     * @param array|string $filter
     * @param array $attributes
     * @param int $attributes_only
     * @param int $sizelimit
     * @param int $timelimit
     * @param int $deref
     * @param array|null $controls
     * @return array|LDAP\Result|false
     */
    function ldap_search(array|LDAP\Connection $ldap, array|string $base, array|string $filter, array $attributes = array{}, int $attributes_only = 0, int $sizelimit = -1, int $timelimit = -1, int $deref = 0, array|null $controls = null): array|LDAP\Result|false
-----
FUNCTION ldap_set_option
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection|null $ldap
     * @param int $option
     * @param array|bool|int|string $value
     * @return bool
     */
    function ldap_set_option(LDAP\Connection|null $ldap, int $option, array|bool|int|string $value): bool
-----
FUNCTION ldap_set_rebind_proc
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @param (callable(): mixed)|null $callback
     * @return bool
     */
    function ldap_set_rebind_proc(LDAP\Connection $ldap, (callable(): mixed)|null $callback): bool
-----
FUNCTION ldap_sort
-----
MISSING
-----
FUNCTION ldap_start_tls
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @return bool
     */
    function ldap_start_tls(LDAP\Connection $ldap): bool
-----
FUNCTION ldap_t61_to_8859
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $value
     * @return string|false
     */
    function ldap_t61_to_8859(string $value): string|false
-----
FUNCTION ldap_unbind
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param LDAP\Connection $ldap
     * @return bool
     */
    function ldap_unbind(LDAP\Connection $ldap): bool
-----
FUNCTION levenshtein
-----
Has side-effects: Maybe
Variants: 2
    /**
     * @param string $str1
     * @param string $str2
     * @return int
     */
    function levenshtein(string $str1, string $str2): int
    /**
     * @param string $str1
     * @param string $str2
     * @param int $cost_ins
     * @param int $cost_rep
     * @param int $cost_del
     * @return int
     */
    function levenshtein(string $str1, string $str2, int $cost_ins = 1, int $cost_rep = 1, int $cost_del = 1): int
-----
FUNCTION libxml_clear_errors
-----
Has side-effects: Yes
Variants: 1
    /**
     * @return void
     */
    function libxml_clear_errors(): void
-----
FUNCTION libxml_disable_entity_loader
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param bool $disable
     * @return bool
     */
    function libxml_disable_entity_loader(bool $disable = true): bool
-----
FUNCTION libxml_get_errors
-----
Variants: 1
    /**
     * @return array<int, LibXMLError>
     */
    function libxml_get_errors(): array<int, LibXMLError>
-----
FUNCTION libxml_get_external_entity_loader
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return (callable(): mixed)|null
     */
    function libxml_get_external_entity_loader(): (callable(): mixed)|null
-----
FUNCTION libxml_get_last_error
-----
Variants: 1
    /**
     * @return LibXMLError|false
     */
    function libxml_get_last_error(): LibXMLError|false
-----
FUNCTION libxml_set_external_entity_loader
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param (callable(): mixed)|null $resolver_function
     * @return bool
     */
    function libxml_set_external_entity_loader((callable(): mixed)|null $resolver_function): bool
-----
FUNCTION libxml_set_streams_context
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $context
     * @return void
     */
    function libxml_set_streams_context(resource $context): void
-----
FUNCTION libxml_use_internal_errors
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param bool|null $use_errors
     * @return bool
     */
    function libxml_use_internal_errors(bool|null $use_errors = null): bool
-----
FUNCTION link
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $target
     * @param string $link
     * @return bool
     */
    function link(string $target, string $link): bool
-----
FUNCTION linkinfo
-----
Variants: 1
    /**
     * @param string $path
     * @return int|false
     */
    function linkinfo(string $path): int|false
-----
FUNCTION list
-----
MISSING
-----
FUNCTION localeconv
-----
Variants: 1
    /**
     * @return array
     */
    function localeconv(): array
-----
FUNCTION localtime
-----
Variants: 1
    /**
     * @param int|null $timestamp
     * @param bool $associative
     * @return array
     */
    function localtime(int|null $timestamp = null, bool $associative = false): array
-----
FUNCTION log
-----
Variants: 1
    /**
     * @param float $num
     * @param float $base
     * @return float
     */
    function log(float $num, float $base = 2.718281828459045): float
-----
FUNCTION log10
-----
Variants: 1
    /**
     * @param float $num
     * @return float
     */
    function log10(float $num): float
-----
FUNCTION log1p
-----
Variants: 1
    /**
     * @param float $num
     * @return float
     */
    function log1p(float $num): float
-----
FUNCTION long2ip
-----
Variants: 1
    /**
     * @param int $ip
     * @return string|false
     */
    function long2ip(int $ip): string|false
-----
FUNCTION lstat
-----
Variants: 1
    /**
     * @param string $filename
     * @return array|false
     */
    function lstat(string $filename): array|false
-----
FUNCTION ltrim
-----
Variants: 1
    /**
     * @param string $string
     * @param string $characters
     * @return string
     */
    function ltrim(string $string, string $characters = " \n\r\t\v\000"): string
-----
FUNCTION lzf_compress
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $data
     * @return string
     */
    function lzf_compress(string $data): string
-----
FUNCTION lzf_decompress
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $data
     * @return string
     */
    function lzf_decompress(string $data): string
-----
FUNCTION lzf_optimized_for
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return int
     */
    function lzf_optimized_for(): int
-----
FUNCTION mail
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $to
     * @param string $subject
     * @param string $message
     * @param array|string $additional_headers
     * @param string $additional_params
     * @return bool
     */
    function mail(string $to, string $subject, string $message, array|string $additional_headers = array{}, string $additional_params = ''): bool
-----
FUNCTION mailparse_determine_best_xfer_encoding
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fp
     * @return string
     */
    function mailparse_determine_best_xfer_encoding(resource $fp): string
-----
FUNCTION mailparse_msg_create
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return resource
     */
    function mailparse_msg_create(): resource
-----
FUNCTION mailparse_msg_extract_part
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $mimemail
     * @param string $msgbody
     * @param callable(): mixed $callbackfunc
     * @return void
     */
    function mailparse_msg_extract_part(resource $mimemail, string $msgbody, callable(): mixed $callbackfunc): void
-----
FUNCTION mailparse_msg_extract_part_file
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $mimemail
     * @param mixed $filename
     * @param callable(): mixed $callbackfunc
     * @return string
     */
    function mailparse_msg_extract_part_file(resource $mimemail, mixed $filename, callable(): mixed $callbackfunc): string
-----
FUNCTION mailparse_msg_extract_whole_part_file
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $mimemail
     * @param string $filename
     * @param callable(): mixed $callbackfunc
     * @return string
     */
    function mailparse_msg_extract_whole_part_file(resource $mimemail, string $filename, callable(): mixed $callbackfunc): string
-----
FUNCTION mailparse_msg_free
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $mimemail
     * @return bool
     */
    function mailparse_msg_free(resource $mimemail): bool
-----
FUNCTION mailparse_msg_get_part
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $mimemail
     * @param string $mimesection
     * @return resource
     */
    function mailparse_msg_get_part(resource $mimemail, string $mimesection): resource
-----
FUNCTION mailparse_msg_get_part_data
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $mimemail
     * @return array
     */
    function mailparse_msg_get_part_data(resource $mimemail): array
-----
FUNCTION mailparse_msg_get_structure
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $mimemail
     * @return array
     */
    function mailparse_msg_get_structure(resource $mimemail): array
-----
FUNCTION mailparse_msg_parse
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $mimemail
     * @param string $data
     * @return bool
     */
    function mailparse_msg_parse(resource $mimemail, string $data): bool
-----
FUNCTION mailparse_msg_parse_file
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @return resource
     */
    function mailparse_msg_parse_file(string $filename): resource
-----
FUNCTION mailparse_rfc822_parse_addresses
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $addresses
     * @return array
     */
    function mailparse_rfc822_parse_addresses(string $addresses): array
-----
FUNCTION mailparse_stream_encode
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $sourcefp
     * @param resource $destfp
     * @param string $encoding
     * @return bool
     */
    function mailparse_stream_encode(resource $sourcefp, resource $destfp, string $encoding): bool
-----
FUNCTION mailparse_uudecode_all
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fp
     * @return array
     */
    function mailparse_uudecode_all(resource $fp): array
-----
FUNCTION max
-----
Variants: 2
    /**
     * @param array $arg1
     * @return mixed
     */
    function max(array ...$arg1): mixed
    /**
     * @param mixed $arg1
     * @param mixed $arg2
     * @param mixed $args
     * @return mixed
     */
    function max(mixed $arg1, mixed $arg2, mixed ...$args): mixed
-----
FUNCTION mb_check_encoding
-----
Variants: 1
    /**
     * @param array<string>|string|null $value
     * @param string|null $encoding
     * @return bool
     */
    function mb_check_encoding(array<string>|string|null $value = null, string|null $encoding = null): bool
-----
FUNCTION mb_chr
-----
Variants: 1
    /**
     * @param int $codepoint
     * @param string|null $encoding
     * @return string|false
     */
    function mb_chr(int $codepoint, string|null $encoding = null): string|false
-----
FUNCTION mb_convert_case
-----
Variants: 1
    /**
     * @param string $string
     * @param int $mode
     * @param string|null $encoding
     * @return string
     */
    function mb_convert_case(string $string, int $mode, string|null $encoding = null): string
-----
FUNCTION mb_convert_encoding
-----
Variants: 1
    /**
     * @param array<int, string>|string $string
     * @param string $to_encoding
     * @param array|string|null $from_encoding
     * @return array<int, string>|string|false
     */
    function mb_convert_encoding(array<int, string>|string $string, string $to_encoding, array|string|null $from_encoding = null): array<int, string>|string|false
-----
FUNCTION mb_convert_kana
-----
Variants: 1
    /**
     * @param string $string
     * @param string $mode
     * @param string|null $encoding
     * @return string
     */
    function mb_convert_kana(string $string, string $mode = 'KV', string|null $encoding = null): string
-----
FUNCTION mb_convert_variables
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $to_encoding
     * @param array|string $from_encoding
     * @param array|object|string $var
     * @param array|object|string $vars
     * @return string|false
     */
    function mb_convert_variables(string $to_encoding, array|string $from_encoding, array|object|string &r$var, array|object|string ...&r$vars): string|false
-----
FUNCTION mb_decode_mimeheader
-----
Variants: 1
    /**
     * @param string $string
     * @return string
     */
    function mb_decode_mimeheader(string $string): string
-----
FUNCTION mb_decode_numericentity
-----
Variants: 1
    /**
     * @param string $string
     * @param array $map
     * @param string|null $encoding
     * @return string
     */
    function mb_decode_numericentity(string $string, array $map, string|null $encoding = null): string
-----
FUNCTION mb_detect_encoding
-----
Variants: 1
    /**
     * @param string $string
     * @param array|string|null $encodings
     * @param bool $strict
     * @return string|false
     */
    function mb_detect_encoding(string $string, array|string|null $encodings = null, bool $strict = false): string|false
-----
FUNCTION mb_detect_order
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array|string|null $encoding
     * @return array<int, string>|bool
     */
    function mb_detect_order(array|string|null $encoding = null): array<int, string>|bool
-----
FUNCTION mb_encode_mimeheader
-----
Variants: 1
    /**
     * @param string $string
     * @param string|null $charset
     * @param string|null $transfer_encoding
     * @param string $newline
     * @param int $indent
     * @return string
     */
    function mb_encode_mimeheader(string $string, string|null $charset = null, string|null $transfer_encoding = null, string $newline = "\r\n", int $indent = 0): string
-----
FUNCTION mb_encode_numericentity
-----
Variants: 1
    /**
     * @param string $string
     * @param array $map
     * @param string|null $encoding
     * @param bool $hex
     * @return string
     */
    function mb_encode_numericentity(string $string, array $map, string|null $encoding = null, bool $hex = false): string
-----
FUNCTION mb_encoding_aliases
-----
Variants: 1
    /**
     * @param string $encoding
     * @return array<int, string>
     */
    function mb_encoding_aliases(string $encoding): array<int, string>
-----
FUNCTION mb_ereg
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $pattern
     * @param string $string
     * @param array $matches
     * @return bool
     */
    function mb_ereg(string $pattern, string $string, array &rw$matches = null): bool
-----
FUNCTION mb_ereg_match
-----
Variants: 1
    /**
     * @param string $pattern
     * @param string $string
     * @param string|null $options
     * @return bool
     */
    function mb_ereg_match(string $pattern, string $string, string|null $options = null): bool
-----
FUNCTION mb_ereg_replace
-----
Variants: 1
    /**
     * @param string $pattern
     * @param string $replacement
     * @param string $string
     * @param string|null $options
     * @return string|false|null
     */
    function mb_ereg_replace(string $pattern, string $replacement, string $string, string|null $options = null): string|false|null
-----
FUNCTION mb_ereg_replace_callback
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $pattern
     * @param callable(array<int|string, string>): string $callback
     * @param string $string
     * @param string|null $options
     * @return string|false|null
     */
    function mb_ereg_replace_callback(string $pattern, callable(array<int|string, string>): string $callback, string $string, string|null $options = null): string|false|null
-----
FUNCTION mb_ereg_search
-----
Variants: 1
    /**
     * @param string|null $pattern
     * @param string|null $options
     * @return bool
     */
    function mb_ereg_search(string|null $pattern = null, string|null $options = null): bool
-----
FUNCTION mb_ereg_search_getpos
-----
Is deprecated: Yes
Variants: 1
    /**
     * @return int
     */
    function mb_ereg_search_getpos(): int
-----
FUNCTION mb_ereg_search_getregs
-----
Variants: 1
    /**
     * @return array|false
     */
    function mb_ereg_search_getregs(): array|false
-----
FUNCTION mb_ereg_search_init
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $string
     * @param string|null $pattern
     * @param string|null $options
     * @return bool
     */
    function mb_ereg_search_init(string $string, string|null $pattern = null, string|null $options = null): bool
-----
FUNCTION mb_ereg_search_pos
-----
Variants: 1
    /**
     * @param string|null $pattern
     * @param string|null $options
     * @return array|false
     */
    function mb_ereg_search_pos(string|null $pattern = null, string|null $options = null): array|false
-----
FUNCTION mb_ereg_search_regs
-----
Variants: 1
    /**
     * @param string|null $pattern
     * @param string|null $options
     * @return array|false
     */
    function mb_ereg_search_regs(string|null $pattern = null, string|null $options = null): array|false
-----
FUNCTION mb_ereg_search_setpos
-----
Variants: 1
    /**
     * @param int $offset
     * @return bool
     */
    function mb_ereg_search_setpos(int $offset): bool
-----
FUNCTION mb_eregi
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $pattern
     * @param string $string
     * @param array $matches
     * @return bool
     */
    function mb_eregi(string $pattern, string $string, array &rw$matches = null): bool
-----
FUNCTION mb_eregi_replace
-----
Variants: 1
    /**
     * @param string $pattern
     * @param string $replacement
     * @param string $string
     * @param string|null $options
     * @return string|false|null
     */
    function mb_eregi_replace(string $pattern, string $replacement, string $string, string|null $options = null): string|false|null
-----
FUNCTION mb_get_info
-----
Variants: 1
    /**
     * @param string $type
     * @return array|int|string|false
     */
    function mb_get_info(string $type = 'all'): array|int|string|false
-----
FUNCTION mb_http_input
-----
Variants: 1
    /**
     * @param string|null $type
     * @return array|string|false
     */
    function mb_http_input(string|null $type = null): array|string|false
-----
FUNCTION mb_http_output
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string|null $encoding
     * @return bool|string
     */
    function mb_http_output(string|null $encoding = null): bool|string
-----
FUNCTION mb_internal_encoding
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string|null $encoding
     * @return bool|string
     */
    function mb_internal_encoding(string|null $encoding = null): bool|string
-----
FUNCTION mb_language
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string|null $language
     * @return bool|string
     */
    function mb_language(string|null $language = null): bool|string
-----
FUNCTION mb_list_encodings
-----
Variants: 1
    /**
     * @return array<int, string>
     */
    function mb_list_encodings(): array<int, string>
-----
FUNCTION mb_ord
-----
Variants: 1
    /**
     * @param string $string
     * @param string|null $encoding
     * @return int|false
     */
    function mb_ord(string $string, string|null $encoding = null): int|false
-----
FUNCTION mb_output_handler
-----
Variants: 1
    /**
     * @param string $string
     * @param int $status
     * @return string
     */
    function mb_output_handler(string $string, int $status): string
-----
FUNCTION mb_parse_str
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $string
     * @param array $result
     * @param-out array<string, array|string> $result
     * @return bool
     */
    function mb_parse_str(string $string, array &rw$result): bool
-----
FUNCTION mb_preferred_mime_name
-----
Variants: 1
    /**
     * @param string $encoding
     * @return string|false
     */
    function mb_preferred_mime_name(string $encoding): string|false
-----
FUNCTION mb_regex_encoding
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string|null $encoding
     * @return bool|string
     */
    function mb_regex_encoding(string|null $encoding = null): bool|string
-----
FUNCTION mb_regex_set_options
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string|null $options
     * @return string
     */
    function mb_regex_set_options(string|null $options = null): string
-----
FUNCTION mb_scrub
-----
Variants: 1
    /**
     * @param string $string
     * @param string|null $encoding
     * @return string
     */
    function mb_scrub(string $string, string|null $encoding = null): string
-----
FUNCTION mb_send_mail
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $to
     * @param string $subject
     * @param string $message
     * @param array|string $additional_headers
     * @param string|null $additional_params
     * @return bool
     */
    function mb_send_mail(string $to, string $subject, string $message, array|string $additional_headers = array{}, string|null $additional_params = null): bool
-----
FUNCTION mb_split
-----
Variants: 1
    /**
     * @param string $pattern
     * @param string $string
     * @param int $limit
     * @return array<int, string>|false
     */
    function mb_split(string $pattern, string $string, int $limit = -1): array<int, string>|false
-----
FUNCTION mb_str_split
-----
Variants: 1
    /**
     * @param string $string
     * @param int<1, max> $length
     * @param string|null $encoding
     * @return array<int, string>
     */
    function mb_str_split(string $string, int<1, max> $length = 1, string|null $encoding = null): array<int, string>
-----
FUNCTION mb_strcut
-----
Variants: 1
    /**
     * @param string $string
     * @param int $start
     * @param int|null $length
     * @param string|null $encoding
     * @return string
     */
    function mb_strcut(string $string, int $start, int|null $length = null, string|null $encoding = null): string
-----
FUNCTION mb_strimwidth
-----
Variants: 1
    /**
     * @param string $string
     * @param int $start
     * @param int $width
     * @param string $trim_marker
     * @param string|null $encoding
     * @return string
     */
    function mb_strimwidth(string $string, int $start, int $width, string $trim_marker = '', string|null $encoding = null): string
-----
FUNCTION mb_stripos
-----
Variants: 1
    /**
     * @param string $haystack
     * @param string $needle
     * @param int $offset
     * @param string|null $encoding
     * @return int<0, max>|false
     */
    function mb_stripos(string $haystack, string $needle, int $offset = 0, string|null $encoding = null): int<0, max>|false
-----
FUNCTION mb_stristr
-----
Variants: 1
    /**
     * @param string $haystack
     * @param string $needle
     * @param bool $before_needle
     * @param string|null $encoding
     * @return string|false
     */
    function mb_stristr(string $haystack, string $needle, bool $before_needle = false, string|null $encoding = null): string|false
-----
FUNCTION mb_strlen
-----
Variants: 1
    /**
     * @param string $string
     * @param string|null $encoding
     * @return int<0, max>
     */
    function mb_strlen(string $string, string|null $encoding = null): int<0, max>
-----
FUNCTION mb_strpos
-----
Variants: 1
    /**
     * @param string $haystack
     * @param string $needle
     * @param int $offset
     * @param string|null $encoding
     * @return int<0, max>|false
     */
    function mb_strpos(string $haystack, string $needle, int $offset = 0, string|null $encoding = null): int<0, max>|false
-----
FUNCTION mb_strrchr
-----
Variants: 1
    /**
     * @param string $haystack
     * @param string $needle
     * @param bool $before_needle
     * @param string|null $encoding
     * @return string|false
     */
    function mb_strrchr(string $haystack, string $needle, bool $before_needle = false, string|null $encoding = null): string|false
-----
FUNCTION mb_strrichr
-----
Variants: 1
    /**
     * @param string $haystack
     * @param string $needle
     * @param bool $before_needle
     * @param string|null $encoding
     * @return string|false
     */
    function mb_strrichr(string $haystack, string $needle, bool $before_needle = false, string|null $encoding = null): string|false
-----
FUNCTION mb_strripos
-----
Variants: 1
    /**
     * @param string $haystack
     * @param string $needle
     * @param int $offset
     * @param string|null $encoding
     * @return int<0, max>|false
     */
    function mb_strripos(string $haystack, string $needle, int $offset = 0, string|null $encoding = null): int<0, max>|false
-----
FUNCTION mb_strrpos
-----
Variants: 1
    /**
     * @param string $haystack
     * @param string $needle
     * @param int $offset
     * @param string|null $encoding
     * @return int<0, max>|false
     */
    function mb_strrpos(string $haystack, string $needle, int $offset = 0, string|null $encoding = null): int<0, max>|false
-----
FUNCTION mb_strstr
-----
Variants: 1
    /**
     * @param string $haystack
     * @param string $needle
     * @param bool $before_needle
     * @param string|null $encoding
     * @return string|false
     */
    function mb_strstr(string $haystack, string $needle, bool $before_needle = false, string|null $encoding = null): string|false
-----
FUNCTION mb_strtolower
-----
Variants: 1
    /**
     * @param string $string
     * @param string|null $encoding
     * @return string
     */
    function mb_strtolower(string $string, string|null $encoding = null): string
-----
FUNCTION mb_strtoupper
-----
Variants: 1
    /**
     * @param string $string
     * @param string|null $encoding
     * @return string
     */
    function mb_strtoupper(string $string, string|null $encoding = null): string
-----
FUNCTION mb_strwidth
-----
Variants: 1
    /**
     * @param string $string
     * @param string|null $encoding
     * @return int<0, max>
     */
    function mb_strwidth(string $string, string|null $encoding = null): int<0, max>
-----
FUNCTION mb_substitute_character
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int|string|null $substitute_character
     * @return bool|int|string
     */
    function mb_substitute_character(int|string|null $substitute_character = null): bool|int|string
-----
FUNCTION mb_substr
-----
Variants: 1
    /**
     * @param string $string
     * @param int $start
     * @param int|null $length
     * @param string|null $encoding
     * @return string
     */
    function mb_substr(string $string, int $start, int|null $length = null, string|null $encoding = null): string
-----
FUNCTION mb_substr_count
-----
Variants: 1
    /**
     * @param string $haystack
     * @param string $needle
     * @param string|null $encoding
     * @return int<0, max>
     */
    function mb_substr_count(string $haystack, string $needle, string|null $encoding = null): int<0, max>
-----
FUNCTION mcrypt_create_iv
-----
MISSING
-----
FUNCTION mcrypt_decrypt
-----
MISSING
-----
FUNCTION mcrypt_enc_get_algorithms_name
-----
MISSING
-----
FUNCTION mcrypt_enc_get_block_size
-----
MISSING
-----
FUNCTION mcrypt_enc_get_iv_size
-----
MISSING
-----
FUNCTION mcrypt_enc_get_key_size
-----
MISSING
-----
FUNCTION mcrypt_enc_get_modes_name
-----
MISSING
-----
FUNCTION mcrypt_enc_get_supported_key_sizes
-----
MISSING
-----
FUNCTION mcrypt_enc_is_block_algorithm
-----
MISSING
-----
FUNCTION mcrypt_enc_is_block_algorithm_mode
-----
MISSING
-----
FUNCTION mcrypt_enc_is_block_mode
-----
MISSING
-----
FUNCTION mcrypt_enc_self_test
-----
MISSING
-----
FUNCTION mcrypt_encrypt
-----
MISSING
-----
FUNCTION mcrypt_generic
-----
MISSING
-----
FUNCTION mcrypt_generic_deinit
-----
MISSING
-----
FUNCTION mcrypt_generic_init
-----
MISSING
-----
FUNCTION mcrypt_get_block_size
-----
MISSING
-----
FUNCTION mcrypt_get_cipher_name
-----
MISSING
-----
FUNCTION mcrypt_get_iv_size
-----
MISSING
-----
FUNCTION mcrypt_get_key_size
-----
MISSING
-----
FUNCTION mcrypt_list_algorithms
-----
MISSING
-----
FUNCTION mcrypt_list_modes
-----
MISSING
-----
FUNCTION mcrypt_module_close
-----
MISSING
-----
FUNCTION mcrypt_module_get_algo_block_size
-----
MISSING
-----
FUNCTION mcrypt_module_get_algo_key_size
-----
MISSING
-----
FUNCTION mcrypt_module_get_supported_key_sizes
-----
MISSING
-----
FUNCTION mcrypt_module_is_block_algorithm
-----
MISSING
-----
FUNCTION mcrypt_module_is_block_algorithm_mode
-----
MISSING
-----
FUNCTION mcrypt_module_is_block_mode
-----
MISSING
-----
FUNCTION mcrypt_module_open
-----
MISSING
-----
FUNCTION mcrypt_module_self_test
-----
MISSING
-----
FUNCTION md5
-----
Variants: 1
    /**
     * @param string $string
     * @param bool $binary
     * @return non-empty-string
     */
    function md5(string $string, bool $binary = false): non-empty-string
-----
FUNCTION md5_file
-----
Variants: 1
    /**
     * @param string $filename
     * @param bool $binary
     * @return non-empty-string|false
     */
    function md5_file(string $filename, bool $binary = false): non-empty-string|false
-----
FUNCTION mdecrypt_generic
-----
MISSING
-----
FUNCTION memcache_debug
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param bool $on_off
     * @return bool
     */
    function memcache_debug(bool $on_off): bool
-----
FUNCTION memory_get_peak_usage
-----
Variants: 1
    /**
     * @param bool $real_usage
     * @return int
     */
    function memory_get_peak_usage(bool $real_usage = false): int
-----
FUNCTION memory_get_usage
-----
Variants: 1
    /**
     * @param bool $real_usage
     * @return int
     */
    function memory_get_usage(bool $real_usage = false): int
-----
FUNCTION memory_reset_peak_usage
-----
Has side-effects: Yes
Variants: 1
    /**
     * @return void
     */
    function memory_reset_peak_usage(): void
-----
FUNCTION metaphone
-----
Variants: 1
    /**
     * @param string $string
     * @param int $max_phonemes
     * @return string
     */
    function metaphone(string $string, int $max_phonemes = 0): string
-----
FUNCTION method_exists
-----
Variants: 1
    /**
     * @param object|string $object_or_class
     * @param string $method
     * @return bool
     */
    function method_exists(object|string $object_or_class, string $method): bool
-----
FUNCTION mhash
-----
Is deprecated: Yes
Variants: 1
    /**
     * @param int $algo
     * @param string $data
     * @param string|null $key
     * @return string|false
     */
    function mhash(int $algo, string $data, string|null $key = null): string|false
-----
FUNCTION mhash_count
-----
Is deprecated: Yes
Variants: 1
    /**
     * @return int
     */
    function mhash_count(): int
-----
FUNCTION mhash_get_block_size
-----
Is deprecated: Yes
Variants: 1
    /**
     * @param int $algo
     * @return int|false
     */
    function mhash_get_block_size(int $algo): int|false
-----
FUNCTION mhash_get_hash_name
-----
Is deprecated: Yes
Variants: 1
    /**
     * @param int $algo
     * @return string|false
     */
    function mhash_get_hash_name(int $algo): string|false
-----
FUNCTION mhash_keygen_s2k
-----
Is deprecated: Yes
Variants: 1
    /**
     * @param int $algo
     * @param string $password
     * @param string $salt
     * @param int $length
     * @return string|false
     */
    function mhash_keygen_s2k(int $algo, string $password, string $salt, int $length): string|false
-----
FUNCTION microtime
-----
Variants: 1
    /**
     * @param bool $as_float
     * @return float|string
     */
    function microtime(bool $as_float = false): float|string
-----
FUNCTION mime_content_type
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource|string $filename
     * @return string|false
     */
    function mime_content_type(resource|string $filename): string|false
-----
FUNCTION min
-----
Variants: 2
    /**
     * @param array $arg1
     * @return mixed
     */
    function min(array ...$arg1): mixed
    /**
     * @param mixed $arg1
     * @param mixed $arg2
     * @param mixed $args
     * @return mixed
     */
    function min(mixed $arg1, mixed $arg2, mixed ...$args): mixed
-----
FUNCTION mkdir
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $directory
     * @param int $permissions
     * @param bool $recursive
     * @param resource|null $context
     * @return bool
     */
    function mkdir(string $directory, int $permissions = 511, bool $recursive = false, resource|null $context = null): bool
-----
FUNCTION mktime
-----
Variants: 1
    /**
     * @param int $hour
     * @param int|null $minute
     * @param int|null $second
     * @param int|null $month
     * @param int|null $day
     * @param int|null $year
     * @return int|false
     */
    function mktime(int $hour, int|null $minute = null, int|null $second = null, int|null $month = null, int|null $day = null, int|null $year = null): int|false
-----
FUNCTION money_format
-----
MISSING
-----
FUNCTION move_uploaded_file
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $from
     * @param string $to
     * @return bool
     */
    function move_uploaded_file(string $from, string $to): bool
-----
FUNCTION mqseries_back
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $hconn
     * @param resource $compcode
     * @param resource $reason
     * @return void
     */
    function mqseries_back(resource $hconn, resource $compcode, resource $reason): void
-----
FUNCTION mqseries_begin
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $hconn
     * @param array $beginoptions
     * @param resource $compcode
     * @param resource $reason
     * @return void
     */
    function mqseries_begin(resource $hconn, array $beginoptions, resource $compcode, resource $reason): void
-----
FUNCTION mqseries_close
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $hconn
     * @param resource $hobj
     * @param int $options
     * @param resource $compcode
     * @param resource $reason
     * @return void
     */
    function mqseries_close(resource $hconn, resource $hobj, int $options, resource $compcode, resource $reason): void
-----
FUNCTION mqseries_cmit
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $hconn
     * @param resource $compcode
     * @param resource $reason
     * @return void
     */
    function mqseries_cmit(resource $hconn, resource $compcode, resource $reason): void
-----
FUNCTION mqseries_conn
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $qmanagername
     * @param resource $hconn
     * @param resource $compcode
     * @param resource $reason
     * @return void
     */
    function mqseries_conn(string $qmanagername, resource $hconn, resource $compcode, resource $reason): void
-----
FUNCTION mqseries_connx
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $qmanagername
     * @param array $connoptions
     * @param resource $hconn
     * @param resource $compcode
     * @param resource $reason
     * @return void
     */
    function mqseries_connx(string $qmanagername, array $connoptions, resource $hconn, resource $compcode, resource $reason): void
-----
FUNCTION mqseries_disc
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $hconn
     * @param resource $compcode
     * @param resource $reason
     * @return void
     */
    function mqseries_disc(resource $hconn, resource $compcode, resource $reason): void
-----
FUNCTION mqseries_get
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $hconn
     * @param resource $hobj
     * @param array $md
     * @param array $gmo
     * @param int $bufferlength
     * @param string $msg
     * @param int $data_length
     * @param resource $compcode
     * @param resource $reason
     * @return void
     */
    function mqseries_get(resource $hconn, resource $hobj, array $md, array $gmo, int $bufferlength, string $msg, int $data_length, resource $compcode, resource $reason): void
-----
FUNCTION mqseries_inq
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $hconn
     * @param resource $hobj
     * @param int $selectorcount
     * @param array $selectors
     * @param int $intattrcount
     * @param resource $intattr
     * @param int $charattrlength
     * @param resource $charattr
     * @param resource $compcode
     * @param resource $reason
     * @return void
     */
    function mqseries_inq(resource $hconn, resource $hobj, int $selectorcount, array $selectors, int $intattrcount, resource $intattr, int $charattrlength, resource $charattr, resource $compcode, resource $reason): void
-----
FUNCTION mqseries_open
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $hconn
     * @param array $objdesc
     * @param int $option
     * @param resource $hobj
     * @param resource $compcode
     * @param resource $reason
     * @return void
     */
    function mqseries_open(resource $hconn, array $objdesc, int $option, resource $hobj, resource $compcode, resource $reason): void
-----
FUNCTION mqseries_put
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $hconn
     * @param resource $hobj
     * @param array $md
     * @param array $pmo
     * @param string $message
     * @param resource $compcode
     * @param resource $reason
     * @return void
     */
    function mqseries_put(resource $hconn, resource $hobj, array $md, array $pmo, string $message, resource $compcode, resource $reason): void
-----
FUNCTION mqseries_put1
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $hconn
     * @param resource $objdesc
     * @param resource $msgdesc
     * @param resource $pmo
     * @param string $buffer
     * @param resource $compcode
     * @param resource $reason
     * @return void
     */
    function mqseries_put1(resource $hconn, resource $objdesc, resource $msgdesc, resource $pmo, string $buffer, resource $compcode, resource $reason): void
-----
FUNCTION mqseries_set
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $hconn
     * @param resource $hobj
     * @param int $selectorcount
     * @param array $selectors
     * @param int $intattrcount
     * @param array $intattrs
     * @param int $charattrlength
     * @param array $charattrs
     * @param resource $compcode
     * @param resource $reason
     * @return void
     */
    function mqseries_set(resource $hconn, resource $hobj, int $selectorcount, array $selectors, int $intattrcount, array $intattrs, int $charattrlength, array $charattrs, resource $compcode, resource $reason): void
-----
FUNCTION mqseries_strerror
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $reason
     * @return string
     */
    function mqseries_strerror(int $reason): string
-----
FUNCTION msg_get_queue
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $key
     * @param int $permissions
     * @return SysvMessageQueue|false
     */
    function msg_get_queue(int $key, int $permissions = 438): SysvMessageQueue|false
-----
FUNCTION msg_queue_exists
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $key
     * @return bool
     */
    function msg_queue_exists(int $key): bool
-----
FUNCTION msg_receive
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param SysvMessageQueue $queue
     * @param int $desired_message_type
     * @param int $received_message_type
     * @param int $max_message_size
     * @param mixed $message
     * @param bool $unserialize
     * @param int $flags
     * @param int $error_code
     * @return bool
     */
    function msg_receive(SysvMessageQueue $queue, int $desired_message_type, int &rw$received_message_type, int $max_message_size, mixed &rw$message, bool $unserialize = true, int $flags = 0, int &rw$error_code = null): bool
-----
FUNCTION msg_remove_queue
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param SysvMessageQueue $queue
     * @return bool
     */
    function msg_remove_queue(SysvMessageQueue $queue): bool
-----
FUNCTION msg_send
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param SysvMessageQueue $queue
     * @param int $message_type
     * @param bool|float|int|string $message
     * @param bool $serialize
     * @param bool $blocking
     * @param int $error_code
     * @return bool
     */
    function msg_send(SysvMessageQueue $queue, int $message_type, bool|float|int|string $message, bool $serialize = true, bool $blocking = true, int &rw$error_code = null): bool
-----
FUNCTION msg_set_queue
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param SysvMessageQueue $queue
     * @param array $data
     * @return bool
     */
    function msg_set_queue(SysvMessageQueue $queue, array $data): bool
-----
FUNCTION msg_stat_queue
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param SysvMessageQueue $queue
     * @return array|false
     */
    function msg_stat_queue(SysvMessageQueue $queue): array|false
-----
FUNCTION mt_getrandmax
-----
Variants: 1
    /**
     * @return int
     */
    function mt_getrandmax(): int
-----
FUNCTION mt_rand
-----
Has side-effects: Yes
Variants: 2
    /**
     * @param int $min
     * @param int $max
     * @return int
     */
    function mt_rand(int $min, int $max): int
    /**
     * @return int
     */
    function mt_rand(): int
-----
FUNCTION mt_srand
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param int $seed
     * @param int $mode
     * @return void
     */
    function mt_srand(int $seed = *ERROR*, int $mode = 0): void
-----
FUNCTION mysql_affected_rows
-----
MISSING
-----
FUNCTION mysql_client_encoding
-----
MISSING
-----
FUNCTION mysql_close
-----
MISSING
-----
FUNCTION mysql_connect
-----
MISSING
-----
FUNCTION mysql_create_db
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $database_name
     * @param resource $link_identifier
     * @return bool
     */
    function mysql_create_db(string $database_name, resource $link_identifier): bool
-----
FUNCTION mysql_data_seek
-----
MISSING
-----
FUNCTION mysql_db_name
-----
MISSING
-----
FUNCTION mysql_db_query
-----
MISSING
-----
FUNCTION mysql_drop_db
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $database_name
     * @param resource $link_identifier
     * @return bool
     */
    function mysql_drop_db(string $database_name, resource $link_identifier): bool
-----
FUNCTION mysql_errno
-----
MISSING
-----
FUNCTION mysql_error
-----
MISSING
-----
FUNCTION mysql_escape_string
-----
MISSING
-----
FUNCTION mysql_fetch_array
-----
MISSING
-----
FUNCTION mysql_fetch_assoc
-----
MISSING
-----
FUNCTION mysql_fetch_field
-----
MISSING
-----
FUNCTION mysql_fetch_lengths
-----
MISSING
-----
FUNCTION mysql_fetch_object
-----
MISSING
-----
FUNCTION mysql_fetch_row
-----
MISSING
-----
FUNCTION mysql_field_flags
-----
MISSING
-----
FUNCTION mysql_field_len
-----
MISSING
-----
FUNCTION mysql_field_name
-----
MISSING
-----
FUNCTION mysql_field_seek
-----
MISSING
-----
FUNCTION mysql_field_table
-----
MISSING
-----
FUNCTION mysql_field_type
-----
MISSING
-----
FUNCTION mysql_free_result
-----
MISSING
-----
FUNCTION mysql_get_client_info
-----
MISSING
-----
FUNCTION mysql_get_host_info
-----
MISSING
-----
FUNCTION mysql_get_proto_info
-----
MISSING
-----
FUNCTION mysql_get_server_info
-----
MISSING
-----
FUNCTION mysql_info
-----
MISSING
-----
FUNCTION mysql_insert_id
-----
MISSING
-----
FUNCTION mysql_list_dbs
-----
MISSING
-----
FUNCTION mysql_list_fields
-----
MISSING
-----
FUNCTION mysql_list_processes
-----
MISSING
-----
FUNCTION mysql_list_tables
-----
MISSING
-----
FUNCTION mysql_num_fields
-----
MISSING
-----
FUNCTION mysql_num_rows
-----
MISSING
-----
FUNCTION mysql_pconnect
-----
MISSING
-----
FUNCTION mysql_ping
-----
MISSING
-----
FUNCTION mysql_query
-----
MISSING
-----
FUNCTION mysql_real_escape_string
-----
MISSING
-----
FUNCTION mysql_result
-----
MISSING
-----
FUNCTION mysql_select_db
-----
MISSING
-----
FUNCTION mysql_set_charset
-----
MISSING
-----
FUNCTION mysql_stat
-----
MISSING
-----
FUNCTION mysql_tablename
-----
MISSING
-----
FUNCTION mysql_thread_id
-----
MISSING
-----
FUNCTION mysql_unbuffered_query
-----
MISSING
-----
FUNCTION mysqli_connect
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string|null $hostname
     * @param string|null $username
     * @param string|null $password
     * @param string|null $database
     * @param int|null $port
     * @param string|null $socket
     * @return mysqli|false
     */
    function mysqli_connect(string|null $hostname = null, string|null $username = null, string|null $password = null, string|null $database = null, int|null $port = null, string|null $socket = null): mysqli|false
-----
FUNCTION mysqli_execute
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param mysqli_stmt $statement
     * @param array|null $params
     * @return bool
     */
    function mysqli_execute(mysqli_stmt $statement, array|null $params = null): bool
-----
FUNCTION mysqli_get_client_stats
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return array
     */
    function mysqli_get_client_stats(): array
-----
FUNCTION mysqli_get_links_stats
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return array
     */
    function mysqli_get_links_stats(): array
-----
FUNCTION mysqli_report
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $flags
     * @return bool
     */
    function mysqli_report(int $flags): bool
-----
FUNCTION natcasesort
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $array
     * @return bool
     */
    function natcasesort(array &r$array): bool
-----
FUNCTION natsort
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $array
     * @return bool
     */
    function natsort(array &r$array): bool
-----
FUNCTION net_get_interfaces
-----
Variants: 1
    /**
     * @return array|false
     */
    function net_get_interfaces(): array|false
-----
FUNCTION next
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array|object $array
     * @return mixed
     */
    function next(array|object &r$array): mixed
-----
FUNCTION ngettext
-----
Variants: 1
    /**
     * @param string $singular
     * @param string $plural
     * @param int $count
     * @return string
     */
    function ngettext(string $singular, string $plural, int $count): string
-----
FUNCTION nl2br
-----
Variants: 1
    /**
     * @param string $string
     * @param bool $use_xhtml
     * @return string
     */
    function nl2br(string $string, bool $use_xhtml = true): string
-----
FUNCTION nl_langinfo
-----
Variants: 1
    /**
     * @param int $item
     * @return string|false
     */
    function nl_langinfo(int $item): string|false
-----
FUNCTION number_format
-----
Variants: 1
    /**
     * @param float $num
     * @param int $decimals
     * @param string|null $decimal_separator
     * @param string|null $thousands_separator
     * @return string
     */
    function number_format(float $num, int $decimals = 0, string|null $decimal_separator = '.', string|null $thousands_separator = ','): string
-----
FUNCTION oauth_get_sbs
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $http_method
     * @param string $uri
     * @param array $request_parameters
     * @return string
     */
    function oauth_get_sbs(string $http_method, string $uri, array $request_parameters = array{}): string
-----
FUNCTION oauth_urlencode
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $uri
     * @return string
     */
    function oauth_urlencode(string $uri): string
-----
FUNCTION ob_clean
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return bool
     */
    function ob_clean(): bool
-----
FUNCTION ob_end_clean
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return bool
     */
    function ob_end_clean(): bool
-----
FUNCTION ob_end_flush
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return bool
     */
    function ob_end_flush(): bool
-----
FUNCTION ob_flush
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return bool
     */
    function ob_flush(): bool
-----
FUNCTION ob_get_clean
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return string|false
     */
    function ob_get_clean(): string|false
-----
FUNCTION ob_get_contents
-----
Variants: 1
    /**
     * @return string|false
     */
    function ob_get_contents(): string|false
-----
FUNCTION ob_get_flush
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return string|false
     */
    function ob_get_flush(): string|false
-----
FUNCTION ob_get_length
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return int|false
     */
    function ob_get_length(): int|false
-----
FUNCTION ob_get_level
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return int
     */
    function ob_get_level(): int
-----
FUNCTION ob_get_status
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param bool $full_status
     * @return array
     */
    function ob_get_status(bool $full_status = false): array
-----
FUNCTION ob_gzhandler
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $data
     * @param int $flags
     * @return string|false
     */
    function ob_gzhandler(string $data, int $flags): string|false
-----
FUNCTION ob_iconv_handler
-----
Variants: 1
    /**
     * @param string $contents
     * @param int $status
     * @return string
     */
    function ob_iconv_handler(string $contents, int $status): string
-----
FUNCTION ob_implicit_flush
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param bool $enable
     * @return void
     */
    function ob_implicit_flush(bool $enable = true): void
-----
FUNCTION ob_list_handlers
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return array
     */
    function ob_list_handlers(): array
-----
FUNCTION ob_start
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @param int $chunk_size
     * @param int $flags
     * @return bool
     */
    function ob_start(callable(): mixed $callback = null, int $chunk_size = 0, int $flags = 112): bool
-----
FUNCTION ob_tidyhandler
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $input
     * @param int $mode
     * @return string
     */
    function ob_tidyhandler(string $input, int $mode = null): string
-----
FUNCTION oci_bind_array_by_name
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param string $param
     * @param array $var
     * @param int $max_array_length
     * @param int $max_item_length
     * @param int $type
     * @return bool
     */
    function oci_bind_array_by_name(resource $statement, string $param, array &r$var, int $max_array_length, int $max_item_length = -1, int $type = 96): bool
-----
FUNCTION oci_bind_by_name
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param string $param
     * @param mixed $var
     * @param int $max_length
     * @param int $type
     * @return bool
     */
    function oci_bind_by_name(resource $statement, string $param, mixed &r$var, int $max_length = -1, int $type = 0): bool
-----
FUNCTION oci_cancel
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @return bool
     */
    function oci_cancel(resource $statement): bool
-----
FUNCTION oci_client_version
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return string
     */
    function oci_client_version(): string
-----
FUNCTION oci_close
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @return bool|null
     */
    function oci_close(resource $connection): bool|null
-----
FUNCTION oci_commit
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @return bool
     */
    function oci_commit(resource $connection): bool
-----
FUNCTION oci_connect
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $username
     * @param string $password
     * @param string|null $connection_string
     * @param string $encoding
     * @param int $session_mode
     * @return resource|false
     */
    function oci_connect(string $username, string $password, string|null $connection_string = null, string $encoding = '', int $session_mode = 0): resource|false
-----
FUNCTION oci_define_by_name
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param string $column
     * @param mixed $var
     * @param int $type
     * @return bool
     */
    function oci_define_by_name(resource $statement, string $column, mixed &rw$var, int $type = 0): bool
-----
FUNCTION oci_error
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource|null $connection_or_statement
     * @return array|false
     */
    function oci_error(resource|null $connection_or_statement = null): array|false
-----
FUNCTION oci_execute
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int $mode
     * @return bool
     */
    function oci_execute(resource $statement, int $mode = 32): bool
-----
FUNCTION oci_fetch
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @return bool
     */
    function oci_fetch(resource $statement): bool
-----
FUNCTION oci_fetch_all
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param array $output
     * @param int $offset
     * @param int $limit
     * @param int $flags
     * @return int
     */
    function oci_fetch_all(resource $statement, array &rw$output, int $offset = 0, int $limit = -1, int $flags = 17): int
-----
FUNCTION oci_fetch_array
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int $mode
     * @return array|false
     */
    function oci_fetch_array(resource $statement, int $mode = 7): array|false
-----
FUNCTION oci_fetch_assoc
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @return array|false
     */
    function oci_fetch_assoc(resource $statement): array|false
-----
FUNCTION oci_fetch_object
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int $mode
     * @return stdClass|false
     */
    function oci_fetch_object(resource $statement, int $mode = 5): stdClass|false
-----
FUNCTION oci_fetch_row
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @return array|false
     */
    function oci_fetch_row(resource $statement): array|false
-----
FUNCTION oci_field_is_null
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int|string $column
     * @return bool
     */
    function oci_field_is_null(resource $statement, int|string $column): bool
-----
FUNCTION oci_field_name
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int|string $column
     * @return string|false
     */
    function oci_field_name(resource $statement, int|string $column): string|false
-----
FUNCTION oci_field_precision
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int|string $column
     * @return int|false
     */
    function oci_field_precision(resource $statement, int|string $column): int|false
-----
FUNCTION oci_field_scale
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int|string $column
     * @return int|false
     */
    function oci_field_scale(resource $statement, int|string $column): int|false
-----
FUNCTION oci_field_size
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int|string $column
     * @return int|false
     */
    function oci_field_size(resource $statement, int|string $column): int|false
-----
FUNCTION oci_field_type
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int|string $column
     * @return int|string|false
     */
    function oci_field_type(resource $statement, int|string $column): int|string|false
-----
FUNCTION oci_field_type_raw
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int|string $column
     * @return int|false
     */
    function oci_field_type_raw(resource $statement, int|string $column): int|false
-----
FUNCTION oci_free_descriptor
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param OCILob $lob
     * @return bool
     */
    function oci_free_descriptor(OCILob $lob): bool
-----
FUNCTION oci_free_statement
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @return bool
     */
    function oci_free_statement(resource $statement): bool
-----
FUNCTION oci_get_implicit_resultset
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @return resource|false
     */
    function oci_get_implicit_resultset(resource $statement): resource|false
-----
FUNCTION oci_internal_debug
-----
MISSING
-----
FUNCTION oci_lob_copy
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param OCILob $to
     * @param OCILob $from
     * @param int|null $length
     * @return bool
     */
    function oci_lob_copy(OCILob $to, OCILob $from, int|null $length = null): bool
-----
FUNCTION oci_lob_is_equal
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param OCILob $lob1
     * @param OCILob $lob2
     * @return bool
     */
    function oci_lob_is_equal(OCILob $lob1, OCILob $lob2): bool
-----
FUNCTION oci_new_collection
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @param string $type_name
     * @param string|null $schema
     * @return OCICollection|false
     */
    function oci_new_collection(resource $connection, string $type_name, string|null $schema = null): OCICollection|false
-----
FUNCTION oci_new_connect
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $username
     * @param string $password
     * @param string|null $connection_string
     * @param string $encoding
     * @param int $session_mode
     * @return resource|false
     */
    function oci_new_connect(string $username, string $password, string|null $connection_string = null, string $encoding = '', int $session_mode = 0): resource|false
-----
FUNCTION oci_new_cursor
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @return resource|false
     */
    function oci_new_cursor(resource $connection): resource|false
-----
FUNCTION oci_new_descriptor
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @param int $type
     * @return OCILob|null
     */
    function oci_new_descriptor(resource $connection, int $type = 50): OCILob|null
-----
FUNCTION oci_num_fields
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @return int
     */
    function oci_num_fields(resource $statement): int
-----
FUNCTION oci_num_rows
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @return int<0, max>|false
     */
    function oci_num_rows(resource $statement): int<0, max>|false
-----
FUNCTION oci_parse
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @param string $sql
     * @return resource|false
     */
    function oci_parse(resource $connection, string $sql): resource|false
-----
FUNCTION oci_password_change
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource|string $connection
     * @param string $username
     * @param string $old_password
     * @param string $new_password
     * @return bool
     */
    function oci_password_change(resource|string $connection, string $username, string $old_password, string $new_password): bool
-----
FUNCTION oci_pconnect
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $username
     * @param string $password
     * @param string|null $connection_string
     * @param string $encoding
     * @param int $session_mode
     * @return resource|false
     */
    function oci_pconnect(string $username, string $password, string|null $connection_string = null, string $encoding = '', int $session_mode = 0): resource|false
-----
FUNCTION oci_register_taf_callback
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @param (callable(): mixed)|null $callback
     * @return bool
     */
    function oci_register_taf_callback(resource $connection, (callable(): mixed)|null $callback): bool
-----
FUNCTION oci_result
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int|string $column
     * @return string|false
     */
    function oci_result(resource $statement, int|string $column): string|false
-----
FUNCTION oci_rollback
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @return bool
     */
    function oci_rollback(resource $connection): bool
-----
FUNCTION oci_server_version
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @return string|false
     */
    function oci_server_version(resource $connection): string|false
-----
FUNCTION oci_set_action
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @param string $action
     * @return bool
     */
    function oci_set_action(resource $connection, string $action): bool
-----
FUNCTION oci_set_call_timeout
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @param int $timeout
     * @return bool
     */
    function oci_set_call_timeout(resource $connection, int $timeout): bool
-----
FUNCTION oci_set_client_identifier
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @param string $client_id
     * @return bool
     */
    function oci_set_client_identifier(resource $connection, string $client_id): bool
-----
FUNCTION oci_set_client_info
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @param string $client_info
     * @return bool
     */
    function oci_set_client_info(resource $connection, string $client_info): bool
-----
FUNCTION oci_set_db_operation
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @param string $action
     * @return bool
     */
    function oci_set_db_operation(resource $connection, string $action): bool
-----
FUNCTION oci_set_edition
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $edition
     * @return bool
     */
    function oci_set_edition(string $edition): bool
-----
FUNCTION oci_set_module_name
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @param string $name
     * @return bool
     */
    function oci_set_module_name(resource $connection, string $name): bool
-----
FUNCTION oci_set_prefetch
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int $rows
     * @return bool
     */
    function oci_set_prefetch(resource $statement, int $rows): bool
-----
FUNCTION oci_set_prefetch_lob
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int $prefetch_lob_size
     * @return bool
     */
    function oci_set_prefetch_lob(resource $statement, int $prefetch_lob_size): bool
-----
FUNCTION oci_statement_type
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @return string|false
     */
    function oci_statement_type(resource $statement): string|false
-----
FUNCTION oci_unregister_taf_callback
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @return bool
     */
    function oci_unregister_taf_callback(resource $connection): bool
-----
FUNCTION ocibindbyname
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param string $param
     * @param mixed $var
     * @param int $max_length
     * @param int $type
     * @return bool
     */
    function ocibindbyname(resource $statement, string $param, mixed &rw$var, int $max_length = -1, int $type = 0): bool
-----
FUNCTION ocicancel
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @return bool
     */
    function ocicancel(resource $statement): bool
-----
FUNCTION ocicloselob
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param OCILob $lob_descriptor
     * @return *ERROR*
     */
    function ocicloselob(OCILob $lob_descriptor): mixed
-----
FUNCTION ocicollappend
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param OCICollection $collection
     * @param string $value
     * @return bool
     */
    function ocicollappend(OCICollection $collection, string $value): bool
-----
FUNCTION ocicollassign
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param OCICollection $to
     * @param OCICollection $from
     * @return *ERROR*
     */
    function ocicollassign(OCICollection $to, OCICollection $from): mixed
-----
FUNCTION ocicollassignelem
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param OCICollection $collection
     * @param int $index
     * @param string $value
     * @return bool
     */
    function ocicollassignelem(OCICollection $collection, int $index, string $value): bool
-----
FUNCTION ocicollgetelem
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param OCICollection $collection
     * @param int $index
     * @return float|string|false|null
     */
    function ocicollgetelem(OCICollection $collection, int $index): float|string|false|null
-----
FUNCTION ocicollmax
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param OCICollection $collection
     * @return int|false
     */
    function ocicollmax(OCICollection $collection): int|false
-----
FUNCTION ocicollsize
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param OCICollection $collection
     * @return int|false
     */
    function ocicollsize(OCICollection $collection): int|false
-----
FUNCTION ocicolltrim
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param OCICollection $collection
     * @param int $num
     * @return bool
     */
    function ocicolltrim(OCICollection $collection, int $num): bool
-----
FUNCTION ocicolumnisnull
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int|string $column
     * @return bool
     */
    function ocicolumnisnull(resource $statement, int|string $column): bool
-----
FUNCTION ocicolumnname
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int|string $column
     * @return string|false
     */
    function ocicolumnname(resource $statement, int|string $column): string|false
-----
FUNCTION ocicolumnprecision
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int|string $column
     * @return int|false
     */
    function ocicolumnprecision(resource $statement, int|string $column): int|false
-----
FUNCTION ocicolumnscale
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int|string $column
     * @return int|false
     */
    function ocicolumnscale(resource $statement, int|string $column): int|false
-----
FUNCTION ocicolumnsize
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int|string $column
     * @return int|false
     */
    function ocicolumnsize(resource $statement, int|string $column): int|false
-----
FUNCTION ocicolumntype
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int|string $column
     * @return int|string|false
     */
    function ocicolumntype(resource $statement, int|string $column): int|string|false
-----
FUNCTION ocicolumntyperaw
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int|string $column
     * @return int|false
     */
    function ocicolumntyperaw(resource $statement, int|string $column): int|false
-----
FUNCTION ocicommit
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @return bool
     */
    function ocicommit(resource $connection): bool
-----
FUNCTION ocidefinebyname
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param string $column
     * @param mixed $var
     * @param int $type
     * @return bool
     */
    function ocidefinebyname(resource $statement, string $column, mixed &rw$var, int $type = 0): bool
-----
FUNCTION ocierror
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource|null $connection_or_statement
     * @return array|false
     */
    function ocierror(resource|null $connection_or_statement = null): array|false
-----
FUNCTION ociexecute
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int $mode
     * @return bool
     */
    function ociexecute(resource $statement, int $mode = 32): bool
-----
FUNCTION ocifetch
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @return bool
     */
    function ocifetch(resource $statement): bool
-----
FUNCTION ocifetchinto
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param array $result
     * @param int $mode
     * @return int|false
     */
    function ocifetchinto(resource $statement, array &rw$result, int $mode = 2): int|false
-----
FUNCTION ocifetchstatement
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param array $output
     * @param int $offset
     * @param int $limit
     * @param int $flags
     * @return int
     */
    function ocifetchstatement(resource $statement, array &rw$output, int $offset = 0, int $limit = -1, int $flags = 17): int
-----
FUNCTION ocifreecollection
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param OCICollection $collection
     * @return bool
     */
    function ocifreecollection(OCICollection $collection): bool
-----
FUNCTION ocifreecursor
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @return bool
     */
    function ocifreecursor(resource $statement): bool
-----
FUNCTION ocifreedesc
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param OCILob $lob
     * @return bool
     */
    function ocifreedesc(OCILob $lob): bool
-----
FUNCTION ocifreestatement
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @return bool
     */
    function ocifreestatement(resource $statement): bool
-----
FUNCTION ociinternaldebug
-----
MISSING
-----
FUNCTION ociloadlob
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param OCILob $lob
     * @return string|false
     */
    function ociloadlob(OCILob $lob): string|false
-----
FUNCTION ocilogoff
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @return bool|null
     */
    function ocilogoff(resource $connection): bool|null
-----
FUNCTION ocilogon
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $username
     * @param string $password
     * @param string|null $connection_string
     * @param string $encoding
     * @param int $session_mode
     * @return resource|false
     */
    function ocilogon(string $username, string $password, string|null $connection_string = null, string $encoding = '', int $session_mode = 0): resource|false
-----
FUNCTION ocinewcollection
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @param string $type_name
     * @param string|null $schema
     * @return OCICollection|false
     */
    function ocinewcollection(resource $connection, string $type_name, string|null $schema = null): OCICollection|false
-----
FUNCTION ocinewcursor
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @return resource|false
     */
    function ocinewcursor(resource $connection): resource|false
-----
FUNCTION ocinewdescriptor
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @param int $type
     * @return OCILob|null
     */
    function ocinewdescriptor(resource $connection, int $type = 50): OCILob|null
-----
FUNCTION ocinlogon
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $username
     * @param string $password
     * @param string|null $connection_string
     * @param string $encoding
     * @param int $session_mode
     * @return resource|false
     */
    function ocinlogon(string $username, string $password, string|null $connection_string = null, string $encoding = '', int $session_mode = 0): resource|false
-----
FUNCTION ocinumcols
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @return int
     */
    function ocinumcols(resource $statement): int
-----
FUNCTION ociparse
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @param string $sql
     * @return resource|false
     */
    function ociparse(resource $connection, string $sql): resource|false
-----
FUNCTION ociplogon
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $username
     * @param string $password
     * @param string|null $connection_string
     * @param string $encoding
     * @param int $session_mode
     * @return resource|false
     */
    function ociplogon(string $username, string $password, string|null $connection_string = null, string $encoding = '', int $session_mode = 0): resource|false
-----
FUNCTION ociresult
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int|string $column
     * @return mixed
     */
    function ociresult(resource $statement, int|string $column): mixed
-----
FUNCTION ocirollback
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @return bool
     */
    function ocirollback(resource $connection): bool
-----
FUNCTION ocirowcount
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @return int|false
     */
    function ocirowcount(resource $statement): int|false
-----
FUNCTION ocisavelob
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param OCILob $lob
     * @param string $data
     * @param int $offset
     * @return bool
     */
    function ocisavelob(OCILob $lob, string $data, int $offset = 0): bool
-----
FUNCTION ocisavelobfile
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param OCILob $lob
     * @param string $filename
     * @return bool
     */
    function ocisavelobfile(OCILob $lob, string $filename): bool
-----
FUNCTION ociserverversion
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $connection
     * @return string|false
     */
    function ociserverversion(resource $connection): string|false
-----
FUNCTION ocisetprefetch
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int $rows
     * @return bool
     */
    function ocisetprefetch(resource $statement, int $rows): bool
-----
FUNCTION ocistatementtype
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @return string|false
     */
    function ocistatementtype(resource $statement): string|false
-----
FUNCTION ociwritelobtofile
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param OCILob $lob
     * @param string $filename
     * @param int|null $offset
     * @param int|null $length
     * @return bool
     */
    function ociwritelobtofile(OCILob $lob, string $filename, int|null $offset = null, int|null $length = null): bool
-----
FUNCTION ociwritetemporarylob
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param OCILob $lob_descriptor
     * @param string $data
     * @param int $lob_type
     * @return *ERROR*
     */
    function ociwritetemporarylob(OCILob $lob_descriptor, mixed $data, mixed $lob_type = 2): mixed
-----
FUNCTION octdec
-----
Variants: 1
    /**
     * @param string $octal_string
     * @return float|int
     */
    function octdec(string $octal_string): float|int
-----
FUNCTION odbc_autocommit
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $odbc
     * @param bool $enable
     * @return bool|int
     */
    function odbc_autocommit(resource $odbc, bool $enable = false): bool|int
-----
FUNCTION odbc_binmode
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int $mode
     * @return bool
     */
    function odbc_binmode(resource $statement, int $mode): bool
-----
FUNCTION odbc_close
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $odbc
     * @return void
     */
    function odbc_close(resource $odbc): void
-----
FUNCTION odbc_close_all
-----
Has side-effects: Yes
Variants: 1
    /**
     * @return void
     */
    function odbc_close_all(): void
-----
FUNCTION odbc_columnprivileges
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $odbc
     * @param string|null $catalog
     * @param string $schema
     * @param string $table
     * @param string $column
     * @return resource
     */
    function odbc_columnprivileges(resource $odbc, string|null $catalog, string $schema, string $table, string $column): resource
-----
FUNCTION odbc_columns
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $odbc
     * @param string|null $catalog
     * @param string|null $schema
     * @param string|null $table
     * @param string|null $column
     * @return resource
     */
    function odbc_columns(resource $odbc, string|null $catalog = null, string|null $schema = null, string|null $table = null, string|null $column = null): resource
-----
FUNCTION odbc_commit
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $odbc
     * @return bool
     */
    function odbc_commit(resource $odbc): bool
-----
FUNCTION odbc_connect
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $dsn
     * @param string $user
     * @param string $password
     * @param int $cursor_option
     * @return resource|false
     */
    function odbc_connect(string $dsn, string $user, string $password, int $cursor_option = 2): resource|false
-----
FUNCTION odbc_connection_string_is_quoted
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $str
     * @return bool
     */
    function odbc_connection_string_is_quoted(string $str): bool
-----
FUNCTION odbc_connection_string_quote
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $str
     * @return string
     */
    function odbc_connection_string_quote(string $str): string
-----
FUNCTION odbc_connection_string_should_quote
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $str
     * @return bool
     */
    function odbc_connection_string_should_quote(string $str): bool
-----
FUNCTION odbc_cursor
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @return string|false
     */
    function odbc_cursor(resource $statement): string|false
-----
FUNCTION odbc_data_source
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $odbc
     * @param int $fetch_type
     * @return array|false|null
     */
    function odbc_data_source(resource $odbc, int $fetch_type): array|false|null
-----
FUNCTION odbc_do
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $odbc
     * @param string $query
     * @return resource
     */
    function odbc_do(resource $odbc, string $query): resource
-----
FUNCTION odbc_error
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource|null $odbc
     * @return string
     */
    function odbc_error(resource|null $odbc = null): string
-----
FUNCTION odbc_errormsg
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource|null $odbc
     * @return string
     */
    function odbc_errormsg(resource|null $odbc = null): string
-----
FUNCTION odbc_exec
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $odbc
     * @param string $query
     * @return resource|false
     */
    function odbc_exec(resource $odbc, string $query): resource|false
-----
FUNCTION odbc_execute
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param array $params
     * @return bool
     */
    function odbc_execute(resource $statement, array $params = array{}): bool
-----
FUNCTION odbc_fetch_array
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int $row
     * @return array|false
     */
    function odbc_fetch_array(resource $statement, int $row = -1): array|false
-----
FUNCTION odbc_fetch_into
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param array $array
     * @param int $row
     * @return int|false
     */
    function odbc_fetch_into(resource $statement, array &rw$array, int $row = 0): int|false
-----
FUNCTION odbc_fetch_object
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int $row
     * @return stdClass|false
     */
    function odbc_fetch_object(resource $statement, int $row = -1): stdClass|false
-----
FUNCTION odbc_fetch_row
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int|null $row
     * @return bool
     */
    function odbc_fetch_row(resource $statement, int|null $row = null): bool
-----
FUNCTION odbc_field_len
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int $field
     * @return int|false
     */
    function odbc_field_len(resource $statement, int $field): int|false
-----
FUNCTION odbc_field_name
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int $field
     * @return string|false
     */
    function odbc_field_name(resource $statement, int $field): string|false
-----
FUNCTION odbc_field_num
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param string $field
     * @return int|false
     */
    function odbc_field_num(resource $statement, string $field): int|false
-----
FUNCTION odbc_field_precision
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int $field
     * @return int|false
     */
    function odbc_field_precision(resource $statement, int $field): int|false
-----
FUNCTION odbc_field_scale
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int $field
     * @return int|false
     */
    function odbc_field_scale(resource $statement, int $field): int|false
-----
FUNCTION odbc_field_type
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int $field
     * @return string|false
     */
    function odbc_field_type(resource $statement, int $field): string|false
-----
FUNCTION odbc_foreignkeys
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $odbc
     * @param string|null $pk_catalog
     * @param string $pk_schema
     * @param string $pk_table
     * @param string $fk_catalog
     * @param string $fk_schema
     * @param string $fk_table
     * @return resource
     */
    function odbc_foreignkeys(resource $odbc, string|null $pk_catalog, string $pk_schema, string $pk_table, string $fk_catalog, string $fk_schema, string $fk_table): resource
-----
FUNCTION odbc_free_result
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @return bool
     */
    function odbc_free_result(resource $statement): bool
-----
FUNCTION odbc_gettypeinfo
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $odbc
     * @param int $data_type
     * @return resource
     */
    function odbc_gettypeinfo(resource $odbc, int $data_type = 0): resource
-----
FUNCTION odbc_longreadlen
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int $length
     * @return bool
     */
    function odbc_longreadlen(resource $statement, int $length): bool
-----
FUNCTION odbc_next_result
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @return bool
     */
    function odbc_next_result(resource $statement): bool
-----
FUNCTION odbc_num_fields
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @return int
     */
    function odbc_num_fields(resource $statement): int
-----
FUNCTION odbc_num_rows
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @return int
     */
    function odbc_num_rows(resource $statement): int
-----
FUNCTION odbc_pconnect
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $dsn
     * @param string $user
     * @param string $password
     * @param int $cursor_option
     * @return resource
     */
    function odbc_pconnect(string $dsn, string $user, string $password, int $cursor_option = 2): resource
-----
FUNCTION odbc_prepare
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $odbc
     * @param string $query
     * @return resource|false
     */
    function odbc_prepare(resource $odbc, string $query): resource|false
-----
FUNCTION odbc_primarykeys
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $odbc
     * @param string|null $catalog
     * @param string $schema
     * @param string $table
     * @return resource
     */
    function odbc_primarykeys(resource $odbc, string|null $catalog, string $schema, string $table): resource
-----
FUNCTION odbc_procedurecolumns
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $odbc
     * @param string|null $catalog
     * @param string|null $schema
     * @param string|null $procedure
     * @param string|null $column
     * @return resource
     */
    function odbc_procedurecolumns(resource $odbc, string|null $catalog = null, string|null $schema = null, string|null $procedure = null, string|null $column = null): resource
-----
FUNCTION odbc_procedures
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $odbc
     * @param string|null $catalog
     * @param string|null $schema
     * @param string|null $procedure
     * @return resource
     */
    function odbc_procedures(resource $odbc, string|null $catalog = null, string|null $schema = null, string|null $procedure = null): resource
-----
FUNCTION odbc_result
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param int|string $field
     * @return bool|string|null
     */
    function odbc_result(resource $statement, int|string $field): bool|string|null
-----
FUNCTION odbc_result_all
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $statement
     * @param string $format
     * @return int|false
     */
    function odbc_result_all(resource $statement, string $format = ''): int|false
-----
FUNCTION odbc_rollback
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $odbc
     * @return bool
     */
    function odbc_rollback(resource $odbc): bool
-----
FUNCTION odbc_setoption
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $odbc
     * @param int $which
     * @param int $option
     * @param int $value
     * @return bool
     */
    function odbc_setoption(resource $odbc, int $which, int $option, int $value): bool
-----
FUNCTION odbc_specialcolumns
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $odbc
     * @param int $type
     * @param string|null $catalog
     * @param string $schema
     * @param string $table
     * @param int $scope
     * @param int $nullable
     * @return resource
     */
    function odbc_specialcolumns(resource $odbc, int $type, string|null $catalog, string $schema, string $table, int $scope, int $nullable): resource
-----
FUNCTION odbc_statistics
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $odbc
     * @param string|null $catalog
     * @param string $schema
     * @param string $table
     * @param int $unique
     * @param int $accuracy
     * @return resource
     */
    function odbc_statistics(resource $odbc, string|null $catalog, string $schema, string $table, int $unique, int $accuracy): resource
-----
FUNCTION odbc_tableprivileges
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $odbc
     * @param string|null $catalog
     * @param string $schema
     * @param string $table
     * @return resource
     */
    function odbc_tableprivileges(resource $odbc, string|null $catalog, string $schema, string $table): resource
-----
FUNCTION odbc_tables
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $odbc
     * @param string|null $catalog
     * @param string|null $schema
     * @param string|null $table
     * @param string|null $types
     * @return resource
     */
    function odbc_tables(resource $odbc, string|null $catalog = null, string|null $schema = null, string|null $table = null, string|null $types = null): resource
-----
FUNCTION ogg://
-----
MISSING
-----
FUNCTION opcache_compile_file
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @return bool
     */
    function opcache_compile_file(string $filename): bool
-----
FUNCTION opcache_get_configuration
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return array|false
     */
    function opcache_get_configuration(): array|false
-----
FUNCTION opcache_get_status
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param bool $include_scripts
     * @return array|false
     */
    function opcache_get_status(bool $include_scripts = true): array|false
-----
FUNCTION opcache_invalidate
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param bool $force
     * @return bool
     */
    function opcache_invalidate(string $filename, bool $force = false): bool
-----
FUNCTION opcache_is_script_cached
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @return bool
     */
    function opcache_is_script_cached(string $filename): bool
-----
FUNCTION opcache_reset
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return bool
     */
    function opcache_reset(): bool
-----
FUNCTION openal_buffer_create
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @return resource
     */
    function openal_buffer_create(): resource
-----
FUNCTION openal_buffer_data
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $buffer
     * @param int $format
     * @param string $data
     * @param int $freq
     * @return bool
     */
    function openal_buffer_data(resource $buffer, int $format, string $data, int $freq): bool
-----
FUNCTION openal_buffer_destroy
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $buffer
     * @return bool
     */
    function openal_buffer_destroy(resource $buffer): bool
-----
FUNCTION openal_buffer_get
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $buffer
     * @param int $property
     * @return int
     */
    function openal_buffer_get(resource $buffer, int $property): int
-----
FUNCTION openal_buffer_loadwav
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $buffer
     * @param string $wavfile
     * @return bool
     */
    function openal_buffer_loadwav(resource $buffer, string $wavfile): bool
-----
FUNCTION openal_context_create
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $device
     * @return resource
     */
    function openal_context_create(resource $device): resource
-----
FUNCTION openal_context_current
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $context
     * @return bool
     */
    function openal_context_current(resource $context): bool
-----
FUNCTION openal_context_destroy
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $context
     * @return bool
     */
    function openal_context_destroy(resource $context): bool
-----
FUNCTION openal_context_process
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $context
     * @return bool
     */
    function openal_context_process(resource $context): bool
-----
FUNCTION openal_context_suspend
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $context
     * @return bool
     */
    function openal_context_suspend(resource $context): bool
-----
FUNCTION openal_device_close
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $device
     * @return bool
     */
    function openal_device_close(resource $device): bool
-----
FUNCTION openal_device_open
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $device_desc
     * @return resource|false
     */
    function openal_device_open(string $device_desc): resource|false
-----
FUNCTION openal_listener_get
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $property
     * @return mixed
     */
    function openal_listener_get(int $property): mixed
-----
FUNCTION openal_listener_set
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $property
     * @param mixed $setting
     * @return bool
     */
    function openal_listener_set(int $property, mixed $setting): bool
-----
FUNCTION openal_source_create
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @return resource
     */
    function openal_source_create(): resource
-----
FUNCTION openal_source_destroy
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $source
     * @return bool
     */
    function openal_source_destroy(resource $source): bool
-----
FUNCTION openal_source_get
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $source
     * @param int $property
     * @return mixed
     */
    function openal_source_get(resource $source, int $property): mixed
-----
FUNCTION openal_source_pause
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $source
     * @return bool
     */
    function openal_source_pause(resource $source): bool
-----
FUNCTION openal_source_play
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $source
     * @return bool
     */
    function openal_source_play(resource $source): bool
-----
FUNCTION openal_source_rewind
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $source
     * @return bool
     */
    function openal_source_rewind(resource $source): bool
-----
FUNCTION openal_source_set
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $source
     * @param int $property
     * @param mixed $setting
     * @return bool
     */
    function openal_source_set(resource $source, int $property, mixed $setting): bool
-----
FUNCTION openal_source_stop
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $source
     * @return bool
     */
    function openal_source_stop(resource $source): bool
-----
FUNCTION openal_stream
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $source
     * @param int $format
     * @param int $rate
     * @return resource
     */
    function openal_stream(resource $source, int $format, int $rate): resource
-----
FUNCTION opendir
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $directory
     * @param resource|null $context
     * @return resource|false
     */
    function opendir(string $directory, resource|null $context = null): resource|false
-----
FUNCTION openlog
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $prefix
     * @param int $flags
     * @param int $facility
     * @return true
     */
    function openlog(string $prefix, int $flags, int $facility): true
-----
FUNCTION openssl_cipher_iv_length
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $cipher_algo
     * @return int|false
     */
    function openssl_cipher_iv_length(string $cipher_algo): int|false
-----
FUNCTION openssl_cipher_key_length
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $cipher_algo
     * @return int|false
     */
    function openssl_cipher_key_length(string $cipher_algo): int|false
-----
FUNCTION openssl_cms_decrypt
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $input_filename
     * @param string $output_filename
     * @param OpenSSLCertificate|string $certificate
     * @param array|OpenSSLAsymmetricKey|OpenSSLCertificate|string|null $private_key
     * @param int $encoding
     * @return bool
     */
    function openssl_cms_decrypt(string $input_filename, string $output_filename, OpenSSLCertificate|string $certificate, array|OpenSSLAsymmetricKey|OpenSSLCertificate|string|null $private_key = null, int $encoding = 1): bool
-----
FUNCTION openssl_cms_encrypt
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $input_filename
     * @param string $output_filename
     * @param array|OpenSSLCertificate|string $certificate
     * @param array|null $headers
     * @param int $flags
     * @param int $encoding
     * @param int $cipher_algo
     * @return bool
     */
    function openssl_cms_encrypt(string $input_filename, string $output_filename, array|OpenSSLCertificate|string $certificate, array|null $headers, int $flags = 0, int $encoding = 1, int $cipher_algo = 5): bool
-----
FUNCTION openssl_cms_read
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $input_filename
     * @param array $certificates
     * @return bool
     */
    function openssl_cms_read(string $input_filename, array &rw$certificates): bool
-----
FUNCTION openssl_cms_sign
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $input_filename
     * @param string $output_filename
     * @param OpenSSLCertificate|string $certificate
     * @param array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $private_key
     * @param array|null $headers
     * @param int $flags
     * @param int $encoding
     * @param string|null $untrusted_certificates_filename
     * @return bool
     */
    function openssl_cms_sign(string $input_filename, string $output_filename, OpenSSLCertificate|string $certificate, array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $private_key, array|null $headers, int $flags = 0, int $encoding = 1, string|null $untrusted_certificates_filename = null): bool
-----
FUNCTION openssl_cms_verify
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $input_filename
     * @param int $flags
     * @param string|null $certificates
     * @param array $ca_info
     * @param string|null $untrusted_certificates_filename
     * @param string|null $content
     * @param string|null $pk7
     * @param string|null $sigfile
     * @param int $encoding
     * @return bool
     */
    function openssl_cms_verify(string $input_filename, int $flags = 0, string|null $certificates = null, array $ca_info = array{}, string|null $untrusted_certificates_filename = null, string|null $content = null, string|null $pk7 = null, string|null $sigfile = null, int $encoding = 1): bool
-----
FUNCTION openssl_csr_export
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param OpenSSLCertificateSigningRequest|string $csr
     * @param string $output
     * @param bool $no_text
     * @return bool
     */
    function openssl_csr_export(OpenSSLCertificateSigningRequest|string $csr, string &rw$output, bool $no_text = true): bool
-----
FUNCTION openssl_csr_export_to_file
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param OpenSSLCertificateSigningRequest|string $csr
     * @param string $output_filename
     * @param bool $no_text
     * @return bool
     */
    function openssl_csr_export_to_file(OpenSSLCertificateSigningRequest|string $csr, string $output_filename, bool $no_text = true): bool
-----
FUNCTION openssl_csr_get_public_key
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param OpenSSLCertificateSigningRequest|string $csr
     * @param bool $short_names
     * @return OpenSSLAsymmetricKey|false
     */
    function openssl_csr_get_public_key(OpenSSLCertificateSigningRequest|string $csr, bool $short_names = true): OpenSSLAsymmetricKey|false
-----
FUNCTION openssl_csr_get_subject
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param OpenSSLCertificateSigningRequest|string $csr
     * @param bool $short_names
     * @return array|false
     */
    function openssl_csr_get_subject(OpenSSLCertificateSigningRequest|string $csr, bool $short_names = true): array|false
-----
FUNCTION openssl_csr_new
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $distinguished_names
     * @param OpenSSLAsymmetricKey $private_key
     * @param array|null $options
     * @param array|null $extra_attributes
     * @return OpenSSLCertificateSigningRequest|false
     */
    function openssl_csr_new(array $distinguished_names, OpenSSLAsymmetricKey &rw$private_key, array|null $options = null, array|null $extra_attributes = null): OpenSSLCertificateSigningRequest|false
-----
FUNCTION openssl_csr_sign
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param OpenSSLCertificateSigningRequest|string $csr
     * @param OpenSSLCertificate|string|null $ca_certificate
     * @param array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $private_key
     * @param int $days
     * @param array|null $options
     * @param int $serial
     * @return OpenSSLCertificate|false
     */
    function openssl_csr_sign(OpenSSLCertificateSigningRequest|string $csr, OpenSSLCertificate|string|null $ca_certificate, array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $private_key, int $days, array|null $options = null, int $serial = 0): OpenSSLCertificate|false
-----
FUNCTION openssl_decrypt
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $data
     * @param string $cipher_algo
     * @param string $passphrase
     * @param int $options
     * @param string $iv
     * @param string|null $tag
     * @param string $aad
     * @return string|false
     */
    function openssl_decrypt(string $data, string $cipher_algo, string $passphrase, int $options = 0, string $iv = '', string|null $tag = null, string $aad = ''): string|false
-----
FUNCTION openssl_dh_compute_key
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $public_key
     * @param OpenSSLAsymmetricKey $private_key
     * @return string|false
     */
    function openssl_dh_compute_key(string $public_key, OpenSSLAsymmetricKey $private_key): string|false
-----
FUNCTION openssl_digest
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $data
     * @param string $digest_algo
     * @param bool $binary
     * @return string|false
     */
    function openssl_digest(string $data, string $digest_algo, bool $binary = false): string|false
-----
FUNCTION openssl_encrypt
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $data
     * @param string $cipher_algo
     * @param string $passphrase
     * @param int $options
     * @param string $iv
     * @param string $tag
     * @param string $aad
     * @param int $tag_length
     * @return string|false
     */
    function openssl_encrypt(string $data, string $cipher_algo, string $passphrase, int $options = 0, string $iv = '', string &rw$tag = null, string $aad = '', int $tag_length = 16): string|false
-----
FUNCTION openssl_error_string
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return string|false
     */
    function openssl_error_string(): string|false
-----
FUNCTION openssl_free_key
-----
Is deprecated: Yes
Has side-effects: Yes
Variants: 1
    /**
     * @param OpenSSLAsymmetricKey $key
     * @return void
     */
    function openssl_free_key(OpenSSLAsymmetricKey $key): void
-----
FUNCTION openssl_get_cert_locations
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return array
     */
    function openssl_get_cert_locations(): array
-----
FUNCTION openssl_get_cipher_methods
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param bool $aliases
     * @return array
     */
    function openssl_get_cipher_methods(bool $aliases = false): array
-----
FUNCTION openssl_get_curve_names
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return array<int, string>|false
     */
    function openssl_get_curve_names(): array<int, string>|false
-----
FUNCTION openssl_get_md_methods
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param bool $aliases
     * @return array
     */
    function openssl_get_md_methods(bool $aliases = false): array
-----
FUNCTION openssl_get_privatekey
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $private_key
     * @param string|null $passphrase
     * @return OpenSSLAsymmetricKey|false
     */
    function openssl_get_privatekey(array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $private_key, string|null $passphrase = null): OpenSSLAsymmetricKey|false
-----
FUNCTION openssl_get_publickey
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $public_key
     * @return OpenSSLAsymmetricKey|false
     */
    function openssl_get_publickey(array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $public_key): OpenSSLAsymmetricKey|false
-----
FUNCTION openssl_open
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $data
     * @param string $output
     * @param string $encrypted_key
     * @param array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $private_key
     * @param string $cipher_algo
     * @param string|null $iv
     * @return bool
     */
    function openssl_open(string $data, string &rw$output, string $encrypted_key, array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $private_key, string $cipher_algo, string|null $iv = null): bool
-----
FUNCTION openssl_pbkdf2
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $password
     * @param string $salt
     * @param int $key_length
     * @param int $iterations
     * @param string $digest_algo
     * @return string|false
     */
    function openssl_pbkdf2(string $password, string $salt, int $key_length, int $iterations, string $digest_algo = 'sha1'): string|false
-----
FUNCTION openssl_pkcs12_export
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param OpenSSLCertificate|string $certificate
     * @param string $output
     * @param array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $private_key
     * @param string $passphrase
     * @param array $options
     * @return bool
     */
    function openssl_pkcs12_export(OpenSSLCertificate|string $certificate, string &rw$output, array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $private_key, string $passphrase, array $options = array{}): bool
-----
FUNCTION openssl_pkcs12_export_to_file
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param OpenSSLCertificate|string $certificate
     * @param string $output_filename
     * @param array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $private_key
     * @param string $passphrase
     * @param array $options
     * @return bool
     */
    function openssl_pkcs12_export_to_file(OpenSSLCertificate|string $certificate, string $output_filename, array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $private_key, string $passphrase, array $options = array{}): bool
-----
FUNCTION openssl_pkcs12_read
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $pkcs12
     * @param array $certificates
     * @param string $passphrase
     * @return bool
     */
    function openssl_pkcs12_read(string $pkcs12, array &rw$certificates, string $passphrase): bool
-----
FUNCTION openssl_pkcs7_decrypt
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $input_filename
     * @param string $output_filename
     * @param OpenSSLCertificate|string $certificate
     * @param array|OpenSSLAsymmetricKey|OpenSSLCertificate|string|null $private_key
     * @return bool
     */
    function openssl_pkcs7_decrypt(string $input_filename, string $output_filename, OpenSSLCertificate|string $certificate, array|OpenSSLAsymmetricKey|OpenSSLCertificate|string|null $private_key = null): bool
-----
FUNCTION openssl_pkcs7_encrypt
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $input_filename
     * @param string $output_filename
     * @param array|OpenSSLCertificate|string $certificate
     * @param array|null $headers
     * @param int $flags
     * @param int $cipher_algo
     * @return bool
     */
    function openssl_pkcs7_encrypt(string $input_filename, string $output_filename, array|OpenSSLCertificate|string $certificate, array|null $headers, int $flags = 0, int $cipher_algo = 5): bool
-----
FUNCTION openssl_pkcs7_read
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $data
     * @param array $certificates
     * @return bool
     */
    function openssl_pkcs7_read(string $data, array &rw$certificates): bool
-----
FUNCTION openssl_pkcs7_sign
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $input_filename
     * @param string $output_filename
     * @param OpenSSLCertificate|string $certificate
     * @param array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $private_key
     * @param array|null $headers
     * @param int $flags
     * @param string|null $untrusted_certificates_filename
     * @return bool
     */
    function openssl_pkcs7_sign(string $input_filename, string $output_filename, OpenSSLCertificate|string $certificate, array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $private_key, array|null $headers, int $flags = 64, string|null $untrusted_certificates_filename = null): bool
-----
FUNCTION openssl_pkcs7_verify
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $input_filename
     * @param int $flags
     * @param string|null $signers_certificates_filename
     * @param array $ca_info
     * @param string|null $untrusted_certificates_filename
     * @param string|null $content
     * @param string|null $output_filename
     * @return bool|int
     */
    function openssl_pkcs7_verify(string $input_filename, int $flags, string|null $signers_certificates_filename = null, array $ca_info = array{}, string|null $untrusted_certificates_filename = null, string|null $content = null, string|null $output_filename = null): bool|int
-----
FUNCTION openssl_pkey_derive
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $public_key
     * @param array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $private_key
     * @param int $key_length
     * @return string|false
     */
    function openssl_pkey_derive(array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $public_key, array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $private_key, int $key_length = 0): string|false
-----
FUNCTION openssl_pkey_export
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $key
     * @param string $output
     * @param string|null $passphrase
     * @param array|null $options
     * @return bool
     */
    function openssl_pkey_export(array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $key, string &rw$output, string|null $passphrase = null, array|null $options = null): bool
-----
FUNCTION openssl_pkey_export_to_file
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $key
     * @param string $output_filename
     * @param string|null $passphrase
     * @param array|null $options
     * @return bool
     */
    function openssl_pkey_export_to_file(array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $key, string $output_filename, string|null $passphrase = null, array|null $options = null): bool
-----
FUNCTION openssl_pkey_free
-----
Is deprecated: Yes
Has side-effects: Yes
Variants: 1
    /**
     * @param OpenSSLAsymmetricKey $key
     * @return void
     */
    function openssl_pkey_free(OpenSSLAsymmetricKey $key): void
-----
FUNCTION openssl_pkey_get_details
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param OpenSSLAsymmetricKey $key
     * @return array|false
     */
    function openssl_pkey_get_details(OpenSSLAsymmetricKey $key): array|false
-----
FUNCTION openssl_pkey_get_private
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $private_key
     * @param string|null $passphrase
     * @return OpenSSLAsymmetricKey|false
     */
    function openssl_pkey_get_private(array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $private_key, string|null $passphrase = null): OpenSSLAsymmetricKey|false
-----
FUNCTION openssl_pkey_get_public
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $public_key
     * @return OpenSSLAsymmetricKey|false
     */
    function openssl_pkey_get_public(array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $public_key): OpenSSLAsymmetricKey|false
-----
FUNCTION openssl_pkey_new
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array|null $options
     * @return OpenSSLAsymmetricKey|false
     */
    function openssl_pkey_new(array|null $options = null): OpenSSLAsymmetricKey|false
-----
FUNCTION openssl_private_decrypt
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $data
     * @param string $decrypted_data
     * @param array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $private_key
     * @param int $padding
     * @return bool
     */
    function openssl_private_decrypt(string $data, string &rw$decrypted_data, array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $private_key, int $padding = 1): bool
-----
FUNCTION openssl_private_encrypt
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $data
     * @param string $encrypted_data
     * @param array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $private_key
     * @param int $padding
     * @return bool
     */
    function openssl_private_encrypt(string $data, string &rw$encrypted_data, array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $private_key, int $padding = 1): bool
-----
FUNCTION openssl_public_decrypt
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $data
     * @param string $decrypted_data
     * @param array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $public_key
     * @param int $padding
     * @return bool
     */
    function openssl_public_decrypt(string $data, string &rw$decrypted_data, array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $public_key, int $padding = 1): bool
-----
FUNCTION openssl_public_encrypt
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $data
     * @param string $encrypted_data
     * @param array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $public_key
     * @param int $padding
     * @return bool
     */
    function openssl_public_encrypt(string $data, string &rw$encrypted_data, array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $public_key, int $padding = 1): bool
-----
FUNCTION openssl_random_pseudo_bytes
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $length
     * @param bool $strong_result
     * @return string
     */
    function openssl_random_pseudo_bytes(int $length, bool &rw$strong_result = null): string
-----
FUNCTION openssl_seal
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $data
     * @param string $sealed_data
     * @param array $encrypted_keys
     * @param array $public_key
     * @param string $cipher_algo
     * @param string $iv
     * @return int|false
     */
    function openssl_seal(string $data, string &rw$sealed_data, array &rw$encrypted_keys, array $public_key, string $cipher_algo, string &rw$iv = null): int|false
-----
FUNCTION openssl_sign
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $data
     * @param string $signature
     * @param array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $private_key
     * @param int|string $algorithm
     * @return bool
     */
    function openssl_sign(string $data, string &rw$signature, array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $private_key, int|string $algorithm = 1): bool
-----
FUNCTION openssl_spki_export
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $spki
     * @return string|false
     */
    function openssl_spki_export(string $spki): string|false
-----
FUNCTION openssl_spki_export_challenge
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $spki
     * @return string|false
     */
    function openssl_spki_export_challenge(string $spki): string|false
-----
FUNCTION openssl_spki_new
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param OpenSSLAsymmetricKey $private_key
     * @param string $challenge
     * @param int $digest_algo
     * @return string|false
     */
    function openssl_spki_new(OpenSSLAsymmetricKey $private_key, string $challenge, int $digest_algo = 2): string|false
-----
FUNCTION openssl_spki_verify
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $spki
     * @return bool
     */
    function openssl_spki_verify(string $spki): bool
-----
FUNCTION openssl_verify
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $data
     * @param string $signature
     * @param array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $public_key
     * @param int|string $algorithm
     * @return -1|0|1|false
     */
    function openssl_verify(string $data, string $signature, array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $public_key, int|string $algorithm = 1): -1|0|1|false
-----
FUNCTION openssl_x509_check_private_key
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param OpenSSLCertificate|string $certificate
     * @param array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $private_key
     * @return bool
     */
    function openssl_x509_check_private_key(OpenSSLCertificate|string $certificate, array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $private_key): bool
-----
FUNCTION openssl_x509_checkpurpose
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param OpenSSLCertificate|string $certificate
     * @param int $purpose
     * @param array $ca_info
     * @param string|null $untrusted_certificates_file
     * @return bool|int
     */
    function openssl_x509_checkpurpose(OpenSSLCertificate|string $certificate, int $purpose, array $ca_info = array{}, string|null $untrusted_certificates_file = null): bool|int
-----
FUNCTION openssl_x509_export
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param OpenSSLCertificate|string $certificate
     * @param string $output
     * @param bool $no_text
     * @return bool
     */
    function openssl_x509_export(OpenSSLCertificate|string $certificate, string &rw$output, bool $no_text = true): bool
-----
FUNCTION openssl_x509_export_to_file
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param OpenSSLCertificate|string $certificate
     * @param string $output_filename
     * @param bool $no_text
     * @return bool
     */
    function openssl_x509_export_to_file(OpenSSLCertificate|string $certificate, string $output_filename, bool $no_text = true): bool
-----
FUNCTION openssl_x509_fingerprint
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param OpenSSLCertificate|string $certificate
     * @param string $digest_algo
     * @param bool $binary
     * @return string|false
     */
    function openssl_x509_fingerprint(OpenSSLCertificate|string $certificate, string $digest_algo = 'sha1', bool $binary = false): string|false
-----
FUNCTION openssl_x509_free
-----
Is deprecated: Yes
Has side-effects: Yes
Variants: 1
    /**
     * @param OpenSSLCertificate $certificate
     * @return void
     */
    function openssl_x509_free(OpenSSLCertificate $certificate): void
-----
FUNCTION openssl_x509_parse
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param OpenSSLCertificate|string $certificate
     * @param bool $short_names
     * @return array|false
     */
    function openssl_x509_parse(OpenSSLCertificate|string $certificate, bool $short_names = true): array|false
-----
FUNCTION openssl_x509_read
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param OpenSSLCertificate|string $certificate
     * @return OpenSSLCertificate|false
     */
    function openssl_x509_read(OpenSSLCertificate|string $certificate): OpenSSLCertificate|false
-----
FUNCTION openssl_x509_verify
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param OpenSSLCertificate|string $certificate
     * @param array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $public_key
     * @return int
     */
    function openssl_x509_verify(OpenSSLCertificate|string $certificate, array|OpenSSLAsymmetricKey|OpenSSLCertificate|string $public_key): int
-----
FUNCTION ord
-----
Variants: 1
    /**
     * @param string $character
     * @return int<0, 255>
     */
    function ord(string $character): int<0, 255>
-----
FUNCTION output_add_rewrite_var
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $name
     * @param string $value
     * @return bool
     */
    function output_add_rewrite_var(string $name, string $value): bool
-----
FUNCTION output_reset_rewrite_vars
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return bool
     */
    function output_reset_rewrite_vars(): bool
-----
FUNCTION pack
-----
Variants: 1
    /**
     * @param string $format
     * @param mixed $values
     * @return string
     */
    function pack(string $format, mixed ...$values): string
-----
FUNCTION parallel\bootstrap
-----
Has side-effects: Yes
Throw type: parallel\Runtime\Error\Bootstrap
Variants: 1
    /**
     * @param string $file
     * @return void
     */
    function parallel\bootstrap(string $file): void
-----
FUNCTION parallel\run
-----
Has side-effects: Maybe
Throw type: parallel\Runtime\Error\Closed|parallel\Runtime\Error\IllegalFunction|parallel\Runtime\Error\IllegalInstruction|parallel\Runtime\Error\IllegalParameter|parallel\Runtime\Error\IllegalReturn
Variants: 1
    /**
     * @param Closure $task
     * @param array|null $argv
     * @return parallel\Future|null
     */
    function parallel\run(Closure $task, array|null $argv = null): parallel\Future|null
-----
FUNCTION parse_ini_file
-----
Variants: 1
    /**
     * @param string $filename
     * @param bool $process_sections
     * @param int $scanner_mode
     * @return array|false
     */
    function parse_ini_file(string $filename, bool $process_sections = false, int $scanner_mode = 0): array|false
-----
FUNCTION parse_ini_string
-----
Variants: 1
    /**
     * @param string $ini_string
     * @param bool $process_sections
     * @param int $scanner_mode
     * @return array|false
     */
    function parse_ini_string(string $ini_string, bool $process_sections = false, int $scanner_mode = 0): array|false
-----
FUNCTION parse_str
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $string
     * @param array $result
     * @param-out array<int|string, array|string> $result
     * @return void
     */
    function parse_str(string $string, array &rw$result): void
-----
FUNCTION parse_url
-----
Variants: 1
    /**
     * @param string $url
     * @param int $component
     * @return array|int|string|false|null
     */
    function parse_url(string $url, int $component = -1): array|int|string|false|null
-----
FUNCTION passthru
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $command
     * @param int $result_code
     * @param-out int $result_code
     * @return false|null
     */
    function passthru(string $command, int &rw$result_code = null): false|null
-----
FUNCTION password_algos
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return array<int, string>
     */
    function password_algos(): array<int, string>
-----
FUNCTION password_get_info
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $hash
     * @return array
     */
    function password_get_info(string $hash): array
-----
FUNCTION password_hash
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $password
     * @param int|string|null $algo
     * @param array $options
     * @return string
     */
    function password_hash(string $password, int|string|null $algo, array $options = array{}): string
-----
FUNCTION password_needs_rehash
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $hash
     * @param int|string|null $algo
     * @param array $options
     * @return bool
     */
    function password_needs_rehash(string $hash, int|string|null $algo, array $options = array{}): bool
-----
FUNCTION password_verify
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $password
     * @param string $hash
     * @return bool
     */
    function password_verify(string $password, string $hash): bool
-----
FUNCTION pathinfo
-----
Variants: 1
    /**
     * @param string $path
     * @param int $flags
     * @return array|string
     */
    function pathinfo(string $path, int $flags = 15): array|string
-----
FUNCTION pclose
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $handle
     * @return int
     */
    function pclose(resource $handle): int
-----
FUNCTION pcntl_alarm
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $seconds
     * @return int
     */
    function pcntl_alarm(int $seconds): int
-----
FUNCTION pcntl_async_signals
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param bool|null $enable
     * @return bool
     */
    function pcntl_async_signals(bool|null $enable = null): bool
-----
FUNCTION pcntl_errno
-----
Variants: 1
    /**
     * @return int
     */
    function pcntl_errno(): int
-----
FUNCTION pcntl_exec
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $path
     * @param array $args
     * @param array $env_vars
     * @return bool
     */
    function pcntl_exec(string $path, array $args = array{}, array $env_vars = array{}): bool
-----
FUNCTION pcntl_fork
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return int
     */
    function pcntl_fork(): int
-----
FUNCTION pcntl_get_last_error
-----
Variants: 1
    /**
     * @return int
     */
    function pcntl_get_last_error(): int
-----
FUNCTION pcntl_getpriority
-----
Variants: 1
    /**
     * @param int|null $process_id
     * @param int $mode
     * @return int|false
     */
    function pcntl_getpriority(int|null $process_id = null, int $mode = 0): int|false
-----
FUNCTION pcntl_rfork
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $flags
     * @param int $signal
     * @return int
     */
    function pcntl_rfork(int $flags, int $signal = 0): int
-----
FUNCTION pcntl_setpriority
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $priority
     * @param int|null $process_id
     * @param int $mode
     * @return bool
     */
    function pcntl_setpriority(int $priority, int|null $process_id = null, int $mode = 0): bool
-----
FUNCTION pcntl_signal
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $signal
     * @param (callable(): mixed)|int $handler
     * @param bool $restart_syscalls
     * @return bool
     */
    function pcntl_signal(int $signal, (callable(): mixed)|int $handler, bool $restart_syscalls = true): bool
-----
FUNCTION pcntl_signal_dispatch
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return bool
     */
    function pcntl_signal_dispatch(): bool
-----
FUNCTION pcntl_signal_get_handler
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $signal
     * @return int|string
     */
    function pcntl_signal_get_handler(int $signal): int|string
-----
FUNCTION pcntl_sigprocmask
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $mode
     * @param array $signals
     * @param array $old_signals
     * @return bool
     */
    function pcntl_sigprocmask(int $mode, array $signals, array &rw$old_signals = null): bool
-----
FUNCTION pcntl_sigtimedwait
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $signals
     * @param array $info
     * @param int $seconds
     * @param int $nanoseconds
     * @return int|false
     */
    function pcntl_sigtimedwait(array $signals, array &rw$info = array{}, int $seconds = 0, int $nanoseconds = 0): int|false
-----
FUNCTION pcntl_sigwaitinfo
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $signals
     * @param array $info
     * @return int|false
     */
    function pcntl_sigwaitinfo(array $signals, array &rw$info = array{}): int|false
-----
FUNCTION pcntl_strerror
-----
Variants: 1
    /**
     * @param int $error_code
     * @return string
     */
    function pcntl_strerror(int $error_code): string
-----
FUNCTION pcntl_unshare
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $flags
     * @return bool
     */
    function pcntl_unshare(int $flags): bool
-----
FUNCTION pcntl_wait
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $status
     * @param int $flags
     * @param array $resource_usage
     * @return int
     */
    function pcntl_wait(int &rw$status, int $flags = 0, array &rw$resource_usage = array{}): int
-----
FUNCTION pcntl_waitpid
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $process_id
     * @param int $status
     * @param int $flags
     * @param array $resource_usage
     * @return int
     */
    function pcntl_waitpid(int $process_id, int &rw$status, int $flags = 0, array &rw$resource_usage = array{}): int
-----
FUNCTION pcntl_wexitstatus
-----
Variants: 1
    /**
     * @param int $status
     * @return int|false
     */
    function pcntl_wexitstatus(int $status): int|false
-----
FUNCTION pcntl_wifexited
-----
Variants: 1
    /**
     * @param int $status
     * @return bool
     */
    function pcntl_wifexited(int $status): bool
-----
FUNCTION pcntl_wifsignaled
-----
Variants: 1
    /**
     * @param int $status
     * @return bool
     */
    function pcntl_wifsignaled(int $status): bool
-----
FUNCTION pcntl_wifstopped
-----
Variants: 1
    /**
     * @param int $status
     * @return bool
     */
    function pcntl_wifstopped(int $status): bool
-----
FUNCTION pcntl_wstopsig
-----
Variants: 1
    /**
     * @param int $status
     * @return int|false
     */
    function pcntl_wstopsig(int $status): int|false
-----
FUNCTION pcntl_wtermsig
-----
Variants: 1
    /**
     * @param int $status
     * @return int|false
     */
    function pcntl_wtermsig(int $status): int|false
-----
FUNCTION pfsockopen
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $hostname
     * @param int $port
     * @param int $error_code
     * @param string $error_message
     * @param float|null $timeout
     * @return resource|false
     */
    function pfsockopen(string $hostname, int $port = -1, int &rw$error_code = null, string &rw$error_message = null, float|null $timeout = null): resource|false
-----
FUNCTION pg_affected_rows
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Result $result
     * @return int
     */
    function pg_affected_rows(PgSql\Result $result): int
-----
FUNCTION pg_cancel_query
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection $connection
     * @return bool
     */
    function pg_cancel_query(PgSql\Connection $connection): bool
-----
FUNCTION pg_client_encoding
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection|null $connection
     * @return string
     */
    function pg_client_encoding(PgSql\Connection|null $connection = null): string
-----
FUNCTION pg_close
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection|null $connection
     * @return bool
     */
    function pg_close(PgSql\Connection|null $connection = null): bool
-----
FUNCTION pg_connect
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $connection_string
     * @param int $flags
     * @return PgSql\Connection|false
     */
    function pg_connect(string $connection_string, int $flags = 0): PgSql\Connection|false
-----
FUNCTION pg_connect_poll
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection $connection
     * @return int
     */
    function pg_connect_poll(PgSql\Connection $connection): int
-----
FUNCTION pg_connection_busy
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection $connection
     * @return bool
     */
    function pg_connection_busy(PgSql\Connection $connection): bool
-----
FUNCTION pg_connection_reset
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection $connection
     * @return bool
     */
    function pg_connection_reset(PgSql\Connection $connection): bool
-----
FUNCTION pg_connection_status
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection $connection
     * @return int
     */
    function pg_connection_status(PgSql\Connection $connection): int
-----
FUNCTION pg_consume_input
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection $connection
     * @return bool
     */
    function pg_consume_input(PgSql\Connection $connection): bool
-----
FUNCTION pg_convert
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection $connection
     * @param string $table_name
     * @param array $values
     * @param int $flags
     * @return array<string, mixed>|false
     */
    function pg_convert(PgSql\Connection $connection, string $table_name, array $values, int $flags = 0): array<string, mixed>|false
-----
FUNCTION pg_copy_from
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection $connection
     * @param string $table_name
     * @param array $rows
     * @param string $separator
     * @param string $null_as
     * @return bool
     */
    function pg_copy_from(PgSql\Connection $connection, string $table_name, array $rows, string $separator = "\t", string $null_as = '\\\\N'): bool
-----
FUNCTION pg_copy_to
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection $connection
     * @param string $table_name
     * @param string $separator
     * @param string $null_as
     * @return array<int, string>|false
     */
    function pg_copy_to(PgSql\Connection $connection, string $table_name, string $separator = "\t", string $null_as = '\\\\N'): array<int, string>|false
-----
FUNCTION pg_dbname
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection|null $connection
     * @return string
     */
    function pg_dbname(PgSql\Connection|null $connection = null): string
-----
FUNCTION pg_delete
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection $connection
     * @param string $table_name
     * @param array $conditions
     * @param int $flags
     * @return bool|string
     */
    function pg_delete(PgSql\Connection $connection, string $table_name, array $conditions, int $flags = 512): bool|string
-----
FUNCTION pg_end_copy
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection|null $connection
     * @return bool
     */
    function pg_end_copy(PgSql\Connection|null $connection = null): bool
-----
FUNCTION pg_escape_bytea
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection|string $connection
     * @param string $string
     * @return string
     */
    function pg_escape_bytea(PgSql\Connection|string $connection, string $string = *ERROR*): string
-----
FUNCTION pg_escape_identifier
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection|string $connection
     * @param string $string
     * @return string|false
     */
    function pg_escape_identifier(PgSql\Connection|string $connection, string $string = *ERROR*): string|false
-----
FUNCTION pg_escape_literal
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection|string $connection
     * @param string $string
     * @return string|false
     */
    function pg_escape_literal(PgSql\Connection|string $connection, string $string = *ERROR*): string|false
-----
FUNCTION pg_escape_string
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection|string $connection
     * @param string $string
     * @return string
     */
    function pg_escape_string(PgSql\Connection|string $connection, string $string = *ERROR*): string
-----
FUNCTION pg_execute
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection|string $connection
     * @param array|string $statement_name
     * @param array $params
     * @return PgSql\Result|false
     */
    function pg_execute(PgSql\Connection|string $connection, array|string $statement_name, array $params = *ERROR*): PgSql\Result|false
-----
FUNCTION pg_fetch_all
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Result $result
     * @param int $mode
     * @return array<int, array>
     */
    function pg_fetch_all(PgSql\Result $result, int $mode = 1): array<int, array>
-----
FUNCTION pg_fetch_all_columns
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Result $result
     * @param int $field
     * @return array<int, string|null>
     */
    function pg_fetch_all_columns(PgSql\Result $result, int $field = 0): array<int, string|null>
-----
FUNCTION pg_fetch_array
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Result $result
     * @param int|null $row
     * @param int $mode
     * @return array<int|string, string|null>|false
     */
    function pg_fetch_array(PgSql\Result $result, int|null $row = null, int $mode = 3): array<int|string, string|null>|false
-----
FUNCTION pg_fetch_assoc
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Result $result
     * @param int|null $row
     * @return array<int|string, string|null>|false
     */
    function pg_fetch_assoc(PgSql\Result $result, int|null $row = null): array<int|string, string|null>|false
-----
FUNCTION pg_fetch_object
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Result $result
     * @param int|null $row
     * @param string $class
     * @param array $constructor_args
     * @return object|false
     */
    function pg_fetch_object(PgSql\Result $result, int|null $row = null, string $class = 'stdClass', array $constructor_args = array{}): object|false
-----
FUNCTION pg_fetch_result
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Result $result
     * @param int|string $row
     * @param int|string $field
     * @return string|false|null
     */
    function pg_fetch_result(PgSql\Result $result, int|string $row, int|string $field = *ERROR*): string|false|null
-----
FUNCTION pg_fetch_row
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Result $result
     * @param int|null $row
     * @param int $mode
     * @return array<int|string, string|null>|false
     */
    function pg_fetch_row(PgSql\Result $result, int|null $row = null, int $mode = 2): array<int|string, string|null>|false
-----
FUNCTION pg_field_is_null
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Result $result
     * @param int|string $row
     * @param int|string $field
     * @return int|false
     */
    function pg_field_is_null(PgSql\Result $result, int|string $row, int|string $field = *ERROR*): int|false
-----
FUNCTION pg_field_name
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Result $result
     * @param int $field
     * @return string
     */
    function pg_field_name(PgSql\Result $result, int $field): string
-----
FUNCTION pg_field_num
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Result $result
     * @param string $field
     * @return int
     */
    function pg_field_num(PgSql\Result $result, string $field): int
-----
FUNCTION pg_field_prtlen
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Result $result
     * @param int|string $row
     * @param int|string $field
     * @return int|false
     */
    function pg_field_prtlen(PgSql\Result $result, int|string $row, int|string $field = *ERROR*): int|false
-----
FUNCTION pg_field_size
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Result $result
     * @param int $field
     * @return int
     */
    function pg_field_size(PgSql\Result $result, int $field): int
-----
FUNCTION pg_field_table
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Result $result
     * @param int $field
     * @param bool $oid_only
     * @return int|string|false
     */
    function pg_field_table(PgSql\Result $result, int $field, bool $oid_only = false): int|string|false
-----
FUNCTION pg_field_type
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Result $result
     * @param int $field
     * @return string
     */
    function pg_field_type(PgSql\Result $result, int $field): string
-----
FUNCTION pg_field_type_oid
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Result $result
     * @param int $field
     * @return int|string
     */
    function pg_field_type_oid(PgSql\Result $result, int $field): int|string
-----
FUNCTION pg_flush
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection $connection
     * @return bool|int
     */
    function pg_flush(PgSql\Connection $connection): bool|int
-----
FUNCTION pg_free_result
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Result $result
     * @return bool
     */
    function pg_free_result(PgSql\Result $result): bool
-----
FUNCTION pg_get_notify
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection $connection
     * @param int $mode
     * @return array<int|string, int|string>|false
     */
    function pg_get_notify(PgSql\Connection $connection, int $mode = 1): array<int|string, int|string>|false
-----
FUNCTION pg_get_pid
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection $connection
     * @return int
     */
    function pg_get_pid(PgSql\Connection $connection): int
-----
FUNCTION pg_get_result
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection $connection
     * @return PgSql\Result|false
     */
    function pg_get_result(PgSql\Connection $connection): PgSql\Result|false
-----
FUNCTION pg_host
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection|null $connection
     * @return string
     */
    function pg_host(PgSql\Connection|null $connection = null): string
-----
FUNCTION pg_insert
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection $connection
     * @param string $table_name
     * @param array $values
     * @param int $flags
     * @return bool|PgSql\Result|string
     */
    function pg_insert(PgSql\Connection $connection, string $table_name, array $values, int $flags = 512): bool|PgSql\Result|string
-----
FUNCTION pg_last_error
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection|null $connection
     * @return string
     */
    function pg_last_error(PgSql\Connection|null $connection = null): string
-----
FUNCTION pg_last_notice
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection $connection
     * @param int $mode
     * @return array|bool|string
     */
    function pg_last_notice(PgSql\Connection $connection, int $mode = 1): array|bool|string
-----
FUNCTION pg_last_oid
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Result $result
     * @return int|string|false
     */
    function pg_last_oid(PgSql\Result $result): int|string|false
-----
FUNCTION pg_lo_close
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Lob $lob
     * @return bool
     */
    function pg_lo_close(PgSql\Lob $lob): bool
-----
FUNCTION pg_lo_create
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection $connection
     * @param int|string $oid
     * @return int|string|false
     */
    function pg_lo_create(PgSql\Connection $connection = *ERROR*, int|string $oid = *ERROR*): int|string|false
-----
FUNCTION pg_lo_export
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int|PgSql\Connection|string $connection
     * @param int|string $oid
     * @param int|string $filename
     * @return bool
     */
    function pg_lo_export(int|PgSql\Connection|string $connection, int|string $oid = *ERROR*, int|string $filename = *ERROR*): bool
-----
FUNCTION pg_lo_import
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection|string $connection
     * @param int|string $filename
     * @param int|string $oid
     * @return int|string|false
     */
    function pg_lo_import(PgSql\Connection|string $connection, int|string $filename = *ERROR*, int|string $oid = *ERROR*): int|string|false
-----
FUNCTION pg_lo_open
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection $connection
     * @param int|string $oid
     * @param string $mode
     * @return PgSql\Lob|false
     */
    function pg_lo_open(PgSql\Connection $connection, int|string $oid = *ERROR*, string $mode = *ERROR*): PgSql\Lob|false
-----
FUNCTION pg_lo_read
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Lob $lob
     * @param int $length
     * @return string|false
     */
    function pg_lo_read(PgSql\Lob $lob, int $length = 8192): string|false
-----
FUNCTION pg_lo_read_all
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Lob $lob
     * @return int
     */
    function pg_lo_read_all(PgSql\Lob $lob): int
-----
FUNCTION pg_lo_seek
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Lob $lob
     * @param int $offset
     * @param int $whence
     * @return bool
     */
    function pg_lo_seek(PgSql\Lob $lob, int $offset, int $whence = 1): bool
-----
FUNCTION pg_lo_tell
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Lob $lob
     * @return int
     */
    function pg_lo_tell(PgSql\Lob $lob): int
-----
FUNCTION pg_lo_truncate
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Lob $lob
     * @param int $size
     * @return bool
     */
    function pg_lo_truncate(PgSql\Lob $lob, int $size): bool
-----
FUNCTION pg_lo_unlink
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection $connection
     * @param int|string $oid
     * @return bool
     */
    function pg_lo_unlink(PgSql\Connection $connection, int|string $oid = *ERROR*): bool
-----
FUNCTION pg_lo_write
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Lob $lob
     * @param string $data
     * @param int|null $length
     * @return int|false
     */
    function pg_lo_write(PgSql\Lob $lob, string $data, int|null $length = null): int|false
-----
FUNCTION pg_meta_data
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection $connection
     * @param string $table_name
     * @param bool $extended
     * @return array<string, array>|false
     */
    function pg_meta_data(PgSql\Connection $connection, string $table_name, bool $extended = false): array<string, array>|false
-----
FUNCTION pg_num_fields
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Result $result
     * @return int
     */
    function pg_num_fields(PgSql\Result $result): int
-----
FUNCTION pg_num_rows
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Result $result
     * @return int
     */
    function pg_num_rows(PgSql\Result $result): int
-----
FUNCTION pg_options
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection|null $connection
     * @return string
     */
    function pg_options(PgSql\Connection|null $connection = null): string
-----
FUNCTION pg_parameter_status
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection|string $connection
     * @param string $name
     * @return string|false
     */
    function pg_parameter_status(PgSql\Connection|string $connection, string $name = *ERROR*): string|false
-----
FUNCTION pg_pconnect
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $connection_string
     * @param int $flags
     * @return PgSql\Connection|false
     */
    function pg_pconnect(string $connection_string, int $flags = 0): PgSql\Connection|false
-----
FUNCTION pg_ping
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection|null $connection
     * @return bool
     */
    function pg_ping(PgSql\Connection|null $connection = null): bool
-----
FUNCTION pg_port
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection|null $connection
     * @return string
     */
    function pg_port(PgSql\Connection|null $connection = null): string
-----
FUNCTION pg_prepare
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection|string $connection
     * @param string $statement_name
     * @param string $query
     * @return PgSql\Result|false
     */
    function pg_prepare(PgSql\Connection|string $connection, string $statement_name, string $query = *ERROR*): PgSql\Result|false
-----
FUNCTION pg_put_line
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection|string $connection
     * @param string $query
     * @return bool
     */
    function pg_put_line(PgSql\Connection|string $connection, string $query = *ERROR*): bool
-----
FUNCTION pg_query
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection|string $connection
     * @param string $query
     * @return PgSql\Result|false
     */
    function pg_query(PgSql\Connection|string $connection, string $query = *ERROR*): PgSql\Result|false
-----
FUNCTION pg_query_params
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection|string $connection
     * @param array|string $query
     * @param array $params
     * @return PgSql\Result|false
     */
    function pg_query_params(PgSql\Connection|string $connection, array|string $query, array $params = *ERROR*): PgSql\Result|false
-----
FUNCTION pg_result_error
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Result $result
     * @return string|false
     */
    function pg_result_error(PgSql\Result $result): string|false
-----
FUNCTION pg_result_error_field
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Result $result
     * @param int $field_code
     * @return string|false|null
     */
    function pg_result_error_field(PgSql\Result $result, int $field_code): string|false|null
-----
FUNCTION pg_result_seek
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Result $result
     * @param int $row
     * @return bool
     */
    function pg_result_seek(PgSql\Result $result, int $row): bool
-----
FUNCTION pg_result_status
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Result $result
     * @param int $mode
     * @return int|string
     */
    function pg_result_status(PgSql\Result $result, int $mode = 1): int|string
-----
FUNCTION pg_select
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection $connection
     * @param string $table_name
     * @param array $conditions
     * @param int $flags
     * @param int $mode
     * @return array<int, array>|string|false
     */
    function pg_select(PgSql\Connection $connection, string $table_name, array $conditions, int $flags = 512, int $mode = 1): array<int, array>|string|false
-----
FUNCTION pg_send_execute
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection $connection
     * @param string $statement_name
     * @param array $params
     * @return bool|int
     */
    function pg_send_execute(PgSql\Connection $connection, string $statement_name, array $params): bool|int
-----
FUNCTION pg_send_prepare
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection $connection
     * @param string $statement_name
     * @param string $query
     * @return bool|int
     */
    function pg_send_prepare(PgSql\Connection $connection, string $statement_name, string $query): bool|int
-----
FUNCTION pg_send_query
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection $connection
     * @param string $query
     * @return bool|int
     */
    function pg_send_query(PgSql\Connection $connection, string $query): bool|int
-----
FUNCTION pg_send_query_params
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection $connection
     * @param string $query
     * @param array $params
     * @return bool|int
     */
    function pg_send_query_params(PgSql\Connection $connection, string $query, array $params): bool|int
-----
FUNCTION pg_set_client_encoding
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection|string $connection
     * @param string $encoding
     * @return int
     */
    function pg_set_client_encoding(PgSql\Connection|string $connection, string $encoding = *ERROR*): int
-----
FUNCTION pg_set_error_verbosity
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int|PgSql\Connection $connection
     * @param int $verbosity
     * @return int|false
     */
    function pg_set_error_verbosity(int|PgSql\Connection $connection, int $verbosity = *ERROR*): int|false
-----
FUNCTION pg_socket
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection $connection
     * @return resource|false
     */
    function pg_socket(PgSql\Connection $connection): resource|false
-----
FUNCTION pg_trace
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param string $mode
     * @param PgSql\Connection|null $connection
     * @return bool
     */
    function pg_trace(string $filename, string $mode = 'w', PgSql\Connection|null $connection = null): bool
-----
FUNCTION pg_transaction_status
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection $connection
     * @return int
     */
    function pg_transaction_status(PgSql\Connection $connection): int
-----
FUNCTION pg_tty
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection|null $connection
     * @return string
     */
    function pg_tty(PgSql\Connection|null $connection = null): string
-----
FUNCTION pg_unescape_bytea
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $string
     * @return string
     */
    function pg_unescape_bytea(string $string): string
-----
FUNCTION pg_untrace
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection|null $connection
     * @return bool
     */
    function pg_untrace(PgSql\Connection|null $connection = null): bool
-----
FUNCTION pg_update
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection $connection
     * @param string $table_name
     * @param array $values
     * @param array $conditions
     * @param int $flags
     * @return bool|string
     */
    function pg_update(PgSql\Connection $connection, string $table_name, array $values, array $conditions, int $flags = 512): bool|string
-----
FUNCTION pg_version
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PgSql\Connection|null $connection
     * @return array<string, int|string|null>
     */
    function pg_version(PgSql\Connection|null $connection = null): array<string, int|string|null>
-----
FUNCTION phar://
-----
MISSING
-----
FUNCTION php://
-----
MISSING
-----
FUNCTION php_ini_loaded_file
-----
Variants: 1
    /**
     * @return string|false
     */
    function php_ini_loaded_file(): string|false
-----
FUNCTION php_ini_scanned_files
-----
Variants: 1
    /**
     * @return string|false
     */
    function php_ini_scanned_files(): string|false
-----
FUNCTION php_sapi_name
-----
Variants: 1
    /**
     * @return string|false
     */
    function php_sapi_name(): string|false
-----
FUNCTION php_strip_whitespace
-----
Variants: 1
    /**
     * @param string $filename
     * @return string
     */
    function php_strip_whitespace(string $filename): string
-----
FUNCTION php_uname
-----
Variants: 1
    /**
     * @param string $mode
     * @return string
     */
    function php_uname(string $mode = 'a'): string
-----
FUNCTION phpcredits
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $flags
     * @return true
     */
    function phpcredits(int $flags = 4294967295): true
-----
FUNCTION phpdbg_break_file
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $file
     * @param int $line
     * @return void
     */
    function phpdbg_break_file(string $file, int $line): void
-----
FUNCTION phpdbg_break_function
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $function
     * @return void
     */
    function phpdbg_break_function(string $function): void
-----
FUNCTION phpdbg_break_method
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $class
     * @param string $method
     * @return void
     */
    function phpdbg_break_method(string $class, string $method): void
-----
FUNCTION phpdbg_break_next
-----
Has side-effects: Yes
Variants: 1
    /**
     * @return void
     */
    function phpdbg_break_next(): void
-----
FUNCTION phpdbg_clear
-----
Has side-effects: Yes
Variants: 1
    /**
     * @return void
     */
    function phpdbg_clear(): void
-----
FUNCTION phpdbg_color
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param int $element
     * @param string $color
     * @return void
     */
    function phpdbg_color(int $element, string $color): void
-----
FUNCTION phpdbg_end_oplog
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $options
     * @return array|null
     */
    function phpdbg_end_oplog(array $options = array{}): array|null
-----
FUNCTION phpdbg_exec
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $context
     * @return bool|string
     */
    function phpdbg_exec(string $context): bool|string
-----
FUNCTION phpdbg_get_executable
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $options
     * @return array
     */
    function phpdbg_get_executable(array $options = array{}): array
-----
FUNCTION phpdbg_prompt
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $string
     * @return void
     */
    function phpdbg_prompt(string $string): void
-----
FUNCTION phpdbg_start_oplog
-----
Has side-effects: Yes
Variants: 1
    /**
     * @return void
     */
    function phpdbg_start_oplog(): void
-----
FUNCTION phpinfo
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $flags
     * @return true
     */
    function phpinfo(int $flags = 4294967295): true
-----
FUNCTION phpversion
-----
Variants: 2
    /**
     * @return string
     */
    function phpversion(): string
    /**
     * @param string $extension
     * @return string|false
     */
    function phpversion(string $extension): string|false
-----
FUNCTION pi
-----
Variants: 1
    /**
     * @return float
     */
    function pi(): float
-----
FUNCTION png2wbmp
-----
MISSING
-----
FUNCTION popen
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $command
     * @param string $mode
     * @return resource|false
     */
    function popen(string $command, string $mode): resource|false
-----
FUNCTION pos
-----
Variants: 1
    /**
     * @param array|object $array
     * @return mixed
     */
    function pos(array|object $array): mixed
-----
FUNCTION posix_access
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param int $flags
     * @return bool
     */
    function posix_access(string $filename, int $flags = 0): bool
-----
FUNCTION posix_ctermid
-----
Variants: 1
    /**
     * @return string|false
     */
    function posix_ctermid(): string|false
-----
FUNCTION posix_errno
-----
Variants: 1
    /**
     * @return int
     */
    function posix_errno(): int
-----
FUNCTION posix_get_last_error
-----
Variants: 1
    /**
     * @return int
     */
    function posix_get_last_error(): int
-----
FUNCTION posix_getcwd
-----
Variants: 1
    /**
     * @return string|false
     */
    function posix_getcwd(): string|false
-----
FUNCTION posix_getegid
-----
Variants: 1
    /**
     * @return int
     */
    function posix_getegid(): int
-----
FUNCTION posix_geteuid
-----
Variants: 1
    /**
     * @return int
     */
    function posix_geteuid(): int
-----
FUNCTION posix_getgid
-----
Variants: 1
    /**
     * @return int
     */
    function posix_getgid(): int
-----
FUNCTION posix_getgrgid
-----
Variants: 1
    /**
     * @param int $group_id
     * @return array{name: string, passwd: string, gid: int, members: array<int, string>}|false
     */
    function posix_getgrgid(int $group_id): array{name: string, passwd: string, gid: int, members: array<int, string>}|false
-----
FUNCTION posix_getgrnam
-----
Variants: 1
    /**
     * @param string $name
     * @return array{name: string, passwd: string, gid: int, members: array<int, string>}|false
     */
    function posix_getgrnam(string $name): array{name: string, passwd: string, gid: int, members: array<int, string>}|false
-----
FUNCTION posix_getgroups
-----
Variants: 1
    /**
     * @return array<int, int>|false
     */
    function posix_getgroups(): array<int, int>|false
-----
FUNCTION posix_getlogin
-----
Variants: 1
    /**
     * @return string|false
     */
    function posix_getlogin(): string|false
-----
FUNCTION posix_getpgid
-----
Variants: 1
    /**
     * @param int $process_id
     * @return int|false
     */
    function posix_getpgid(int $process_id): int|false
-----
FUNCTION posix_getpgrp
-----
Variants: 1
    /**
     * @return int
     */
    function posix_getpgrp(): int
-----
FUNCTION posix_getpid
-----
Variants: 1
    /**
     * @return int
     */
    function posix_getpid(): int
-----
FUNCTION posix_getppid
-----
Variants: 1
    /**
     * @return int
     */
    function posix_getppid(): int
-----
FUNCTION posix_getpwnam
-----
Variants: 1
    /**
     * @param string $username
     * @return array|false
     */
    function posix_getpwnam(string $username): array|false
-----
FUNCTION posix_getpwuid
-----
Variants: 1
    /**
     * @param int $user_id
     * @return array|false
     */
    function posix_getpwuid(int $user_id): array|false
-----
FUNCTION posix_getrlimit
-----
Variants: 1
    /**
     * @return array|false
     */
    function posix_getrlimit(): array|false
-----
FUNCTION posix_getsid
-----
Variants: 1
    /**
     * @param int $process_id
     * @return int|false
     */
    function posix_getsid(int $process_id): int|false
-----
FUNCTION posix_getuid
-----
Variants: 1
    /**
     * @return int
     */
    function posix_getuid(): int
-----
FUNCTION posix_initgroups
-----
Variants: 1
    /**
     * @param string $username
     * @param int $group_id
     * @return bool
     */
    function posix_initgroups(string $username, int $group_id): bool
-----
FUNCTION posix_isatty
-----
Variants: 1
    /**
     * @param int|resource $file_descriptor
     * @return bool
     */
    function posix_isatty(int|resource $file_descriptor): bool
-----
FUNCTION posix_kill
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $process_id
     * @param int $signal
     * @return bool
     */
    function posix_kill(int $process_id, int $signal): bool
-----
FUNCTION posix_mkfifo
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param int $permissions
     * @return bool
     */
    function posix_mkfifo(string $filename, int $permissions): bool
-----
FUNCTION posix_mknod
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param int $flags
     * @param int $major
     * @param int $minor
     * @return bool
     */
    function posix_mknod(string $filename, int $flags, int $major = 0, int $minor = 0): bool
-----
FUNCTION posix_setegid
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $group_id
     * @return bool
     */
    function posix_setegid(int $group_id): bool
-----
FUNCTION posix_seteuid
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $user_id
     * @return bool
     */
    function posix_seteuid(int $user_id): bool
-----
FUNCTION posix_setgid
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $group_id
     * @return bool
     */
    function posix_setgid(int $group_id): bool
-----
FUNCTION posix_setpgid
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $process_id
     * @param int $process_group_id
     * @return bool
     */
    function posix_setpgid(int $process_id, int $process_group_id): bool
-----
FUNCTION posix_setrlimit
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $resource
     * @param int $soft_limit
     * @param int $hard_limit
     * @return bool
     */
    function posix_setrlimit(int $resource, int $soft_limit, int $hard_limit): bool
-----
FUNCTION posix_setsid
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return int
     */
    function posix_setsid(): int
-----
FUNCTION posix_setuid
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $user_id
     * @return bool
     */
    function posix_setuid(int $user_id): bool
-----
FUNCTION posix_strerror
-----
Variants: 1
    /**
     * @param int $error_code
     * @return string
     */
    function posix_strerror(int $error_code): string
-----
FUNCTION posix_times
-----
Variants: 1
    /**
     * @return array|false
     */
    function posix_times(): array|false
-----
FUNCTION posix_ttyname
-----
Variants: 1
    /**
     * @param int|resource $file_descriptor
     * @return string|false
     */
    function posix_ttyname(int|resource $file_descriptor): string|false
-----
FUNCTION posix_uname
-----
Variants: 1
    /**
     * @return array|false
     */
    function posix_uname(): array|false
-----
FUNCTION pow
-----
Variants: 1
    /**
     * @param float|int $num
     * @param float|int $exponent
     * @return float|int|object
     */
    function pow(float|int $num, float|int $exponent): float|int|object
-----
FUNCTION preg_filter
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array|string $pattern
     * @param array|string $replacement
     * @param array|string $subject
     * @param int $limit
     * @param int $count
     * @param-out int<0, max> $count
     * @return ($subject is array ? array<int, string> : string|null)
     */
    function preg_filter(array|string $pattern, array|string $replacement, array|string $subject, int $limit = -1, int &rw$count = null): array|string|null
-----
FUNCTION preg_grep
-----
Variants: 1
    /**
     * @param string $pattern
     * @param array $array
     * @param int $flags
     * @return array|false
     */
    function preg_grep(string $pattern, array $array, int $flags = 0): array|false
-----
FUNCTION preg_last_error
-----
Variants: 1
    /**
     * @return int
     */
    function preg_last_error(): int
-----
FUNCTION preg_last_error_msg
-----
Variants: 1
    /**
     * @return string
     */
    function preg_last_error_msg(): string
-----
FUNCTION preg_match
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $pattern
     * @param string $subject
     * @param array<string> $matches
     * @param-out (TFlags of 0|256|512|768 (function preg_match(), parameter) is 256 ? array<array{string, int<-1, max>}> : (TFlags of 0|256|512|768 (function preg_match(), parameter) is 512 ? array<string|null> : (TFlags of 0|256|512|768 (function preg_match(), parameter) is 768 ? array<array{null, -1}|array{string, int<0, max>}> : array<string>))) $matches
     * @param TFlags of 0|256|512|768 (function preg_match(), parameter) $flags
     * @param int $offset
     * @return 0|1|false
     */
    function preg_match(string $pattern, string $subject, array<string> &rw$matches = null, int $flags = 0, int $offset = 0): 0|1|false
-----
FUNCTION preg_match_all
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $pattern
     * @param string $subject
     * @param array $matches
     * @param-out (TFlags of int (function preg_match_all(), parameter) is 1 ? array<array<int, string>> : (TFlags of int (function preg_match_all(), parameter) is 2 ? array<int, array<string>> : (TFlags of int (function preg_match_all(), parameter) is 256|257 ? array<array<int, array{string, int}>> : (TFlags of int (function preg_match_all(), parameter) is 258 ? array<int, array<array{string, int}>> : (TFlags of int (function preg_match_all(), parameter) is 512|513 ? array<array<int, string|null>> : (TFlags of int (function preg_match_all(), parameter) is 514 ? array<int, array<string|null>> : (TFlags of int (function preg_match_all(), parameter) is 770 ? array<int, array<array{string|null, int}>> : array))))))) $matches
     * @param TFlags of int (function preg_match_all(), parameter) $flags
     * @param int $offset
     * @return int<0, max>|false
     */
    function preg_match_all(string $pattern, string $subject, array &rw$matches = null, int $flags = 0, int $offset = 0): int<0, max>|false
-----
FUNCTION preg_quote
-----
Variants: 1
    /**
     * @param string $str
     * @param string|null $delimiter
     * @return string
     */
    function preg_quote(string $str, string|null $delimiter = null): string
-----
FUNCTION preg_replace
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array|string $pattern
     * @param array|string $replacement
     * @param array|string $subject
     * @param int $limit
     * @param int $count
     * @param-out int<0, max> $count
     * @return ($subject is array ? array<int, string>|null : string|null)
     */
    function preg_replace(array|string $pattern, array|string $replacement, array|string $subject, int $limit = -1, int &rw$count = null): array|string|null
-----
FUNCTION preg_replace_callback
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array|string $pattern
     * @param callable(array<int|string, string>): string $callback
     * @param array|string $subject
     * @param int $limit
     * @param int $count
     * @param-out int<0, max> $count
     * @param int $flags
     * @return ($subject is array ? array<int, string>|null : string|null)
     */
    function preg_replace_callback(array|string $pattern, callable(array<int|string, string>): string $callback, array|string $subject, int $limit = -1, int &rw$count = null, int $flags = 0): array|string|null
-----
FUNCTION preg_replace_callback_array
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array<string, callable(): mixed> $pattern
     * @param array|string $subject
     * @param int $limit
     * @param int $count
     * @param int $flags
     * @return array|string|null
     */
    function preg_replace_callback_array(array<string, callable(): mixed> $pattern, array|string $subject, int $limit = -1, int &rw$count = null, int $flags = 0): array|string|null
-----
FUNCTION preg_split
-----
Variants: 1
    /**
     * @param string $pattern
     * @param string $subject
     * @param int $limit
     * @param int $flags
     * @return array<int, string>|false
     */
    function preg_split(string $pattern, string $subject, int $limit = -1, int $flags = 0): array<int, string>|false
-----
FUNCTION prev
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array|object $array
     * @return mixed
     */
    function prev(array|object &r$array): mixed
-----
FUNCTION print
-----
MISSING
-----
FUNCTION print_r
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $value
     * @param bool $return
     * @return ($return is true ? string : true)
     */
    function print_r(mixed $value, bool $return = false): string|true
-----
FUNCTION printf
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $format
     * @param bool|float|int|string|null $values
     * @return int
     */
    function printf(string $format, bool|float|int|string|null ...$values): int
-----
FUNCTION proc_close
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $process
     * @return int
     */
    function proc_close(resource $process): int
-----
FUNCTION proc_get_status
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $process
     * @return array{command: string, pid: int, running: bool, signaled: bool, stopped: bool, exitcode: int, termsig: int, stopsig: int}
     */
    function proc_get_status(resource $process): array{command: string, pid: int, running: bool, signaled: bool, stopped: bool, exitcode: int, termsig: int, stopsig: int}
-----
FUNCTION proc_nice
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $priority
     * @return bool
     */
    function proc_nice(int $priority): bool
-----
FUNCTION proc_open
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array<int, string>|string $command
     * @param array $descriptor_spec
     * @param array<resource> $pipes
     * @param string|null $cwd
     * @param array|null $env_vars
     * @param array|null $options
     * @return resource|false
     */
    function proc_open(array<int, string>|string $command, array $descriptor_spec, array<resource> &rw$pipes, string|null $cwd = null, array|null $env_vars = null, array|null $options = null): resource|false
-----
FUNCTION proc_terminate
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $process
     * @param int $signal
     * @return bool
     */
    function proc_terminate(resource $process, int $signal = 15): bool
-----
FUNCTION property_exists
-----
Variants: 1
    /**
     * @param object|string $object_or_class
     * @param string $property
     * @return bool
     */
    function property_exists(object|string $object_or_class, string $property): bool
-----
FUNCTION ps_add_bookmark
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param string $text
     * @param int $parent
     * @param int $open
     * @return int
     */
    function ps_add_bookmark(resource $psdoc, string $text, int $parent, int $open): int
-----
FUNCTION ps_add_launchlink
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param float $llx
     * @param float $lly
     * @param float $urx
     * @param float $ury
     * @param string $filename
     * @return bool
     */
    function ps_add_launchlink(resource $psdoc, float $llx, float $lly, float $urx, float $ury, string $filename): bool
-----
FUNCTION ps_add_locallink
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param float $llx
     * @param float $lly
     * @param float $urx
     * @param float $ury
     * @param int $page
     * @param string $dest
     * @return bool
     */
    function ps_add_locallink(resource $psdoc, float $llx, float $lly, float $urx, float $ury, int $page, string $dest): bool
-----
FUNCTION ps_add_note
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param float $llx
     * @param float $lly
     * @param float $urx
     * @param float $ury
     * @param string $contents
     * @param string $title
     * @param string $icon
     * @param int $open
     * @return bool
     */
    function ps_add_note(resource $psdoc, float $llx, float $lly, float $urx, float $ury, string $contents, string $title, string $icon, int $open): bool
-----
FUNCTION ps_add_pdflink
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param float $llx
     * @param float $lly
     * @param float $urx
     * @param float $ury
     * @param string $filename
     * @param int $page
     * @param string $dest
     * @return bool
     */
    function ps_add_pdflink(resource $psdoc, float $llx, float $lly, float $urx, float $ury, string $filename, int $page, string $dest): bool
-----
FUNCTION ps_add_weblink
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param float $llx
     * @param float $lly
     * @param float $urx
     * @param float $ury
     * @param string $url
     * @return bool
     */
    function ps_add_weblink(resource $psdoc, float $llx, float $lly, float $urx, float $ury, string $url): bool
-----
FUNCTION ps_arc
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param float $x
     * @param float $y
     * @param float $radius
     * @param float $alpha
     * @param float $beta
     * @return bool
     */
    function ps_arc(resource $psdoc, float $x, float $y, float $radius, float $alpha, float $beta): bool
-----
FUNCTION ps_arcn
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param float $x
     * @param float $y
     * @param float $radius
     * @param float $alpha
     * @param float $beta
     * @return bool
     */
    function ps_arcn(resource $psdoc, float $x, float $y, float $radius, float $alpha, float $beta): bool
-----
FUNCTION ps_begin_page
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param float $width
     * @param float $height
     * @return bool
     */
    function ps_begin_page(resource $psdoc, float $width, float $height): bool
-----
FUNCTION ps_begin_pattern
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param float $width
     * @param float $height
     * @param float $xstep
     * @param float $ystep
     * @param int $painttype
     * @return int
     */
    function ps_begin_pattern(resource $psdoc, float $width, float $height, float $xstep, float $ystep, int $painttype): int
-----
FUNCTION ps_begin_template
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param float $width
     * @param float $height
     * @return int
     */
    function ps_begin_template(resource $psdoc, float $width, float $height): int
-----
FUNCTION ps_circle
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param float $x
     * @param float $y
     * @param float $radius
     * @return bool
     */
    function ps_circle(resource $psdoc, float $x, float $y, float $radius): bool
-----
FUNCTION ps_clip
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @return bool
     */
    function ps_clip(resource $psdoc): bool
-----
FUNCTION ps_close
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @return bool
     */
    function ps_close(resource $psdoc): bool
-----
FUNCTION ps_close_image
-----
Returns by reference: Maybe
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $psdoc
     * @param int $imageid
     * @return void
     */
    function ps_close_image(resource $psdoc, int $imageid): void
-----
FUNCTION ps_closepath
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @return bool
     */
    function ps_closepath(resource $psdoc): bool
-----
FUNCTION ps_closepath_stroke
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @return bool
     */
    function ps_closepath_stroke(resource $psdoc): bool
-----
FUNCTION ps_continue_text
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param string $text
     * @return bool
     */
    function ps_continue_text(resource $psdoc, string $text): bool
-----
FUNCTION ps_curveto
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param float $x1
     * @param float $y1
     * @param float $x2
     * @param float $y2
     * @param float $x3
     * @param float $y3
     * @return bool
     */
    function ps_curveto(resource $psdoc, float $x1, float $y1, float $x2, float $y2, float $x3, float $y3): bool
-----
FUNCTION ps_delete
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @return bool
     */
    function ps_delete(resource $psdoc): bool
-----
FUNCTION ps_end_page
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @return bool
     */
    function ps_end_page(resource $psdoc): bool
-----
FUNCTION ps_end_pattern
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @return bool
     */
    function ps_end_pattern(resource $psdoc): bool
-----
FUNCTION ps_end_template
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @return bool
     */
    function ps_end_template(resource $psdoc): bool
-----
FUNCTION ps_fill
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @return bool
     */
    function ps_fill(resource $psdoc): bool
-----
FUNCTION ps_fill_stroke
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @return bool
     */
    function ps_fill_stroke(resource $psdoc): bool
-----
FUNCTION ps_findfont
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param string $fontname
     * @param string $encoding
     * @param bool $embed
     * @return int
     */
    function ps_findfont(resource $psdoc, string $fontname, string $encoding, bool $embed): int
-----
FUNCTION ps_get_buffer
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @return string
     */
    function ps_get_buffer(resource $psdoc): string
-----
FUNCTION ps_get_parameter
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param string $name
     * @param float $modifier
     * @return string
     */
    function ps_get_parameter(resource $psdoc, string $name, float $modifier): string
-----
FUNCTION ps_get_value
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param string $name
     * @param float $modifier
     * @return float
     */
    function ps_get_value(resource $psdoc, string $name, float $modifier): float
-----
FUNCTION ps_hyphenate
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param string $text
     * @return array
     */
    function ps_hyphenate(resource $psdoc, string $text): array
-----
FUNCTION ps_include_file
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param string $file
     * @return bool
     */
    function ps_include_file(resource $psdoc, string $file): bool
-----
FUNCTION ps_lineto
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param float $x
     * @param float $y
     * @return bool
     */
    function ps_lineto(resource $psdoc, float $x, float $y): bool
-----
FUNCTION ps_makespotcolor
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param string $name
     * @param int $reserved
     * @return int
     */
    function ps_makespotcolor(resource $psdoc, string $name, int $reserved): int
-----
FUNCTION ps_moveto
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param float $x
     * @param float $y
     * @return bool
     */
    function ps_moveto(resource $psdoc, float $x, float $y): bool
-----
FUNCTION ps_new
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @return resource
     */
    function ps_new(): resource
-----
FUNCTION ps_open_file
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param string $filename
     * @return bool
     */
    function ps_open_file(resource $psdoc, string $filename): bool
-----
FUNCTION ps_open_image
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param string $type
     * @param string $source
     * @param string $data
     * @param int $length
     * @param int $width
     * @param int $height
     * @param int $components
     * @param int $bpc
     * @param string $params
     * @return int
     */
    function ps_open_image(resource $psdoc, string $type, string $source, string $data, int $length, int $width, int $height, int $components, int $bpc, string $params): int
-----
FUNCTION ps_open_image_file
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param string $type
     * @param string $filename
     * @param string $stringparam
     * @param int $intparam
     * @return int
     */
    function ps_open_image_file(resource $psdoc, string $type, string $filename, string $stringparam, int $intparam): int
-----
FUNCTION ps_open_memory_image
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param int $gd
     * @return int
     */
    function ps_open_memory_image(resource $psdoc, int $gd): int
-----
FUNCTION ps_place_image
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param int $imageid
     * @param float $x
     * @param float $y
     * @param float $scale
     * @return bool
     */
    function ps_place_image(resource $psdoc, int $imageid, float $x, float $y, float $scale): bool
-----
FUNCTION ps_rect
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param float $x
     * @param float $y
     * @param float $width
     * @param float $height
     * @return bool
     */
    function ps_rect(resource $psdoc, float $x, float $y, float $width, float $height): bool
-----
FUNCTION ps_restore
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @return bool
     */
    function ps_restore(resource $psdoc): bool
-----
FUNCTION ps_rotate
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param float $rot
     * @return bool
     */
    function ps_rotate(resource $psdoc, float $rot): bool
-----
FUNCTION ps_save
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @return bool
     */
    function ps_save(resource $psdoc): bool
-----
FUNCTION ps_scale
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param float $x
     * @param float $y
     * @return bool
     */
    function ps_scale(resource $psdoc, float $x, float $y): bool
-----
FUNCTION ps_set_border_color
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param float $red
     * @param float $green
     * @param float $blue
     * @return bool
     */
    function ps_set_border_color(resource $psdoc, float $red, float $green, float $blue): bool
-----
FUNCTION ps_set_border_dash
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param float $black
     * @param float $white
     * @return bool
     */
    function ps_set_border_dash(resource $psdoc, float $black, float $white): bool
-----
FUNCTION ps_set_border_style
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param string $style
     * @param float $width
     * @return bool
     */
    function ps_set_border_style(resource $psdoc, string $style, float $width): bool
-----
FUNCTION ps_set_info
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $p
     * @param string $key
     * @param string $val
     * @return bool
     */
    function ps_set_info(resource $p, string $key, string $val): bool
-----
FUNCTION ps_set_parameter
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param string $name
     * @param string $value
     * @return bool
     */
    function ps_set_parameter(resource $psdoc, string $name, string $value): bool
-----
FUNCTION ps_set_text_pos
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param float $x
     * @param float $y
     * @return bool
     */
    function ps_set_text_pos(resource $psdoc, float $x, float $y): bool
-----
FUNCTION ps_set_value
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param string $name
     * @param float $value
     * @return bool
     */
    function ps_set_value(resource $psdoc, string $name, float $value): bool
-----
FUNCTION ps_setcolor
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param string $type
     * @param string $colorspace
     * @param float $c1
     * @param float $c2
     * @param float $c3
     * @param float $c4
     * @return bool
     */
    function ps_setcolor(resource $psdoc, string $type, string $colorspace, float $c1, float $c2, float $c3, float $c4): bool
-----
FUNCTION ps_setdash
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param float $on
     * @param float $off
     * @return bool
     */
    function ps_setdash(resource $psdoc, float $on, float $off): bool
-----
FUNCTION ps_setflat
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param float $value
     * @return bool
     */
    function ps_setflat(resource $psdoc, float $value): bool
-----
FUNCTION ps_setfont
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param int $fontid
     * @param float $size
     * @return bool
     */
    function ps_setfont(resource $psdoc, int $fontid, float $size): bool
-----
FUNCTION ps_setgray
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param float $gray
     * @return bool
     */
    function ps_setgray(resource $psdoc, float $gray): bool
-----
FUNCTION ps_setlinecap
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param int $type
     * @return bool
     */
    function ps_setlinecap(resource $psdoc, int $type): bool
-----
FUNCTION ps_setlinejoin
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param int $type
     * @return bool
     */
    function ps_setlinejoin(resource $psdoc, int $type): bool
-----
FUNCTION ps_setlinewidth
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param float $width
     * @return bool
     */
    function ps_setlinewidth(resource $psdoc, float $width): bool
-----
FUNCTION ps_setmiterlimit
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param float $value
     * @return bool
     */
    function ps_setmiterlimit(resource $psdoc, float $value): bool
-----
FUNCTION ps_setoverprintmode
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param int $mode
     * @return bool
     */
    function ps_setoverprintmode(resource $psdoc, int $mode): bool
-----
FUNCTION ps_setpolydash
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param float $arr
     * @return bool
     */
    function ps_setpolydash(resource $psdoc, float $arr): bool
-----
FUNCTION ps_shading
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param string $type
     * @param float $x0
     * @param float $y0
     * @param float $x1
     * @param float $y1
     * @param float $c1
     * @param float $c2
     * @param float $c3
     * @param float $c4
     * @param string $optlist
     * @return int
     */
    function ps_shading(resource $psdoc, string $type, float $x0, float $y0, float $x1, float $y1, float $c1, float $c2, float $c3, float $c4, string $optlist): int
-----
FUNCTION ps_shading_pattern
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param int $shadingid
     * @param string $optlist
     * @return int
     */
    function ps_shading_pattern(resource $psdoc, int $shadingid, string $optlist): int
-----
FUNCTION ps_shfill
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param int $shadingid
     * @return bool
     */
    function ps_shfill(resource $psdoc, int $shadingid): bool
-----
FUNCTION ps_show
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param string $text
     * @return bool
     */
    function ps_show(resource $psdoc, string $text): bool
-----
FUNCTION ps_show2
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param string $text
     * @param int $len
     * @return bool
     */
    function ps_show2(resource $psdoc, string $text, int $len): bool
-----
FUNCTION ps_show_boxed
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param string $text
     * @param float $left
     * @param float $bottom
     * @param float $width
     * @param float $height
     * @param string $hmode
     * @param string $feature
     * @return int
     */
    function ps_show_boxed(resource $psdoc, string $text, float $left, float $bottom, float $width, float $height, string $hmode, string $feature): int
-----
FUNCTION ps_show_xy
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param string $text
     * @param float $x
     * @param float $y
     * @return bool
     */
    function ps_show_xy(resource $psdoc, string $text, float $x, float $y): bool
-----
FUNCTION ps_show_xy2
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param string $text
     * @param int $len
     * @param float $xcoor
     * @param float $ycoor
     * @return bool
     */
    function ps_show_xy2(resource $psdoc, string $text, int $len, float $xcoor, float $ycoor): bool
-----
FUNCTION ps_string_geometry
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param string $text
     * @param int $fontid
     * @param float $size
     * @return array
     */
    function ps_string_geometry(resource $psdoc, string $text, int $fontid, float $size): array
-----
FUNCTION ps_stringwidth
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param string $text
     * @param int $fontid
     * @param float $size
     * @return float
     */
    function ps_stringwidth(resource $psdoc, string $text, int $fontid, float $size): float
-----
FUNCTION ps_stroke
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @return bool
     */
    function ps_stroke(resource $psdoc): bool
-----
FUNCTION ps_symbol
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param int $ord
     * @return bool
     */
    function ps_symbol(resource $psdoc, int $ord): bool
-----
FUNCTION ps_symbol_name
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param int $ord
     * @param int $fontid
     * @return string
     */
    function ps_symbol_name(resource $psdoc, int $ord, int $fontid): string
-----
FUNCTION ps_symbol_width
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param int $ord
     * @param int $fontid
     * @param float $size
     * @return float
     */
    function ps_symbol_width(resource $psdoc, int $ord, int $fontid, float $size): float
-----
FUNCTION ps_translate
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $psdoc
     * @param float $x
     * @param float $y
     * @return bool
     */
    function ps_translate(resource $psdoc, float $x, float $y): bool
-----
FUNCTION pspell_add_to_personal
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PSpell\Dictionary $dictionary
     * @param string $word
     * @return bool
     */
    function pspell_add_to_personal(PSpell\Dictionary $dictionary, string $word): bool
-----
FUNCTION pspell_add_to_session
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PSpell\Dictionary $dictionary
     * @param string $word
     * @return bool
     */
    function pspell_add_to_session(PSpell\Dictionary $dictionary, string $word): bool
-----
FUNCTION pspell_check
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PSpell\Dictionary $dictionary
     * @param string $word
     * @return bool
     */
    function pspell_check(PSpell\Dictionary $dictionary, string $word): bool
-----
FUNCTION pspell_clear_session
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PSpell\Dictionary $dictionary
     * @return bool
     */
    function pspell_clear_session(PSpell\Dictionary $dictionary): bool
-----
FUNCTION pspell_config_create
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $language
     * @param string $spelling
     * @param string $jargon
     * @param string $encoding
     * @return PSpell\Config
     */
    function pspell_config_create(string $language, string $spelling = '', string $jargon = '', string $encoding = ''): PSpell\Config
-----
FUNCTION pspell_config_data_dir
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PSpell\Config $config
     * @param string $directory
     * @return bool
     */
    function pspell_config_data_dir(PSpell\Config $config, string $directory): bool
-----
FUNCTION pspell_config_dict_dir
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PSpell\Config $config
     * @param string $directory
     * @return bool
     */
    function pspell_config_dict_dir(PSpell\Config $config, string $directory): bool
-----
FUNCTION pspell_config_ignore
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PSpell\Config $config
     * @param int $min_length
     * @return bool
     */
    function pspell_config_ignore(PSpell\Config $config, int $min_length): bool
-----
FUNCTION pspell_config_mode
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PSpell\Config $config
     * @param int $mode
     * @return bool
     */
    function pspell_config_mode(PSpell\Config $config, int $mode): bool
-----
FUNCTION pspell_config_personal
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PSpell\Config $config
     * @param string $filename
     * @return bool
     */
    function pspell_config_personal(PSpell\Config $config, string $filename): bool
-----
FUNCTION pspell_config_repl
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PSpell\Config $config
     * @param string $filename
     * @return bool
     */
    function pspell_config_repl(PSpell\Config $config, string $filename): bool
-----
FUNCTION pspell_config_runtogether
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PSpell\Config $config
     * @param bool $allow
     * @return bool
     */
    function pspell_config_runtogether(PSpell\Config $config, bool $allow): bool
-----
FUNCTION pspell_config_save_repl
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PSpell\Config $config
     * @param bool $save
     * @return bool
     */
    function pspell_config_save_repl(PSpell\Config $config, bool $save): bool
-----
FUNCTION pspell_new
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $language
     * @param string $spelling
     * @param string $jargon
     * @param string $encoding
     * @param int $mode
     * @return PSpell\Dictionary|false
     */
    function pspell_new(string $language, string $spelling = '', string $jargon = '', string $encoding = '', int $mode = 0): PSpell\Dictionary|false
-----
FUNCTION pspell_new_config
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PSpell\Config $config
     * @return PSpell\Dictionary|false
     */
    function pspell_new_config(PSpell\Config $config): PSpell\Dictionary|false
-----
FUNCTION pspell_new_personal
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param string $language
     * @param string $spelling
     * @param string $jargon
     * @param string $encoding
     * @param int $mode
     * @return PSpell\Dictionary|false
     */
    function pspell_new_personal(string $filename, string $language, string $spelling = '', string $jargon = '', string $encoding = '', int $mode = 0): PSpell\Dictionary|false
-----
FUNCTION pspell_save_wordlist
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PSpell\Dictionary $dictionary
     * @return bool
     */
    function pspell_save_wordlist(PSpell\Dictionary $dictionary): bool
-----
FUNCTION pspell_store_replacement
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PSpell\Dictionary $dictionary
     * @param string $misspelled
     * @param string $correct
     * @return bool
     */
    function pspell_store_replacement(PSpell\Dictionary $dictionary, string $misspelled, string $correct): bool
-----
FUNCTION pspell_suggest
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param PSpell\Dictionary $dictionary
     * @param string $word
     * @return array<int, string>|false
     */
    function pspell_suggest(PSpell\Dictionary $dictionary, string $word): array<int, string>|false
-----
FUNCTION putenv
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $assignment
     * @return bool
     */
    function putenv(string $assignment): bool
-----
FUNCTION quoted_printable_decode
-----
Variants: 1
    /**
     * @param string $string
     * @return string
     */
    function quoted_printable_decode(string $string): string
-----
FUNCTION quoted_printable_encode
-----
Variants: 1
    /**
     * @param string $string
     * @return string
     */
    function quoted_printable_encode(string $string): string
-----
FUNCTION quotemeta
-----
Variants: 1
    /**
     * @param string $string
     * @return string
     */
    function quotemeta(string $string): string
-----
FUNCTION rad2deg
-----
Variants: 1
    /**
     * @param float $num
     * @return float
     */
    function rad2deg(float $num): float
-----
FUNCTION radius_acct_open
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return resource|false
     */
    function radius_acct_open(): resource|false
-----
FUNCTION radius_add_server
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $radius_handle
     * @param string $hostname
     * @param int $port
     * @param string $secret
     * @param int $timeout
     * @param int $max_tries
     * @return bool
     */
    function radius_add_server(resource $radius_handle, string $hostname, int $port, string $secret, int $timeout, int $max_tries): bool
-----
FUNCTION radius_auth_open
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return resource|false
     */
    function radius_auth_open(): resource|false
-----
FUNCTION radius_close
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $radius_handle
     * @return bool
     */
    function radius_close(resource $radius_handle): bool
-----
FUNCTION radius_config
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $radius_handle
     * @param string $file
     * @return bool
     */
    function radius_config(resource $radius_handle, string $file): bool
-----
FUNCTION radius_create_request
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $radius_handle
     * @param int $type
     * @return bool
     */
    function radius_create_request(resource $radius_handle, int $type): bool
-----
FUNCTION radius_cvt_addr
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $data
     * @return string
     */
    function radius_cvt_addr(string $data): string
-----
FUNCTION radius_cvt_int
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $data
     * @return int
     */
    function radius_cvt_int(string $data): int
-----
FUNCTION radius_cvt_string
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $data
     * @return string
     */
    function radius_cvt_string(string $data): string
-----
FUNCTION radius_demangle
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $radius_handle
     * @param string $mangled
     * @return string
     */
    function radius_demangle(resource $radius_handle, string $mangled): string
-----
FUNCTION radius_demangle_mppe_key
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $radius_handle
     * @param string $mangled
     * @return string
     */
    function radius_demangle_mppe_key(resource $radius_handle, string $mangled): string
-----
FUNCTION radius_get_attr
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $radius_handle
     * @return mixed
     */
    function radius_get_attr(resource $radius_handle): mixed
-----
FUNCTION radius_get_tagged_attr_data
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $data
     * @return string
     */
    function radius_get_tagged_attr_data(string $data): string
-----
FUNCTION radius_get_tagged_attr_tag
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $data
     * @return int
     */
    function radius_get_tagged_attr_tag(string $data): int
-----
FUNCTION radius_get_vendor_attr
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $data
     * @return array
     */
    function radius_get_vendor_attr(string $data): array
-----
FUNCTION radius_put_addr
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $radius_handle
     * @param int $type
     * @param string $addr
     * @return bool
     */
    function radius_put_addr(resource $radius_handle, int $type, string $addr): bool
-----
FUNCTION radius_put_attr
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $radius_handle
     * @param int $type
     * @param string $value
     * @return bool
     */
    function radius_put_attr(resource $radius_handle, int $type, string $value): bool
-----
FUNCTION radius_put_int
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $radius_handle
     * @param int $type
     * @param int $value
     * @return bool
     */
    function radius_put_int(resource $radius_handle, int $type, int $value): bool
-----
FUNCTION radius_put_string
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $radius_handle
     * @param int $type
     * @param string $value
     * @return bool
     */
    function radius_put_string(resource $radius_handle, int $type, string $value): bool
-----
FUNCTION radius_put_vendor_addr
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $radius_handle
     * @param int $vendor
     * @param int $type
     * @param string $addr
     * @return bool
     */
    function radius_put_vendor_addr(resource $radius_handle, int $vendor, int $type, string $addr): bool
-----
FUNCTION radius_put_vendor_attr
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $radius_handle
     * @param int $vendor
     * @param int $type
     * @param string $value
     * @return bool
     */
    function radius_put_vendor_attr(resource $radius_handle, int $vendor, int $type, string $value): bool
-----
FUNCTION radius_put_vendor_int
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $radius_handle
     * @param int $vendor
     * @param int $type
     * @param int $value
     * @return bool
     */
    function radius_put_vendor_int(resource $radius_handle, int $vendor, int $type, int $value): bool
-----
FUNCTION radius_put_vendor_string
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $radius_handle
     * @param int $vendor
     * @param int $type
     * @param string $value
     * @return bool
     */
    function radius_put_vendor_string(resource $radius_handle, int $vendor, int $type, string $value): bool
-----
FUNCTION radius_request_authenticator
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $radius_handle
     * @return string
     */
    function radius_request_authenticator(resource $radius_handle): string
-----
FUNCTION radius_salt_encrypt_attr
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $radius_handle
     * @param string $data
     * @return string
     */
    function radius_salt_encrypt_attr(resource $radius_handle, string $data): string
-----
FUNCTION radius_send_request
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $radius_handle
     * @return int
     */
    function radius_send_request(resource $radius_handle): int
-----
FUNCTION radius_server_secret
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $radius_handle
     * @return string
     */
    function radius_server_secret(resource $radius_handle): string
-----
FUNCTION radius_strerror
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $radius_handle
     * @return string
     */
    function radius_strerror(resource $radius_handle): string
-----
FUNCTION rand
-----
Has side-effects: Yes
Variants: 2
    /**
     * @param int $min
     * @param int $max
     * @return int
     */
    function rand(int $min, int $max): int
    /**
     * @return int
     */
    function rand(): int
-----
FUNCTION random_bytes
-----
Has side-effects: Yes
Throw type: Random\RandomException
Variants: 1
    /**
     * @param int<1, max> $length
     * @return non-empty-string
     */
    function random_bytes(int<1, max> $length): non-empty-string
-----
FUNCTION random_int
-----
Has side-effects: Yes
Throw type: Random\RandomException
Variants: 1
    /**
     * @param int $min
     * @param int $max
     * @return int
     */
    function random_int(int $min, int $max): int
-----
FUNCTION range
-----
Variants: 1
    /**
     * @param float|int|string $start
     * @param float|int|string $end
     * @param float|int $step
     * @return array
     */
    function range(float|int|string $start, float|int|string $end, float|int $step = 1): array
-----
FUNCTION rar://
-----
MISSING
-----
FUNCTION rar_wrapper_cache_stats
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @return string
     */
    function rar_wrapper_cache_stats(): string
-----
FUNCTION rawurldecode
-----
Variants: 1
    /**
     * @param string $string
     * @return string
     */
    function rawurldecode(string $string): string
-----
FUNCTION rawurlencode
-----
Variants: 1
    /**
     * @param string $string
     * @return string
     */
    function rawurlencode(string $string): string
-----
FUNCTION read_exif_data
-----
MISSING
-----
FUNCTION readdir
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource|null $dir_handle
     * @return non-empty-string|false
     */
    function readdir(resource|null $dir_handle = null): non-empty-string|false
-----
FUNCTION readfile
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $filename
     * @param bool $use_include_path
     * @param resource|null $context
     * @return int<0, max>|false
     */
    function readfile(string $filename, bool $use_include_path = false, resource|null $context = null): int<0, max>|false
-----
FUNCTION readgzfile
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param int $use_include_path
     * @return int<0, max>|false
     */
    function readgzfile(string $filename, int $use_include_path = 0): int<0, max>|false
-----
FUNCTION readline
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string|null $prompt
     * @return string|false
     */
    function readline(string|null $prompt = null): string|false
-----
FUNCTION readline_add_history
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $prompt
     * @return bool
     */
    function readline_add_history(string $prompt): bool
-----
FUNCTION readline_callback_handler_install
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $prompt
     * @param callable(): mixed $callback
     * @return bool
     */
    function readline_callback_handler_install(string $prompt, callable(): mixed $callback): bool
-----
FUNCTION readline_callback_handler_remove
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return bool
     */
    function readline_callback_handler_remove(): bool
-----
FUNCTION readline_callback_read_char
-----
Has side-effects: Yes
Variants: 1
    /**
     * @return void
     */
    function readline_callback_read_char(): void
-----
FUNCTION readline_clear_history
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return bool
     */
    function readline_clear_history(): bool
-----
FUNCTION readline_completion_function
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @return bool
     */
    function readline_completion_function(callable(): mixed $callback): bool
-----
FUNCTION readline_info
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string|null $var_name
     * @param bool|int|string|null $value
     * @return array|bool|int|string|null
     */
    function readline_info(string|null $var_name = null, bool|int|string|null $value = null): array|bool|int|string|null
-----
FUNCTION readline_list_history
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return array
     */
    function readline_list_history(): array
-----
FUNCTION readline_on_new_line
-----
Has side-effects: Yes
Variants: 1
    /**
     * @return void
     */
    function readline_on_new_line(): void
-----
FUNCTION readline_read_history
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string|null $filename
     * @return bool
     */
    function readline_read_history(string|null $filename = null): bool
-----
FUNCTION readline_redisplay
-----
Has side-effects: Yes
Variants: 1
    /**
     * @return void
     */
    function readline_redisplay(): void
-----
FUNCTION readline_write_history
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string|null $filename
     * @return bool
     */
    function readline_write_history(string|null $filename = null): bool
-----
FUNCTION readlink
-----
Variants: 1
    /**
     * @param string $path
     * @return string|false
     */
    function readlink(string $path): string|false
-----
FUNCTION realpath
-----
Variants: 1
    /**
     * @param string $path
     * @return non-empty-string|false
     */
    function realpath(string $path): non-empty-string|false
-----
FUNCTION realpath_cache_get
-----
Variants: 1
    /**
     * @return array
     */
    function realpath_cache_get(): array
-----
FUNCTION realpath_cache_size
-----
Variants: 1
    /**
     * @return int
     */
    function realpath_cache_size(): int
-----
FUNCTION recode
-----
MISSING
-----
FUNCTION recode_file
-----
MISSING
-----
FUNCTION recode_string
-----
MISSING
-----
FUNCTION register_shutdown_function
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @param mixed $args
     * @return void
     */
    function register_shutdown_function(callable(): mixed $callback, mixed ...$args): void
-----
FUNCTION register_tick_function
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param callable(): void $callback
     * @param mixed $args
     * @return bool
     */
    function register_tick_function(callable(): void $callback, mixed ...$args): bool
-----
FUNCTION rename
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $from
     * @param string $to
     * @param resource|null $context
     * @return bool
     */
    function rename(string $from, string $to, resource|null $context = null): bool
-----
FUNCTION reset
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array|object $array
     * @return mixed
     */
    function reset(array|object &r$array): mixed
-----
FUNCTION restore_error_handler
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return true
     */
    function restore_error_handler(): true
-----
FUNCTION restore_exception_handler
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return true
     */
    function restore_exception_handler(): true
-----
FUNCTION restore_include_path
-----
MISSING
-----
FUNCTION rewind
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $stream
     * @return bool
     */
    function rewind(resource $stream): bool
-----
FUNCTION rewinddir
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource|null $dir_handle
     * @return void
     */
    function rewinddir(resource|null $dir_handle = null): void
-----
FUNCTION rmdir
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $directory
     * @param resource|null $context
     * @return bool
     */
    function rmdir(string $directory, resource|null $context = null): bool
-----
FUNCTION rnp_backend_string
-----
MISSING
-----
FUNCTION rnp_backend_version
-----
MISSING
-----
FUNCTION rnp_decrypt
-----
MISSING
-----
FUNCTION rnp_dump_packets
-----
MISSING
-----
FUNCTION rnp_dump_packets_to_json
-----
MISSING
-----
FUNCTION rnp_ffi_create
-----
MISSING
-----
FUNCTION rnp_ffi_destroy
-----
MISSING
-----
FUNCTION rnp_ffi_set_pass_provider
-----
MISSING
-----
FUNCTION rnp_import_keys
-----
MISSING
-----
FUNCTION rnp_import_signatures
-----
MISSING
-----
FUNCTION rnp_key_export
-----
MISSING
-----
FUNCTION rnp_key_export_autocrypt
-----
MISSING
-----
FUNCTION rnp_key_export_revocation
-----
MISSING
-----
FUNCTION rnp_key_get_info
-----
MISSING
-----
FUNCTION rnp_key_remove
-----
MISSING
-----
FUNCTION rnp_key_revoke
-----
MISSING
-----
FUNCTION rnp_list_keys
-----
MISSING
-----
FUNCTION rnp_load_keys
-----
MISSING
-----
FUNCTION rnp_load_keys_from_path
-----
MISSING
-----
FUNCTION rnp_locate_key
-----
MISSING
-----
FUNCTION rnp_op_encrypt
-----
MISSING
-----
FUNCTION rnp_op_generate_key
-----
MISSING
-----
FUNCTION rnp_op_sign
-----
MISSING
-----
FUNCTION rnp_op_sign_cleartext
-----
MISSING
-----
FUNCTION rnp_op_sign_detached
-----
MISSING
-----
FUNCTION rnp_op_verify
-----
MISSING
-----
FUNCTION rnp_op_verify_detached
-----
MISSING
-----
FUNCTION rnp_save_keys
-----
MISSING
-----
FUNCTION rnp_save_keys_to_path
-----
MISSING
-----
FUNCTION rnp_supported_features
-----
MISSING
-----
FUNCTION rnp_version_string
-----
MISSING
-----
FUNCTION rnp_version_string_full
-----
MISSING
-----
FUNCTION round
-----
Variants: 1
    /**
     * @param float|int $num
     * @param int $precision
     * @param 1|2|3|4 $mode
     * @return float
     */
    function round(float|int $num, int $precision = 0, 1|2|3|4 $mode = 1): float
-----
FUNCTION rpmaddtag
-----
MISSING
-----
FUNCTION rpmdbinfo
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $nevr
     * @param bool $full
     * @return array|null
     */
    function rpmdbinfo(string $nevr, bool $full = false): mixed
-----
FUNCTION rpmdbsearch
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $pattern
     * @param int $rpmtag
     * @param int $rpmmire
     * @param bool $full
     * @return array|null
     */
    function rpmdbsearch(string $pattern, int $rpmtag = 1000, int $rpmmire = -1, bool $full = false): mixed
-----
FUNCTION rpminfo
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $path
     * @param bool $full
     * @param string|null $error
     * @return array|null
     */
    function rpminfo(string $path, bool $full = false, string|null &rw$error = null): mixed
-----
FUNCTION rpmvercmp
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $evr1
     * @param string $evr2
     * @return int
     */
    function rpmvercmp(string $evr1, string $evr2): mixed
-----
FUNCTION rrd_create
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param array $options
     * @return bool
     */
    function rrd_create(string $filename, array $options): bool
-----
FUNCTION rrd_error
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return string
     */
    function rrd_error(): string
-----
FUNCTION rrd_fetch
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param array $options
     * @return array
     */
    function rrd_fetch(string $filename, array $options): array
-----
FUNCTION rrd_first
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $file
     * @param int $raaindex
     * @return int
     */
    function rrd_first(string $file, int $raaindex = 0): int
-----
FUNCTION rrd_graph
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param array $options
     * @return array
     */
    function rrd_graph(string $filename, array $options): array
-----
FUNCTION rrd_info
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @return array
     */
    function rrd_info(string $filename): array
-----
FUNCTION rrd_last
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @return int
     */
    function rrd_last(string $filename): int
-----
FUNCTION rrd_lastupdate
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @return array
     */
    function rrd_lastupdate(string $filename): array
-----
FUNCTION rrd_restore
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $xml_file
     * @param string $rrd_file
     * @param array $options
     * @return bool
     */
    function rrd_restore(string $xml_file, string $rrd_file, array $options = array{}): bool
-----
FUNCTION rrd_tune
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param array $options
     * @return bool
     */
    function rrd_tune(string $filename, array $options): bool
-----
FUNCTION rrd_update
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param array $options
     * @return bool
     */
    function rrd_update(string $filename, array $options): bool
-----
FUNCTION rrd_version
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return string
     */
    function rrd_version(): string
-----
FUNCTION rrd_xport
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $options
     * @return array
     */
    function rrd_xport(array $options): array
-----
FUNCTION rrdc_disconnect
-----
Has side-effects: Yes
Variants: 1
    /**
     * @return void
     */
    function rrdc_disconnect(): void
-----
FUNCTION rsort
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param TArray of array<T (function rsort(), parameter)> (function rsort(), parameter) $array
     * @param-out (TArray of array<T (function rsort(), parameter)> (function rsort(), parameter) is non-empty-array ? non-empty-array<int, T (function rsort(), parameter)> : array<int, T (function rsort(), parameter)>) $array
     * @param int $flags
     * @return bool
     */
    function rsort(array &r$array, int $flags = 0): bool
-----
FUNCTION rtrim
-----
Variants: 1
    /**
     * @param string $string
     * @param string $characters
     * @return string
     */
    function rtrim(string $string, string $characters = " \n\r\t\v\000"): string
-----
FUNCTION runkit7_constant_add
-----
MISSING
-----
FUNCTION runkit7_constant_redefine
-----
MISSING
-----
FUNCTION runkit7_constant_remove
-----
MISSING
-----
FUNCTION runkit7_function_add
-----
MISSING
-----
FUNCTION runkit7_function_copy
-----
MISSING
-----
FUNCTION runkit7_function_redefine
-----
MISSING
-----
FUNCTION runkit7_function_remove
-----
MISSING
-----
FUNCTION runkit7_function_rename
-----
MISSING
-----
FUNCTION runkit7_import
-----
MISSING
-----
FUNCTION runkit7_method_add
-----
MISSING
-----
FUNCTION runkit7_method_copy
-----
MISSING
-----
FUNCTION runkit7_method_redefine
-----
MISSING
-----
FUNCTION runkit7_method_remove
-----
MISSING
-----
FUNCTION runkit7_method_rename
-----
MISSING
-----
FUNCTION runkit7_object_id
-----
MISSING
-----
FUNCTION runkit7_superglobals
-----
MISSING
-----
FUNCTION runkit7_zval_inspect
-----
MISSING
-----
FUNCTION sapi_windows_cp_conv
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int|string $in_codepage
     * @param int|string $out_codepage
     * @param string $subject
     * @return string|null
     */
    function sapi_windows_cp_conv(int|string $in_codepage, int|string $out_codepage, string $subject): string|null
-----
FUNCTION sapi_windows_cp_get
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $kind
     * @return int
     */
    function sapi_windows_cp_get(string $kind = ''): int
-----
FUNCTION sapi_windows_cp_is_utf8
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return bool
     */
    function sapi_windows_cp_is_utf8(): bool
-----
FUNCTION sapi_windows_cp_set
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $codepage
     * @return bool
     */
    function sapi_windows_cp_set(int $codepage): bool
-----
FUNCTION sapi_windows_generate_ctrl_event
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $event
     * @param int $pid
     * @return bool
     */
    function sapi_windows_generate_ctrl_event(int $event, int $pid = 0): bool
-----
FUNCTION sapi_windows_set_ctrl_handler
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param (callable(int): void)|null $handler
     * @param bool $add
     * @return bool
     */
    function sapi_windows_set_ctrl_handler((callable(int): void)|null $handler, bool $add = true): bool
-----
FUNCTION sapi_windows_vt100_support
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @param bool|null $enable
     * @return bool
     */
    function sapi_windows_vt100_support(resource $stream, bool|null $enable = null): bool
-----
FUNCTION scandir
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $directory
     * @param int $sorting_order
     * @param resource|null $context
     * @return array<int, string>|false
     */
    function scandir(string $directory, int $sorting_order = 0, resource|null $context = null): array<int, string>|false
-----
FUNCTION scoutapm_get_calls
-----
MISSING
-----
FUNCTION scoutapm_list_instrumented_functions
-----
MISSING
-----
FUNCTION seaslog_get_author
-----
MISSING
-----
FUNCTION seaslog_get_version
-----
MISSING
-----
FUNCTION sem_acquire
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param SysvSemaphore $semaphore
     * @param bool $non_blocking
     * @return bool
     */
    function sem_acquire(SysvSemaphore $semaphore, bool $non_blocking = false): bool
-----
FUNCTION sem_get
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $key
     * @param int $max_acquire
     * @param int $permissions
     * @param bool $auto_release
     * @return SysvSemaphore|false
     */
    function sem_get(int $key, int $max_acquire = 1, int $permissions = 438, bool $auto_release = true): SysvSemaphore|false
-----
FUNCTION sem_release
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param SysvSemaphore $semaphore
     * @return bool
     */
    function sem_release(SysvSemaphore $semaphore): bool
-----
FUNCTION sem_remove
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param SysvSemaphore $semaphore
     * @return bool
     */
    function sem_remove(SysvSemaphore $semaphore): bool
-----
FUNCTION serialize
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $value
     * @return string
     */
    function serialize(mixed $value): string
-----
FUNCTION session_abort
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return bool
     */
    function session_abort(): bool
-----
FUNCTION session_cache_expire
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int|null $value
     * @return int|false
     */
    function session_cache_expire(int|null $value = null): int|false
-----
FUNCTION session_cache_limiter
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string|null $value
     * @return string|false
     */
    function session_cache_limiter(string|null $value = null): string|false
-----
FUNCTION session_commit
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return bool
     */
    function session_commit(): bool
-----
FUNCTION session_create_id
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $prefix
     * @return string|false
     */
    function session_create_id(string $prefix = ''): string|false
-----
FUNCTION session_decode
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $data
     * @return bool
     */
    function session_decode(string $data): bool
-----
FUNCTION session_destroy
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return bool
     */
    function session_destroy(): bool
-----
FUNCTION session_encode
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return string|false
     */
    function session_encode(): string|false
-----
FUNCTION session_gc
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return int|false
     */
    function session_gc(): int|false
-----
FUNCTION session_get_cookie_params
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return array
     */
    function session_get_cookie_params(): array
-----
FUNCTION session_id
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string|null $id
     * @return string|false
     */
    function session_id(string|null $id = null): string|false
-----
FUNCTION session_module_name
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string|null $module
     * @return string|false
     */
    function session_module_name(string|null $module = null): string|false
-----
FUNCTION session_name
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string|null $name
     * @return string|false
     */
    function session_name(string|null $name = null): string|false
-----
FUNCTION session_regenerate_id
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param bool $delete_old_session
     * @return bool
     */
    function session_regenerate_id(bool $delete_old_session = false): bool
-----
FUNCTION session_register_shutdown
-----
Has side-effects: Yes
Variants: 1
    /**
     * @return void
     */
    function session_register_shutdown(): void
-----
FUNCTION session_reset
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return bool
     */
    function session_reset(): bool
-----
FUNCTION session_save_path
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string|null $path
     * @return string|false
     */
    function session_save_path(string|null $path = null): string|false
-----
FUNCTION session_set_cookie_params
-----
Has side-effects: Maybe
Variants: 2
    /**
     * @param int $lifetime
     * @param string $path
     * @param string|null $domain
     * @param bool $secure
     * @param bool $httponly
     * @return bool
     */
    function session_set_cookie_params(int $lifetime, string $path, string|null $domain, bool $secure, bool $httponly): bool
    /**
     * @param array{lifetime?: int, path?: string, domain?: string|null, secure?: bool, httponly?: bool, samesite?: string} $options
     * @return bool
     */
    function session_set_cookie_params(array{lifetime?: int, path?: string, domain?: string|null, secure?: bool, httponly?: bool, samesite?: string} $options): bool
-----
FUNCTION session_set_save_handler
-----
Has side-effects: Maybe
Variants: 2
    /**
     * @param callable(string, string): bool $open
     * @param callable(): bool $close
     * @param callable(string): string $read
     * @param callable(string, string): bool $write
     * @param callable(string): bool $destroy
     * @param callable(string): bool $gc
     * @param callable(): string $create_sid
     * @param callable(string): bool $validate_sid
     * @param callable(string): bool $update_timestamp
     * @return bool
     */
    function session_set_save_handler(callable(string, string): bool $open, callable(): bool $close, callable(string): string $read, callable(string, string): bool $write, callable(string): bool $destroy, callable(string): bool $gc, callable(): string $create_sid = null, callable(string): bool $validate_sid = null, callable(string): bool $update_timestamp = null): bool
    /**
     * @param SessionHandlerInterface $sessionhandler
     * @param bool $register_shutdown
     * @return bool
     */
    function session_set_save_handler(SessionHandlerInterface $sessionhandler, bool $register_shutdown): bool
-----
FUNCTION session_start
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $options
     * @return bool
     */
    function session_start(array $options = array{}): bool
-----
FUNCTION session_status
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return 0|1|2
     */
    function session_status(): 0|1|2
-----
FUNCTION session_unset
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return bool
     */
    function session_unset(): bool
-----
FUNCTION session_write_close
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return bool
     */
    function session_write_close(): bool
-----
FUNCTION set_error_handler
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param (callable(int, string, string, int): bool)|null $callback
     * @param int $error_levels
     * @return (callable(): mixed)|null
     */
    function set_error_handler((callable(int, string, string, int): bool)|null $callback, int $error_levels = 32767): (callable(): mixed)|null
-----
FUNCTION set_exception_handler
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param (callable(Throwable): void)|null $callback
     * @return (callable(Throwable): void)|null
     */
    function set_exception_handler((callable(Throwable): void)|null $callback): (callable(Throwable): void)|null
-----
FUNCTION set_file_buffer
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @param int $size
     * @return int
     */
    function set_file_buffer(resource $stream, int $size): int
-----
FUNCTION set_include_path
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $include_path
     * @return string|false
     */
    function set_include_path(string $include_path): string|false
-----
FUNCTION set_time_limit
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $seconds
     * @return bool
     */
    function set_time_limit(int $seconds): bool
-----
FUNCTION setcookie
-----
Has side-effects: Maybe
Variants: 2
    /**
     * @param string $name
     * @param string $value
     * @param int $expires
     * @param string $path
     * @param string $domain
     * @param bool $secure
     * @param bool $httponly
     * @param 'Lax'|'lax'|'None'|'none'|'Strict'|'strict' $samesite
     * @param int $url_encode
     * @return bool
     */
    function setcookie(string $name, string $value = '', int $expires = 0, string $path = '', string $domain = '', bool $secure = false, bool $httponly = false, 'Lax'|'lax'|'None'|'none'|'Strict'|'strict' $samesite, int $url_encode): bool
    /**
     * @param string $name
     * @param string $value
     * @param array{expires?: int, path?: string, domain?: string, secure?: bool, httponly?: bool, samesite?: 'Lax'|'lax'|'None'|'none'|'Strict'|'strict', url_encode?: int} $options
     * @return bool
     */
    function setcookie(string $name, string $value = '', array{expires?: int, path?: string, domain?: string, secure?: bool, httponly?: bool, samesite?: 'Lax'|'lax'|'None'|'none'|'Strict'|'strict', url_encode?: int} $options = 0): bool
-----
FUNCTION setlocale
-----
Has side-effects: Maybe
Variants: 2
    /**
     * @param int $category
     * @param string|null $locale
     * @param string $args
     * @return string|false
     */
    function setlocale(int $category, string|null $locale, string ...$args): string|false
    /**
     * @param int $category
     * @param array|null $locale
     * @return string|false
     */
    function setlocale(int $category, array|null $locale): string|false
-----
FUNCTION setrawcookie
-----
Has side-effects: Maybe
Variants: 2
    /**
     * @param string $name
     * @param string $value
     * @param int $expires
     * @param string $path
     * @param string $domain
     * @param bool $secure
     * @param bool $httponly
     * @param 'Lax'|'lax'|'None'|'none'|'Strict'|'strict' $samesite
     * @param int $url_encode
     * @return bool
     */
    function setrawcookie(string $name, string $value = '', int $expires = 0, string $path = '', string $domain = '', bool $secure = false, bool $httponly = false, 'Lax'|'lax'|'None'|'none'|'Strict'|'strict' $samesite, int $url_encode): bool
    /**
     * @param string $name
     * @param string $value
     * @param array{expires?: int, path?: string, domain?: string, secure?: bool, httponly?: bool, samesite?: 'Lax'|'lax'|'None'|'none'|'Strict'|'strict', url_encode?: int} $options
     * @return bool
     */
    function setrawcookie(string $name, string $value = '', array{expires?: int, path?: string, domain?: string, secure?: bool, httponly?: bool, samesite?: 'Lax'|'lax'|'None'|'none'|'Strict'|'strict', url_encode?: int} $options = 0): bool
-----
FUNCTION settype
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $var
     * @param string $type
     * @return bool
     */
    function settype(mixed &r$var, string $type): bool
-----
FUNCTION sha1
-----
Variants: 1
    /**
     * @param string $string
     * @param bool $binary
     * @return non-empty-string
     */
    function sha1(string $string, bool $binary = false): non-empty-string
-----
FUNCTION sha1_file
-----
Variants: 1
    /**
     * @param string $filename
     * @param bool $binary
     * @return non-empty-string|false
     */
    function sha1_file(string $filename, bool $binary = false): non-empty-string|false
-----
FUNCTION shell_exec
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $command
     * @return string|false|null
     */
    function shell_exec(string $command): string|false|null
-----
FUNCTION shm_attach
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $key
     * @param int|null $size
     * @param int $permissions
     * @return SysvSharedMemory|false
     */
    function shm_attach(int $key, int|null $size = null, int $permissions = 438): SysvSharedMemory|false
-----
FUNCTION shm_detach
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param SysvSharedMemory $shm
     * @return bool
     */
    function shm_detach(SysvSharedMemory $shm): bool
-----
FUNCTION shm_get_var
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param SysvSharedMemory $shm
     * @param int $key
     * @return mixed
     */
    function shm_get_var(SysvSharedMemory $shm, int $key): mixed
-----
FUNCTION shm_has_var
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param SysvSharedMemory $shm
     * @param int $key
     * @return bool
     */
    function shm_has_var(SysvSharedMemory $shm, int $key): bool
-----
FUNCTION shm_put_var
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param SysvSharedMemory $shm
     * @param int $key
     * @param mixed $value
     * @return bool
     */
    function shm_put_var(SysvSharedMemory $shm, int $key, mixed $value): bool
-----
FUNCTION shm_remove
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param SysvSharedMemory $shm
     * @return bool
     */
    function shm_remove(SysvSharedMemory $shm): bool
-----
FUNCTION shm_remove_var
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param SysvSharedMemory $shm
     * @param int $key
     * @return bool
     */
    function shm_remove_var(SysvSharedMemory $shm, int $key): bool
-----
FUNCTION shmop_close
-----
Is deprecated: Yes
Has side-effects: Yes
Variants: 1
    /**
     * @param Shmop $shmop
     * @return void
     */
    function shmop_close(Shmop $shmop): void
-----
FUNCTION shmop_delete
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param Shmop $shmop
     * @return bool
     */
    function shmop_delete(Shmop $shmop): bool
-----
FUNCTION shmop_open
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $key
     * @param string $mode
     * @param int $permissions
     * @param int $size
     * @return Shmop|false
     */
    function shmop_open(int $key, string $mode, int $permissions, int $size): Shmop|false
-----
FUNCTION shmop_read
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param Shmop $shmop
     * @param int $offset
     * @param int $size
     * @return string
     */
    function shmop_read(Shmop $shmop, int $offset, int $size): string
-----
FUNCTION shmop_size
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param Shmop $shmop
     * @return int
     */
    function shmop_size(Shmop $shmop): int
-----
FUNCTION shmop_write
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param Shmop $shmop
     * @param string $data
     * @param int $offset
     * @return int
     */
    function shmop_write(Shmop $shmop, string $data, int $offset): int
-----
FUNCTION show_source
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param bool $return
     * @return ($return is true ? string : bool)
     */
    function show_source(string $filename, bool $return = false): bool|string
-----
FUNCTION shuffle
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param TArray of array<T (function shuffle(), parameter)> (function shuffle(), parameter) $array
     * @param-out (TArray of array<T (function shuffle(), parameter)> (function shuffle(), parameter) is non-empty-array ? non-empty-array<int, T (function shuffle(), parameter)> : array<int, T (function shuffle(), parameter)>) $array
     * @return true
     */
    function shuffle(array &r$array): true
-----
FUNCTION simdjson_decode
-----
MISSING
-----
FUNCTION simdjson_is_valid
-----
MISSING
-----
FUNCTION simdjson_key_count
-----
MISSING
-----
FUNCTION simdjson_key_exists
-----
MISSING
-----
FUNCTION simdjson_key_value
-----
MISSING
-----
FUNCTION similar_text
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $string1
     * @param string $string2
     * @param float $percent
     * @param-out float $percent
     * @return int
     */
    function similar_text(string $string1, string $string2, float &rw$percent = null): int
-----
FUNCTION simplexml_import_dom
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param DOMNode|SimpleXMLElement $node
     * @param string|null $class_name
     * @return SimpleXMLElement|null
     */
    function simplexml_import_dom(DOMNode|SimpleXMLElement $node, string|null $class_name = 'SimpleXMLElement'): SimpleXMLElement|null
-----
FUNCTION simplexml_load_file
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param string|null $class_name
     * @param int $options
     * @param string $namespace_or_prefix
     * @param bool $is_prefix
     * @return SimpleXMLElement|false
     */
    function simplexml_load_file(string $filename, string|null $class_name = 'SimpleXMLElement', int $options = 0, string $namespace_or_prefix = '', bool $is_prefix = false): SimpleXMLElement|false
-----
FUNCTION simplexml_load_string
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $data
     * @param string|null $class_name
     * @param int $options
     * @param string $namespace_or_prefix
     * @param bool $is_prefix
     * @return SimpleXMLElement|false
     */
    function simplexml_load_string(string $data, string|null $class_name = 'SimpleXMLElement', int $options = 0, string $namespace_or_prefix = '', bool $is_prefix = false): SimpleXMLElement|false
-----
FUNCTION sin
-----
Variants: 1
    /**
     * @param float $num
     * @return float
     */
    function sin(float $num): float
-----
FUNCTION sinh
-----
Variants: 1
    /**
     * @param float $num
     * @return float
     */
    function sinh(float $num): float
-----
FUNCTION sizeof
-----
Variants: 1
    /**
     * @param array|Countable $value
     * @param int $mode
     * @return int
     */
    function sizeof(array|Countable $value, int $mode = 0): int
-----
FUNCTION sleep
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $seconds
     * @return int
     */
    function sleep(int $seconds): int
-----
FUNCTION snmp2_get
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $hostname
     * @param string $community
     * @param array|string $object_id
     * @param int $timeout
     * @param int $retries
     * @return string|false
     */
    function snmp2_get(string $hostname, string $community, array|string $object_id, int $timeout = -1, int $retries = -1): string|false
-----
FUNCTION snmp2_getnext
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $hostname
     * @param string $community
     * @param array|string $object_id
     * @param int $timeout
     * @param int $retries
     * @return string|false
     */
    function snmp2_getnext(string $hostname, string $community, array|string $object_id, int $timeout = -1, int $retries = -1): string|false
-----
FUNCTION snmp2_real_walk
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $hostname
     * @param string $community
     * @param array|string $object_id
     * @param int $timeout
     * @param int $retries
     * @return array|false
     */
    function snmp2_real_walk(string $hostname, string $community, array|string $object_id, int $timeout = -1, int $retries = -1): array|false
-----
FUNCTION snmp2_set
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $hostname
     * @param string $community
     * @param array|string $object_id
     * @param array|string $type
     * @param array|string $value
     * @param int $timeout
     * @param int $retries
     * @return bool
     */
    function snmp2_set(string $hostname, string $community, array|string $object_id, array|string $type, array|string $value, int $timeout = -1, int $retries = -1): bool
-----
FUNCTION snmp2_walk
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $hostname
     * @param string $community
     * @param array|string $object_id
     * @param int $timeout
     * @param int $retries
     * @return array|false
     */
    function snmp2_walk(string $hostname, string $community, array|string $object_id, int $timeout = -1, int $retries = -1): array|false
-----
FUNCTION snmp3_get
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $hostname
     * @param string $security_name
     * @param string $security_level
     * @param string $auth_protocol
     * @param string $auth_passphrase
     * @param string $privacy_protocol
     * @param string $privacy_passphrase
     * @param array|string $object_id
     * @param int $timeout
     * @param int $retries
     * @return string|false
     */
    function snmp3_get(string $hostname, string $security_name, string $security_level, string $auth_protocol, string $auth_passphrase, string $privacy_protocol, string $privacy_passphrase, array|string $object_id, int $timeout = -1, int $retries = -1): string|false
-----
FUNCTION snmp3_getnext
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $hostname
     * @param string $security_name
     * @param string $security_level
     * @param string $auth_protocol
     * @param string $auth_passphrase
     * @param string $privacy_protocol
     * @param string $privacy_passphrase
     * @param array|string $object_id
     * @param int $timeout
     * @param int $retries
     * @return string|false
     */
    function snmp3_getnext(string $hostname, string $security_name, string $security_level, string $auth_protocol, string $auth_passphrase, string $privacy_protocol, string $privacy_passphrase, array|string $object_id, int $timeout = -1, int $retries = -1): string|false
-----
FUNCTION snmp3_real_walk
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $hostname
     * @param string $security_name
     * @param string $security_level
     * @param string $auth_protocol
     * @param string $auth_passphrase
     * @param string $privacy_protocol
     * @param string $privacy_passphrase
     * @param array|string $object_id
     * @param int $timeout
     * @param int $retries
     * @return array|false
     */
    function snmp3_real_walk(string $hostname, string $security_name, string $security_level, string $auth_protocol, string $auth_passphrase, string $privacy_protocol, string $privacy_passphrase, array|string $object_id, int $timeout = -1, int $retries = -1): array|false
-----
FUNCTION snmp3_set
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $hostname
     * @param string $security_name
     * @param string $security_level
     * @param string $auth_protocol
     * @param string $auth_passphrase
     * @param string $privacy_protocol
     * @param string $privacy_passphrase
     * @param array|string $object_id
     * @param array|string $type
     * @param array|string $value
     * @param int $timeout
     * @param int $retries
     * @return bool
     */
    function snmp3_set(string $hostname, string $security_name, string $security_level, string $auth_protocol, string $auth_passphrase, string $privacy_protocol, string $privacy_passphrase, array|string $object_id, array|string $type, array|string $value, int $timeout = -1, int $retries = -1): bool
-----
FUNCTION snmp3_walk
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $hostname
     * @param string $security_name
     * @param string $security_level
     * @param string $auth_protocol
     * @param string $auth_passphrase
     * @param string $privacy_protocol
     * @param string $privacy_passphrase
     * @param array|string $object_id
     * @param int $timeout
     * @param int $retries
     * @return array|false
     */
    function snmp3_walk(string $hostname, string $security_name, string $security_level, string $auth_protocol, string $auth_passphrase, string $privacy_protocol, string $privacy_passphrase, array|string $object_id, int $timeout = -1, int $retries = -1): array|false
-----
FUNCTION snmp_get_quick_print
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return bool
     */
    function snmp_get_quick_print(): bool
-----
FUNCTION snmp_get_valueretrieval
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return int
     */
    function snmp_get_valueretrieval(): int
-----
FUNCTION snmp_read_mib
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @return bool
     */
    function snmp_read_mib(string $filename): bool
-----
FUNCTION snmp_set_enum_print
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param bool $enable
     * @return bool
     */
    function snmp_set_enum_print(bool $enable): bool
-----
FUNCTION snmp_set_oid_numeric_print
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $format
     * @return bool
     */
    function snmp_set_oid_numeric_print(int $format): bool
-----
FUNCTION snmp_set_oid_output_format
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $format
     * @return bool
     */
    function snmp_set_oid_output_format(int $format): bool
-----
FUNCTION snmp_set_quick_print
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param bool $enable
     * @return bool
     */
    function snmp_set_quick_print(bool $enable): bool
-----
FUNCTION snmp_set_valueretrieval
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $method
     * @return bool
     */
    function snmp_set_valueretrieval(int $method): bool
-----
FUNCTION snmpget
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $hostname
     * @param string $community
     * @param array|string $object_id
     * @param int $timeout
     * @param int $retries
     * @return string|false
     */
    function snmpget(string $hostname, string $community, array|string $object_id, int $timeout = -1, int $retries = -1): string|false
-----
FUNCTION snmpgetnext
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $hostname
     * @param string $community
     * @param array|string $object_id
     * @param int $timeout
     * @param int $retries
     * @return string|false
     */
    function snmpgetnext(string $hostname, string $community, array|string $object_id, int $timeout = -1, int $retries = -1): string|false
-----
FUNCTION snmprealwalk
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $hostname
     * @param string $community
     * @param array|string $object_id
     * @param int $timeout
     * @param int $retries
     * @return array|false
     */
    function snmprealwalk(string $hostname, string $community, array|string $object_id, int $timeout = -1, int $retries = -1): array|false
-----
FUNCTION snmpset
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $hostname
     * @param string $community
     * @param array|string $object_id
     * @param array|string $type
     * @param array|string $value
     * @param int $timeout
     * @param int $retries
     * @return bool
     */
    function snmpset(string $hostname, string $community, array|string $object_id, array|string $type, array|string $value, int $timeout = -1, int $retries = -1): bool
-----
FUNCTION snmpwalk
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $hostname
     * @param string $community
     * @param array|string $object_id
     * @param int $timeout
     * @param int $retries
     * @return array|false
     */
    function snmpwalk(string $hostname, string $community, array|string $object_id, int $timeout = -1, int $retries = -1): array|false
-----
FUNCTION snmpwalkoid
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $hostname
     * @param string $community
     * @param array|string $object_id
     * @param int $timeout
     * @param int $retries
     * @return array|false
     */
    function snmpwalkoid(string $hostname, string $community, array|string $object_id, int $timeout = -1, int $retries = -1): array|false
-----
FUNCTION socket_accept
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param Socket $socket
     * @return Socket|false
     */
    function socket_accept(Socket $socket): Socket|false
-----
FUNCTION socket_addrinfo_bind
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param AddressInfo $address
     * @return Socket|false
     */
    function socket_addrinfo_bind(AddressInfo $address): Socket|false
-----
FUNCTION socket_addrinfo_connect
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param AddressInfo $address
     * @return Socket|false
     */
    function socket_addrinfo_connect(AddressInfo $address): Socket|false
-----
FUNCTION socket_addrinfo_explain
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param AddressInfo $address
     * @return array
     */
    function socket_addrinfo_explain(AddressInfo $address): array
-----
FUNCTION socket_addrinfo_lookup
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $host
     * @param string|null $service
     * @param array $hints
     * @return array<AddressInfo>|false
     */
    function socket_addrinfo_lookup(string $host, string|null $service = null, array $hints = array{}): array<AddressInfo>|false
-----
FUNCTION socket_bind
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param Socket $socket
     * @param string $address
     * @param int $port
     * @return bool
     */
    function socket_bind(Socket $socket, string $address, int $port = 0): bool
-----
FUNCTION socket_clear_error
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param Socket|null $socket
     * @return void
     */
    function socket_clear_error(Socket|null $socket = null): void
-----
FUNCTION socket_close
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param Socket $socket
     * @return void
     */
    function socket_close(Socket $socket): void
-----
FUNCTION socket_cmsg_space
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $level
     * @param int $type
     * @param int $num
     * @return int|null
     */
    function socket_cmsg_space(int $level, int $type, int $num = 0): int|null
-----
FUNCTION socket_connect
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param Socket $socket
     * @param string $address
     * @param int|null $port
     * @return bool
     */
    function socket_connect(Socket $socket, string $address, int|null $port = null): bool
-----
FUNCTION socket_create
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $domain
     * @param int $type
     * @param int $protocol
     * @return Socket|false
     */
    function socket_create(int $domain, int $type, int $protocol): Socket|false
-----
FUNCTION socket_create_listen
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $port
     * @param int $backlog
     * @return Socket|false
     */
    function socket_create_listen(int $port, int $backlog = 128): Socket|false
-----
FUNCTION socket_create_pair
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $domain
     * @param int $type
     * @param int $protocol
     * @param array<resource> $pair
     * @return bool
     */
    function socket_create_pair(int $domain, int $type, int $protocol, array<resource> &rw$pair): bool
-----
FUNCTION socket_export_stream
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param Socket $socket
     * @return resource|false
     */
    function socket_export_stream(Socket $socket): resource|false
-----
FUNCTION socket_get_option
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param Socket $socket
     * @param int $level
     * @param int $option
     * @return array|int|false
     */
    function socket_get_option(Socket $socket, int $level, int $option): array|int|false
-----
FUNCTION socket_get_status
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @return array
     */
    function socket_get_status(resource $stream): array
-----
FUNCTION socket_getopt
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param Socket $socket
     * @param int $level
     * @param int $option
     * @return array|int|false
     */
    function socket_getopt(Socket $socket, int $level, int $option): array|int|false
-----
FUNCTION socket_getpeername
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param Socket $socket
     * @param string $address
     * @param int $port
     * @return bool
     */
    function socket_getpeername(Socket $socket, string &rw$address, int &rw$port = null): bool
-----
FUNCTION socket_getsockname
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param Socket $socket
     * @param string $address
     * @param int $port
     * @return bool
     */
    function socket_getsockname(Socket $socket, string &rw$address, int &rw$port = null): bool
-----
FUNCTION socket_import_stream
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @return Socket|false
     */
    function socket_import_stream(resource $stream): Socket|false
-----
FUNCTION socket_last_error
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param Socket|null $socket
     * @return int
     */
    function socket_last_error(Socket|null $socket = null): int
-----
FUNCTION socket_listen
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param Socket $socket
     * @param int $backlog
     * @return bool
     */
    function socket_listen(Socket $socket, int $backlog = 0): bool
-----
FUNCTION socket_read
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param Socket $socket
     * @param int $length
     * @param int $mode
     * @return string|false
     */
    function socket_read(Socket $socket, int $length, int $mode = 2): string|false
-----
FUNCTION socket_recv
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param Socket $socket
     * @param string|null $data
     * @param int $length
     * @param int $flags
     * @return int|false
     */
    function socket_recv(Socket $socket, string|null &rw$data, int $length, int $flags): int|false
-----
FUNCTION socket_recvfrom
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param Socket $socket
     * @param string $data
     * @param int $length
     * @param int $flags
     * @param string $address
     * @param int $port
     * @return int|false
     */
    function socket_recvfrom(Socket $socket, string &rw$data, int $length, int $flags, string &rw$address, int &rw$port = null): int|false
-----
FUNCTION socket_recvmsg
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param Socket $socket
     * @param array $message
     * @param int $flags
     * @return int|false
     */
    function socket_recvmsg(Socket $socket, array &rw$message, int $flags = 0): int|false
-----
FUNCTION socket_select
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array<Socket>|null $read
     * @param array<Socket>|null $write
     * @param array<Socket>|null $except
     * @param int|null $seconds
     * @param int $microseconds
     * @return int|false
     */
    function socket_select(array<Socket>|null &r$read, array<Socket>|null &r$write, array<Socket>|null &r$except, int|null $seconds, int $microseconds = 0): int|false
-----
FUNCTION socket_send
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param Socket $socket
     * @param string $data
     * @param int $length
     * @param int $flags
     * @return int|false
     */
    function socket_send(Socket $socket, string $data, int $length, int $flags): int|false
-----
FUNCTION socket_sendmsg
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param Socket $socket
     * @param array $message
     * @param int $flags
     * @return int|false
     */
    function socket_sendmsg(Socket $socket, array $message, int $flags = 0): int|false
-----
FUNCTION socket_sendto
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param Socket $socket
     * @param string $data
     * @param int $length
     * @param int $flags
     * @param string $address
     * @param int|null $port
     * @return int|false
     */
    function socket_sendto(Socket $socket, string $data, int $length, int $flags, string $address, int|null $port = null): int|false
-----
FUNCTION socket_set_block
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param Socket $socket
     * @return bool
     */
    function socket_set_block(Socket $socket): bool
-----
FUNCTION socket_set_blocking
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @param bool $enable
     * @return bool
     */
    function socket_set_blocking(resource $stream, bool $enable): bool
-----
FUNCTION socket_set_nonblock
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param Socket $socket
     * @return bool
     */
    function socket_set_nonblock(Socket $socket): bool
-----
FUNCTION socket_set_option
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param Socket $socket
     * @param int $level
     * @param int $option
     * @param array|int|string $value
     * @return bool
     */
    function socket_set_option(Socket $socket, int $level, int $option, array|int|string $value): bool
-----
FUNCTION socket_set_timeout
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @param int $seconds
     * @param int $microseconds
     * @return bool
     */
    function socket_set_timeout(resource $stream, int $seconds, int $microseconds = 0): bool
-----
FUNCTION socket_setopt
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param Socket $socket
     * @param int $level
     * @param int $option
     * @param array|int|string $value
     * @return bool
     */
    function socket_setopt(Socket $socket, int $level, int $option, array|int|string $value): bool
-----
FUNCTION socket_shutdown
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param Socket $socket
     * @param int $mode
     * @return bool
     */
    function socket_shutdown(Socket $socket, int $mode = 2): bool
-----
FUNCTION socket_strerror
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $error_code
     * @return string
     */
    function socket_strerror(int $error_code): string
-----
FUNCTION socket_write
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param Socket $socket
     * @param string $data
     * @param int|null $length
     * @return int|false
     */
    function socket_write(Socket $socket, string $data, int|null $length = null): int|false
-----
FUNCTION socket_wsaprotocol_info_export
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param Socket $socket
     * @param int $process_id
     * @return string|false
     */
    function socket_wsaprotocol_info_export(Socket $socket, int $process_id): string|false
-----
FUNCTION socket_wsaprotocol_info_import
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $info_id
     * @return Socket|false
     */
    function socket_wsaprotocol_info_import(string $info_id): Socket|false
-----
FUNCTION socket_wsaprotocol_info_release
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $info_id
     * @return bool
     */
    function socket_wsaprotocol_info_release(string $info_id): bool
-----
FUNCTION sodium_add
-----
Has side-effects: Yes
Throw type: SodiumException
Variants: 1
    /**
     * @param string $string1
     * @param string $string2
     * @return void
     */
    function sodium_add(string $string1, string $string2): void
-----
FUNCTION sodium_base642bin
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $string
     * @param int $id
     * @param string $ignore
     * @return string
     */
    function sodium_base642bin(string $string, int $id, string $ignore = ''): string
-----
FUNCTION sodium_bin2base64
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $string
     * @param int $id
     * @return ($string is non-empty-string ? non-empty-string : string)
     */
    function sodium_bin2base64(string $string, int $id): string
-----
FUNCTION sodium_bin2hex
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $string
     * @return ($string is non-empty-string ? non-empty-string : string)
     */
    function sodium_bin2hex(string $string): string
-----
FUNCTION sodium_compare
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $string1
     * @param string $string2
     * @return int
     */
    function sodium_compare(string $string1, string $string2): int
-----
FUNCTION sodium_crypto_aead_aes256gcm_decrypt
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $ciphertext
     * @param string $additional_data
     * @param string $nonce
     * @param string $key
     * @return string|false
     */
    function sodium_crypto_aead_aes256gcm_decrypt(string $ciphertext, string $additional_data, string $nonce, string $key): string|false
-----
FUNCTION sodium_crypto_aead_aes256gcm_encrypt
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $message
     * @param string $additional_data
     * @param string $nonce
     * @param string $key
     * @return string
     */
    function sodium_crypto_aead_aes256gcm_encrypt(string $message, string $additional_data, string $nonce, string $key): string
-----
FUNCTION sodium_crypto_aead_aes256gcm_is_available
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return bool
     */
    function sodium_crypto_aead_aes256gcm_is_available(): bool
-----
FUNCTION sodium_crypto_aead_aes256gcm_keygen
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return string
     */
    function sodium_crypto_aead_aes256gcm_keygen(): string
-----
FUNCTION sodium_crypto_aead_chacha20poly1305_decrypt
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $ciphertext
     * @param string $additional_data
     * @param string $nonce
     * @param string $key
     * @return string|false
     */
    function sodium_crypto_aead_chacha20poly1305_decrypt(string $ciphertext, string $additional_data, string $nonce, string $key): string|false
-----
FUNCTION sodium_crypto_aead_chacha20poly1305_encrypt
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $message
     * @param string $additional_data
     * @param string $nonce
     * @param string $key
     * @return string
     */
    function sodium_crypto_aead_chacha20poly1305_encrypt(string $message, string $additional_data, string $nonce, string $key): string
-----
FUNCTION sodium_crypto_aead_chacha20poly1305_ietf_decrypt
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $ciphertext
     * @param string $additional_data
     * @param string $nonce
     * @param string $key
     * @return string|false
     */
    function sodium_crypto_aead_chacha20poly1305_ietf_decrypt(string $ciphertext, string $additional_data, string $nonce, string $key): string|false
-----
FUNCTION sodium_crypto_aead_chacha20poly1305_ietf_encrypt
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $message
     * @param string $additional_data
     * @param string $nonce
     * @param string $key
     * @return string
     */
    function sodium_crypto_aead_chacha20poly1305_ietf_encrypt(string $message, string $additional_data, string $nonce, string $key): string
-----
FUNCTION sodium_crypto_aead_chacha20poly1305_ietf_keygen
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return string
     */
    function sodium_crypto_aead_chacha20poly1305_ietf_keygen(): string
-----
FUNCTION sodium_crypto_aead_chacha20poly1305_keygen
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return string
     */
    function sodium_crypto_aead_chacha20poly1305_keygen(): string
-----
FUNCTION sodium_crypto_aead_xchacha20poly1305_ietf_decrypt
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $ciphertext
     * @param string $additional_data
     * @param string $nonce
     * @param string $key
     * @return string|false
     */
    function sodium_crypto_aead_xchacha20poly1305_ietf_decrypt(string $ciphertext, string $additional_data, string $nonce, string $key): string|false
-----
FUNCTION sodium_crypto_aead_xchacha20poly1305_ietf_encrypt
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $message
     * @param string $additional_data
     * @param string $nonce
     * @param string $key
     * @return string
     */
    function sodium_crypto_aead_xchacha20poly1305_ietf_encrypt(string $message, string $additional_data, string $nonce, string $key): string
-----
FUNCTION sodium_crypto_aead_xchacha20poly1305_ietf_keygen
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return string
     */
    function sodium_crypto_aead_xchacha20poly1305_ietf_keygen(): string
-----
FUNCTION sodium_crypto_auth
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $message
     * @param string $key
     * @return string
     */
    function sodium_crypto_auth(string $message, string $key): string
-----
FUNCTION sodium_crypto_auth_keygen
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return string
     */
    function sodium_crypto_auth_keygen(): string
-----
FUNCTION sodium_crypto_auth_verify
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $mac
     * @param string $message
     * @param string $key
     * @return bool
     */
    function sodium_crypto_auth_verify(string $mac, string $message, string $key): bool
-----
FUNCTION sodium_crypto_box
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $message
     * @param string $nonce
     * @param string $key_pair
     * @return string
     */
    function sodium_crypto_box(string $message, string $nonce, string $key_pair): string
-----
FUNCTION sodium_crypto_box_keypair
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @return string
     */
    function sodium_crypto_box_keypair(): string
-----
FUNCTION sodium_crypto_box_keypair_from_secretkey_and_publickey
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $secret_key
     * @param string $public_key
     * @return string
     */
    function sodium_crypto_box_keypair_from_secretkey_and_publickey(string $secret_key, string $public_key): string
-----
FUNCTION sodium_crypto_box_open
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $ciphertext
     * @param string $nonce
     * @param string $key_pair
     * @return string|false
     */
    function sodium_crypto_box_open(string $ciphertext, string $nonce, string $key_pair): string|false
-----
FUNCTION sodium_crypto_box_publickey
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $key_pair
     * @return string
     */
    function sodium_crypto_box_publickey(string $key_pair): string
-----
FUNCTION sodium_crypto_box_publickey_from_secretkey
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $secret_key
     * @return string
     */
    function sodium_crypto_box_publickey_from_secretkey(string $secret_key): string
-----
FUNCTION sodium_crypto_box_seal
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $message
     * @param string $public_key
     * @return string
     */
    function sodium_crypto_box_seal(string $message, string $public_key): string
-----
FUNCTION sodium_crypto_box_seal_open
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $ciphertext
     * @param string $key_pair
     * @return string|false
     */
    function sodium_crypto_box_seal_open(string $ciphertext, string $key_pair): string|false
-----
FUNCTION sodium_crypto_box_secretkey
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $key_pair
     * @return string
     */
    function sodium_crypto_box_secretkey(string $key_pair): string
-----
FUNCTION sodium_crypto_box_seed_keypair
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $seed
     * @return string
     */
    function sodium_crypto_box_seed_keypair(string $seed): string
-----
FUNCTION sodium_crypto_core_ristretto255_add
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $p
     * @param string $q
     * @return string
     */
    function sodium_crypto_core_ristretto255_add(string $p, string $q): string
-----
FUNCTION sodium_crypto_core_ristretto255_from_hash
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $s
     * @return string
     */
    function sodium_crypto_core_ristretto255_from_hash(string $s): string
-----
FUNCTION sodium_crypto_core_ristretto255_is_valid_point
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $s
     * @return bool
     */
    function sodium_crypto_core_ristretto255_is_valid_point(string $s): bool
-----
FUNCTION sodium_crypto_core_ristretto255_random
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return string
     */
    function sodium_crypto_core_ristretto255_random(): string
-----
FUNCTION sodium_crypto_core_ristretto255_scalar_add
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $x
     * @param string $y
     * @return string
     */
    function sodium_crypto_core_ristretto255_scalar_add(string $x, string $y): string
-----
FUNCTION sodium_crypto_core_ristretto255_scalar_complement
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $s
     * @return string
     */
    function sodium_crypto_core_ristretto255_scalar_complement(string $s): string
-----
FUNCTION sodium_crypto_core_ristretto255_scalar_invert
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $s
     * @return string
     */
    function sodium_crypto_core_ristretto255_scalar_invert(string $s): string
-----
FUNCTION sodium_crypto_core_ristretto255_scalar_mul
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $x
     * @param string $y
     * @return string
     */
    function sodium_crypto_core_ristretto255_scalar_mul(string $x, string $y): string
-----
FUNCTION sodium_crypto_core_ristretto255_scalar_negate
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $s
     * @return string
     */
    function sodium_crypto_core_ristretto255_scalar_negate(string $s): string
-----
FUNCTION sodium_crypto_core_ristretto255_scalar_random
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return string
     */
    function sodium_crypto_core_ristretto255_scalar_random(): string
-----
FUNCTION sodium_crypto_core_ristretto255_scalar_reduce
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $s
     * @return string
     */
    function sodium_crypto_core_ristretto255_scalar_reduce(string $s): string
-----
FUNCTION sodium_crypto_core_ristretto255_scalar_sub
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $x
     * @param string $y
     * @return string
     */
    function sodium_crypto_core_ristretto255_scalar_sub(string $x, string $y): string
-----
FUNCTION sodium_crypto_core_ristretto255_sub
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $p
     * @param string $q
     * @return string
     */
    function sodium_crypto_core_ristretto255_sub(string $p, string $q): string
-----
FUNCTION sodium_crypto_generichash
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $message
     * @param string $key
     * @param int $length
     * @return non-empty-string
     */
    function sodium_crypto_generichash(string $message, string $key = '', int $length = 32): non-empty-string
-----
FUNCTION sodium_crypto_generichash_final
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param non-empty-string $state
     * @param int $length
     * @return non-empty-string
     */
    function sodium_crypto_generichash_final(non-empty-string $state, int $length = 32): non-empty-string
-----
FUNCTION sodium_crypto_generichash_init
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $key
     * @param int $length
     * @return non-empty-string
     */
    function sodium_crypto_generichash_init(string $key = '', int $length = 32): non-empty-string
-----
FUNCTION sodium_crypto_generichash_keygen
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return non-empty-string
     */
    function sodium_crypto_generichash_keygen(): non-empty-string
-----
FUNCTION sodium_crypto_generichash_update
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param non-empty-string $state
     * @param string $message
     * @return true
     */
    function sodium_crypto_generichash_update(non-empty-string $state, string $message): true
-----
FUNCTION sodium_crypto_kdf_derive_from_key
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param int $subkey_length
     * @param int $subkey_id
     * @param string $context
     * @param string $key
     * @return string
     */
    function sodium_crypto_kdf_derive_from_key(int $subkey_length, int $subkey_id, string $context, string $key): string
-----
FUNCTION sodium_crypto_kdf_keygen
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return string
     */
    function sodium_crypto_kdf_keygen(): string
-----
FUNCTION sodium_crypto_kx_client_session_keys
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $client_key_pair
     * @param string $server_key
     * @return array<int, string>
     */
    function sodium_crypto_kx_client_session_keys(string $client_key_pair, string $server_key): array<int, string>
-----
FUNCTION sodium_crypto_kx_keypair
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @return string
     */
    function sodium_crypto_kx_keypair(): string
-----
FUNCTION sodium_crypto_kx_publickey
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $key_pair
     * @return string
     */
    function sodium_crypto_kx_publickey(string $key_pair): string
-----
FUNCTION sodium_crypto_kx_secretkey
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $key_pair
     * @return string
     */
    function sodium_crypto_kx_secretkey(string $key_pair): string
-----
FUNCTION sodium_crypto_kx_seed_keypair
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $seed
     * @return string
     */
    function sodium_crypto_kx_seed_keypair(string $seed): string
-----
FUNCTION sodium_crypto_kx_server_session_keys
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $server_key_pair
     * @param string $client_key
     * @return array<int, string>
     */
    function sodium_crypto_kx_server_session_keys(string $server_key_pair, string $client_key): array<int, string>
-----
FUNCTION sodium_crypto_pwhash
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param int $length
     * @param string $password
     * @param string $salt
     * @param int $opslimit
     * @param int $memlimit
     * @param int $algo
     * @return string
     */
    function sodium_crypto_pwhash(int $length, string $password, string $salt, int $opslimit, int $memlimit, int $algo = 2): string
-----
FUNCTION sodium_crypto_pwhash_scryptsalsa208sha256
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param int $length
     * @param string $password
     * @param string $salt
     * @param int $opslimit
     * @param int $memlimit
     * @return string
     */
    function sodium_crypto_pwhash_scryptsalsa208sha256(int $length, string $password, string $salt, int $opslimit, int $memlimit): string
-----
FUNCTION sodium_crypto_pwhash_scryptsalsa208sha256_str
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $password
     * @param int $opslimit
     * @param int $memlimit
     * @return string
     */
    function sodium_crypto_pwhash_scryptsalsa208sha256_str(string $password, int $opslimit, int $memlimit): string
-----
FUNCTION sodium_crypto_pwhash_scryptsalsa208sha256_str_verify
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $hash
     * @param string $password
     * @return bool
     */
    function sodium_crypto_pwhash_scryptsalsa208sha256_str_verify(string $hash, string $password): bool
-----
FUNCTION sodium_crypto_pwhash_str
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $password
     * @param int $opslimit
     * @param int $memlimit
     * @return string
     */
    function sodium_crypto_pwhash_str(string $password, int $opslimit, int $memlimit): string
-----
FUNCTION sodium_crypto_pwhash_str_needs_rehash
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $password
     * @param int $opslimit
     * @param int $memlimit
     * @return bool
     */
    function sodium_crypto_pwhash_str_needs_rehash(string $password, int $opslimit, int $memlimit): bool
-----
FUNCTION sodium_crypto_pwhash_str_verify
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $hash
     * @param string $password
     * @return bool
     */
    function sodium_crypto_pwhash_str_verify(string $hash, string $password): bool
-----
FUNCTION sodium_crypto_scalarmult
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $n
     * @param string $p
     * @return string
     */
    function sodium_crypto_scalarmult(string $n, string $p): string
-----
FUNCTION sodium_crypto_scalarmult_base
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $secret_key
     * @return string
     */
    function sodium_crypto_scalarmult_base(string $secret_key): string
-----
FUNCTION sodium_crypto_scalarmult_ristretto255
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $n
     * @param string $p
     * @return string
     */
    function sodium_crypto_scalarmult_ristretto255(string $n, string $p): string
-----
FUNCTION sodium_crypto_scalarmult_ristretto255_base
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $n
     * @return string
     */
    function sodium_crypto_scalarmult_ristretto255_base(string $n): string
-----
FUNCTION sodium_crypto_secretbox
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $message
     * @param string $nonce
     * @param string $key
     * @return string
     */
    function sodium_crypto_secretbox(string $message, string $nonce, string $key): string
-----
FUNCTION sodium_crypto_secretbox_keygen
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return string
     */
    function sodium_crypto_secretbox_keygen(): string
-----
FUNCTION sodium_crypto_secretbox_open
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $ciphertext
     * @param string $nonce
     * @param string $key
     * @return string|false
     */
    function sodium_crypto_secretbox_open(string $ciphertext, string $nonce, string $key): string|false
-----
FUNCTION sodium_crypto_secretstream_xchacha20poly1305_init_pull
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $header
     * @param string $key
     * @return string
     */
    function sodium_crypto_secretstream_xchacha20poly1305_init_pull(string $header, string $key): string
-----
FUNCTION sodium_crypto_secretstream_xchacha20poly1305_init_push
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $key
     * @return array
     */
    function sodium_crypto_secretstream_xchacha20poly1305_init_push(string $key): array
-----
FUNCTION sodium_crypto_secretstream_xchacha20poly1305_keygen
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return string
     */
    function sodium_crypto_secretstream_xchacha20poly1305_keygen(): string
-----
FUNCTION sodium_crypto_secretstream_xchacha20poly1305_pull
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $state
     * @param string $ciphertext
     * @param string $additional_data
     * @return array|false
     */
    function sodium_crypto_secretstream_xchacha20poly1305_pull(string $state, string $ciphertext, string $additional_data = ''): array|false
-----
FUNCTION sodium_crypto_secretstream_xchacha20poly1305_push
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $state
     * @param string $message
     * @param string $additional_data
     * @param int $tag
     * @return string
     */
    function sodium_crypto_secretstream_xchacha20poly1305_push(string $state, string $message, string $additional_data = '', int $tag = 0): string
-----
FUNCTION sodium_crypto_secretstream_xchacha20poly1305_rekey
-----
Has side-effects: Yes
Throw type: SodiumException
Variants: 1
    /**
     * @param string $state
     * @return void
     */
    function sodium_crypto_secretstream_xchacha20poly1305_rekey(string $state): void
-----
FUNCTION sodium_crypto_shorthash
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $message
     * @param string $key
     * @return string
     */
    function sodium_crypto_shorthash(string $message, string $key): string
-----
FUNCTION sodium_crypto_shorthash_keygen
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return string
     */
    function sodium_crypto_shorthash_keygen(): string
-----
FUNCTION sodium_crypto_sign
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $message
     * @param non-empty-string $secret_key
     * @return non-empty-string
     */
    function sodium_crypto_sign(string $message, non-empty-string $secret_key): non-empty-string
-----
FUNCTION sodium_crypto_sign_detached
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $message
     * @param non-empty-string $secret_key
     * @return non-empty-string
     */
    function sodium_crypto_sign_detached(string $message, non-empty-string $secret_key): non-empty-string
-----
FUNCTION sodium_crypto_sign_ed25519_pk_to_curve25519
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param non-empty-string $public_key
     * @return non-empty-string
     */
    function sodium_crypto_sign_ed25519_pk_to_curve25519(non-empty-string $public_key): non-empty-string
-----
FUNCTION sodium_crypto_sign_ed25519_sk_to_curve25519
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param non-empty-string $secret_key
     * @return non-empty-string
     */
    function sodium_crypto_sign_ed25519_sk_to_curve25519(non-empty-string $secret_key): non-empty-string
-----
FUNCTION sodium_crypto_sign_keypair
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @return non-empty-string
     */
    function sodium_crypto_sign_keypair(): non-empty-string
-----
FUNCTION sodium_crypto_sign_keypair_from_secretkey_and_publickey
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param non-empty-string $secret_key
     * @param non-empty-string $public_key
     * @return non-empty-string
     */
    function sodium_crypto_sign_keypair_from_secretkey_and_publickey(non-empty-string $secret_key, non-empty-string $public_key): non-empty-string
-----
FUNCTION sodium_crypto_sign_open
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $signed_message
     * @param non-empty-string $public_key
     * @return string|false
     */
    function sodium_crypto_sign_open(string $signed_message, non-empty-string $public_key): string|false
-----
FUNCTION sodium_crypto_sign_publickey
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param non-empty-string $key_pair
     * @return non-empty-string
     */
    function sodium_crypto_sign_publickey(non-empty-string $key_pair): non-empty-string
-----
FUNCTION sodium_crypto_sign_publickey_from_secretkey
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param non-empty-string $secret_key
     * @return non-empty-string
     */
    function sodium_crypto_sign_publickey_from_secretkey(non-empty-string $secret_key): non-empty-string
-----
FUNCTION sodium_crypto_sign_secretkey
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param non-empty-string $key_pair
     * @return non-empty-string
     */
    function sodium_crypto_sign_secretkey(non-empty-string $key_pair): non-empty-string
-----
FUNCTION sodium_crypto_sign_seed_keypair
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param non-empty-string $seed
     * @return non-empty-string
     */
    function sodium_crypto_sign_seed_keypair(non-empty-string $seed): non-empty-string
-----
FUNCTION sodium_crypto_sign_verify_detached
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param non-empty-string $signature
     * @param string $message
     * @param non-empty-string $public_key
     * @return bool
     */
    function sodium_crypto_sign_verify_detached(non-empty-string $signature, string $message, non-empty-string $public_key): bool
-----
FUNCTION sodium_crypto_stream
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param int $length
     * @param string $nonce
     * @param string $key
     * @return string
     */
    function sodium_crypto_stream(int $length, string $nonce, string $key): string
-----
FUNCTION sodium_crypto_stream_keygen
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return string
     */
    function sodium_crypto_stream_keygen(): string
-----
FUNCTION sodium_crypto_stream_xchacha20
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $length
     * @param string $nonce
     * @param string $key
     * @return string
     */
    function sodium_crypto_stream_xchacha20(int $length, string $nonce, string $key): string
-----
FUNCTION sodium_crypto_stream_xchacha20_keygen
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return string
     */
    function sodium_crypto_stream_xchacha20_keygen(): string
-----
FUNCTION sodium_crypto_stream_xchacha20_xor
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $message
     * @param string $nonce
     * @param string $key
     * @return string
     */
    function sodium_crypto_stream_xchacha20_xor(string $message, string $nonce, string $key): string
-----
FUNCTION sodium_crypto_stream_xchacha20_xor_ic
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $message
     * @param string $nonce
     * @param int $counter
     * @param string $key
     * @return string
     */
    function sodium_crypto_stream_xchacha20_xor_ic(string $message, string $nonce, int $counter, string $key): string
-----
FUNCTION sodium_crypto_stream_xor
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $message
     * @param string $nonce
     * @param string $key
     * @return string
     */
    function sodium_crypto_stream_xor(string $message, string $nonce, string $key): string
-----
FUNCTION sodium_hex2bin
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $string
     * @param string $ignore
     * @return string
     */
    function sodium_hex2bin(string $string, string $ignore = ''): string
-----
FUNCTION sodium_increment
-----
Has side-effects: Yes
Throw type: SodiumException
Variants: 1
    /**
     * @param string $string
     * @return void
     */
    function sodium_increment(string &rw$string): void
-----
FUNCTION sodium_memcmp
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $string1
     * @param string $string2
     * @return int
     */
    function sodium_memcmp(string $string1, string $string2): int
-----
FUNCTION sodium_memzero
-----
Has side-effects: Yes
Throw type: SodiumException
Variants: 1
    /**
     * @param string $string
     * @param-out null $string
     * @return void
     */
    function sodium_memzero(string &rw$string): void
-----
FUNCTION sodium_pad
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $string
     * @param int $block_size
     * @return string
     */
    function sodium_pad(string $string, int $block_size): string
-----
FUNCTION sodium_unpad
-----
Has side-effects: Maybe
Throw type: SodiumException
Variants: 1
    /**
     * @param string $string
     * @param int $block_size
     * @return string
     */
    function sodium_unpad(string $string, int $block_size): string
-----
FUNCTION solr_get_version
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return string
     */
    function solr_get_version(): string
-----
FUNCTION sort
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param TArray of array<T (function sort(), parameter)> (function sort(), parameter) $array
     * @param-out (TArray of array<T (function sort(), parameter)> (function sort(), parameter) is non-empty-array ? non-empty-array<int, T (function sort(), parameter)> : array<int, T (function sort(), parameter)>) $array
     * @param int $flags
     * @return true
     */
    function sort(array &r$array, int $flags = 0): true
-----
FUNCTION soundex
-----
Variants: 1
    /**
     * @param string $string
     * @return string
     */
    function soundex(string $string): string
-----
FUNCTION spl_autoload
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $class
     * @param string|null $file_extensions
     * @return void
     */
    function spl_autoload(string $class, string|null $file_extensions = null): void
-----
FUNCTION spl_autoload_call
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $class
     * @return void
     */
    function spl_autoload_call(string $class): void
-----
FUNCTION spl_autoload_extensions
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string|null $file_extensions
     * @return string
     */
    function spl_autoload_extensions(string|null $file_extensions = null): string
-----
FUNCTION spl_autoload_functions
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return array
     */
    function spl_autoload_functions(): array
-----
FUNCTION spl_autoload_register
-----
Has side-effects: Maybe
Throw type: TypeError
Variants: 1
    /**
     * @param (callable(string): void)|null $callback
     * @param bool $throw
     * @param bool $prepend
     * @return bool
     */
    function spl_autoload_register((callable(string): void)|null $callback = null, bool $throw = true, bool $prepend = false): bool
-----
FUNCTION spl_autoload_unregister
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @return bool
     */
    function spl_autoload_unregister(callable(): mixed $callback): bool
-----
FUNCTION spl_classes
-----
Variants: 1
    /**
     * @return array
     */
    function spl_classes(): array
-----
FUNCTION spl_object_hash
-----
Variants: 1
    /**
     * @param object $object
     * @return string
     */
    function spl_object_hash(object $object): string
-----
FUNCTION spl_object_id
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param object $object
     * @return int
     */
    function spl_object_id(object $object): int
-----
FUNCTION sprintf
-----
Variants: 1
    /**
     * @param string $format
     * @param bool|float|int|string|null $values
     * @return string
     */
    function sprintf(string $format, bool|float|int|string|null ...$values): string
-----
FUNCTION sqlsrv_begin_transaction
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn
     * @return bool
     */
    function sqlsrv_begin_transaction(resource $conn): bool
-----
FUNCTION sqlsrv_cancel
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @return bool
     */
    function sqlsrv_cancel(resource $stmt): bool
-----
FUNCTION sqlsrv_client_info
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn
     * @return array|false
     */
    function sqlsrv_client_info(resource $conn): array|false
-----
FUNCTION sqlsrv_close
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn
     * @return bool
     */
    function sqlsrv_close(resource $conn): bool
-----
FUNCTION sqlsrv_commit
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn
     * @return bool
     */
    function sqlsrv_commit(resource $conn): bool
-----
FUNCTION sqlsrv_configure
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $setting
     * @param mixed $value
     * @return bool
     */
    function sqlsrv_configure(string $setting, mixed $value): bool
-----
FUNCTION sqlsrv_connect
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $serverName
     * @param array $connectionInfo
     * @return resource|false
     */
    function sqlsrv_connect(string $serverName, array $connectionInfo = array{}): resource|false
-----
FUNCTION sqlsrv_errors
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $errorsOrWarnings
     * @return array|null
     */
    function sqlsrv_errors(int $errorsOrWarnings = 2): array|null
-----
FUNCTION sqlsrv_execute
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @return bool
     */
    function sqlsrv_execute(resource $stmt): bool
-----
FUNCTION sqlsrv_fetch
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @param int $row
     * @param int $offset
     * @return bool|null
     */
    function sqlsrv_fetch(resource $stmt, int $row = null, int $offset = null): bool|null
-----
FUNCTION sqlsrv_fetch_array
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @param int $fetchType
     * @param int $row
     * @param int $offset
     * @return array|false|null
     */
    function sqlsrv_fetch_array(resource $stmt, int $fetchType = null, int $row = null, int $offset = null): array|false|null
-----
FUNCTION sqlsrv_fetch_object
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @param string $className
     * @param array $ctorParams
     * @param int $row
     * @param int $offset
     * @return object|false|null
     */
    function sqlsrv_fetch_object(resource $stmt, string $className = null, array $ctorParams = null, int $row = null, int $offset = null): object|false|null
-----
FUNCTION sqlsrv_field_metadata
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @return array|false
     */
    function sqlsrv_field_metadata(resource $stmt): array|false
-----
FUNCTION sqlsrv_free_stmt
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @return bool
     */
    function sqlsrv_free_stmt(resource $stmt): bool
-----
FUNCTION sqlsrv_get_config
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $setting
     * @return mixed
     */
    function sqlsrv_get_config(string $setting): mixed
-----
FUNCTION sqlsrv_get_field
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @param int $fieldIndex
     * @param int $getAsType
     * @return mixed
     */
    function sqlsrv_get_field(resource $stmt, int $fieldIndex, int $getAsType = null): mixed
-----
FUNCTION sqlsrv_has_rows
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @return bool
     */
    function sqlsrv_has_rows(resource $stmt): bool
-----
FUNCTION sqlsrv_next_result
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @return bool|null
     */
    function sqlsrv_next_result(resource $stmt): bool|null
-----
FUNCTION sqlsrv_num_fields
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @return int|false
     */
    function sqlsrv_num_fields(resource $stmt): int|false
-----
FUNCTION sqlsrv_num_rows
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @return int|false
     */
    function sqlsrv_num_rows(resource $stmt): int|false
-----
FUNCTION sqlsrv_prepare
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn
     * @param string $sql
     * @param array $params
     * @param array $options
     * @return resource|false
     */
    function sqlsrv_prepare(resource $conn, string $sql, array $params = array{}, array $options = array{}): resource|false
-----
FUNCTION sqlsrv_query
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn
     * @param string $sql
     * @param array $params
     * @param array $options
     * @return resource|false
     */
    function sqlsrv_query(resource $conn, string $sql, array $params = array{}, array $options = array{}): resource|false
-----
FUNCTION sqlsrv_rollback
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn
     * @return bool
     */
    function sqlsrv_rollback(resource $conn): bool
-----
FUNCTION sqlsrv_rows_affected
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @return int<-1, max>|false
     */
    function sqlsrv_rows_affected(resource $stmt): int<-1, max>|false
-----
FUNCTION sqlsrv_send_stream_data
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stmt
     * @return bool
     */
    function sqlsrv_send_stream_data(resource $stmt): bool
-----
FUNCTION sqlsrv_server_info
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $conn
     * @return array
     */
    function sqlsrv_server_info(resource $conn): array
-----
FUNCTION sqrt
-----
Variants: 1
    /**
     * @param float $num
     * @return float
     */
    function sqrt(float $num): float
-----
FUNCTION srand
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param int $seed
     * @param int $mode
     * @return void
     */
    function srand(int $seed = *ERROR*, int $mode = 0): void
-----
FUNCTION sscanf
-----
Has side-effects: Maybe
Variants: 2
    /**
     * @param string $str
     * @param string $format
     * @param float|int|string|null $war
     * @param-out float|int|string|null $war
     * @param float|int|string|null $vars
     * @param-out float|int|string|null $vars
     * @return int|null
     */
    function sscanf(string $str, string $format, float|int|string|null &rw$war, float|int|string|null ...&rw$vars): int|null
    /**
     * @param string $str
     * @param string $format
     * @return array|null
     */
    function sscanf(string $str, string $format): array|null
-----
FUNCTION ssdeep_fuzzy_compare
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $signature1
     * @param string $signature2
     * @return int
     */
    function ssdeep_fuzzy_compare(string $signature1, string $signature2): int
-----
FUNCTION ssdeep_fuzzy_hash
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $to_hash
     * @return string
     */
    function ssdeep_fuzzy_hash(string $to_hash): string
-----
FUNCTION ssdeep_fuzzy_hash_filename
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $file_name
     * @return string
     */
    function ssdeep_fuzzy_hash_filename(string $file_name): string
-----
FUNCTION ssh2://
-----
MISSING
-----
FUNCTION ssh2_auth_agent
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $session
     * @param string $username
     * @return bool
     */
    function ssh2_auth_agent(resource $session, string $username): bool
-----
FUNCTION ssh2_auth_hostbased_file
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $session
     * @param string $username
     * @param string $hostname
     * @param string $pubkeyfile
     * @param string $privkeyfile
     * @param string $passphrase
     * @param string $local_username
     * @return bool
     */
    function ssh2_auth_hostbased_file(resource $session, string $username, string $hostname, string $pubkeyfile, string $privkeyfile, string $passphrase = null, string $local_username = null): bool
-----
FUNCTION ssh2_auth_none
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $session
     * @param string $username
     * @return array<string>|bool
     */
    function ssh2_auth_none(resource $session, string $username): array<string>|bool
-----
FUNCTION ssh2_auth_password
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $session
     * @param string $username
     * @param string $password
     * @return bool
     */
    function ssh2_auth_password(resource $session, string $username, string $password): bool
-----
FUNCTION ssh2_auth_pubkey_file
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $session
     * @param string $username
     * @param string $pubkeyfile
     * @param string $privkeyfile
     * @param string $passphrase
     * @return bool
     */
    function ssh2_auth_pubkey_file(resource $session, string $username, string $pubkeyfile, string $privkeyfile, string $passphrase = null): bool
-----
FUNCTION ssh2_connect
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $host
     * @param int $port
     * @param array $methods
     * @param array $callbacks
     * @return resource|false
     */
    function ssh2_connect(string $host, int $port = 22, array $methods = null, array $callbacks = null): resource|false
-----
FUNCTION ssh2_disconnect
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $session
     * @return bool
     */
    function ssh2_disconnect(resource $session): bool
-----
FUNCTION ssh2_exec
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $session
     * @param string $command
     * @param string $pty
     * @param array $env
     * @param int $width
     * @param int $height
     * @param int $width_height_type
     * @return resource|false
     */
    function ssh2_exec(resource $session, string $command, string $pty = null, array $env = null, int $width = null, int $height = null, int $width_height_type = null): resource|false
-----
FUNCTION ssh2_fetch_stream
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $channel
     * @param int $streamid
     * @return resource|false
     */
    function ssh2_fetch_stream(resource $channel, int $streamid): resource|false
-----
FUNCTION ssh2_fingerprint
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $session
     * @param int $flags
     * @return string|false
     */
    function ssh2_fingerprint(resource $session, int $flags = null): string|false
-----
FUNCTION ssh2_forward_accept
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return mixed
     */
    function ssh2_forward_accept(): mixed
-----
FUNCTION ssh2_forward_listen
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return mixed
     */
    function ssh2_forward_listen(): mixed
-----
FUNCTION ssh2_methods_negotiated
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $session
     * @return array|false
     */
    function ssh2_methods_negotiated(resource $session): array|false
-----
FUNCTION ssh2_poll
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $var1
     * @return mixed
     */
    function ssh2_poll(mixed &rw$var1): mixed
-----
FUNCTION ssh2_publickey_add
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $pkey
     * @param string $algoname
     * @param string $blob
     * @param bool $overwrite
     * @param array $attributes
     * @return bool
     */
    function ssh2_publickey_add(resource $pkey, string $algoname, string $blob, bool $overwrite = null, array $attributes = null): bool
-----
FUNCTION ssh2_publickey_init
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $session
     * @return resource|false
     */
    function ssh2_publickey_init(resource $session): resource|false
-----
FUNCTION ssh2_publickey_list
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $pkey
     * @return array|false
     */
    function ssh2_publickey_list(resource $pkey): array|false
-----
FUNCTION ssh2_publickey_remove
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $pkey
     * @param string $algoname
     * @param string $blob
     * @return bool
     */
    function ssh2_publickey_remove(resource $pkey, string $algoname, string $blob): bool
-----
FUNCTION ssh2_scp_recv
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $session
     * @param string $remote_file
     * @param string $local_file
     * @return bool
     */
    function ssh2_scp_recv(resource $session, string $remote_file, string $local_file): bool
-----
FUNCTION ssh2_scp_send
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $session
     * @param string $local_file
     * @param string $remote_file
     * @param int $create_mode
     * @return bool
     */
    function ssh2_scp_send(resource $session, string $local_file, string $remote_file, int $create_mode = null): bool
-----
FUNCTION ssh2_send_eof
-----
MISSING
-----
FUNCTION ssh2_sftp
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $session
     * @return resource|false
     */
    function ssh2_sftp(resource $session): resource|false
-----
FUNCTION ssh2_sftp_chmod
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $sftp
     * @param string $filename
     * @param int $mode
     * @return bool
     */
    function ssh2_sftp_chmod(resource $sftp, string $filename, int $mode): bool
-----
FUNCTION ssh2_sftp_lstat
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $sftp
     * @param string $path
     * @return array|false
     */
    function ssh2_sftp_lstat(resource $sftp, string $path): array|false
-----
FUNCTION ssh2_sftp_mkdir
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $sftp
     * @param string $dirname
     * @param int $mode
     * @param bool $recursive
     * @return bool
     */
    function ssh2_sftp_mkdir(resource $sftp, string $dirname, int $mode = null, bool $recursive = null): bool
-----
FUNCTION ssh2_sftp_readlink
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $sftp
     * @param string $link
     * @return string|false
     */
    function ssh2_sftp_readlink(resource $sftp, string $link): string|false
-----
FUNCTION ssh2_sftp_realpath
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $sftp
     * @param string $filename
     * @return string|false
     */
    function ssh2_sftp_realpath(resource $sftp, string $filename): string|false
-----
FUNCTION ssh2_sftp_rename
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $sftp
     * @param string $from
     * @param string $to
     * @return bool
     */
    function ssh2_sftp_rename(resource $sftp, string $from, string $to): bool
-----
FUNCTION ssh2_sftp_rmdir
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $sftp
     * @param string $dirname
     * @return bool
     */
    function ssh2_sftp_rmdir(resource $sftp, string $dirname): bool
-----
FUNCTION ssh2_sftp_stat
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $sftp
     * @param string $path
     * @return array|false
     */
    function ssh2_sftp_stat(resource $sftp, string $path): array|false
-----
FUNCTION ssh2_sftp_symlink
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $sftp
     * @param string $target
     * @param string $link
     * @return bool
     */
    function ssh2_sftp_symlink(resource $sftp, string $target, string $link): bool
-----
FUNCTION ssh2_sftp_unlink
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $sftp
     * @param string $filename
     * @return bool
     */
    function ssh2_sftp_unlink(resource $sftp, string $filename): bool
-----
FUNCTION ssh2_shell
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $session
     * @param string $term_type
     * @param array $env
     * @param int $width
     * @param int $height
     * @param int $width_height_type
     * @return resource|false
     */
    function ssh2_shell(resource $session, string $term_type = null, array $env = null, int $width = null, int $height = null, int $width_height_type = null): resource|false
-----
FUNCTION ssh2_tunnel
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $session
     * @param string $host
     * @param int $port
     * @return resource|false
     */
    function ssh2_tunnel(resource $session, string $host, int $port): resource|false
-----
FUNCTION stat
-----
Variants: 1
    /**
     * @param string $filename
     * @return array|false
     */
    function stat(string $filename): array|false
-----
FUNCTION stats_absolute_deviation
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $a
     * @return float
     */
    function stats_absolute_deviation(array $a): float
-----
FUNCTION stats_cdf_beta
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $par1
     * @param float $par2
     * @param float $par3
     * @param int $which
     * @return float
     */
    function stats_cdf_beta(float $par1, float $par2, float $par3, int $which): float
-----
FUNCTION stats_cdf_binomial
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $par1
     * @param float $par2
     * @param float $par3
     * @param int $which
     * @return float
     */
    function stats_cdf_binomial(float $par1, float $par2, float $par3, int $which): float
-----
FUNCTION stats_cdf_cauchy
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $par1
     * @param float $par2
     * @param float $par3
     * @param int $which
     * @return float
     */
    function stats_cdf_cauchy(float $par1, float $par2, float $par3, int $which): float
-----
FUNCTION stats_cdf_chisquare
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $par1
     * @param float $par2
     * @param int $which
     * @return float
     */
    function stats_cdf_chisquare(float $par1, float $par2, int $which): float
-----
FUNCTION stats_cdf_exponential
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $par1
     * @param float $par2
     * @param int $which
     * @return float
     */
    function stats_cdf_exponential(float $par1, float $par2, int $which): float
-----
FUNCTION stats_cdf_f
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $par1
     * @param float $par2
     * @param float $par3
     * @param int $which
     * @return float
     */
    function stats_cdf_f(float $par1, float $par2, float $par3, int $which): float
-----
FUNCTION stats_cdf_gamma
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $par1
     * @param float $par2
     * @param float $par3
     * @param int $which
     * @return float
     */
    function stats_cdf_gamma(float $par1, float $par2, float $par3, int $which): float
-----
FUNCTION stats_cdf_laplace
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $par1
     * @param float $par2
     * @param float $par3
     * @param int $which
     * @return float
     */
    function stats_cdf_laplace(float $par1, float $par2, float $par3, int $which): float
-----
FUNCTION stats_cdf_logistic
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $par1
     * @param float $par2
     * @param float $par3
     * @param int $which
     * @return float
     */
    function stats_cdf_logistic(float $par1, float $par2, float $par3, int $which): float
-----
FUNCTION stats_cdf_negative_binomial
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $par1
     * @param float $par2
     * @param float $par3
     * @param int $which
     * @return float
     */
    function stats_cdf_negative_binomial(float $par1, float $par2, float $par3, int $which): float
-----
FUNCTION stats_cdf_noncentral_chisquare
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $par1
     * @param float $par2
     * @param float $par3
     * @param int $which
     * @return float
     */
    function stats_cdf_noncentral_chisquare(float $par1, float $par2, float $par3, int $which): float
-----
FUNCTION stats_cdf_noncentral_f
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $par1
     * @param float $par2
     * @param float $par3
     * @param float $par4
     * @param int $which
     * @return float
     */
    function stats_cdf_noncentral_f(float $par1, float $par2, float $par3, float $par4, int $which): float
-----
FUNCTION stats_cdf_noncentral_t
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $par1
     * @param float $par2
     * @param float $par3
     * @param int $which
     * @return float
     */
    function stats_cdf_noncentral_t(float $par1, float $par2, float $par3, int $which): float
-----
FUNCTION stats_cdf_normal
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $par1
     * @param float $par2
     * @param float $par3
     * @param int $which
     * @return float
     */
    function stats_cdf_normal(float $par1, float $par2, float $par3, int $which): float
-----
FUNCTION stats_cdf_poisson
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $par1
     * @param float $par2
     * @param int $which
     * @return float
     */
    function stats_cdf_poisson(float $par1, float $par2, int $which): float
-----
FUNCTION stats_cdf_t
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $par1
     * @param float $par2
     * @param int $which
     * @return float
     */
    function stats_cdf_t(float $par1, float $par2, int $which): float
-----
FUNCTION stats_cdf_uniform
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $par1
     * @param float $par2
     * @param float $par3
     * @param int $which
     * @return float
     */
    function stats_cdf_uniform(float $par1, float $par2, float $par3, int $which): float
-----
FUNCTION stats_cdf_weibull
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $par1
     * @param float $par2
     * @param float $par3
     * @param int $which
     * @return float
     */
    function stats_cdf_weibull(float $par1, float $par2, float $par3, int $which): float
-----
FUNCTION stats_covariance
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $a
     * @param array $b
     * @return float
     */
    function stats_covariance(array $a, array $b): float
-----
FUNCTION stats_dens_beta
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $x
     * @param float $a
     * @param float $b
     * @return float
     */
    function stats_dens_beta(float $x, float $a, float $b): float
-----
FUNCTION stats_dens_cauchy
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $x
     * @param float $ave
     * @param float $stdev
     * @return float
     */
    function stats_dens_cauchy(float $x, float $ave, float $stdev): float
-----
FUNCTION stats_dens_chisquare
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $x
     * @param float $dfr
     * @return float
     */
    function stats_dens_chisquare(float $x, float $dfr): float
-----
FUNCTION stats_dens_exponential
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $x
     * @param float $scale
     * @return float
     */
    function stats_dens_exponential(float $x, float $scale): float
-----
FUNCTION stats_dens_f
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $x
     * @param float $dfr1
     * @param float $dfr2
     * @return float
     */
    function stats_dens_f(float $x, float $dfr1, float $dfr2): float
-----
FUNCTION stats_dens_gamma
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $x
     * @param float $shape
     * @param float $scale
     * @return float
     */
    function stats_dens_gamma(float $x, float $shape, float $scale): float
-----
FUNCTION stats_dens_laplace
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $x
     * @param float $ave
     * @param float $stdev
     * @return float
     */
    function stats_dens_laplace(float $x, float $ave, float $stdev): float
-----
FUNCTION stats_dens_logistic
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $x
     * @param float $ave
     * @param float $stdev
     * @return float
     */
    function stats_dens_logistic(float $x, float $ave, float $stdev): float
-----
FUNCTION stats_dens_normal
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $x
     * @param float $ave
     * @param float $stdev
     * @return float
     */
    function stats_dens_normal(float $x, float $ave, float $stdev): float
-----
FUNCTION stats_dens_pmf_binomial
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $x
     * @param float $n
     * @param float $pi
     * @return float
     */
    function stats_dens_pmf_binomial(float $x, float $n, float $pi): float
-----
FUNCTION stats_dens_pmf_hypergeometric
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $n1
     * @param float $n2
     * @param float $N1
     * @param float $N2
     * @return float
     */
    function stats_dens_pmf_hypergeometric(float $n1, float $n2, float $N1, float $N2): float
-----
FUNCTION stats_dens_pmf_negative_binomial
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $x
     * @param float $n
     * @param float $pi
     * @return float
     */
    function stats_dens_pmf_negative_binomial(float $x, float $n, float $pi): float
-----
FUNCTION stats_dens_pmf_poisson
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $x
     * @param float $lb
     * @return float
     */
    function stats_dens_pmf_poisson(float $x, float $lb): float
-----
FUNCTION stats_dens_t
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $x
     * @param float $dfr
     * @return float
     */
    function stats_dens_t(float $x, float $dfr): float
-----
FUNCTION stats_dens_uniform
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $x
     * @param float $a
     * @param float $b
     * @return float
     */
    function stats_dens_uniform(float $x, float $a, float $b): float
-----
FUNCTION stats_dens_weibull
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $x
     * @param float $a
     * @param float $b
     * @return float
     */
    function stats_dens_weibull(float $x, float $a, float $b): float
-----
FUNCTION stats_harmonic_mean
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $a
     * @return float
     */
    function stats_harmonic_mean(array $a): float
-----
FUNCTION stats_kurtosis
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $a
     * @return float
     */
    function stats_kurtosis(array $a): float
-----
FUNCTION stats_rand_gen_beta
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $a
     * @param float $b
     * @return float
     */
    function stats_rand_gen_beta(float $a, float $b): float
-----
FUNCTION stats_rand_gen_chisquare
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $df
     * @return float
     */
    function stats_rand_gen_chisquare(float $df): float
-----
FUNCTION stats_rand_gen_exponential
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $av
     * @return float
     */
    function stats_rand_gen_exponential(float $av): float
-----
FUNCTION stats_rand_gen_f
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $dfn
     * @param float $dfd
     * @return float
     */
    function stats_rand_gen_f(float $dfn, float $dfd): float
-----
FUNCTION stats_rand_gen_funiform
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $low
     * @param float $high
     * @return float
     */
    function stats_rand_gen_funiform(float $low, float $high): float
-----
FUNCTION stats_rand_gen_gamma
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $a
     * @param float $r
     * @return float
     */
    function stats_rand_gen_gamma(float $a, float $r): float
-----
FUNCTION stats_rand_gen_ibinomial
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $n
     * @param float $pp
     * @return int
     */
    function stats_rand_gen_ibinomial(int $n, float $pp): int
-----
FUNCTION stats_rand_gen_ibinomial_negative
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $n
     * @param float $p
     * @return int
     */
    function stats_rand_gen_ibinomial_negative(int $n, float $p): int
-----
FUNCTION stats_rand_gen_int
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return int
     */
    function stats_rand_gen_int(): int
-----
FUNCTION stats_rand_gen_ipoisson
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $mu
     * @return int
     */
    function stats_rand_gen_ipoisson(float $mu): int
-----
FUNCTION stats_rand_gen_iuniform
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $low
     * @param int $high
     * @return int
     */
    function stats_rand_gen_iuniform(int $low, int $high): int
-----
FUNCTION stats_rand_gen_noncentral_chisquare
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $df
     * @param float $xnonc
     * @return float
     */
    function stats_rand_gen_noncentral_chisquare(float $df, float $xnonc): float
-----
FUNCTION stats_rand_gen_noncentral_f
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $dfn
     * @param float $dfd
     * @param float $xnonc
     * @return float
     */
    function stats_rand_gen_noncentral_f(float $dfn, float $dfd, float $xnonc): float
-----
FUNCTION stats_rand_gen_noncentral_t
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $df
     * @param float $xnonc
     * @return float
     */
    function stats_rand_gen_noncentral_t(float $df, float $xnonc): float
-----
FUNCTION stats_rand_gen_normal
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $av
     * @param float $sd
     * @return float
     */
    function stats_rand_gen_normal(float $av, float $sd): float
-----
FUNCTION stats_rand_gen_t
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $df
     * @return float
     */
    function stats_rand_gen_t(float $df): float
-----
FUNCTION stats_rand_get_seeds
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return array
     */
    function stats_rand_get_seeds(): array
-----
FUNCTION stats_rand_phrase_to_seeds
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $phrase
     * @return array
     */
    function stats_rand_phrase_to_seeds(string $phrase): array
-----
FUNCTION stats_rand_ranf
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return float
     */
    function stats_rand_ranf(): float
-----
FUNCTION stats_rand_setall
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param int $iseed1
     * @param int $iseed2
     * @return void
     */
    function stats_rand_setall(int $iseed1, int $iseed2): void
-----
FUNCTION stats_skew
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $a
     * @return float
     */
    function stats_skew(array $a): float
-----
FUNCTION stats_standard_deviation
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $a
     * @param bool $sample
     * @return float
     */
    function stats_standard_deviation(array $a, bool $sample = false): float
-----
FUNCTION stats_stat_binomial_coef
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $x
     * @param int $n
     * @return float
     */
    function stats_stat_binomial_coef(int $x, int $n): float
-----
FUNCTION stats_stat_correlation
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $arr1
     * @param array $arr2
     * @return float
     */
    function stats_stat_correlation(array $arr1, array $arr2): float
-----
FUNCTION stats_stat_factorial
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $n
     * @return float
     */
    function stats_stat_factorial(int $n): float
-----
FUNCTION stats_stat_independent_t
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $arr1
     * @param array $arr2
     * @return float
     */
    function stats_stat_independent_t(array $arr1, array $arr2): float
-----
FUNCTION stats_stat_innerproduct
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $arr1
     * @param array $arr2
     * @return float
     */
    function stats_stat_innerproduct(array $arr1, array $arr2): float
-----
FUNCTION stats_stat_paired_t
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $arr1
     * @param array $arr2
     * @return float
     */
    function stats_stat_paired_t(array $arr1, array $arr2): float
-----
FUNCTION stats_stat_percentile
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $df
     * @param float $xnonc
     * @return float
     */
    function stats_stat_percentile(float $df, float $xnonc): float
-----
FUNCTION stats_stat_powersum
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $arr
     * @param float $power
     * @return float
     */
    function stats_stat_powersum(array $arr, float $power): float
-----
FUNCTION stats_variance
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $a
     * @param bool $sample
     * @return float
     */
    function stats_variance(array $a, bool $sample = false): float
-----
FUNCTION stomp_connect_error
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @return string
     */
    function stomp_connect_error(): string
-----
FUNCTION stomp_version
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return string
     */
    function stomp_version(): string
-----
FUNCTION str_contains
-----
Variants: 1
    /**
     * @param string $haystack
     * @param string $needle
     * @return bool
     */
    function str_contains(string $haystack, string $needle): bool
-----
FUNCTION str_ends_with
-----
Variants: 1
    /**
     * @param string $haystack
     * @param string $needle
     * @return bool
     */
    function str_ends_with(string $haystack, string $needle): bool
-----
FUNCTION str_getcsv
-----
Variants: 1
    /**
     * @param string $string
     * @param string $separator
     * @param string $enclosure
     * @param string $escape
     * @return non-empty-array<int, string|null>
     */
    function str_getcsv(string $string, string $separator = ',', string $enclosure = '"', string $escape = '\\'): non-empty-array<int, string|null>
-----
FUNCTION str_ireplace
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array|string $search
     * @param array|string $replace
     * @param array|string $subject
     * @param int $count
     * @param-out int $count
     * @return array<int, string>|string
     */
    function str_ireplace(array|string $search, array|string $replace, array|string $subject, int &rw$count = null): array<string>|string
-----
FUNCTION str_pad
-----
Variants: 1
    /**
     * @param string $string
     * @param int $length
     * @param string $pad_string
     * @param int $pad_type
     * @return string
     */
    function str_pad(string $string, int $length, string $pad_string = ' ', int $pad_type = 1): string
-----
FUNCTION str_repeat
-----
Variants: 1
    /**
     * @param string $string
     * @param int $times
     * @return string
     */
    function str_repeat(string $string, int $times): string
-----
FUNCTION str_replace
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array|string $search
     * @param array|string $replace
     * @param array|string $subject
     * @param int $count
     * @param-out int $count
     * @return array<int, string>|string
     */
    function str_replace(array|string $search, array|string $replace, array|string $subject, int &rw$count = null): array|string
-----
FUNCTION str_rot13
-----
Variants: 1
    /**
     * @param string $string
     * @return string
     */
    function str_rot13(string $string): string
-----
FUNCTION str_shuffle
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $string
     * @return string
     */
    function str_shuffle(string $string): string
-----
FUNCTION str_split
-----
Variants: 1
    /**
     * @param string $string
     * @param int<1, max> $length
     * @return array<int, string>
     */
    function str_split(string $string, int<1, max> $length = 1): array<int, string>
-----
FUNCTION str_starts_with
-----
Variants: 1
    /**
     * @param string $haystack
     * @param string $needle
     * @return bool
     */
    function str_starts_with(string $haystack, string $needle): bool
-----
FUNCTION str_word_count
-----
Variants: 1
    /**
     * @param string $string
     * @param int $format
     * @param string|null $characters
     * @return array|int
     */
    function str_word_count(string $string, int $format = 0, string|null $characters = null): array|int
-----
FUNCTION strcasecmp
-----
Variants: 1
    /**
     * @param string $string1
     * @param string $string2
     * @return int<-1, 1>
     */
    function strcasecmp(string $string1, string $string2): int<-1, 1>
-----
FUNCTION strchr
-----
Variants: 1
    /**
     * @param string $haystack
     * @param string $needle
     * @param bool $before_needle
     * @return string|false
     */
    function strchr(string $haystack, string $needle, bool $before_needle = false): string|false
-----
FUNCTION strcmp
-----
Variants: 1
    /**
     * @param string $string1
     * @param string $string2
     * @return int<-1, 1>
     */
    function strcmp(string $string1, string $string2): int<-1, 1>
-----
FUNCTION strcoll
-----
Variants: 1
    /**
     * @param string $string1
     * @param string $string2
     * @return int<-1, 1>
     */
    function strcoll(string $string1, string $string2): int<-1, 1>
-----
FUNCTION strcspn
-----
Variants: 1
    /**
     * @param string $string
     * @param string $characters
     * @param int $offset
     * @param int|null $length
     * @return int
     */
    function strcspn(string $string, string $characters, int $offset = 0, int|null $length = null): int
-----
FUNCTION stream_bucket_append
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $brigade
     * @param object $bucket
     * @return void
     */
    function stream_bucket_append(resource $brigade, object $bucket): void
-----
FUNCTION stream_bucket_make_writeable
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $brigade
     * @return stdClass|null
     */
    function stream_bucket_make_writeable(resource $brigade): stdClass|null
-----
FUNCTION stream_bucket_new
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @param string $buffer
     * @return object
     */
    function stream_bucket_new(resource $stream, string $buffer): object
-----
FUNCTION stream_bucket_prepend
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $brigade
     * @param object $bucket
     * @return void
     */
    function stream_bucket_prepend(resource $brigade, object $bucket): void
-----
FUNCTION stream_context_create
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array|null $options
     * @param array|null $params
     * @return resource
     */
    function stream_context_create(array|null $options = null, array|null $params = null): resource
-----
FUNCTION stream_context_get_default
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array|null $options
     * @return resource
     */
    function stream_context_get_default(array|null $options = null): resource
-----
FUNCTION stream_context_get_options
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream_or_context
     * @return array
     */
    function stream_context_get_options(resource $stream_or_context): array
-----
FUNCTION stream_context_get_params
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $context
     * @return array
     */
    function stream_context_get_params(resource $context): array
-----
FUNCTION stream_context_set_default
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $options
     * @return resource
     */
    function stream_context_set_default(array $options): resource
-----
FUNCTION stream_context_set_option
-----
Has side-effects: Maybe
Variants: 2
    /**
     * @param mixed $context
     * @param string $wrappername
     * @param string $optionname
     * @param mixed $value
     * @return bool
     */
    function stream_context_set_option(mixed $context, string $wrappername, string $optionname, mixed $value): bool
    /**
     * @param mixed $context
     * @param array $options
     * @return bool
     */
    function stream_context_set_option(mixed $context, array $options): bool
-----
FUNCTION stream_context_set_params
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $context
     * @param array $params
     * @return bool
     */
    function stream_context_set_params(resource $context, array $params): bool
-----
FUNCTION stream_copy_to_stream
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $from
     * @param resource $to
     * @param int|null $length
     * @param int $offset
     * @return int|false
     */
    function stream_copy_to_stream(resource $from, resource $to, int|null $length = null, int $offset = 0): int|false
-----
FUNCTION stream_filter_append
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @param string $filter_name
     * @param int $mode
     * @param array $params
     * @return resource|false
     */
    function stream_filter_append(resource $stream, string $filter_name, int $mode = 0, array $params = *ERROR*): resource|false
-----
FUNCTION stream_filter_prepend
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @param string $filter_name
     * @param int $mode
     * @param array $params
     * @return resource|false
     */
    function stream_filter_prepend(resource $stream, string $filter_name, int $mode = 0, array $params = *ERROR*): resource|false
-----
FUNCTION stream_filter_register
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filter_name
     * @param string $class
     * @return bool
     */
    function stream_filter_register(string $filter_name, string $class): bool
-----
FUNCTION stream_filter_remove
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream_filter
     * @return bool
     */
    function stream_filter_remove(resource $stream_filter): bool
-----
FUNCTION stream_get_contents
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @param int|null $length
     * @param int $offset
     * @return string|false
     */
    function stream_get_contents(resource $stream, int|null $length = null, int $offset = -1): string|false
-----
FUNCTION stream_get_filters
-----
Variants: 1
    /**
     * @return array<int, string>
     */
    function stream_get_filters(): array<int, string>
-----
FUNCTION stream_get_line
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @param int $length
     * @param string $ending
     * @return string|false
     */
    function stream_get_line(resource $stream, int $length, string $ending = ''): string|false
-----
FUNCTION stream_get_meta_data
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @return array{timed_out: bool, blocked: bool, eof: bool, unread_bytes: int, stream_type: string, wrapper_type: string, wrapper_data: mixed, mode: string, seekable: bool, uri: string, mediatype?: string, base64?: bool}
     */
    function stream_get_meta_data(resource $stream): array{timed_out: bool, blocked: bool, eof: bool, unread_bytes: int, stream_type: string, wrapper_type: string, wrapper_data: mixed, mode: string, seekable: bool, uri: string, mediatype?: string, base64?: bool}
-----
FUNCTION stream_get_transports
-----
Variants: 1
    /**
     * @return array<int, string>
     */
    function stream_get_transports(): array<int, string>
-----
FUNCTION stream_get_wrappers
-----
Variants: 1
    /**
     * @return array<int, string>
     */
    function stream_get_wrappers(): array<int, string>
-----
FUNCTION stream_is_local
-----
Variants: 1
    /**
     * @param resource|string $stream
     * @return bool
     */
    function stream_is_local(resource|string $stream): bool
-----
FUNCTION stream_isatty
-----
Variants: 1
    /**
     * @param resource $stream
     * @return bool
     */
    function stream_isatty(resource $stream): bool
-----
FUNCTION stream_notification_callback
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $notification_code
     * @param int $severity
     * @param string $message
     * @param int $message_code
     * @param int $bytes_transferred
     * @param int $bytes_max
     * @return callback
     */
    function stream_notification_callback(int $notification_code, int $severity, string $message, int $message_code, int $bytes_transferred, int $bytes_max): callback
-----
FUNCTION stream_register_wrapper
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $protocol
     * @param string $class
     * @param int $flags
     * @return bool
     */
    function stream_register_wrapper(string $protocol, string $class, int $flags = 0): bool
-----
FUNCTION stream_resolve_include_path
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @return string|false
     */
    function stream_resolve_include_path(string $filename): string|false
-----
FUNCTION stream_select
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param TRead of array<resource>|null (function stream_select(), parameter) $read
     * @param-out (TRead of array<resource>|null (function stream_select(), parameter) is null ? null : array<resource>) $read
     * @param TWrite of array<resource>|null (function stream_select(), parameter) $write
     * @param-out (TWrite of array<resource>|null (function stream_select(), parameter) is null ? null : array<resource>) $write
     * @param TExcept of array<resource>|null (function stream_select(), parameter) $except
     * @param-out (TExcept of array<resource>|null (function stream_select(), parameter) is null ? null : array<resource>) $except
     * @param int|null $seconds
     * @param int|null $microseconds
     * @return int<0, max>|false
     */
    function stream_select(array<resource>|null &r$read, array<resource>|null &r$write, array<resource>|null &r$except, int|null $seconds, int|null $microseconds = null): int|false
-----
FUNCTION stream_set_blocking
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @param bool $enable
     * @return bool
     */
    function stream_set_blocking(resource $stream, bool $enable): bool
-----
FUNCTION stream_set_chunk_size
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @param int $size
     * @return int
     */
    function stream_set_chunk_size(resource $stream, int $size): int
-----
FUNCTION stream_set_read_buffer
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @param int $size
     * @return int
     */
    function stream_set_read_buffer(resource $stream, int $size): int
-----
FUNCTION stream_set_timeout
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @param int $seconds
     * @param int $microseconds
     * @return bool
     */
    function stream_set_timeout(resource $stream, int $seconds, int $microseconds = 0): bool
-----
FUNCTION stream_set_write_buffer
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @param int $size
     * @return int
     */
    function stream_set_write_buffer(resource $stream, int $size): int
-----
FUNCTION stream_socket_accept
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $socket
     * @param float|null $timeout
     * @param string $peer_name
     * @return resource|false
     */
    function stream_socket_accept(resource $socket, float|null $timeout = null, string &rw$peer_name = null): resource|false
-----
FUNCTION stream_socket_client
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $address
     * @param int $error_code
     * @param string $error_message
     * @param float|null $timeout
     * @param int $flags
     * @param resource|null $context
     * @return resource|false
     */
    function stream_socket_client(string $address, int &rw$error_code = null, string &rw$error_message = null, float|null $timeout = null, int $flags = 4, resource|null $context = null): resource|false
-----
FUNCTION stream_socket_enable_crypto
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @param bool $enable
     * @param int|null $crypto_method
     * @param resource|null $session_stream
     * @return bool|int
     */
    function stream_socket_enable_crypto(resource $stream, bool $enable, int|null $crypto_method = null, resource|null $session_stream = null): bool|int
-----
FUNCTION stream_socket_get_name
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $socket
     * @param bool $remote
     * @return string|false
     */
    function stream_socket_get_name(resource $socket, bool $remote): string|false
-----
FUNCTION stream_socket_pair
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $domain
     * @param int $type
     * @param int $protocol
     * @return array<resource>|false
     */
    function stream_socket_pair(int $domain, int $type, int $protocol): array<resource>|false
-----
FUNCTION stream_socket_recvfrom
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $socket
     * @param int $length
     * @param int $flags
     * @param string|null $address
     * @return string|false
     */
    function stream_socket_recvfrom(resource $socket, int $length, int $flags = 0, string|null &rw$address = null): string|false
-----
FUNCTION stream_socket_sendto
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $socket
     * @param string $data
     * @param int $flags
     * @param string $address
     * @return int|false
     */
    function stream_socket_sendto(resource $socket, string $data, int $flags = 0, string $address = ''): int|false
-----
FUNCTION stream_socket_server
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $address
     * @param int $error_code
     * @param string $error_message
     * @param int $flags
     * @param resource|null $context
     * @return resource|false
     */
    function stream_socket_server(string $address, int &rw$error_code = null, string &rw$error_message = null, int $flags = 12, resource|null $context = null): resource|false
-----
FUNCTION stream_socket_shutdown
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @param int $mode
     * @return bool
     */
    function stream_socket_shutdown(resource $stream, int $mode): bool
-----
FUNCTION stream_supports_lock
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @return bool
     */
    function stream_supports_lock(resource $stream): bool
-----
FUNCTION stream_wrapper_register
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $protocol
     * @param string $class
     * @param int $flags
     * @return bool
     */
    function stream_wrapper_register(string $protocol, string $class, int $flags = 0): bool
-----
FUNCTION stream_wrapper_restore
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $protocol
     * @return bool
     */
    function stream_wrapper_restore(string $protocol): bool
-----
FUNCTION stream_wrapper_unregister
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $protocol
     * @return bool
     */
    function stream_wrapper_unregister(string $protocol): bool
-----
FUNCTION strftime
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $format
     * @param int|null $timestamp
     * @return string|false
     */
    function strftime(string $format, int|null $timestamp = null): string|false
-----
FUNCTION strip_tags
-----
Variants: 1
    /**
     * @param string $string
     * @param array<int, string>|string|null $allowed_tags
     * @return string
     */
    function strip_tags(string $string, array<int, string>|string|null $allowed_tags = null): string
-----
FUNCTION stripcslashes
-----
Variants: 1
    /**
     * @param string $string
     * @return string
     */
    function stripcslashes(string $string): string
-----
FUNCTION stripos
-----
Variants: 1
    /**
     * @param string $haystack
     * @param string $needle
     * @param int $offset
     * @return int|false
     */
    function stripos(string $haystack, string $needle, int $offset = 0): int|false
-----
FUNCTION stripslashes
-----
Variants: 1
    /**
     * @param string $string
     * @return string
     */
    function stripslashes(string $string): string
-----
FUNCTION stristr
-----
Variants: 1
    /**
     * @param string $haystack
     * @param string $needle
     * @param bool $before_needle
     * @return string|false
     */
    function stristr(string $haystack, string $needle, bool $before_needle = false): string|false
-----
FUNCTION strlen
-----
Variants: 1
    /**
     * @param string $string
     * @return int<0, max>
     */
    function strlen(string $string): int<0, max>
-----
FUNCTION strnatcasecmp
-----
Variants: 1
    /**
     * @param string $string1
     * @param string $string2
     * @return int<-1, 1>
     */
    function strnatcasecmp(string $string1, string $string2): int<-1, 1>
-----
FUNCTION strnatcmp
-----
Variants: 1
    /**
     * @param string $string1
     * @param string $string2
     * @return int<-1, 1>
     */
    function strnatcmp(string $string1, string $string2): int<-1, 1>
-----
FUNCTION strncasecmp
-----
Variants: 1
    /**
     * @param string $string1
     * @param string $string2
     * @param int $length
     * @return int<-1, 1>
     */
    function strncasecmp(string $string1, string $string2, int $length): int<-1, 1>
-----
FUNCTION strncmp
-----
Variants: 1
    /**
     * @param string $string1
     * @param string $string2
     * @param int $length
     * @return int<-1, 1>
     */
    function strncmp(string $string1, string $string2, int $length): int<-1, 1>
-----
FUNCTION strpbrk
-----
Variants: 1
    /**
     * @param string $string
     * @param string $characters
     * @return string|false
     */
    function strpbrk(string $string, string $characters): string|false
-----
FUNCTION strpos
-----
Variants: 1
    /**
     * @param string $haystack
     * @param string $needle
     * @param int $offset
     * @return int<0, max>|false
     */
    function strpos(string $haystack, string $needle, int $offset = 0): int<0, max>|false
-----
FUNCTION strptime
-----
Is deprecated: Yes
Variants: 1
    /**
     * @param string $timestamp
     * @param string $format
     * @return array|false
     */
    function strptime(string $timestamp, string $format): array|false
-----
FUNCTION strrchr
-----
Variants: 1
    /**
     * @param string $haystack
     * @param string $needle
     * @return string|false
     */
    function strrchr(string $haystack, string $needle): string|false
-----
FUNCTION strrev
-----
Variants: 1
    /**
     * @param string $string
     * @return string
     */
    function strrev(string $string): string
-----
FUNCTION strripos
-----
Variants: 1
    /**
     * @param string $haystack
     * @param string $needle
     * @param int $offset
     * @return int|false
     */
    function strripos(string $haystack, string $needle, int $offset = 0): int|false
-----
FUNCTION strrpos
-----
Variants: 1
    /**
     * @param string $haystack
     * @param string $needle
     * @param int $offset
     * @return int|false
     */
    function strrpos(string $haystack, string $needle, int $offset = 0): int|false
-----
FUNCTION strspn
-----
Variants: 1
    /**
     * @param string $string
     * @param string $characters
     * @param int $offset
     * @param int|null $length
     * @return int
     */
    function strspn(string $string, string $characters, int $offset = 0, int|null $length = null): int
-----
FUNCTION strstr
-----
Variants: 1
    /**
     * @param string $haystack
     * @param string $needle
     * @param bool $before_needle
     * @return string|false
     */
    function strstr(string $haystack, string $needle, bool $before_needle = false): string|false
-----
FUNCTION strtok
-----
Has side-effects: Maybe
Variants: 2
    /**
     * @param string $str
     * @param string $token
     * @return string|false
     */
    function strtok(string $str, string $token = null): string|false
    /**
     * @param string $token
     * @return string|false
     */
    function strtok(string $token): string|false
-----
FUNCTION strtolower
-----
Variants: 1
    /**
     * @param string $string
     * @return string
     */
    function strtolower(string $string): string
-----
FUNCTION strtotime
-----
Variants: 1
    /**
     * @param string $datetime
     * @param int|null $baseTimestamp
     * @return int|false
     */
    function strtotime(string $datetime, int|null $baseTimestamp = null): int|false
-----
FUNCTION strtoupper
-----
Variants: 1
    /**
     * @param string $string
     * @return string
     */
    function strtoupper(string $string): string
-----
FUNCTION strtr
-----
Variants: 2
    /**
     * @param string $str
     * @param string $from
     * @param string $to
     * @return string
     */
    function strtr(string $str, string $from, string $to): string
    /**
     * @param string $str
     * @param array $replace_pairs
     * @return string
     */
    function strtr(string $str, array $replace_pairs): string
-----
FUNCTION strval
-----
Variants: 1
    /**
     * @param bool|float|int|resource|string|null $value
     * @return string
     */
    function strval(bool|float|int|resource|string|null $value): string
-----
FUNCTION substr
-----
Variants: 1
    /**
     * @param string $string
     * @param int $offset
     * @param int|null $length
     * @return string
     */
    function substr(string $string, int $offset, int|null $length = null): string
-----
FUNCTION substr_compare
-----
Variants: 1
    /**
     * @param string $haystack
     * @param string $needle
     * @param int $offset
     * @param int|null $length
     * @param bool $case_insensitive
     * @return int
     */
    function substr_compare(string $haystack, string $needle, int $offset, int|null $length = null, bool $case_insensitive = false): int
-----
FUNCTION substr_count
-----
Variants: 1
    /**
     * @param string $haystack
     * @param string $needle
     * @param int $offset
     * @param int|null $length
     * @return int<0, max>
     */
    function substr_count(string $haystack, string $needle, int $offset = 0, int|null $length = null): int<0, max>
-----
FUNCTION substr_replace
-----
Variants: 1
    /**
     * @param array|string $string
     * @param array|string $replace
     * @param array|int $offset
     * @param array|int|null $length
     * @return array|string
     */
    function substr_replace(array|string $string, array|string $replace, array|int $offset, array|int|null $length = null): array|string
-----
FUNCTION svn_add
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $path
     * @param bool $recursive
     * @param bool $force
     * @return bool
     */
    function svn_add(string $path, bool $recursive = true, bool $force = false): bool
-----
FUNCTION svn_auth_get_parameter
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $key
     * @return string
     */
    function svn_auth_get_parameter(string $key): string
-----
FUNCTION svn_auth_set_parameter
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $key
     * @param string $value
     * @return void
     */
    function svn_auth_set_parameter(string $key, string $value): void
-----
FUNCTION svn_blame
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $repository_url
     * @param int $revision_no
     * @return array
     */
    function svn_blame(string $repository_url, int $revision_no = -1): array
-----
FUNCTION svn_cat
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $repos_url
     * @param int $revision_no
     * @return string
     */
    function svn_cat(string $repos_url, int $revision_no = -1): string
-----
FUNCTION svn_checkout
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $repos
     * @param string $targetpath
     * @param int $revision
     * @param int $flags
     * @return bool
     */
    function svn_checkout(string $repos, string $targetpath, int $revision = -1, int $flags = 0): bool
-----
FUNCTION svn_cleanup
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $workingdir
     * @return bool
     */
    function svn_cleanup(string $workingdir): bool
-----
FUNCTION svn_client_version
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return string
     */
    function svn_client_version(): string
-----
FUNCTION svn_commit
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $log
     * @param array $targets
     * @param bool $dontrecurse
     * @return array
     */
    function svn_commit(string $log, array $targets, bool $dontrecurse = true): array
-----
FUNCTION svn_delete
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $path
     * @param bool $force
     * @return bool
     */
    function svn_delete(string $path, bool $force = false): bool
-----
FUNCTION svn_diff
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $path1
     * @param int $rev1
     * @param string $path2
     * @param int $rev2
     * @return array
     */
    function svn_diff(string $path1, int $rev1, string $path2, int $rev2): array
-----
FUNCTION svn_export
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $frompath
     * @param string $topath
     * @param bool $working_copy
     * @param int $revision_no
     * @return bool
     */
    function svn_export(string $frompath, string $topath, bool $working_copy = true, int $revision_no = -1): bool
-----
FUNCTION svn_fs_abort_txn
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $txn
     * @return bool
     */
    function svn_fs_abort_txn(resource $txn): bool
-----
FUNCTION svn_fs_apply_text
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $root
     * @param string $path
     * @return resource
     */
    function svn_fs_apply_text(resource $root, string $path): resource
-----
FUNCTION svn_fs_begin_txn2
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $repos
     * @param int $rev
     * @return resource
     */
    function svn_fs_begin_txn2(resource $repos, int $rev): resource
-----
FUNCTION svn_fs_change_node_prop
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $root
     * @param string $path
     * @param string $name
     * @param string $value
     * @return bool
     */
    function svn_fs_change_node_prop(resource $root, string $path, string $name, string $value): bool
-----
FUNCTION svn_fs_check_path
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fsroot
     * @param string $path
     * @return int
     */
    function svn_fs_check_path(resource $fsroot, string $path): int
-----
FUNCTION svn_fs_contents_changed
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $root1
     * @param string $path1
     * @param resource $root2
     * @param string $path2
     * @return bool
     */
    function svn_fs_contents_changed(resource $root1, string $path1, resource $root2, string $path2): bool
-----
FUNCTION svn_fs_copy
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $from_root
     * @param string $from_path
     * @param resource $to_root
     * @param string $to_path
     * @return bool
     */
    function svn_fs_copy(resource $from_root, string $from_path, resource $to_root, string $to_path): bool
-----
FUNCTION svn_fs_delete
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $root
     * @param string $path
     * @return bool
     */
    function svn_fs_delete(resource $root, string $path): bool
-----
FUNCTION svn_fs_dir_entries
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fsroot
     * @param string $path
     * @return array
     */
    function svn_fs_dir_entries(resource $fsroot, string $path): array
-----
FUNCTION svn_fs_file_contents
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fsroot
     * @param string $path
     * @return resource
     */
    function svn_fs_file_contents(resource $fsroot, string $path): resource
-----
FUNCTION svn_fs_file_length
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fsroot
     * @param string $path
     * @return int
     */
    function svn_fs_file_length(resource $fsroot, string $path): int
-----
FUNCTION svn_fs_is_dir
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $root
     * @param string $path
     * @return bool
     */
    function svn_fs_is_dir(resource $root, string $path): bool
-----
FUNCTION svn_fs_is_file
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $root
     * @param string $path
     * @return bool
     */
    function svn_fs_is_file(resource $root, string $path): bool
-----
FUNCTION svn_fs_make_dir
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $root
     * @param string $path
     * @return bool
     */
    function svn_fs_make_dir(resource $root, string $path): bool
-----
FUNCTION svn_fs_make_file
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $root
     * @param string $path
     * @return bool
     */
    function svn_fs_make_file(resource $root, string $path): bool
-----
FUNCTION svn_fs_node_created_rev
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fsroot
     * @param string $path
     * @return int
     */
    function svn_fs_node_created_rev(resource $fsroot, string $path): int
-----
FUNCTION svn_fs_node_prop
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fsroot
     * @param string $path
     * @param string $propname
     * @return string
     */
    function svn_fs_node_prop(resource $fsroot, string $path, string $propname): string
-----
FUNCTION svn_fs_props_changed
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $root1
     * @param string $path1
     * @param resource $root2
     * @param string $path2
     * @return bool
     */
    function svn_fs_props_changed(resource $root1, string $path1, resource $root2, string $path2): bool
-----
FUNCTION svn_fs_revision_prop
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fs
     * @param int $revnum
     * @param string $propname
     * @return string
     */
    function svn_fs_revision_prop(resource $fs, int $revnum, string $propname): string
-----
FUNCTION svn_fs_revision_root
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fs
     * @param int $revnum
     * @return resource
     */
    function svn_fs_revision_root(resource $fs, int $revnum): resource
-----
FUNCTION svn_fs_txn_root
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $txn
     * @return resource
     */
    function svn_fs_txn_root(resource $txn): resource
-----
FUNCTION svn_fs_youngest_rev
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $fs
     * @return int
     */
    function svn_fs_youngest_rev(resource $fs): int
-----
FUNCTION svn_import
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $path
     * @param string $url
     * @param bool $nonrecursive
     * @return bool
     */
    function svn_import(string $path, string $url, bool $nonrecursive): bool
-----
FUNCTION svn_log
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $repos_url
     * @param int $start_revision
     * @param int $end_revision
     * @param int $limit
     * @param int $flags
     * @return array
     */
    function svn_log(string $repos_url, int $start_revision = null, int $end_revision = null, int $limit = 0, int $flags = 10): array
-----
FUNCTION svn_ls
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $repos_url
     * @param int $revision_no
     * @param bool $recurse
     * @param bool $peg
     * @return array
     */
    function svn_ls(string $repos_url, int $revision_no = -1, bool $recurse = false, bool $peg = false): array
-----
FUNCTION svn_mkdir
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $path
     * @param string $log_message
     * @return bool
     */
    function svn_mkdir(string $path, string $log_message = null): bool
-----
FUNCTION svn_repos_create
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $path
     * @param array $config
     * @param array $fsconfig
     * @return resource
     */
    function svn_repos_create(string $path, array $config = null, array $fsconfig = null): resource
-----
FUNCTION svn_repos_fs
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $repos
     * @return resource
     */
    function svn_repos_fs(resource $repos): resource
-----
FUNCTION svn_repos_fs_begin_txn_for_commit
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $repos
     * @param int $rev
     * @param string $author
     * @param string $log_msg
     * @return resource
     */
    function svn_repos_fs_begin_txn_for_commit(resource $repos, int $rev, string $author, string $log_msg): resource
-----
FUNCTION svn_repos_fs_commit_txn
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $txn
     * @return int
     */
    function svn_repos_fs_commit_txn(resource $txn): int
-----
FUNCTION svn_repos_hotcopy
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $repospath
     * @param string $destpath
     * @param bool $cleanlogs
     * @return bool
     */
    function svn_repos_hotcopy(string $repospath, string $destpath, bool $cleanlogs): bool
-----
FUNCTION svn_repos_open
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $path
     * @return resource
     */
    function svn_repos_open(string $path): resource
-----
FUNCTION svn_repos_recover
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $path
     * @return bool
     */
    function svn_repos_recover(string $path): bool
-----
FUNCTION svn_revert
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $path
     * @param bool $recursive
     * @return bool
     */
    function svn_revert(string $path, bool $recursive = false): bool
-----
FUNCTION svn_status
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $path
     * @param int $flags
     * @return array
     */
    function svn_status(string $path, int $flags = 0): array
-----
FUNCTION svn_update
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $path
     * @param int $revno
     * @param bool $recurse
     * @return int
     */
    function svn_update(string $path, int $revno = -1, bool $recurse = true): int
-----
FUNCTION swoole_async_dns_lookup
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $hostname
     * @param callable(): mixed $callback
     * @return bool
     */
    function swoole_async_dns_lookup(string $hostname, callable(): mixed $callback): bool
-----
FUNCTION swoole_async_read
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param callable(): mixed $callback
     * @param int $chunk_size
     * @param int $offset
     * @return bool
     */
    function swoole_async_read(string $filename, callable(): mixed $callback, int $chunk_size, int $offset): bool
-----
FUNCTION swoole_async_readfile
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param string $callback
     * @return bool
     */
    function swoole_async_readfile(string $filename, string $callback): bool
-----
FUNCTION swoole_async_set
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param array $settings
     * @return void
     */
    function swoole_async_set(array $settings): void
-----
FUNCTION swoole_async_write
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param string $content
     * @param int $offset
     * @param callable(): mixed $callback
     * @return bool
     */
    function swoole_async_write(string $filename, string $content, int $offset, callable(): mixed $callback): bool
-----
FUNCTION swoole_async_writefile
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param string $content
     * @param callable(): mixed $callback
     * @param int $flags
     * @return bool
     */
    function swoole_async_writefile(string $filename, string $content, callable(): mixed $callback, int $flags): bool
-----
FUNCTION swoole_clear_error
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return mixed
     */
    function swoole_clear_error(): mixed
-----
FUNCTION swoole_client_select
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $read_array
     * @param array $write_array
     * @param array $error_array
     * @param float $timeout
     * @return int
     */
    function swoole_client_select(array $read_array, array $write_array, array $error_array, float $timeout = null): int
-----
FUNCTION swoole_cpu_num
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return int
     */
    function swoole_cpu_num(): int
-----
FUNCTION swoole_errno
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return int
     */
    function swoole_errno(): int
-----
FUNCTION swoole_error_log
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param int $level
     * @param string $msg
     * @return void
     */
    function swoole_error_log(int $level, string $msg): mixed
-----
FUNCTION swoole_event_add
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $fd
     * @param callable(): mixed $read_callback
     * @param callable(): mixed $write_callback
     * @param int $events
     * @return int
     */
    function swoole_event_add(int $fd, callable(): mixed $read_callback, callable(): mixed $write_callback = null, int $events = null): int
-----
FUNCTION swoole_event_defer
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @return bool
     */
    function swoole_event_defer(callable(): mixed $callback): bool
-----
FUNCTION swoole_event_del
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $fd
     * @return bool
     */
    function swoole_event_del(int $fd): bool
-----
FUNCTION swoole_event_exit
-----
Has side-effects: Yes
Variants: 1
    /**
     * @return void
     */
    function swoole_event_exit(): void
-----
FUNCTION swoole_event_set
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $fd
     * @param callable(): mixed $read_callback
     * @param callable(): mixed $write_callback
     * @param int $events
     * @return bool
     */
    function swoole_event_set(int $fd, callable(): mixed $read_callback = null, callable(): mixed $write_callback = null, int $events = null): bool
-----
FUNCTION swoole_event_wait
-----
Has side-effects: Yes
Variants: 1
    /**
     * @return void
     */
    function swoole_event_wait(): void
-----
FUNCTION swoole_event_write
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $fd
     * @param string $data
     * @return bool
     */
    function swoole_event_write(int $fd, string $data): bool
-----
FUNCTION swoole_get_local_ip
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return array
     */
    function swoole_get_local_ip(): array
-----
FUNCTION swoole_last_error
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return int
     */
    function swoole_last_error(): int
-----
FUNCTION swoole_load_module
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @return mixed
     */
    function swoole_load_module(string $filename): mixed
-----
FUNCTION swoole_select
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $read_array
     * @param array $write_array
     * @param array $error_array
     * @param float $timeout
     * @return int
     */
    function swoole_select(array $read_array, array $write_array, array $error_array, float $timeout = null): int
-----
FUNCTION swoole_set_process_name
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $process_name
     * @param int $size
     * @return void
     */
    function swoole_set_process_name(string $process_name, int $size): void
-----
FUNCTION swoole_strerror
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $errno
     * @param int $error_type
     * @return string
     */
    function swoole_strerror(int $errno, int $error_type = null): string
-----
FUNCTION swoole_timer_after
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $ms
     * @param callable(): mixed $callback
     * @param mixed $param
     * @return int
     */
    function swoole_timer_after(int $ms, callable(): mixed $callback, mixed $param): int
-----
FUNCTION swoole_timer_exists
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $timer_id
     * @return bool
     */
    function swoole_timer_exists(int $timer_id): bool
-----
FUNCTION swoole_timer_tick
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $ms
     * @param callable(): mixed $callback
     * @param mixed $param
     * @return int
     */
    function swoole_timer_tick(int $ms, callable(): mixed $callback, mixed $param): int
-----
FUNCTION swoole_version
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return string
     */
    function swoole_version(): string
-----
FUNCTION symlink
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $target
     * @param string $link
     * @return bool
     */
    function symlink(string $target, string $link): bool
-----
FUNCTION sys_get_temp_dir
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return string
     */
    function sys_get_temp_dir(): string
-----
FUNCTION sys_getloadavg
-----
Variants: 1
    /**
     * @return array|false
     */
    function sys_getloadavg(): array|false
-----
FUNCTION syslog
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $priority
     * @param string $message
     * @return true
     */
    function syslog(int $priority, string $message): true
-----
FUNCTION system
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $command
     * @param int $result_code
     * @param-out int $result_code
     * @return string|false
     */
    function system(string $command, int &rw$result_code = null): string|false
-----
FUNCTION taint
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $string
     * @param string $other_strings
     * @return bool
     */
    function taint(string &r$string, string ...&rw$other_strings): bool
-----
FUNCTION tan
-----
Variants: 1
    /**
     * @param float $num
     * @return float
     */
    function tan(float $num): float
-----
FUNCTION tanh
-----
Variants: 1
    /**
     * @param float $num
     * @return float
     */
    function tanh(float $num): float
-----
FUNCTION tcpwrap_check
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $daemon
     * @param string $address
     * @param string $user
     * @param bool $nodns
     * @return bool
     */
    function tcpwrap_check(string $daemon, string $address, string $user, bool $nodns): bool
-----
FUNCTION tempnam
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $directory
     * @param string $prefix
     * @return string|false
     */
    function tempnam(string $directory, string $prefix): string|false
-----
FUNCTION textdomain
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string|null $domain
     * @return string
     */
    function textdomain(string|null $domain): string
-----
FUNCTION tidy_access_count
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param tidy $tidy
     * @return int
     */
    function tidy_access_count(tidy $tidy): int
-----
FUNCTION tidy_config_count
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param tidy $tidy
     * @return int
     */
    function tidy_config_count(tidy $tidy): int
-----
FUNCTION tidy_error_count
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param tidy $tidy
     * @return int
     */
    function tidy_error_count(tidy $tidy): int
-----
FUNCTION tidy_get_output
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param tidy $tidy
     * @return string
     */
    function tidy_get_output(tidy $tidy): string
-----
FUNCTION tidy_warning_count
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param tidy $tidy
     * @return int
     */
    function tidy_warning_count(tidy $tidy): int
-----
FUNCTION time
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return int<1, max>
     */
    function time(): int<1, max>
-----
FUNCTION time_nanosleep
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $seconds
     * @param int $nanoseconds
     * @return array{seconds: int<0, max>, nanoseconds: int<0, max>}|bool
     */
    function time_nanosleep(int $seconds, int $nanoseconds): array{seconds: int<0, max>, nanoseconds: int<0, max>}|bool
-----
FUNCTION time_sleep_until
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param float $timestamp
     * @return bool
     */
    function time_sleep_until(float $timestamp): bool
-----
FUNCTION timezone_abbreviations_list
-----
Variants: 1
    /**
     * @return array<string, array<int, array{dst: bool, offset: int, timezone_id: string|null}>>
     */
    function timezone_abbreviations_list(): array<string, array<int, array{dst: bool, offset: int, timezone_id: string|null}>>
-----
FUNCTION timezone_identifiers_list
-----
Variants: 1
    /**
     * @param int $timezoneGroup
     * @param string|null $countryCode
     * @return array<int, string>
     */
    function timezone_identifiers_list(int $timezoneGroup = 2047, string|null $countryCode = null): array<int, string>
-----
FUNCTION timezone_location_get
-----
Variants: 1
    /**
     * @param DateTimeZone $object
     * @return array{country_code: string, latitude: float, longitude: float, comments: string}|false
     */
    function timezone_location_get(DateTimeZone $object): array{country_code: string, latitude: float, longitude: float, comments: string}|false
-----
FUNCTION timezone_name_from_abbr
-----
Variants: 1
    /**
     * @param string $abbr
     * @param int $utcOffset
     * @param int $isDST
     * @return string|false
     */
    function timezone_name_from_abbr(string $abbr, int $utcOffset = -1, int $isDST = -1): string|false
-----
FUNCTION timezone_name_get
-----
Variants: 1
    /**
     * @param DateTimeZone $object
     * @return string
     */
    function timezone_name_get(DateTimeZone $object): string
-----
FUNCTION timezone_offset_get
-----
Variants: 1
    /**
     * @param DateTimeZone $object
     * @param DateTime $datetime
     * @return int
     */
    function timezone_offset_get(DateTimeZone $object, DateTime $datetime): int
-----
FUNCTION timezone_open
-----
Variants: 1
    /**
     * @param string $timezone
     * @return DateTimeZone|false
     */
    function timezone_open(string $timezone): DateTimeZone|false
-----
FUNCTION timezone_transitions_get
-----
Variants: 1
    /**
     * @param DateTimeZone $object
     * @param int $timestampBegin
     * @param int $timestampEnd
     * @return array<int, array{ts: int, time: string, offset: int, isdst: bool, abbr: string}>|false
     */
    function timezone_transitions_get(DateTimeZone $object, int $timestampBegin = -9223372036854775808|-2147483648, int $timestampEnd = 2147483647|9223372036854775807): array<int, array{ts: int, time: string, offset: int, isdst: bool, abbr: string}>|false
-----
FUNCTION timezone_version_get
-----
Variants: 1
    /**
     * @return string
     */
    function timezone_version_get(): string
-----
FUNCTION tmpfile
-----
Has side-effects: Yes
Variants: 1
    /**
     * @return resource|false
     */
    function tmpfile(): resource|false
-----
FUNCTION token_get_all
-----
Variants: 1
    /**
     * @param string $code
     * @param int $flags
     * @return array<int, array{int, string, int}|string>
     */
    function token_get_all(string $code, int $flags = 0): array<int, array{int, string, int}|string>
-----
FUNCTION token_name
-----
Variants: 1
    /**
     * @param int $id
     * @return string
     */
    function token_name(int $id): string
-----
FUNCTION touch
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $filename
     * @param int|null $mtime
     * @param int|null $atime
     * @return bool
     */
    function touch(string $filename, int|null $mtime = null, int|null $atime = null): bool
-----
FUNCTION trader_acos
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @return array
     */
    function trader_acos(array $real): array
-----
FUNCTION trader_ad
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $high
     * @param array $low
     * @param array $close
     * @param array $volume
     * @return array
     */
    function trader_ad(array $high, array $low, array $close, array $volume): array
-----
FUNCTION trader_add
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real0
     * @param array $real1
     * @return array
     */
    function trader_add(array $real0, array $real1): array
-----
FUNCTION trader_adosc
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $high
     * @param array $low
     * @param array $close
     * @param array $volume
     * @param int $fastPeriod
     * @param int $slowPeriod
     * @return array
     */
    function trader_adosc(array $high, array $low, array $close, array $volume, int $fastPeriod, int $slowPeriod): array
-----
FUNCTION trader_adx
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $high
     * @param array $low
     * @param array $close
     * @param int $timePeriod
     * @return array
     */
    function trader_adx(array $high, array $low, array $close, int $timePeriod): array
-----
FUNCTION trader_adxr
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $high
     * @param array $low
     * @param array $close
     * @param int $timePeriod
     * @return array
     */
    function trader_adxr(array $high, array $low, array $close, int $timePeriod): array
-----
FUNCTION trader_apo
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $fastPeriod
     * @param int $slowPeriod
     * @param int $mAType
     * @return array
     */
    function trader_apo(array $real, int $fastPeriod, int $slowPeriod, int $mAType): array
-----
FUNCTION trader_aroon
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $high
     * @param array $low
     * @param int $timePeriod
     * @return array
     */
    function trader_aroon(array $high, array $low, int $timePeriod): array
-----
FUNCTION trader_aroonosc
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $high
     * @param array $low
     * @param int $timePeriod
     * @return array
     */
    function trader_aroonosc(array $high, array $low, int $timePeriod): array
-----
FUNCTION trader_asin
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @return array
     */
    function trader_asin(array $real): array
-----
FUNCTION trader_atan
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @return array
     */
    function trader_atan(array $real): array
-----
FUNCTION trader_atr
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $high
     * @param array $low
     * @param array $close
     * @param int $timePeriod
     * @return array
     */
    function trader_atr(array $high, array $low, array $close, int $timePeriod): array
-----
FUNCTION trader_avgprice
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_avgprice(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_bbands
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @param float $nbDevUp
     * @param float $nbDevDn
     * @param int $mAType
     * @return array
     */
    function trader_bbands(array $real, int $timePeriod, float $nbDevUp, float $nbDevDn, int $mAType): array
-----
FUNCTION trader_beta
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real0
     * @param array $real1
     * @param int $timePeriod
     * @return array
     */
    function trader_beta(array $real0, array $real1, int $timePeriod): array
-----
FUNCTION trader_bop
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_bop(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cci
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $high
     * @param array $low
     * @param array $close
     * @param int $timePeriod
     * @return array
     */
    function trader_cci(array $high, array $low, array $close, int $timePeriod): array
-----
FUNCTION trader_cdl2crows
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdl2crows(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdl3blackcrows
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdl3blackcrows(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdl3inside
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdl3inside(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdl3linestrike
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdl3linestrike(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdl3outside
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdl3outside(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdl3starsinsouth
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdl3starsinsouth(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdl3whitesoldiers
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdl3whitesoldiers(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlabandonedbaby
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @param float $penetration
     * @return array
     */
    function trader_cdlabandonedbaby(array $open, array $high, array $low, array $close, float $penetration): array
-----
FUNCTION trader_cdladvanceblock
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdladvanceblock(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlbelthold
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlbelthold(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlbreakaway
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlbreakaway(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlclosingmarubozu
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlclosingmarubozu(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlconcealbabyswall
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlconcealbabyswall(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlcounterattack
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlcounterattack(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdldarkcloudcover
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @param float $penetration
     * @return array
     */
    function trader_cdldarkcloudcover(array $open, array $high, array $low, array $close, float $penetration): array
-----
FUNCTION trader_cdldoji
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdldoji(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdldojistar
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdldojistar(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdldragonflydoji
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdldragonflydoji(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlengulfing
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlengulfing(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdleveningdojistar
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @param float $penetration
     * @return array
     */
    function trader_cdleveningdojistar(array $open, array $high, array $low, array $close, float $penetration): array
-----
FUNCTION trader_cdleveningstar
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @param float $penetration
     * @return array
     */
    function trader_cdleveningstar(array $open, array $high, array $low, array $close, float $penetration): array
-----
FUNCTION trader_cdlgapsidesidewhite
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlgapsidesidewhite(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlgravestonedoji
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlgravestonedoji(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlhammer
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlhammer(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlhangingman
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlhangingman(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlharami
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlharami(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlharamicross
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlharamicross(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlhighwave
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlhighwave(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlhikkake
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlhikkake(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlhikkakemod
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlhikkakemod(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlhomingpigeon
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlhomingpigeon(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlidentical3crows
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlidentical3crows(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlinneck
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlinneck(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlinvertedhammer
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlinvertedhammer(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlkicking
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlkicking(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlkickingbylength
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlkickingbylength(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlladderbottom
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlladderbottom(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdllongleggeddoji
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdllongleggeddoji(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdllongline
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdllongline(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlmarubozu
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlmarubozu(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlmatchinglow
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlmatchinglow(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlmathold
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @param float $penetration
     * @return array
     */
    function trader_cdlmathold(array $open, array $high, array $low, array $close, float $penetration): array
-----
FUNCTION trader_cdlmorningdojistar
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @param float $penetration
     * @return array
     */
    function trader_cdlmorningdojistar(array $open, array $high, array $low, array $close, float $penetration): array
-----
FUNCTION trader_cdlmorningstar
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @param float $penetration
     * @return array
     */
    function trader_cdlmorningstar(array $open, array $high, array $low, array $close, float $penetration): array
-----
FUNCTION trader_cdlonneck
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlonneck(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlpiercing
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlpiercing(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlrickshawman
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlrickshawman(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlrisefall3methods
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlrisefall3methods(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlseparatinglines
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlseparatinglines(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlshootingstar
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlshootingstar(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlshortline
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlshortline(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlspinningtop
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlspinningtop(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlstalledpattern
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlstalledpattern(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlsticksandwich
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlsticksandwich(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdltakuri
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdltakuri(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdltasukigap
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdltasukigap(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlthrusting
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlthrusting(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdltristar
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdltristar(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlunique3river
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlunique3river(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlupsidegap2crows
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlupsidegap2crows(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_cdlxsidegap3methods
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $open
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_cdlxsidegap3methods(array $open, array $high, array $low, array $close): array
-----
FUNCTION trader_ceil
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @return array
     */
    function trader_ceil(array $real): array
-----
FUNCTION trader_cmo
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @return array
     */
    function trader_cmo(array $real, int $timePeriod): array
-----
FUNCTION trader_correl
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real0
     * @param array $real1
     * @param int $timePeriod
     * @return array
     */
    function trader_correl(array $real0, array $real1, int $timePeriod): array
-----
FUNCTION trader_cos
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @return array
     */
    function trader_cos(array $real): array
-----
FUNCTION trader_cosh
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @return array
     */
    function trader_cosh(array $real): array
-----
FUNCTION trader_dema
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @return array
     */
    function trader_dema(array $real, int $timePeriod): array
-----
FUNCTION trader_div
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real0
     * @param array $real1
     * @return array
     */
    function trader_div(array $real0, array $real1): array
-----
FUNCTION trader_dx
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $high
     * @param array $low
     * @param array $close
     * @param int $timePeriod
     * @return array
     */
    function trader_dx(array $high, array $low, array $close, int $timePeriod): array
-----
FUNCTION trader_ema
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @return array
     */
    function trader_ema(array $real, int $timePeriod): array
-----
FUNCTION trader_errno
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @return int
     */
    function trader_errno(): int
-----
FUNCTION trader_exp
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @return array
     */
    function trader_exp(array $real): array
-----
FUNCTION trader_floor
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @return array
     */
    function trader_floor(array $real): array
-----
FUNCTION trader_get_compat
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @return int
     */
    function trader_get_compat(): int
-----
FUNCTION trader_get_unstable_period
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $functionId
     * @return int
     */
    function trader_get_unstable_period(int $functionId): int
-----
FUNCTION trader_ht_dcperiod
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @return array
     */
    function trader_ht_dcperiod(array $real): array
-----
FUNCTION trader_ht_dcphase
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @return array
     */
    function trader_ht_dcphase(array $real): array
-----
FUNCTION trader_ht_phasor
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @return array
     */
    function trader_ht_phasor(array $real): array
-----
FUNCTION trader_ht_sine
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @return array
     */
    function trader_ht_sine(array $real): array
-----
FUNCTION trader_ht_trendline
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @return array
     */
    function trader_ht_trendline(array $real): array
-----
FUNCTION trader_ht_trendmode
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @return array
     */
    function trader_ht_trendmode(array $real): array
-----
FUNCTION trader_kama
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @return array
     */
    function trader_kama(array $real, int $timePeriod): array
-----
FUNCTION trader_linearreg
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @return array
     */
    function trader_linearreg(array $real, int $timePeriod): array
-----
FUNCTION trader_linearreg_angle
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @return array
     */
    function trader_linearreg_angle(array $real, int $timePeriod): array
-----
FUNCTION trader_linearreg_intercept
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @return array
     */
    function trader_linearreg_intercept(array $real, int $timePeriod): array
-----
FUNCTION trader_linearreg_slope
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @return array
     */
    function trader_linearreg_slope(array $real, int $timePeriod): array
-----
FUNCTION trader_ln
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @return array
     */
    function trader_ln(array $real): array
-----
FUNCTION trader_log10
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @return array
     */
    function trader_log10(array $real): array
-----
FUNCTION trader_ma
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @param int $mAType
     * @return array
     */
    function trader_ma(array $real, int $timePeriod, int $mAType): array
-----
FUNCTION trader_macd
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $fastPeriod
     * @param int $slowPeriod
     * @param int $signalPeriod
     * @return array
     */
    function trader_macd(array $real, int $fastPeriod, int $slowPeriod, int $signalPeriod): array
-----
FUNCTION trader_macdext
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $fastPeriod
     * @param int $fastMAType
     * @param int $slowPeriod
     * @param int $slowMAType
     * @param int $signalPeriod
     * @param int $signalMAType
     * @return array
     */
    function trader_macdext(array $real, int $fastPeriod, int $fastMAType, int $slowPeriod, int $slowMAType, int $signalPeriod, int $signalMAType): array
-----
FUNCTION trader_macdfix
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $signalPeriod
     * @return array
     */
    function trader_macdfix(array $real, int $signalPeriod): array
-----
FUNCTION trader_mama
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param float $fastLimit
     * @param float $slowLimit
     * @return array
     */
    function trader_mama(array $real, float $fastLimit, float $slowLimit): array
-----
FUNCTION trader_mavp
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param array $periods
     * @param int $minPeriod
     * @param int $maxPeriod
     * @param int $mAType
     * @return array
     */
    function trader_mavp(array $real, array $periods, int $minPeriod, int $maxPeriod, int $mAType): array
-----
FUNCTION trader_max
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @return array
     */
    function trader_max(array $real, int $timePeriod): array
-----
FUNCTION trader_maxindex
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @return array
     */
    function trader_maxindex(array $real, int $timePeriod): array
-----
FUNCTION trader_medprice
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $high
     * @param array $low
     * @return array
     */
    function trader_medprice(array $high, array $low): array
-----
FUNCTION trader_mfi
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $high
     * @param array $low
     * @param array $close
     * @param array $volume
     * @param int $timePeriod
     * @return array
     */
    function trader_mfi(array $high, array $low, array $close, array $volume, int $timePeriod): array
-----
FUNCTION trader_midpoint
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @return array
     */
    function trader_midpoint(array $real, int $timePeriod): array
-----
FUNCTION trader_midprice
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $high
     * @param array $low
     * @param int $timePeriod
     * @return array
     */
    function trader_midprice(array $high, array $low, int $timePeriod): array
-----
FUNCTION trader_min
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @return array
     */
    function trader_min(array $real, int $timePeriod): array
-----
FUNCTION trader_minindex
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @return array
     */
    function trader_minindex(array $real, int $timePeriod): array
-----
FUNCTION trader_minmax
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @return array
     */
    function trader_minmax(array $real, int $timePeriod): array
-----
FUNCTION trader_minmaxindex
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @return array
     */
    function trader_minmaxindex(array $real, int $timePeriod): array
-----
FUNCTION trader_minus_di
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $high
     * @param array $low
     * @param array $close
     * @param int $timePeriod
     * @return array
     */
    function trader_minus_di(array $high, array $low, array $close, int $timePeriod): array
-----
FUNCTION trader_minus_dm
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $high
     * @param array $low
     * @param int $timePeriod
     * @return array
     */
    function trader_minus_dm(array $high, array $low, int $timePeriod): array
-----
FUNCTION trader_mom
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @return array
     */
    function trader_mom(array $real, int $timePeriod): array
-----
FUNCTION trader_mult
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real0
     * @param array $real1
     * @return array
     */
    function trader_mult(array $real0, array $real1): array
-----
FUNCTION trader_natr
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $high
     * @param array $low
     * @param array $close
     * @param int $timePeriod
     * @return array
     */
    function trader_natr(array $high, array $low, array $close, int $timePeriod): array
-----
FUNCTION trader_obv
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param array $volume
     * @return array
     */
    function trader_obv(array $real, array $volume): array
-----
FUNCTION trader_plus_di
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $high
     * @param array $low
     * @param array $close
     * @param int $timePeriod
     * @return array
     */
    function trader_plus_di(array $high, array $low, array $close, int $timePeriod): array
-----
FUNCTION trader_plus_dm
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $high
     * @param array $low
     * @param int $timePeriod
     * @return array
     */
    function trader_plus_dm(array $high, array $low, int $timePeriod): array
-----
FUNCTION trader_ppo
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $fastPeriod
     * @param int $slowPeriod
     * @param int $mAType
     * @return array
     */
    function trader_ppo(array $real, int $fastPeriod, int $slowPeriod, int $mAType): array
-----
FUNCTION trader_roc
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @return array
     */
    function trader_roc(array $real, int $timePeriod): array
-----
FUNCTION trader_rocp
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @return array
     */
    function trader_rocp(array $real, int $timePeriod): array
-----
FUNCTION trader_rocr
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @return array
     */
    function trader_rocr(array $real, int $timePeriod): array
-----
FUNCTION trader_rocr100
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @return array
     */
    function trader_rocr100(array $real, int $timePeriod): array
-----
FUNCTION trader_rsi
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @return array
     */
    function trader_rsi(array $real, int $timePeriod): array
-----
FUNCTION trader_sar
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $high
     * @param array $low
     * @param float $acceleration
     * @param float $maximum
     * @return array
     */
    function trader_sar(array $high, array $low, float $acceleration, float $maximum): array
-----
FUNCTION trader_sarext
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $high
     * @param array $low
     * @param float $startValue
     * @param float $offsetOnReverse
     * @param float $accelerationInitLong
     * @param float $accelerationLong
     * @param float $accelerationMaxLong
     * @param float $accelerationInitShort
     * @param float $accelerationShort
     * @param float $accelerationMaxShort
     * @return array
     */
    function trader_sarext(array $high, array $low, float $startValue, float $offsetOnReverse, float $accelerationInitLong, float $accelerationLong, float $accelerationMaxLong, float $accelerationInitShort, float $accelerationShort, float $accelerationMaxShort): array
-----
FUNCTION trader_set_compat
-----
Returns by reference: Maybe
Has side-effects: Yes
Variants: 1
    /**
     * @param int $compatId
     * @return void
     */
    function trader_set_compat(int $compatId): void
-----
FUNCTION trader_set_unstable_period
-----
Returns by reference: Maybe
Has side-effects: Yes
Variants: 1
    /**
     * @param int $functionId
     * @param int $timePeriod
     * @return void
     */
    function trader_set_unstable_period(int $functionId, int $timePeriod): void
-----
FUNCTION trader_sin
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @return array
     */
    function trader_sin(array $real): array
-----
FUNCTION trader_sinh
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @return array
     */
    function trader_sinh(array $real): array
-----
FUNCTION trader_sma
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @return array
     */
    function trader_sma(array $real, int $timePeriod): array
-----
FUNCTION trader_sqrt
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @return array
     */
    function trader_sqrt(array $real): array
-----
FUNCTION trader_stddev
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @param float $nbDev
     * @return array
     */
    function trader_stddev(array $real, int $timePeriod, float $nbDev): array
-----
FUNCTION trader_stoch
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $high
     * @param array $low
     * @param array $close
     * @param int $fastK_Period
     * @param int $slowK_Period
     * @param int $slowK_MAType
     * @param int $slowD_Period
     * @param int $slowD_MAType
     * @return array
     */
    function trader_stoch(array $high, array $low, array $close, int $fastK_Period, int $slowK_Period, int $slowK_MAType, int $slowD_Period, int $slowD_MAType): array
-----
FUNCTION trader_stochf
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $high
     * @param array $low
     * @param array $close
     * @param int $fastK_Period
     * @param int $fastD_Period
     * @param int $fastD_MAType
     * @return array
     */
    function trader_stochf(array $high, array $low, array $close, int $fastK_Period, int $fastD_Period, int $fastD_MAType): array
-----
FUNCTION trader_stochrsi
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @param int $fastK_Period
     * @param int $fastD_Period
     * @param int $fastD_MAType
     * @return array
     */
    function trader_stochrsi(array $real, int $timePeriod, int $fastK_Period, int $fastD_Period, int $fastD_MAType): array
-----
FUNCTION trader_sub
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real0
     * @param array $real1
     * @return array
     */
    function trader_sub(array $real0, array $real1): array
-----
FUNCTION trader_sum
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @return array
     */
    function trader_sum(array $real, int $timePeriod): array
-----
FUNCTION trader_t3
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @param float $vFactor
     * @return array
     */
    function trader_t3(array $real, int $timePeriod, float $vFactor): array
-----
FUNCTION trader_tan
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @return array
     */
    function trader_tan(array $real): array
-----
FUNCTION trader_tanh
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @return array
     */
    function trader_tanh(array $real): array
-----
FUNCTION trader_tema
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @return array
     */
    function trader_tema(array $real, int $timePeriod): array
-----
FUNCTION trader_trange
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_trange(array $high, array $low, array $close): array
-----
FUNCTION trader_trima
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @return array
     */
    function trader_trima(array $real, int $timePeriod): array
-----
FUNCTION trader_trix
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @return array
     */
    function trader_trix(array $real, int $timePeriod): array
-----
FUNCTION trader_tsf
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @return array
     */
    function trader_tsf(array $real, int $timePeriod): array
-----
FUNCTION trader_typprice
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_typprice(array $high, array $low, array $close): array
-----
FUNCTION trader_ultosc
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $high
     * @param array $low
     * @param array $close
     * @param int $timePeriod1
     * @param int $timePeriod2
     * @param int $timePeriod3
     * @return array
     */
    function trader_ultosc(array $high, array $low, array $close, int $timePeriod1, int $timePeriod2, int $timePeriod3): array
-----
FUNCTION trader_var
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @param float $nbDev
     * @return array
     */
    function trader_var(array $real, int $timePeriod, float $nbDev): array
-----
FUNCTION trader_wclprice
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $high
     * @param array $low
     * @param array $close
     * @return array
     */
    function trader_wclprice(array $high, array $low, array $close): array
-----
FUNCTION trader_willr
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $high
     * @param array $low
     * @param array $close
     * @param int $timePeriod
     * @return array
     */
    function trader_willr(array $high, array $low, array $close, int $timePeriod): array
-----
FUNCTION trader_wma
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $real
     * @param int $timePeriod
     * @return array
     */
    function trader_wma(array $real, int $timePeriod): array
-----
FUNCTION trait_exists
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $trait
     * @param bool $autoload
     * @return bool
     */
    function trait_exists(string $trait, bool $autoload = true): bool
-----
FUNCTION trigger_error
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $message
     * @param int $error_level
     * @return bool
     */
    function trigger_error(string $message, int $error_level = 1024): bool
-----
FUNCTION trim
-----
Variants: 1
    /**
     * @param string $string
     * @param string $characters
     * @return string
     */
    function trim(string $string, string $characters = " \n\r\t\v\000"): string
-----
FUNCTION uasort
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param TArray of array<TKey of int|string (function uasort(), parameter), T (function uasort(), parameter)> (function uasort(), parameter) $array
     * @param-out (TArray of array<TKey of int|string (function uasort(), parameter), T (function uasort(), parameter)> (function uasort(), parameter) is non-empty-array ? non-empty-array<TKey of int|string (function uasort(), parameter), T (function uasort(), parameter)> : array<TKey of int|string (function uasort(), parameter), T (function uasort(), parameter)>) $array
     * @param callable(T, T): int $callback
     * @return true
     */
    function uasort(array &r$array, callable(mixed, mixed): int $callback): true
-----
FUNCTION ucfirst
-----
Variants: 1
    /**
     * @param string $string
     * @return string
     */
    function ucfirst(string $string): string
-----
FUNCTION ucwords
-----
Variants: 1
    /**
     * @param string $string
     * @param string $separators
     * @return string
     */
    function ucwords(string $string, string $separators = " \t\r\n\f\v"): string
-----
FUNCTION uksort
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param TArray of array<TKey of int|string (function uksort(), parameter), T (function uksort(), parameter)> (function uksort(), parameter) $array
     * @param-out (TArray of array<TKey of int|string (function uksort(), parameter), T (function uksort(), parameter)> (function uksort(), parameter) is non-empty-array ? non-empty-array<TKey of int|string (function uksort(), parameter), T (function uksort(), parameter)> : array<TKey of int|string (function uksort(), parameter), T (function uksort(), parameter)>) $array
     * @param callable(TKey, TKey): int $callback
     * @return true
     */
    function uksort(array &r$array, callable(int|string, int|string): int $callback): true
-----
FUNCTION umask
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param int|null $mask
     * @return int
     */
    function umask(int|null $mask = null): int
-----
FUNCTION uniqid
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $prefix
     * @param bool $more_entropy
     * @return non-empty-string
     */
    function uniqid(string $prefix = '', bool $more_entropy = false): non-empty-string
-----
FUNCTION unixtojd
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int|null $timestamp
     * @return int|false
     */
    function unixtojd(int|null $timestamp = null): int|false
-----
FUNCTION unlink
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $filename
     * @param resource|null $context
     * @return bool
     */
    function unlink(string $filename, resource|null $context = null): bool
-----
FUNCTION unpack
-----
Variants: 1
    /**
     * @param string $format
     * @param string $string
     * @param int $offset
     * @return array|false
     */
    function unpack(string $format, string $string, int $offset = 0): array|false
-----
FUNCTION unregister_tick_function
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @return void
     */
    function unregister_tick_function(callable(): mixed $callback): void
-----
FUNCTION unserialize
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $data
     * @param array{allowed_classes?: array<string>|bool} $options
     * @return mixed
     */
    function unserialize(string $data, array{allowed_classes?: array<string>|bool} $options = array{}): mixed
-----
FUNCTION unset
-----
MISSING
-----
FUNCTION untaint
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $string
     * @param string $strings
     * @return bool
     */
    function untaint(string &r$string, string ...&r$strings): bool
-----
FUNCTION uopz_add_function
-----
Has side-effects: Maybe
Throw type: RuntimeException
Variants: 1
    /**
     * @param string $class
     * @param string $function
     * @param Closure $handler
     * @param bool $$flags
     * @param bool $$all
     * @return bool
     */
    function uopz_add_function(string $class, string $function, Closure $handler, bool $$flags, bool $$all): bool
-----
FUNCTION uopz_allow_exit
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param bool $allow
     * @return void
     */
    function uopz_allow_exit(bool $allow): void
-----
FUNCTION uopz_backup
-----
Returns by reference: Maybe
Has side-effects: Yes
Variants: 2
    /**
     * @param string $class
     * @param string $function
     * @return void
     */
    function uopz_backup(string $class, string $function): void
    /**
     * @param string $function
     * @return void
     */
    function uopz_backup(string $function): void
-----
FUNCTION uopz_compose
-----
Returns by reference: Maybe
Has side-effects: Yes
Variants: 1
    /**
     * @param string $name
     * @param array $classes
     * @param array $methods
     * @param array $properties
     * @param int $flags
     * @return void
     */
    function uopz_compose(string $name, array $classes, array $methods, array $properties, int $flags): void
-----
FUNCTION uopz_copy
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 2
    /**
     * @param string $class
     * @param string $function
     * @return Closure
     */
    function uopz_copy(string $class, string $function): Closure
    /**
     * @param string $function
     * @return Closure
     */
    function uopz_copy(string $function): Closure
-----
FUNCTION uopz_del_function
-----
Has side-effects: Maybe
Throw type: RuntimeException
Variants: 1
    /**
     * @param string $class
     * @param string $function
     * @param bool $$all
     * @return bool
     */
    function uopz_del_function(string $class, string $function, bool $$all): bool
-----
FUNCTION uopz_delete
-----
Returns by reference: Maybe
Has side-effects: Yes
Variants: 2
    /**
     * @param string $class
     * @param string $function
     * @return void
     */
    function uopz_delete(string $class, string $function): void
    /**
     * @param string $function
     * @return void
     */
    function uopz_delete(string $function): void
-----
FUNCTION uopz_extend
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $class
     * @param string $parent
     * @return void
     */
    function uopz_extend(string $class, string $parent): void
-----
FUNCTION uopz_flags
-----
Has side-effects: Maybe
Variants: 2
    /**
     * @param string $class
     * @param string $function
     * @param int $flags
     * @return int
     */
    function uopz_flags(string $class, string $function, int $flags): int
    /**
     * @param string $function
     * @param int $flags
     * @return int
     */
    function uopz_flags(string $function, int $flags): int
-----
FUNCTION uopz_function
-----
Returns by reference: Maybe
Has side-effects: Yes
Variants: 2
    /**
     * @param string $class
     * @param string $function
     * @param Closure $handler
     * @param int $modifiers
     * @return void
     */
    function uopz_function(string $class, string $function, Closure $handler, int $modifiers): void
    /**
     * @param string $function
     * @param Closure $handler
     * @param int $modifiers
     * @return void
     */
    function uopz_function(string $function, Closure $handler, int $modifiers): void
-----
FUNCTION uopz_get_exit_status
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return mixed
     */
    function uopz_get_exit_status(): mixed
-----
FUNCTION uopz_get_hook
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $class
     * @param string $function
     * @return Closure
     */
    function uopz_get_hook(string $class, string $function): Closure
-----
FUNCTION uopz_get_mock
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $class
     * @return mixed
     */
    function uopz_get_mock(string $class): mixed
-----
FUNCTION uopz_get_property
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $class
     * @param string $property
     * @return void
     */
    function uopz_get_property(string $class, string $property): void
-----
FUNCTION uopz_get_return
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $class
     * @param string $function
     * @return mixed
     */
    function uopz_get_return(string $class, string $function): mixed
-----
FUNCTION uopz_get_static
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $class
     * @param string $function
     * @return array
     */
    function uopz_get_static(string $class, string $function): array
-----
FUNCTION uopz_implement
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $class
     * @param string $interface
     * @return void
     */
    function uopz_implement(string $class, string $interface): void
-----
FUNCTION uopz_overload
-----
Returns by reference: Maybe
Has side-effects: Yes
Variants: 1
    /**
     * @param int $opcode
     * @param callable(): mixed $callable
     * @return void
     */
    function uopz_overload(int $opcode, callable(): mixed $callable): void
-----
FUNCTION uopz_redefine
-----
Has side-effects: Yes
Variants: 2
    /**
     * @param string $class
     * @param string $constant
     * @param mixed $value
     * @return void
     */
    function uopz_redefine(string $class, string $constant, mixed $value): void
    /**
     * @param string $constant
     * @param mixed $value
     * @return void
     */
    function uopz_redefine(string $constant, mixed $value): void
-----
FUNCTION uopz_rename
-----
Returns by reference: Maybe
Has side-effects: Yes
Variants: 2
    /**
     * @param string $class
     * @param string $function
     * @param string $rename
     * @return void
     */
    function uopz_rename(string $class, string $function, string $rename): void
    /**
     * @param string $function
     * @param string $rename
     * @return void
     */
    function uopz_rename(string $function, string $rename): void
-----
FUNCTION uopz_restore
-----
Returns by reference: Maybe
Has side-effects: Yes
Variants: 2
    /**
     * @param string $class
     * @param string $function
     * @return void
     */
    function uopz_restore(string $class, string $function): void
    /**
     * @param string $function
     * @return void
     */
    function uopz_restore(string $function): void
-----
FUNCTION uopz_set_hook
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $class
     * @param string $function
     * @param Closure $hook
     * @return bool
     */
    function uopz_set_hook(string $class, string $function, Closure $hook): bool
-----
FUNCTION uopz_set_mock
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $class
     * @param object|string $mock
     * @return void
     */
    function uopz_set_mock(string $class, object|string $mock): void
-----
FUNCTION uopz_set_property
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $class
     * @param string $property
     * @param mixed $value
     * @return void
     */
    function uopz_set_property(string $class, string $property, mixed $value): void
-----
FUNCTION uopz_set_return
-----
Has side-effects: Maybe
Variants: 2
    /**
     * @param string $class
     * @param string $function
     * @param mixed $value
     * @param bool $execute
     * @return bool
     */
    function uopz_set_return(string $class, string $function, mixed $value, bool $execute): bool
    /**
     * @param string $function
     * @param mixed $value
     * @param bool $execute
     * @return bool
     */
    function uopz_set_return(string $function, mixed $value, bool $execute): bool
-----
FUNCTION uopz_set_static
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param mixed $arguments
     * @return void
     */
    function uopz_set_static(mixed ...$arguments): void
-----
FUNCTION uopz_undefine
-----
Has side-effects: Yes
Variants: 2
    /**
     * @param string $class
     * @param string $constant
     * @return void
     */
    function uopz_undefine(string $class, string $constant): void
    /**
     * @param string $constant
     * @return void
     */
    function uopz_undefine(string $constant): void
-----
FUNCTION uopz_unset_hook
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $arguments
     * @return bool
     */
    function uopz_unset_hook(mixed ...$arguments): bool
-----
FUNCTION uopz_unset_mock
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param string $class
     * @return void
     */
    function uopz_unset_mock(string $class): void
-----
FUNCTION uopz_unset_return
-----
Has side-effects: Maybe
Variants: 2
    /**
     * @param string $class
     * @param string $function
     * @return bool
     */
    function uopz_unset_return(string $class, string $function): bool
    /**
     * @param string $function
     * @return bool
     */
    function uopz_unset_return(string $function): bool
-----
FUNCTION urldecode
-----
Variants: 1
    /**
     * @param string $string
     * @return string
     */
    function urldecode(string $string): string
-----
FUNCTION urlencode
-----
Variants: 1
    /**
     * @param string $string
     * @return string
     */
    function urlencode(string $string): string
-----
FUNCTION use_soap_error_handler
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param bool $enable
     * @return bool
     */
    function use_soap_error_handler(bool $enable = true): bool
-----
FUNCTION user_error
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $message
     * @param int $error_level
     * @return bool
     */
    function user_error(string $message, int $error_level = 1024): bool
-----
FUNCTION usleep
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param int $microseconds
     * @return void
     */
    function usleep(int $microseconds): void
-----
FUNCTION usort
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param TArray of array<T (function usort(), parameter)> (function usort(), parameter) $array
     * @param-out (TArray of array<T (function usort(), parameter)> (function usort(), parameter) is non-empty-array ? non-empty-array<int, T (function usort(), parameter)> : array<int, T (function usort(), parameter)>) $array
     * @param callable(T, T): int $callback
     * @return true
     */
    function usort(array &r$array, callable(mixed, mixed): int $callback): true
-----
FUNCTION utf8_decode
-----
Is deprecated: Yes
Variants: 1
    /**
     * @param string $string
     * @return string
     */
    function utf8_decode(string $string): string
-----
FUNCTION utf8_encode
-----
Is deprecated: Yes
Variants: 1
    /**
     * @param string $string
     * @return string
     */
    function utf8_encode(string $string): string
-----
FUNCTION var_dump
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param mixed $value
     * @param mixed $values
     * @return void
     */
    function var_dump(mixed $value, mixed ...$values): void
-----
FUNCTION var_export
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $value
     * @param bool $return
     * @return ($return is true ? string : null)
     */
    function var_export(mixed $value, bool $return = false): string|null
-----
FUNCTION var_representation
-----
MISSING
-----
FUNCTION variant_abs
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $value
     * @return variant
     */
    function variant_abs(mixed $value): variant
-----
FUNCTION variant_add
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $left
     * @param mixed $right
     * @return variant
     */
    function variant_add(mixed $left, mixed $right): variant
-----
FUNCTION variant_and
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $left
     * @param mixed $right
     * @return variant
     */
    function variant_and(mixed $left, mixed $right): variant
-----
FUNCTION variant_cast
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param variant $variant
     * @param int $type
     * @return variant
     */
    function variant_cast(variant $variant, int $type): variant
-----
FUNCTION variant_cat
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $left
     * @param mixed $right
     * @return variant
     */
    function variant_cat(mixed $left, mixed $right): variant
-----
FUNCTION variant_cmp
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $left
     * @param mixed $right
     * @param int $locale_id
     * @param int $flags
     * @return int
     */
    function variant_cmp(mixed $left, mixed $right, int $locale_id = *ERROR*, int $flags = 0): int
-----
FUNCTION variant_date_from_timestamp
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $timestamp
     * @return variant
     */
    function variant_date_from_timestamp(int $timestamp): variant
-----
FUNCTION variant_date_to_timestamp
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param variant $variant
     * @return int|null
     */
    function variant_date_to_timestamp(variant $variant): int|null
-----
FUNCTION variant_div
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $left
     * @param mixed $right
     * @return variant
     */
    function variant_div(mixed $left, mixed $right): variant
-----
FUNCTION variant_eqv
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $left
     * @param mixed $right
     * @return variant
     */
    function variant_eqv(mixed $left, mixed $right): variant
-----
FUNCTION variant_fix
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $value
     * @return variant
     */
    function variant_fix(mixed $value): variant
-----
FUNCTION variant_get_type
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param variant $variant
     * @return int
     */
    function variant_get_type(variant $variant): int
-----
FUNCTION variant_idiv
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $left
     * @param mixed $right
     * @return variant
     */
    function variant_idiv(mixed $left, mixed $right): variant
-----
FUNCTION variant_imp
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $left
     * @param mixed $right
     * @return variant
     */
    function variant_imp(mixed $left, mixed $right): variant
-----
FUNCTION variant_int
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $value
     * @return variant
     */
    function variant_int(mixed $value): variant
-----
FUNCTION variant_mod
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $left
     * @param mixed $right
     * @return variant
     */
    function variant_mod(mixed $left, mixed $right): variant
-----
FUNCTION variant_mul
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $left
     * @param mixed $right
     * @return variant
     */
    function variant_mul(mixed $left, mixed $right): variant
-----
FUNCTION variant_neg
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $value
     * @return variant
     */
    function variant_neg(mixed $value): variant
-----
FUNCTION variant_not
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $value
     * @return variant
     */
    function variant_not(mixed $value): variant
-----
FUNCTION variant_or
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $left
     * @param mixed $right
     * @return variant
     */
    function variant_or(mixed $left, mixed $right): variant
-----
FUNCTION variant_pow
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $left
     * @param mixed $right
     * @return variant
     */
    function variant_pow(mixed $left, mixed $right): variant
-----
FUNCTION variant_round
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $value
     * @param int $decimals
     * @return variant|null
     */
    function variant_round(mixed $value, int $decimals): variant|null
-----
FUNCTION variant_set
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param variant $variant
     * @param mixed $value
     * @return void
     */
    function variant_set(variant $variant, mixed $value): void
-----
FUNCTION variant_set_type
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param variant $variant
     * @param int $type
     * @return void
     */
    function variant_set_type(variant $variant, int $type): void
-----
FUNCTION variant_sub
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $left
     * @param mixed $right
     * @return variant
     */
    function variant_sub(mixed $left, mixed $right): variant
-----
FUNCTION variant_xor
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $left
     * @param mixed $right
     * @return variant
     */
    function variant_xor(mixed $left, mixed $right): variant
-----
FUNCTION version_compare
-----
Has side-effects: Maybe
Variants: 2
    /**
     * @param string $version1
     * @param string $version2
     * @param string $operator
     * @return bool|int
     */
    function version_compare(string $version1, string $version2, string $operator): bool|int
    /**
     * @param string $version1
     * @param string $version2
     * @param string $operator
     * @return bool
     */
    function version_compare(string $version1, string $version2, string $operator): bool
-----
FUNCTION vfprintf
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $stream
     * @param string $format
     * @param array<bool|float|int|string|null> $values
     * @return int
     */
    function vfprintf(resource $stream, string $format, array<bool|float|int|string|null> $values): int
-----
FUNCTION virtual
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $uri
     * @return bool
     */
    function virtual(string $uri): bool
-----
FUNCTION vprintf
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $format
     * @param array<bool|float|int|string|null> $values
     * @return int
     */
    function vprintf(string $format, array<bool|float|int|string|null> $values): int
-----
FUNCTION vsprintf
-----
Variants: 1
    /**
     * @param string $format
     * @param array<bool|float|int|string|null> $values
     * @return string
     */
    function vsprintf(string $format, array<bool|float|int|string|null> $values): string
-----
FUNCTION wddx_add_vars
-----
MISSING
-----
FUNCTION wddx_deserialize
-----
MISSING
-----
FUNCTION wddx_packet_end
-----
MISSING
-----
FUNCTION wddx_packet_start
-----
MISSING
-----
FUNCTION wddx_serialize_value
-----
MISSING
-----
FUNCTION wddx_serialize_vars
-----
MISSING
-----
FUNCTION win32_continue_service
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $servicename
     * @param string $machine
     * @return int
     */
    function win32_continue_service(string $servicename, string $machine = ''): int
-----
FUNCTION win32_create_service
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $details
     * @param string $machine
     * @return mixed
     */
    function win32_create_service(array $details, string $machine = ''): mixed
-----
FUNCTION win32_delete_service
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $servicename
     * @param string $machine
     * @return mixed
     */
    function win32_delete_service(string $servicename, string $machine = ''): mixed
-----
FUNCTION win32_get_last_control_message
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return int
     */
    function win32_get_last_control_message(): int
-----
FUNCTION win32_pause_service
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $servicename
     * @param string $machine
     * @return int
     */
    function win32_pause_service(string $servicename, string $machine = ''): int
-----
FUNCTION win32_query_service_status
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $servicename
     * @param string $machine
     * @return mixed
     */
    function win32_query_service_status(string $servicename, string $machine = ''): mixed
-----
FUNCTION win32_send_custom_control
-----
MISSING
-----
FUNCTION win32_set_service_exit_code
-----
MISSING
-----
FUNCTION win32_set_service_exit_mode
-----
MISSING
-----
FUNCTION win32_set_service_status
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param int $status
     * @param int $checkpoint
     * @return bool
     */
    function win32_set_service_status(int $status, int $checkpoint = 0): bool
-----
FUNCTION win32_start_service
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $servicename
     * @param string $machine
     * @return int
     */
    function win32_start_service(string $servicename, string $machine = ''): int
-----
FUNCTION win32_start_service_ctrl_dispatcher
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $name
     * @return mixed
     */
    function win32_start_service_ctrl_dispatcher(string $name): mixed
-----
FUNCTION win32_stop_service
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $servicename
     * @param string $machine
     * @return int
     */
    function win32_stop_service(string $servicename, string $machine = ''): int
-----
FUNCTION wincache_fcache_fileinfo
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param bool $summaryonly
     * @return array
     */
    function wincache_fcache_fileinfo(bool $summaryonly = false): array
-----
FUNCTION wincache_fcache_meminfo
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return array
     */
    function wincache_fcache_meminfo(): array
-----
FUNCTION wincache_lock
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $key
     * @param bool $isglobal
     * @return bool
     */
    function wincache_lock(string $key, bool $isglobal = false): bool
-----
FUNCTION wincache_ocache_fileinfo
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param bool $summaryonly
     * @return array
     */
    function wincache_ocache_fileinfo(bool $summaryonly = false): array
-----
FUNCTION wincache_ocache_meminfo
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return array
     */
    function wincache_ocache_meminfo(): array
-----
FUNCTION wincache_refresh_if_changed
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $files
     * @return bool
     */
    function wincache_refresh_if_changed(array $files): bool
-----
FUNCTION wincache_rplist_fileinfo
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param bool $summaryonly
     * @return array
     */
    function wincache_rplist_fileinfo(bool $summaryonly): array
-----
FUNCTION wincache_rplist_meminfo
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return array
     */
    function wincache_rplist_meminfo(): array
-----
FUNCTION wincache_scache_info
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param bool $summaryonly
     * @return array|false
     */
    function wincache_scache_info(bool $summaryonly = false): array|false
-----
FUNCTION wincache_scache_meminfo
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return array|false
     */
    function wincache_scache_meminfo(): array|false
-----
FUNCTION wincache_ucache_add
-----
Has side-effects: Maybe
Variants: 2
    /**
     * @param string $key
     * @param mixed $value
     * @param int $ttl
     * @return bool
     */
    function wincache_ucache_add(string $key, mixed $value, int $ttl = 0): bool
    /**
     * @param array $values
     * @param mixed $unused
     * @param int $ttl
     * @return bool
     */
    function wincache_ucache_add(array $values, mixed $unused, int $ttl = 0): bool
-----
FUNCTION wincache_ucache_cas
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $key
     * @param int $old_value
     * @param int $new_value
     * @return bool
     */
    function wincache_ucache_cas(string $key, int $old_value, int $new_value): bool
-----
FUNCTION wincache_ucache_clear
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return bool
     */
    function wincache_ucache_clear(): bool
-----
FUNCTION wincache_ucache_dec
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $key
     * @param int $dec_by
     * @param bool $success
     * @return mixed
     */
    function wincache_ucache_dec(string $key, int $dec_by = 1, bool &rw$success): mixed
-----
FUNCTION wincache_ucache_delete
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $key
     * @return bool
     */
    function wincache_ucache_delete(mixed $key): bool
-----
FUNCTION wincache_ucache_exists
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $key
     * @return bool
     */
    function wincache_ucache_exists(string $key): bool
-----
FUNCTION wincache_ucache_get
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $key
     * @param bool $success
     * @return mixed
     */
    function wincache_ucache_get(mixed $key, bool &rw$success): mixed
-----
FUNCTION wincache_ucache_inc
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $key
     * @param int $inc_by
     * @param bool $success
     * @return int|false
     */
    function wincache_ucache_inc(string $key, int $inc_by = 1, bool &rw$success): int|false
-----
FUNCTION wincache_ucache_info
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param bool $summaryonly
     * @param string $key
     * @return array|false
     */
    function wincache_ucache_info(bool $summaryonly = false, string $key = null): array|false
-----
FUNCTION wincache_ucache_meminfo
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return array
     */
    function wincache_ucache_meminfo(): array
-----
FUNCTION wincache_ucache_set
-----
Has side-effects: Maybe
Variants: 2
    /**
     * @param mixed $key
     * @param mixed $value
     * @param int $ttl
     * @return bool
     */
    function wincache_ucache_set(mixed $key, mixed $value, int $ttl = 0): bool
    /**
     * @param array $values
     * @param mixed $unused
     * @param int $ttl
     * @return bool
     */
    function wincache_ucache_set(array $values, mixed $unused, int $ttl = 0): bool
-----
FUNCTION wincache_unlock
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $key
     * @return bool
     */
    function wincache_unlock(string $key): bool
-----
FUNCTION wordwrap
-----
Variants: 1
    /**
     * @param string $string
     * @param int $width
     * @param string $break
     * @param bool $cut_long_words
     * @return string
     */
    function wordwrap(string $string, int $width = 75, string $break = "\n", bool $cut_long_words = false): string
-----
FUNCTION xattr_get
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param string $name
     * @param int $flags
     * @return string
     */
    function xattr_get(string $filename, string $name, int $flags): string
-----
FUNCTION xattr_list
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param int $flags
     * @return array
     */
    function xattr_list(string $filename, int $flags): array
-----
FUNCTION xattr_remove
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param string $name
     * @param int $flags
     * @return bool
     */
    function xattr_remove(string $filename, string $name, int $flags): bool
-----
FUNCTION xattr_set
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param string $name
     * @param string $value
     * @param int $flags
     * @return bool
     */
    function xattr_set(string $filename, string $name, string $value, int $flags): bool
-----
FUNCTION xattr_supported
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param int $flags
     * @return bool
     */
    function xattr_supported(string $filename, int $flags): bool
-----
FUNCTION xdiff_file_bdiff
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $old_file
     * @param string $new_file
     * @param string $dest
     * @return bool
     */
    function xdiff_file_bdiff(string $old_file, string $new_file, string $dest): bool
-----
FUNCTION xdiff_file_bdiff_size
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $file
     * @return int
     */
    function xdiff_file_bdiff_size(string $file): int
-----
FUNCTION xdiff_file_bpatch
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $file
     * @param string $patch
     * @param string $dest
     * @return bool
     */
    function xdiff_file_bpatch(string $file, string $patch, string $dest): bool
-----
FUNCTION xdiff_file_diff
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $old_file
     * @param string $new_file
     * @param string $dest
     * @param int $context
     * @param bool $minimal
     * @return bool
     */
    function xdiff_file_diff(string $old_file, string $new_file, string $dest, int $context = 3, bool $minimal = false): bool
-----
FUNCTION xdiff_file_diff_binary
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $old_file
     * @param string $new_file
     * @param string $dest
     * @return bool
     */
    function xdiff_file_diff_binary(string $old_file, string $new_file, string $dest): bool
-----
FUNCTION xdiff_file_merge3
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $old_file
     * @param string $new_file1
     * @param string $new_file2
     * @param string $dest
     * @return mixed
     */
    function xdiff_file_merge3(string $old_file, string $new_file1, string $new_file2, string $dest): mixed
-----
FUNCTION xdiff_file_patch
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $file
     * @param string $patch
     * @param string $dest
     * @param int $flags
     * @return mixed
     */
    function xdiff_file_patch(string $file, string $patch, string $dest, int $flags = 0): mixed
-----
FUNCTION xdiff_file_patch_binary
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $file
     * @param string $patch
     * @param string $dest
     * @return bool
     */
    function xdiff_file_patch_binary(string $file, string $patch, string $dest): bool
-----
FUNCTION xdiff_file_rabdiff
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $old_file
     * @param string $new_file
     * @param string $dest
     * @return bool
     */
    function xdiff_file_rabdiff(string $old_file, string $new_file, string $dest): bool
-----
FUNCTION xdiff_string_bdiff
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $old_data
     * @param string $new_data
     * @return string
     */
    function xdiff_string_bdiff(string $old_data, string $new_data): string
-----
FUNCTION xdiff_string_bdiff_size
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $patch
     * @return int
     */
    function xdiff_string_bdiff_size(string $patch): int
-----
FUNCTION xdiff_string_bpatch
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $str
     * @param string $patch
     * @return string
     */
    function xdiff_string_bpatch(string $str, string $patch): string
-----
FUNCTION xdiff_string_diff
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $old_data
     * @param string $new_data
     * @param int $context
     * @param bool $minimal
     * @return string
     */
    function xdiff_string_diff(string $old_data, string $new_data, int $context = 3, bool $minimal = false): string
-----
FUNCTION xdiff_string_diff_binary
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $old_data
     * @param string $new_data
     * @return string
     */
    function xdiff_string_diff_binary(string $old_data, string $new_data): string
-----
FUNCTION xdiff_string_merge3
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $old_data
     * @param string $new_data1
     * @param string $new_data2
     * @param string $error
     * @return mixed
     */
    function xdiff_string_merge3(string $old_data, string $new_data1, string $new_data2, string $error): mixed
-----
FUNCTION xdiff_string_patch
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $str
     * @param string $patch
     * @param int $flags
     * @param string $error
     * @return string
     */
    function xdiff_string_patch(string $str, string $patch, int $flags, string &rw$error): string
-----
FUNCTION xdiff_string_patch_binary
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $str
     * @param string $patch
     * @return string
     */
    function xdiff_string_patch_binary(string $str, string $patch): string
-----
FUNCTION xdiff_string_rabdiff
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $old_data
     * @param string $new_data
     * @return string
     */
    function xdiff_string_rabdiff(string $old_data, string $new_data): string
-----
FUNCTION xhprof_disable
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return array
     */
    function xhprof_disable(): array
-----
FUNCTION xhprof_enable
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param int $flags
     * @param array $options
     * @return void
     */
    function xhprof_enable(int $flags = 0, array $options = array{}): void
-----
FUNCTION xhprof_sample_disable
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return array<string, string>
     */
    function xhprof_sample_disable(): array<string, string>
-----
FUNCTION xhprof_sample_enable
-----
Has side-effects: Yes
Variants: 1
    /**
     * @return void
     */
    function xhprof_sample_enable(): void
-----
FUNCTION xml_error_string
-----
Variants: 1
    /**
     * @param int $error_code
     * @return string|null
     */
    function xml_error_string(int $error_code): string|null
-----
FUNCTION xml_get_current_byte_index
-----
Variants: 1
    /**
     * @param XMLParser $parser
     * @return int
     */
    function xml_get_current_byte_index(XMLParser $parser): int
-----
FUNCTION xml_get_current_column_number
-----
Variants: 1
    /**
     * @param XMLParser $parser
     * @return int
     */
    function xml_get_current_column_number(XMLParser $parser): int
-----
FUNCTION xml_get_current_line_number
-----
Variants: 1
    /**
     * @param XMLParser $parser
     * @return int
     */
    function xml_get_current_line_number(XMLParser $parser): int
-----
FUNCTION xml_get_error_code
-----
Variants: 1
    /**
     * @param XMLParser $parser
     * @return int
     */
    function xml_get_error_code(XMLParser $parser): int
-----
FUNCTION xml_parse
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param XMLParser $parser
     * @param string $data
     * @param bool $is_final
     * @return int
     */
    function xml_parse(XMLParser $parser, string $data, bool $is_final = false): int
-----
FUNCTION xml_parse_into_struct
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param XMLParser $parser
     * @param string $data
     * @param array $values
     * @param array $index
     * @return int|false
     */
    function xml_parse_into_struct(XMLParser $parser, string $data, array &rw$values, array &rw$index = null): int|false
-----
FUNCTION xml_parser_create
-----
Variants: 1
    /**
     * @param string|null $encoding
     * @return XMLParser
     */
    function xml_parser_create(string|null $encoding = null): XMLParser
-----
FUNCTION xml_parser_create_ns
-----
Variants: 1
    /**
     * @param string|null $encoding
     * @param string $separator
     * @return XMLParser
     */
    function xml_parser_create_ns(string|null $encoding = null, string $separator = ':'): XMLParser
-----
FUNCTION xml_parser_free
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param XMLParser $parser
     * @return bool
     */
    function xml_parser_free(XMLParser $parser): bool
-----
FUNCTION xml_parser_get_option
-----
Variants: 1
    /**
     * @param XMLParser $parser
     * @param int $option
     * @return int|string
     */
    function xml_parser_get_option(XMLParser $parser, int $option): int|string
-----
FUNCTION xml_parser_set_option
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param XMLParser $parser
     * @param int $option
     * @param int|string $value
     * @return bool
     */
    function xml_parser_set_option(XMLParser $parser, int $option, int|string $value): bool
-----
FUNCTION xml_set_character_data_handler
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param XMLParser $parser
     * @param callable(): mixed $handler
     * @return true
     */
    function xml_set_character_data_handler(XMLParser $parser, callable(): mixed $handler): true
-----
FUNCTION xml_set_default_handler
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param XMLParser $parser
     * @param callable(): mixed $handler
     * @return true
     */
    function xml_set_default_handler(XMLParser $parser, callable(): mixed $handler): true
-----
FUNCTION xml_set_element_handler
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param XMLParser $parser
     * @param callable(): mixed $start_handler
     * @param callable(): mixed $end_handler
     * @return true
     */
    function xml_set_element_handler(XMLParser $parser, callable(): mixed $start_handler, callable(): mixed $end_handler): true
-----
FUNCTION xml_set_end_namespace_decl_handler
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param XMLParser $parser
     * @param callable(): mixed $handler
     * @return true
     */
    function xml_set_end_namespace_decl_handler(XMLParser $parser, callable(): mixed $handler): true
-----
FUNCTION xml_set_external_entity_ref_handler
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param XMLParser $parser
     * @param callable(): mixed $handler
     * @return true
     */
    function xml_set_external_entity_ref_handler(XMLParser $parser, callable(): mixed $handler): true
-----
FUNCTION xml_set_notation_decl_handler
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param XMLParser $parser
     * @param callable(): mixed $handler
     * @return true
     */
    function xml_set_notation_decl_handler(XMLParser $parser, callable(): mixed $handler): true
-----
FUNCTION xml_set_object
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param XMLParser $parser
     * @param object $object
     * @return true
     */
    function xml_set_object(XMLParser $parser, object $object): true
-----
FUNCTION xml_set_processing_instruction_handler
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param XMLParser $parser
     * @param callable(): mixed $handler
     * @return true
     */
    function xml_set_processing_instruction_handler(XMLParser $parser, callable(): mixed $handler): true
-----
FUNCTION xml_set_start_namespace_decl_handler
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param XMLParser $parser
     * @param callable(): mixed $handler
     * @return true
     */
    function xml_set_start_namespace_decl_handler(XMLParser $parser, callable(): mixed $handler): true
-----
FUNCTION xml_set_unparsed_entity_decl_handler
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param XMLParser $parser
     * @param callable(): mixed $handler
     * @return true
     */
    function xml_set_unparsed_entity_decl_handler(XMLParser $parser, callable(): mixed $handler): true
-----
FUNCTION xmlrpc_decode
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $xml
     * @param string $encoding
     * @return array|null
     */
    function xmlrpc_decode(string $xml, string $encoding = 'iso-8859-1'): array|null
-----
FUNCTION xmlrpc_decode_request
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $xml
     * @param string $method
     * @param string $encoding
     * @return array|null
     */
    function xmlrpc_decode_request(string $xml, string &rw$method, string $encoding = null): array|null
-----
FUNCTION xmlrpc_encode
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $value
     * @return string
     */
    function xmlrpc_encode(mixed $value): string
-----
FUNCTION xmlrpc_encode_request
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $method
     * @param mixed $params
     * @param array $output_options
     * @return string
     */
    function xmlrpc_encode_request(string $method, mixed $params, array $output_options = null): string
-----
FUNCTION xmlrpc_get_type
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $value
     * @return string
     */
    function xmlrpc_get_type(mixed $value): string
-----
FUNCTION xmlrpc_is_fault
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $arg
     * @return bool
     */
    function xmlrpc_is_fault(array $arg): bool
-----
FUNCTION xmlrpc_parse_method_descriptions
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $xml
     * @return array
     */
    function xmlrpc_parse_method_descriptions(string $xml): array
-----
FUNCTION xmlrpc_server_add_introspection_data
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $server
     * @param array $desc
     * @return int
     */
    function xmlrpc_server_add_introspection_data(resource $server, array $desc): int
-----
FUNCTION xmlrpc_server_call_method
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $server
     * @param string $xml
     * @param mixed $user_data
     * @param array $output_options
     * @return string
     */
    function xmlrpc_server_call_method(resource $server, string $xml, mixed $user_data, array $output_options = null): string
-----
FUNCTION xmlrpc_server_create
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @return resource
     */
    function xmlrpc_server_create(): resource
-----
FUNCTION xmlrpc_server_destroy
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $server
     * @return int
     */
    function xmlrpc_server_destroy(resource $server): int
-----
FUNCTION xmlrpc_server_register_introspection_callback
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $server
     * @param string $function
     * @return bool
     */
    function xmlrpc_server_register_introspection_callback(resource $server, string $function): bool
-----
FUNCTION xmlrpc_server_register_method
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $server
     * @param string $method_name
     * @param string $function
     * @return bool
     */
    function xmlrpc_server_register_method(resource $server, string $method_name, string $function): bool
-----
FUNCTION xmlrpc_set_type
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param DateTime|string $value
     * @param string $type
     * @return bool
     */
    function xmlrpc_set_type(DateTime|string &r$value, string $type): bool
-----
FUNCTION yaml_emit
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $data
     * @param int $encoding
     * @param int $linebreak
     * @return string
     */
    function yaml_emit(mixed $data, int $encoding = 0, int $linebreak = 0): string
-----
FUNCTION yaml_emit_file
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param mixed $data
     * @param int $encoding
     * @param int $linebreak
     * @return bool
     */
    function yaml_emit_file(string $filename, mixed $data, int $encoding = 0, int $linebreak = 0): bool
-----
FUNCTION yaml_parse
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $input
     * @param int $pos
     * @param int $ndocs
     * @param array $callbacks
     * @return mixed
     */
    function yaml_parse(string $input, int $pos = 0, int &rw$ndocs = null, array $callbacks = array{}): mixed
-----
FUNCTION yaml_parse_file
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @param int $pos
     * @param int $ndocs
     * @param array $callbacks
     * @return mixed
     */
    function yaml_parse_file(string $filename, int $pos = 0, int &rw$ndocs = null, array $callbacks = array{}): mixed
-----
FUNCTION yaml_parse_url
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $url
     * @param int $pos
     * @param int $ndocs
     * @param array $callbacks
     * @return mixed
     */
    function yaml_parse_url(string $url, int $pos = 0, int &rw$ndocs = null, array $callbacks = array{}): mixed
-----
FUNCTION yaz_addinfo
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $id
     * @return string
     */
    function yaz_addinfo(resource $id): string
-----
FUNCTION yaz_ccl_conf
-----
Returns by reference: Maybe
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $id
     * @param array $config
     * @return void
     */
    function yaz_ccl_conf(resource $id, array $config): void
-----
FUNCTION yaz_ccl_parse
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $id
     * @param string $query
     * @param array $result
     * @return bool
     */
    function yaz_ccl_parse(resource $id, string $query, array &rw$result): bool
-----
FUNCTION yaz_close
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $id
     * @return bool
     */
    function yaz_close(resource $id): bool
-----
FUNCTION yaz_connect
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $zurl
     * @param mixed $options
     * @return mixed
     */
    function yaz_connect(string $zurl, mixed $options): mixed
-----
FUNCTION yaz_database
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $id
     * @param string $databases
     * @return bool
     */
    function yaz_database(resource $id, string $databases): bool
-----
FUNCTION yaz_element
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $id
     * @param string $elementset
     * @return bool
     */
    function yaz_element(resource $id, string $elementset): bool
-----
FUNCTION yaz_errno
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $id
     * @return int
     */
    function yaz_errno(resource $id): int
-----
FUNCTION yaz_error
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $id
     * @return string
     */
    function yaz_error(resource $id): string
-----
FUNCTION yaz_es
-----
Returns by reference: Maybe
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $id
     * @param string $type
     * @param array $args
     * @return void
     */
    function yaz_es(resource $id, string $type, array $args): void
-----
FUNCTION yaz_es_result
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $id
     * @return array
     */
    function yaz_es_result(resource $id): array
-----
FUNCTION yaz_get_option
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $id
     * @param string $name
     * @return string
     */
    function yaz_get_option(resource $id, string $name): string
-----
FUNCTION yaz_hits
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $id
     * @param array $searchresult
     * @return int
     */
    function yaz_hits(resource $id, array $searchresult): int
-----
FUNCTION yaz_itemorder
-----
Returns by reference: Maybe
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $id
     * @param array $args
     * @return void
     */
    function yaz_itemorder(resource $id, array $args): void
-----
FUNCTION yaz_present
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $id
     * @return bool
     */
    function yaz_present(resource $id): bool
-----
FUNCTION yaz_range
-----
Returns by reference: Maybe
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $id
     * @param int $start
     * @param int $number
     * @return void
     */
    function yaz_range(resource $id, int $start, int $number): void
-----
FUNCTION yaz_record
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $id
     * @param int $pos
     * @param string $type
     * @return string
     */
    function yaz_record(resource $id, int $pos, string $type): string
-----
FUNCTION yaz_scan
-----
Returns by reference: Maybe
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $id
     * @param string $type
     * @param string $startterm
     * @param array $flags
     * @return void
     */
    function yaz_scan(resource $id, string $type, string $startterm, array $flags): void
-----
FUNCTION yaz_scan_result
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $id
     * @param array $result
     * @return array
     */
    function yaz_scan_result(resource $id, array $result): array
-----
FUNCTION yaz_schema
-----
Returns by reference: Maybe
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $id
     * @param string $schema
     * @return void
     */
    function yaz_schema(resource $id, string $schema): void
-----
FUNCTION yaz_search
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $id
     * @param string $type
     * @param string $query
     * @return bool
     */
    function yaz_search(resource $id, string $type, string $query): bool
-----
FUNCTION yaz_set_option
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param mixed $id
     * @param string $name
     * @param string $value
     * @param array $options
     * @return mixed
     */
    function yaz_set_option(mixed $id, string $name, string $value, array $options): mixed
-----
FUNCTION yaz_sort
-----
Returns by reference: Maybe
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $id
     * @param string $criteria
     * @return void
     */
    function yaz_sort(resource $id, string $criteria): void
-----
FUNCTION yaz_syntax
-----
Returns by reference: Maybe
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $id
     * @param string $syntax
     * @return void
     */
    function yaz_syntax(resource $id, string $syntax): void
-----
FUNCTION yaz_wait
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @param array $options
     * @return mixed
     */
    function yaz_wait(array &r$options): mixed
-----
FUNCTION zend_thread_id
-----
Returns by reference: Maybe
Has side-effects: Maybe
Variants: 1
    /**
     * @return int
     */
    function zend_thread_id(): int
-----
FUNCTION zend_version
-----
Variants: 1
    /**
     * @return string
     */
    function zend_version(): string
-----
FUNCTION zip_close
-----
Has side-effects: Yes
Variants: 1
    /**
     * @param resource $zip
     * @return void
     */
    function zip_close(resource $zip): void
-----
FUNCTION zip_entry_close
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $zip_entry
     * @return bool
     */
    function zip_entry_close(resource $zip_entry): bool
-----
FUNCTION zip_entry_compressedsize
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $zip_entry
     * @return int|false
     */
    function zip_entry_compressedsize(resource $zip_entry): int|false
-----
FUNCTION zip_entry_compressionmethod
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $zip_entry
     * @return string|false
     */
    function zip_entry_compressionmethod(resource $zip_entry): string|false
-----
FUNCTION zip_entry_filesize
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $zip_entry
     * @return int|false
     */
    function zip_entry_filesize(resource $zip_entry): int|false
-----
FUNCTION zip_entry_name
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $zip_entry
     * @return string|false
     */
    function zip_entry_name(resource $zip_entry): string|false
-----
FUNCTION zip_entry_open
-----
Is deprecated: Yes
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $zip_dp
     * @param resource $zip_entry
     * @param string $mode
     * @return bool
     */
    function zip_entry_open(resource $zip_dp, resource $zip_entry, string $mode = 'rb'): bool
-----
FUNCTION zip_entry_read
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $zip_entry
     * @param int $len
     * @return string|false
     */
    function zip_entry_read(resource $zip_entry, int $len = 1024): string|false
-----
FUNCTION zip_open
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param string $filename
     * @return int|resource|false
     */
    function zip_open(string $filename): int|resource|false
-----
FUNCTION zip_read
-----
Has side-effects: Maybe
Variants: 1
    /**
     * @param resource $zip
     * @return int|resource|false
     */
    function zip_read(resource $zip): int|resource|false
-----
FUNCTION zlib://
-----
MISSING
-----
FUNCTION zlib_decode
-----
Variants: 1
    /**
     * @param string $data
     * @param int $max_length
     * @return string|false
     */
    function zlib_decode(string $data, int $max_length = 0): string|false
-----
FUNCTION zlib_encode
-----
Variants: 1
    /**
     * @param string $data
     * @param int $encoding
     * @param int $level
     * @return string|false
     */
    function zlib_encode(string $data, int $encoding, int $level = -1): string|false
-----
FUNCTION zlib_get_coding_type
-----
Variants: 1
    /**
     * @return string|false
     */
    function zlib_get_coding_type(): string|false
-----
FUNCTION zookeeper_dispatch
-----
Returns by reference: Maybe
Has side-effects: Yes
Variants: 1
    /**
     * @return void
     */
    function zookeeper_dispatch(): void
-----
CLASS APCUIterator
-----
class APCUIterator implements Iterator
{
}
-----
METHOD APCUIterator::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array<string>|string|null $search
     * @param int $format
     * @param int $chunk_size
     * @param int $list
     * @return void
     */
    function __construct(mixed $search = null, mixed $format = -1, mixed $chunk_size = 100, mixed $list = 1): mixed
-----
METHOD APCUIterator::current
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function current(): mixed
-----
METHOD APCUIterator::getTotalCount
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getTotalCount(): mixed
-----
METHOD APCUIterator::getTotalHits
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getTotalHits(): mixed
-----
METHOD APCUIterator::getTotalSize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getTotalSize(): mixed
-----
METHOD APCUIterator::key
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function key(): mixed
-----
METHOD APCUIterator::next
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): mixed
-----
METHOD APCUIterator::rewind
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): mixed
-----
METHOD APCUIterator::valid
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function valid(): mixed
-----
CLASS AllowDynamicProperties
-----
final class AllowDynamicProperties
{
}
-----
METHOD AllowDynamicProperties::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function __construct(): mixed
-----
CLASS AppendIterator
-----
class AppendIterator extends IteratorIterator
{
}
-----
METHOD AppendIterator::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD AppendIterator::append
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param TIterator of Iterator<TKey (class AppendIterator, parameter), TValue (class AppendIterator, parameter)> (class AppendIterator, parameter) $iterator
     * @return void
     */
    function append(Iterator $iterator): mixed
-----
METHOD AppendIterator::current
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return TValue (class AppendIterator, parameter)
     */
    function current(): mixed
-----
METHOD AppendIterator::getArrayIterator
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return ArrayIterator<(int|string), TValue (class AppendIterator, parameter)>
     */
    function getArrayIterator(): mixed
-----
METHOD AppendIterator::getIteratorIndex
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getIteratorIndex(): mixed
-----
METHOD AppendIterator::key
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return TKey (class AppendIterator, parameter)
     */
    function key(): mixed
-----
METHOD AppendIterator::next
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): mixed
-----
METHOD AppendIterator::rewind
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): mixed
-----
METHOD AppendIterator::valid
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function valid(): mixed
-----
CLASS ArrayAccess
-----
interface ArrayAccess
{
}
-----
METHOD ArrayAccess::offsetExists
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TKey (class ArrayAccess, parameter) $offset
     * @return bool
     */
    function offsetExists(mixed $offset): mixed
-----
METHOD ArrayAccess::offsetGet
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TKey (class ArrayAccess, parameter) $offset
     * @return TValue (class ArrayAccess, parameter)|null
     */
    function offsetGet(mixed $offset): mixed
-----
METHOD ArrayAccess::offsetSet
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param TKey (class ArrayAccess, parameter)|null $offset
     * @param TValue (class ArrayAccess, parameter) $value
     * @return void
     */
    function offsetSet(mixed $offset, mixed $value): mixed
-----
METHOD ArrayAccess::offsetUnset
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param TKey (class ArrayAccess, parameter) $offset
     * @return void
     */
    function offsetUnset(mixed $offset): mixed
-----
CLASS ArrayIterator
-----
class ArrayIterator implements SeekableIterator, ArrayAccess, Serializable, Countable
{
}
-----
METHOD ArrayIterator::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array<TKey of (int|string) (class ArrayIterator, parameter), TValue (class ArrayIterator, parameter)> $array
     * @param int $flags
     * @return void
     */
    function __construct(array|object $array = array{}, int $flags = 0): mixed
-----
METHOD ArrayIterator::append
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param TValue (class ArrayIterator, parameter) $value
     * @return void
     */
    function append(mixed $value): mixed
-----
METHOD ArrayIterator::asort
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $flags
     * @return void
     */
    function asort(int $flags = 0): mixed
-----
METHOD ArrayIterator::count
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function count(): mixed
-----
METHOD ArrayIterator::current
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return TValue (class ArrayIterator, parameter)
     */
    function current(): mixed
-----
METHOD ArrayIterator::getArrayCopy
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array<TKey of (int|string) (class ArrayIterator, parameter), TValue (class ArrayIterator, parameter)>
     */
    function getArrayCopy(): mixed
-----
METHOD ArrayIterator::getFlags
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getFlags(): mixed
-----
METHOD ArrayIterator::key
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return TKey of (int|string) (class ArrayIterator, parameter)
     */
    function key(): mixed
-----
METHOD ArrayIterator::ksort
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $flags
     * @return void
     */
    function ksort(int $flags = 0): mixed
-----
METHOD ArrayIterator::natcasesort
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function natcasesort(): mixed
-----
METHOD ArrayIterator::natsort
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function natsort(): mixed
-----
METHOD ArrayIterator::next
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): mixed
-----
METHOD ArrayIterator::offsetExists
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TKey of (int|string) (class ArrayIterator, parameter) $key
     * @return bool
     */
    function offsetExists(mixed $key): mixed
-----
METHOD ArrayIterator::offsetGet
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TKey of (int|string) (class ArrayIterator, parameter) $key
     * @return TValue (class ArrayIterator, parameter)|null
     */
    function offsetGet(mixed $key): mixed
-----
METHOD ArrayIterator::offsetSet
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int|string|null $key
     * @param TValue (class ArrayIterator, parameter) $value
     * @return void
     */
    function offsetSet(mixed $key, mixed $value): mixed
-----
METHOD ArrayIterator::offsetUnset
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param TKey of (int|string) (class ArrayIterator, parameter) $key
     * @return void
     */
    function offsetUnset(mixed $key): mixed
-----
METHOD ArrayIterator::rewind
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): mixed
-----
METHOD ArrayIterator::seek
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $offset
     * @return void
     */
    function seek(int $offset): mixed
-----
METHOD ArrayIterator::serialize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function serialize(): mixed
-----
METHOD ArrayIterator::setFlags
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $flags
     * @return void
     */
    function setFlags(int $flags): mixed
-----
METHOD ArrayIterator::uasort
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param callable(TValue, TValue): int $callback
     * @return void
     */
    function uasort(callable(): mixed $callback): mixed
-----
METHOD ArrayIterator::uksort
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param callable(TKey, TKey): int $callback
     * @return void
     */
    function uksort(callable(): mixed $callback): mixed
-----
METHOD ArrayIterator::unserialize
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return void
     */
    function unserialize(string $data): mixed
-----
METHOD ArrayIterator::valid
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function valid(): mixed
-----
CLASS ArrayObject
-----
class ArrayObject implements IteratorAggregate, ArrayAccess, Serializable, Countable
{
}
-----
METHOD ArrayObject::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array<TKey of (int|string) (class ArrayObject, parameter), TValue (class ArrayObject, parameter)>|object $array
     * @param int $flags
     * @param class-string $iteratorClass
     * @return void
     */
    function __construct(array|object $array = array{}, int $flags = 0, string $iteratorClass = 'ArrayIterator'): mixed
-----
METHOD ArrayObject::append
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param TValue (class ArrayObject, parameter) $value
     * @return void
     */
    function append(mixed $value): mixed
-----
METHOD ArrayObject::asort
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $flags
     * @return void
     */
    function asort(int $flags = 0): mixed
-----
METHOD ArrayObject::count
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function count(): mixed
-----
METHOD ArrayObject::exchangeArray
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array|object $array
     * @return array
     */
    function exchangeArray(array|object $array): mixed
-----
METHOD ArrayObject::getArrayCopy
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array<TKey of (int|string) (class ArrayObject, parameter), TValue (class ArrayObject, parameter)>
     */
    function getArrayCopy(): mixed
-----
METHOD ArrayObject::getFlags
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getFlags(): mixed
-----
METHOD ArrayObject::getIterator
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return ArrayIterator<TKey of (int|string) (class ArrayObject, parameter), TValue (class ArrayObject, parameter)>
     */
    function getIterator(): mixed
-----
METHOD ArrayObject::getIteratorClass
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getIteratorClass(): mixed
-----
METHOD ArrayObject::ksort
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $flags
     * @return void
     */
    function ksort(int $flags = 0): mixed
-----
METHOD ArrayObject::natcasesort
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function natcasesort(): mixed
-----
METHOD ArrayObject::natsort
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function natsort(): mixed
-----
METHOD ArrayObject::offsetExists
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TKey of (int|string) (class ArrayObject, parameter) $key
     * @return bool
     */
    function offsetExists(mixed $key): mixed
-----
METHOD ArrayObject::offsetGet
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TKey of (int|string) (class ArrayObject, parameter) $key
     * @return TValue (class ArrayObject, parameter)|null
     */
    function offsetGet(mixed $key): mixed
-----
METHOD ArrayObject::offsetSet
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int|string|null $key
     * @param TValue (class ArrayObject, parameter) $value
     * @return void
     */
    function offsetSet(mixed $key, mixed $value): mixed
-----
METHOD ArrayObject::offsetUnset
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param TKey of (int|string) (class ArrayObject, parameter) $key
     * @return void
     */
    function offsetUnset(mixed $key): mixed
-----
METHOD ArrayObject::serialize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function serialize(): mixed
-----
METHOD ArrayObject::setFlags
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $flags
     * @return void
     */
    function setFlags(int $flags): mixed
-----
METHOD ArrayObject::setIteratorClass
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param class-string $iteratorClass
     * @return void
     */
    function setIteratorClass(string $iteratorClass): mixed
-----
METHOD ArrayObject::uasort
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param callable(TValue, TValue): int $callback
     * @return void
     */
    function uasort(callable(): mixed $callback): mixed
-----
METHOD ArrayObject::uksort
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param callable(TKey, TKey): int $callback
     * @return void
     */
    function uksort(callable(): mixed $callback): mixed
-----
METHOD ArrayObject::unserialize
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return void
     */
    function unserialize(string $data): mixed
-----
CLASS Attribute
-----
Not builtin
final class Attribute
{
}
-----
METHOD Attribute::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $flags
     * @return mixed
     */
    function __construct(int $flags = 63): mixed
-----
CLASS BackedEnum
-----
interface BackedEnum extends UnitEnum
{
}
-----
METHOD BackedEnum::from
-----
Is internal: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $value
     * @return static(BackedEnum)
     */
    function from(int|string $value): static(BackedEnum)
-----
METHOD BackedEnum::tryFrom
-----
Is internal: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $value
     * @return static(BackedEnum)|null
     */
    function tryFrom(int|string $value): static(BackedEnum)|null
-----
CLASS BaseResult
-----
MISSING
-----
CLASS COMPersistHelper
-----
MISSING
-----
CLASS CURLFile
-----
class CURLFile
{
}
-----
METHOD CURLFile::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @param string|null $mime_type
     * @param string|null $posted_filename
     * @return void
     */
    function __construct(string $filename, string|null $mime_type = null, string|null $posted_filename = null): mixed
-----
METHOD CURLFile::getFilename
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getFilename(): mixed
-----
METHOD CURLFile::getMimeType
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getMimeType(): mixed
-----
METHOD CURLFile::getPostFilename
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getPostFilename(): mixed
-----
METHOD CURLFile::setMimeType
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $mime_type
     * @return void
     */
    function setMimeType(string $mime_type): mixed
-----
METHOD CURLFile::setPostFilename
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $posted_filename
     * @return void
     */
    function setPostFilename(string $posted_filename): mixed
-----
CLASS CURLStringFile
-----
Not builtin
class CURLStringFile extends CURLFile
{
}
-----
METHOD CURLStringFile::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @param string $postname
     * @param string $mime
     * @return mixed
     */
    function __construct(string $data, string $postname, string $mime = 'application/octet-stream'): mixed
-----
CLASS CachingIterator
-----
class CachingIterator extends IteratorIterator implements ArrayAccess, Countable, Stringable
{
}
-----
METHOD CachingIterator::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TIterator of Iterator<TKey (class CachingIterator, parameter), TValue (class CachingIterator, parameter)> (class CachingIterator, parameter) $iterator
     * @param 0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|256|257|258|259|260|261|262|263|264|265|266|267|268|269|270|271|272|273|274|275|276|277|278|279|280|281|282|283|284|285|286|287 $flags
     * @return void
     */
    function __construct(Iterator $iterator, int $flags = 1): mixed
-----
METHOD CachingIterator::__toString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): string
-----
METHOD CachingIterator::count
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function count(): mixed
-----
METHOD CachingIterator::current
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return TValue (class CachingIterator, parameter)
     */
    function current(): mixed
-----
METHOD CachingIterator::getCache
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array<TValue (class CachingIterator, parameter)>
     */
    function getCache(): mixed
-----
METHOD CachingIterator::getFlags
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getFlags(): mixed
-----
METHOD CachingIterator::hasNext
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function hasNext(): mixed
-----
METHOD CachingIterator::key
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return TKey (class CachingIterator, parameter)
     */
    function key(): mixed
-----
METHOD CachingIterator::next
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): mixed
-----
METHOD CachingIterator::offsetExists
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TKey (class CachingIterator, parameter) $key
     * @return bool
     */
    function offsetExists(mixed $key): mixed
-----
METHOD CachingIterator::offsetGet
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TKey (class CachingIterator, parameter) $key
     * @return TValue (class CachingIterator, parameter)|null
     */
    function offsetGet(mixed $key): mixed
-----
METHOD CachingIterator::offsetSet
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param TKey (class CachingIterator, parameter)|null $key
     * @param TValue (class CachingIterator, parameter) $value
     * @return void
     */
    function offsetSet(mixed $key, mixed $value): mixed
-----
METHOD CachingIterator::offsetUnset
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param TKey (class CachingIterator, parameter) $key
     * @return void
     */
    function offsetUnset(mixed $key): mixed
-----
METHOD CachingIterator::rewind
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): mixed
-----
METHOD CachingIterator::setFlags
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $flags
     * @return void
     */
    function setFlags(int $flags): mixed
-----
METHOD CachingIterator::valid
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function valid(): mixed
-----
CLASS CallbackFilterIterator
-----
class CallbackFilterIterator extends FilterIterator
{
}
-----
METHOD CallbackFilterIterator::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TIterator of Traversable<TKey (class CallbackFilterIterator, parameter), TValue (class CallbackFilterIterator, parameter)> (class CallbackFilterIterator, parameter) $iterator
     * @param callable(): mixed $callback
     * @return void
     */
    function __construct(Iterator $iterator, callable(): mixed $callback): mixed
-----
METHOD CallbackFilterIterator::accept
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function accept(): mixed
-----
CLASS Client
-----
MISSING
-----
CLASS Closure
-----
final class Closure
{
}
-----
METHOD Closure::__construct
-----
Has side-effects: Maybe
Visibility: private
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD Closure::bind
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param Closure $closure
     * @param object|null $newThis
     * @param object|string|null $newScope
     * @return Closure|null
     */
    function bind(Closure $closure, object|null $newThis, object|string|null $newScope = 'static'): Closure|null
-----
METHOD Closure::bindTo
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param object|null $newThis
     * @param object|string|null $newScope
     * @return Closure|null
     */
    function bindTo(object|null $newThis, object|string|null $newScope = 'static'): Closure|null
-----
METHOD Closure::call
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param object $newThis
     * @param mixed $args
     * @return mixed
     */
    function call(object $newThis, mixed ...$args): mixed
-----
METHOD Closure::fromCallable
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @return Closure
     */
    function fromCallable(callable(): mixed $callback): Closure
-----
CLASS Collator
-----
class Collator
{
}
-----
METHOD Collator::__construct
-----
Visibility: public
Variants: 1
    /**
     * @param string $locale
     * @return void
     */
    function __construct(string $locale): mixed
-----
METHOD Collator::asort
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $array
     * @param int $flags
     * @return bool
     */
    function asort(array &r$array, int $flags = 0): mixed
-----
METHOD Collator::compare
-----
Visibility: public
Variants: 1
    /**
     * @param string $string1
     * @param string $string2
     * @return int|false
     */
    function compare(string $string1, string $string2): mixed
-----
METHOD Collator::create
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $locale
     * @return Collator|null
     */
    function create(string $locale): mixed
-----
METHOD Collator::getAttribute
-----
Visibility: public
Variants: 1
    /**
     * @param int $attribute
     * @return int
     */
    function getAttribute(int $attribute): mixed
-----
METHOD Collator::getErrorCode
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getErrorCode(): mixed
-----
METHOD Collator::getErrorMessage
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getErrorMessage(): mixed
-----
METHOD Collator::getLocale
-----
Visibility: public
Variants: 1
    /**
     * @param int $type
     * @return string
     */
    function getLocale(int $type): mixed
-----
METHOD Collator::getSortKey
-----
Visibility: public
Variants: 1
    /**
     * @param string $string
     * @return string
     */
    function getSortKey(string $string): mixed
-----
METHOD Collator::getStrength
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getStrength(): mixed
-----
METHOD Collator::setAttribute
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $attribute
     * @param int $value
     * @return bool
     */
    function setAttribute(int $attribute, int $value): mixed
-----
METHOD Collator::setStrength
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $strength
     * @return bool
     */
    function setStrength(int $strength): mixed
-----
METHOD Collator::sort
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $array
     * @param int $flags
     * @return bool
     */
    function sort(array &r$array, int $flags = 0): mixed
-----
METHOD Collator::sortWithSortKeys
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $array
     * @return bool
     */
    function sortWithSortKeys(array &r$array): mixed
-----
CLASS Collectable
-----
interface Collectable
{
}
-----
METHOD Collectable::isGarbage
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isGarbage(): bool
-----
CLASS Collection
-----
MISSING
-----
CLASS CollectionAdd
-----
MISSING
-----
CLASS CollectionFind
-----
MISSING
-----
CLASS CollectionModify
-----
MISSING
-----
CLASS CollectionRemove
-----
MISSING
-----
CLASS ColumnResult
-----
MISSING
-----
CLASS CommonMark\CQL
-----
MISSING
-----
CLASS CommonMark\Interfaces\IVisitable
-----
MISSING
-----
CLASS CommonMark\Interfaces\IVisitor
-----
MISSING
-----
CLASS CommonMark\Node
-----
MISSING
-----
CLASS CommonMark\Node\BulletList
-----
MISSING
-----
CLASS CommonMark\Node\CodeBlock
-----
MISSING
-----
CLASS CommonMark\Node\Heading
-----
MISSING
-----
CLASS CommonMark\Node\Image
-----
MISSING
-----
CLASS CommonMark\Node\Link
-----
MISSING
-----
CLASS CommonMark\Node\OrderedList
-----
MISSING
-----
CLASS CommonMark\Node\Text
-----
MISSING
-----
CLASS CommonMark\Parser
-----
MISSING
-----
CLASS Componere\Abstract\Definition
-----
MISSING
-----
CLASS Componere\Definition
-----
MISSING
-----
CLASS Componere\Method
-----
MISSING
-----
CLASS Componere\Patch
-----
MISSING
-----
CLASS Componere\Value
-----
MISSING
-----
CLASS Countable
-----
interface Countable
{
}
-----
METHOD Countable::count
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function count(): mixed
-----
CLASS CrudOperationBindable
-----
MISSING
-----
CLASS CrudOperationLimitable
-----
MISSING
-----
CLASS CrudOperationSkippable
-----
MISSING
-----
CLASS CrudOperationSortable
-----
MISSING
-----
CLASS DOMAttr
-----
class DOMAttr extends DOMNode
{
}
-----
METHOD DOMAttr::__construct
-----
Has side-effects: Maybe
Throw type: DOMException
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $value
     * @return void
     */
    function __construct(string $name, string $value = ''): mixed
-----
METHOD DOMAttr::isId
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isId(): mixed
-----
CLASS DOMCdataSection
-----
class DOMCdataSection extends DOMText
{
}
-----
METHOD DOMCdataSection::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return void
     */
    function __construct(string $data): mixed
-----
CLASS DOMCharacterData
-----
class DOMCharacterData extends DOMNode implements DOMChildNode
{
}
-----
METHOD DOMCharacterData::appendData
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return void
     */
    function appendData(string $data): mixed
-----
METHOD DOMCharacterData::deleteData
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $offset
     * @param int $count
     * @return void
     */
    function deleteData(int $offset, int $count): mixed
-----
METHOD DOMCharacterData::insertData
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $offset
     * @param string $data
     * @return void
     */
    function insertData(int $offset, string $data): mixed
-----
METHOD DOMCharacterData::replaceData
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $offset
     * @param int $count
     * @param string $data
     * @return void
     */
    function replaceData(int $offset, int $count, string $data): mixed
-----
METHOD DOMCharacterData::substringData
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $offset
     * @param int $count
     * @return string
     */
    function substringData(int $offset, int $count): mixed
-----
CLASS DOMChildNode
-----
interface DOMChildNode
{
}
-----
METHOD DOMChildNode::after
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param DOMNode|string $nodes
     * @return void
     */
    function after(mixed ...$nodes): void
-----
METHOD DOMChildNode::before
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param DOMNode|string $nodes
     * @return void
     */
    function before(mixed ...$nodes): void
-----
METHOD DOMChildNode::remove
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function remove(): void
-----
METHOD DOMChildNode::replaceWith
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param DOMNode|string $nodes
     * @return void
     */
    function replaceWith(mixed ...$nodes): void
-----
CLASS DOMComment
-----
class DOMComment extends DOMCharacterData
{
}
-----
METHOD DOMComment::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return void
     */
    function __construct(string $data = ''): mixed
-----
CLASS DOMDocument
-----
class DOMDocument extends DOMNode implements DOMParentNode
{
}
-----
METHOD DOMDocument::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $version
     * @param string $encoding
     * @return void
     */
    function __construct(string $version = '1.0', string $encoding = ''): mixed
-----
METHOD DOMDocument::createAttribute
-----
Has side-effects: Maybe
Throw type: DOMException
Visibility: public
Variants: 1
    /**
     * @param string $localName
     * @return DOMAttr
     */
    function createAttribute(string $localName): mixed
-----
METHOD DOMDocument::createAttributeNS
-----
Has side-effects: Maybe
Throw type: DOMException
Visibility: public
Variants: 1
    /**
     * @param string|null $namespace
     * @param string $qualifiedName
     * @return DOMAttr
     */
    function createAttributeNS(string|null $namespace, string $qualifiedName): mixed
-----
METHOD DOMDocument::createCDATASection
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return DOMCDATASection
     */
    function createCDATASection(string $data): mixed
-----
METHOD DOMDocument::createComment
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return DOMComment
     */
    function createComment(string $data): mixed
-----
METHOD DOMDocument::createDocumentFragment
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return DOMDocumentFragment
     */
    function createDocumentFragment(): mixed
-----
METHOD DOMDocument::createElement
-----
Has side-effects: Maybe
Throw type: DOMException
Visibility: public
Variants: 1
    /**
     * @param string $localName
     * @param string $value
     * @return DOMElement
     */
    function createElement(string $localName, string $value = ''): mixed
-----
METHOD DOMDocument::createElementNS
-----
Has side-effects: Maybe
Throw type: DOMException
Visibility: public
Variants: 1
    /**
     * @param string|null $namespace
     * @param string $qualifiedName
     * @param string $value
     * @return DOMElement
     */
    function createElementNS(string|null $namespace, string $qualifiedName, string $value = ''): mixed
-----
METHOD DOMDocument::createEntityReference
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return DOMEntityReference
     */
    function createEntityReference(string $name): mixed
-----
METHOD DOMDocument::createProcessingInstruction
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $target
     * @param string $data
     * @return DOMProcessingInstruction
     */
    function createProcessingInstruction(string $target, string $data = ''): mixed
-----
METHOD DOMDocument::createTextNode
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return DOMText
     */
    function createTextNode(string $data): mixed
-----
METHOD DOMDocument::getElementById
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $elementId
     * @return DOMElement|null
     */
    function getElementById(string $elementId): mixed
-----
METHOD DOMDocument::getElementsByTagName
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $qualifiedName
     * @return DOMNodeList<DOMElement>
     */
    function getElementsByTagName(string $qualifiedName): mixed
-----
METHOD DOMDocument::getElementsByTagNameNS
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $namespace
     * @param string $localName
     * @return DOMNodeList<DOMElement>
     */
    function getElementsByTagNameNS(string|null $namespace, string $localName): mixed
-----
METHOD DOMDocument::importNode
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param DOMNode $node
     * @param bool $deep
     * @return DOMNode
     */
    function importNode(DOMNode $node, bool $deep = false): mixed
-----
METHOD DOMDocument::load
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @param int $options
     * @return mixed
     */
    function load(string $filename, int $options = 0): mixed
-----
METHOD DOMDocument::loadHTML
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $source
     * @param int $options
     * @return bool
     */
    function loadHTML(string $source, int $options = 0): mixed
-----
METHOD DOMDocument::loadHTMLFile
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @param int $options
     * @return bool
     */
    function loadHTMLFile(string $filename, int $options = 0): mixed
-----
METHOD DOMDocument::loadXML
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $source
     * @param int $options
     * @return mixed
     */
    function loadXML(string $source, int $options = 0): mixed
-----
METHOD DOMDocument::normalizeDocument
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function normalizeDocument(): mixed
-----
METHOD DOMDocument::registerNodeClass
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $baseClass
     * @param string|null $extendedClass
     * @return bool
     */
    function registerNodeClass(string $baseClass, string|null $extendedClass): mixed
-----
METHOD DOMDocument::relaxNGValidate
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @return bool
     */
    function relaxNGValidate(string $filename): mixed
-----
METHOD DOMDocument::relaxNGValidateSource
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $source
     * @return bool
     */
    function relaxNGValidateSource(string $source): mixed
-----
METHOD DOMDocument::save
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @param int $options
     * @return int|false
     */
    function save(string $filename, int $options = 0): mixed
-----
METHOD DOMDocument::saveHTML
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param DOMNode|null $node
     * @return string|false
     */
    function saveHTML(DOMNode|null $node = null): mixed
-----
METHOD DOMDocument::saveHTMLFile
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @return int|false
     */
    function saveHTMLFile(string $filename): mixed
-----
METHOD DOMDocument::saveXML
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param DOMNode|null $node
     * @param int $options
     * @return string|false
     */
    function saveXML(DOMNode|null $node = null, int $options = 0): mixed
-----
METHOD DOMDocument::schemaValidate
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @param int $options
     * @return bool
     */
    function schemaValidate(string $filename, int $options = 0): mixed
-----
METHOD DOMDocument::schemaValidateSource
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $source
     * @param int $flags
     * @return bool
     */
    function schemaValidateSource(string $source, int $flags = 0): mixed
-----
METHOD DOMDocument::validate
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function validate(): mixed
-----
METHOD DOMDocument::xinclude
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $options
     * @return int
     */
    function xinclude(int $options = 0): mixed
-----
CLASS DOMDocumentFragment
-----
class DOMDocumentFragment extends DOMNode implements DOMParentNode
{
}
-----
METHOD DOMDocumentFragment::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD DOMDocumentFragment::appendXML
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return bool
     */
    function appendXML(string $data): mixed
-----
CLASS DOMElement
-----
class DOMElement extends DOMNode implements DOMParentNode, DOMChildNode
{
}
-----
METHOD DOMElement::__construct
-----
Has side-effects: Maybe
Throw type: DOMException
Visibility: public
Variants: 1
    /**
     * @param string $qualifiedName
     * @param string|null $value
     * @param string $namespace
     * @return void
     */
    function __construct(string $qualifiedName, string|null $value = null, string $namespace = ''): mixed
-----
METHOD DOMElement::getAttribute
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $qualifiedName
     * @return string
     */
    function getAttribute(string $qualifiedName): mixed
-----
METHOD DOMElement::getAttributeNS
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string|null $namespace
     * @param string $localName
     * @return string
     */
    function getAttributeNS(string|null $namespace, string $localName): mixed
-----
METHOD DOMElement::getAttributeNode
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $qualifiedName
     * @return DOMAttr
     */
    function getAttributeNode(string $qualifiedName): mixed
-----
METHOD DOMElement::getAttributeNodeNS
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string|null $namespace
     * @param string $localName
     * @return DOMAttr
     */
    function getAttributeNodeNS(string|null $namespace, string $localName): mixed
-----
METHOD DOMElement::getElementsByTagName
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $qualifiedName
     * @return DOMNodeList<DOMElement>
     */
    function getElementsByTagName(string $qualifiedName): mixed
-----
METHOD DOMElement::getElementsByTagNameNS
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $namespace
     * @param string $localName
     * @return DOMNodeList<DOMElement>
     */
    function getElementsByTagNameNS(string|null $namespace, string $localName): mixed
-----
METHOD DOMElement::hasAttribute
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $qualifiedName
     * @return bool
     */
    function hasAttribute(string $qualifiedName): mixed
-----
METHOD DOMElement::hasAttributeNS
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string|null $namespace
     * @param string $localName
     * @return bool
     */
    function hasAttributeNS(string|null $namespace, string $localName): mixed
-----
METHOD DOMElement::removeAttribute
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $qualifiedName
     * @return bool
     */
    function removeAttribute(string $qualifiedName): mixed
-----
METHOD DOMElement::removeAttributeNS
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string|null $namespace
     * @param string $localName
     * @return bool
     */
    function removeAttributeNS(string|null $namespace, string $localName): mixed
-----
METHOD DOMElement::removeAttributeNode
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param DOMAttr $attr
     * @return bool
     */
    function removeAttributeNode(DOMAttr $attr): mixed
-----
METHOD DOMElement::setAttribute
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $qualifiedName
     * @param string $value
     * @return DOMAttr
     */
    function setAttribute(string $qualifiedName, string $value): mixed
-----
METHOD DOMElement::setAttributeNS
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string|null $namespace
     * @param string $qualifiedName
     * @param string $value
     * @return void
     */
    function setAttributeNS(string|null $namespace, string $qualifiedName, string $value): mixed
-----
METHOD DOMElement::setAttributeNode
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param DOMAttr $attr
     * @return DOMAttr
     */
    function setAttributeNode(DOMAttr $attr): mixed
-----
METHOD DOMElement::setAttributeNodeNS
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param DOMAttr $attr
     * @return DOMAttr
     */
    function setAttributeNodeNS(DOMAttr $attr): mixed
-----
METHOD DOMElement::setIdAttribute
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $qualifiedName
     * @param bool $isId
     * @return void
     */
    function setIdAttribute(string $qualifiedName, bool $isId): mixed
-----
METHOD DOMElement::setIdAttributeNS
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $namespace
     * @param string $qualifiedName
     * @param bool $isId
     * @return void
     */
    function setIdAttributeNS(string $namespace, string $qualifiedName, bool $isId): mixed
-----
METHOD DOMElement::setIdAttributeNode
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param DOMAttr $attr
     * @param bool $isId
     * @return void
     */
    function setIdAttributeNode(DOMAttr $attr, bool $isId): mixed
-----
CLASS DOMEntityReference
-----
class DOMEntityReference extends DOMNode
{
}
-----
METHOD DOMEntityReference::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return void
     */
    function __construct(string $name): mixed
-----
CLASS DOMImplementation
-----
class DOMImplementation
{
}
-----
METHOD DOMImplementation::__construct
-----
MISSING
-----
METHOD DOMImplementation::createDocument
-----
Has side-effects: Maybe
Throw type: DOMException
Visibility: public
Variants: 1
    /**
     * @param string|null $namespace
     * @param string $qualifiedName
     * @param DOMDocumentType|null $doctype
     * @return DOMDocument
     */
    function createDocument(string|null $namespace = null, string $qualifiedName = '', DOMDocumentType|null $doctype = null): mixed
-----
METHOD DOMImplementation::createDocumentType
-----
Has side-effects: Maybe
Throw type: DOMException
Visibility: public
Variants: 1
    /**
     * @param string $qualifiedName
     * @param string $publicId
     * @param string $systemId
     * @return DOMDocumentType
     */
    function createDocumentType(string $qualifiedName, string $publicId = '', string $systemId = ''): mixed
-----
METHOD DOMImplementation::hasFeature
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $feature
     * @param string $version
     * @return bool
     */
    function hasFeature(string $feature, string $version): mixed
-----
CLASS DOMNamedNodeMap
-----
class DOMNamedNodeMap implements IteratorAggregate, Countable
{
}
-----
METHOD DOMNamedNodeMap::count
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function count(): mixed
-----
METHOD DOMNamedNodeMap::getNamedItem
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $qualifiedName
     * @return DOMNode|null
     */
    function getNamedItem(string $qualifiedName): mixed
-----
METHOD DOMNamedNodeMap::getNamedItemNS
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string|null $namespace
     * @param string $localName
     * @return DOMNode|null
     */
    function getNamedItemNS(string|null $namespace, string $localName): mixed
-----
METHOD DOMNamedNodeMap::item
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @return DOMNode|null
     */
    function item(int $index): mixed
-----
CLASS DOMNode
-----
class DOMNode
{
}
-----
METHOD DOMNode::C14N
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $exclusive
     * @param bool $withComments
     * @param array|null $xpath
     * @param array|null $nsPrefixes
     * @return string
     */
    function C14N(bool $exclusive = false, bool $withComments = false, array|null $xpath = null, array|null $nsPrefixes = null): mixed
-----
METHOD DOMNode::C14NFile
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $uri
     * @param bool $exclusive
     * @param bool $withComments
     * @param array|null $xpath
     * @param array|null $nsPrefixes
     * @return int
     */
    function C14NFile(string $uri, bool $exclusive = false, bool $withComments = false, array|null $xpath = null, array|null $nsPrefixes = null): mixed
-----
METHOD DOMNode::appendChild
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param DOMNode $node
     * @return DOMNode
     */
    function appendChild(DOMNode $node): mixed
-----
METHOD DOMNode::cloneNode
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $deep
     * @return DOMNode
     */
    function cloneNode(bool $deep = false): mixed
-----
METHOD DOMNode::getLineNo
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getLineNo(): mixed
-----
METHOD DOMNode::getNodePath
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string|null
     */
    function getNodePath(): mixed
-----
METHOD DOMNode::hasAttributes
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function hasAttributes(): mixed
-----
METHOD DOMNode::hasChildNodes
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function hasChildNodes(): mixed
-----
METHOD DOMNode::insertBefore
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param DOMNode $node
     * @param DOMNode|null $child
     * @return DOMNode
     */
    function insertBefore(DOMNode $node, DOMNode|null $child = null): mixed
-----
METHOD DOMNode::isDefaultNamespace
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $namespace
     * @return bool
     */
    function isDefaultNamespace(string $namespace): mixed
-----
METHOD DOMNode::isSameNode
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param DOMNode $otherNode
     * @return bool
     */
    function isSameNode(DOMNode $otherNode): mixed
-----
METHOD DOMNode::isSupported
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $feature
     * @param string $version
     * @return bool
     */
    function isSupported(string $feature, string $version): mixed
-----
METHOD DOMNode::lookupNamespaceURI
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string|null $prefix
     * @return string|null
     */
    function lookupNamespaceURI(string|null $prefix): mixed
-----
METHOD DOMNode::lookupPrefix
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $namespace
     * @return string
     */
    function lookupPrefix(string $namespace): mixed
-----
METHOD DOMNode::normalize
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function normalize(): mixed
-----
METHOD DOMNode::removeChild
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param DOMNode $child
     * @return DOMNode
     */
    function removeChild(DOMNode $child): mixed
-----
METHOD DOMNode::replaceChild
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param DOMNode $node
     * @param DOMNode $child
     * @return DOMNode
     */
    function replaceChild(DOMNode $node, DOMNode $child): mixed
-----
CLASS DOMNodeList
-----
class DOMNodeList implements IteratorAggregate, Countable
{
}
-----
METHOD DOMNodeList::count
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function count(): mixed
-----
METHOD DOMNodeList::item
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @return TNode of DOMNode (class DOMNodeList, parameter)|null
     */
    function item(int $index): mixed
-----
CLASS DOMParentNode
-----
interface DOMParentNode
{
}
-----
METHOD DOMParentNode::append
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param DOMNode|string $nodes
     * @return void
     */
    function append(mixed ...$nodes): void
-----
METHOD DOMParentNode::prepend
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param DOMNode|string $nodes
     * @return void
     */
    function prepend(mixed ...$nodes): void
-----
CLASS DOMProcessingInstruction
-----
class DOMProcessingInstruction extends DOMNode
{
}
-----
METHOD DOMProcessingInstruction::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $value
     * @return void
     */
    function __construct(string $name, string $value = ''): mixed
-----
CLASS DOMText
-----
class DOMText extends DOMCharacterData
{
}
-----
METHOD DOMText::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return void
     */
    function __construct(string $data = ''): mixed
-----
METHOD DOMText::isElementContentWhitespace
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isElementContentWhitespace(): mixed
-----
METHOD DOMText::isWhitespaceInElementContent
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isWhitespaceInElementContent(): mixed
-----
METHOD DOMText::splitText
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $offset
     * @return DOMText|false
     */
    function splitText(int $offset): mixed
-----
CLASS DOMXPath
-----
class DOMXPath
{
}
-----
METHOD DOMXPath::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param DOMDocument $document
     * @param bool $registerNodeNS
     * @return void
     */
    function __construct(DOMDocument $document, bool $registerNodeNS = true): mixed
-----
METHOD DOMXPath::evaluate
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $expression
     * @param DOMNode|null $contextNode
     * @param bool $registerNodeNS
     * @return mixed
     */
    function evaluate(string $expression, DOMNode|null $contextNode = null, bool $registerNodeNS = true): mixed
-----
METHOD DOMXPath::query
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $expression
     * @param DOMNode|null $contextNode
     * @param bool $registerNodeNS
     * @return DOMNodeList<DOMNode>|false
     */
    function query(string $expression, DOMNode|null $contextNode = null, bool $registerNodeNS = true): mixed
-----
METHOD DOMXPath::registerNamespace
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $prefix
     * @param string $namespace
     * @return bool
     */
    function registerNamespace(string $prefix, string $namespace): mixed
-----
METHOD DOMXPath::registerPhpFunctions
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param array|string|null $restrict
     * @return void
     */
    function registerPhpFunctions(array|string|null $restrict = null): mixed
-----
CLASS DatabaseObject
-----
MISSING
-----
CLASS DateInterval
-----
class DateInterval
{
}
-----
METHOD DateInterval::__construct
-----
Has side-effects: Maybe
Throw type: Exception
Visibility: public
Variants: 1
    /**
     * @param string $duration
     * @return void
     */
    function __construct(string $duration): mixed
-----
METHOD DateInterval::createFromDateString
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $datetime
     * @return DateInterval|false
     */
    function createFromDateString(string $datetime): mixed
-----
METHOD DateInterval::format
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $format
     * @return string
     */
    function format(string $format): mixed
-----
CLASS DatePeriod
-----
class DatePeriod implements IteratorAggregate
{
}
-----
METHOD DatePeriod::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 3
    /**
     * @param DateTimeInterface $start
     * @param DateInterval $interval
     * @param int $end
     * @param int $options
     * @return void
     */
    function __construct(DateTimeInterface $start, DateInterval $interval, DateTimeInterface $end, mixed $options = 0): mixed
    /**
     * @param DateTimeInterface $start
     * @param DateInterval $interval
     * @param DateTimeInterface $end
     * @param int $options
     * @return void
     */
    function __construct(DateTimeInterface $start, DateInterval $interval, DateTimeInterface $end, mixed $options = 0): mixed
    /**
     * @param string $start
     * @param int $interval
     * @return void
     */
    function __construct(DateTimeInterface $start, DateInterval $interval): mixed
-----
METHOD DatePeriod::getDateInterval
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return DateInterval
     */
    function getDateInterval(): mixed
-----
METHOD DatePeriod::getEndDate
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return TEnd of DateTimeInterface|null (class DatePeriod, parameter)
     */
    function getEndDate(): mixed
-----
METHOD DatePeriod::getRecurrences
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return TRecurrences of int|null (class DatePeriod, parameter)
     */
    function getRecurrences(): mixed
-----
METHOD DatePeriod::getStartDate
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return TDate of DateTimeInterface (class DatePeriod, parameter)
     */
    function getStartDate(): mixed
-----
CLASS DateTime
-----
class DateTime implements DateTimeInterface
{
}
-----
METHOD DateTime::__construct
-----
Has side-effects: Maybe
Throw type: Exception
Visibility: public
Variants: 1
    /**
     * @param string $datetime
     * @param DateTimeZone|null $timezone
     * @return void
     */
    function __construct(string $datetime = 'now', DateTimeZone|null $timezone = null): mixed
-----
METHOD DateTime::__set_state
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param array $array
     * @return static(DateTime)
     */
    function __set_state(array $array): mixed
-----
METHOD DateTime::__wakeup
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __wakeup(): mixed
-----
METHOD DateTime::add
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param DateInterval $interval
     * @return static(DateTime)
     */
    function add(DateInterval $interval): mixed
-----
METHOD DateTime::createFromFormat
-----
Static
Visibility: public
Variants: 1
    /**
     * @param string $format
     * @param string $datetime
     * @param DateTimeZone|null $timezone
     * @return static(DateTime)|false
     */
    function createFromFormat(string $format, string $datetime, DateTimeZone|null $timezone = null): mixed
-----
METHOD DateTime::createFromImmutable
-----
Static
Visibility: public
Variants: 1
    /**
     * @param DateTimeImmutable $object
     * @return static(DateTime)
     */
    function createFromImmutable(DateTimeImmutable $object): mixed
-----
METHOD DateTime::createFromInterface
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param DateTimeInterface $object
     * @return DateTime
     */
    function createFromInterface(DateTimeInterface $object): DateTime
-----
METHOD DateTime::getLastErrors
-----
Static
Visibility: public
Variants: 1
    /**
     * @return array{warning_count: int, warnings: array<int, string>, error_count: int, errors: array<int, string>}|false
     */
    function getLastErrors(): mixed
-----
METHOD DateTime::modify
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $modifier
     * @return (static(DateTime)|false)
     */
    function modify(string $modifier): mixed
-----
METHOD DateTime::setDate
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $year
     * @param int $month
     * @param int $day
     * @return static(DateTime)
     */
    function setDate(int $year, int $month, int $day): mixed
-----
METHOD DateTime::setISODate
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $year
     * @param int $week
     * @param int $dayOfWeek
     * @return static(DateTime)
     */
    function setISODate(int $year, int $week, int $dayOfWeek = 1): mixed
-----
METHOD DateTime::setTime
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $hour
     * @param int $minute
     * @param int $second
     * @param int $microsecond
     * @return static(DateTime)
     */
    function setTime(int $hour, int $minute, int $second = 0, int $microsecond = 0): mixed
-----
METHOD DateTime::setTimestamp
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $timestamp
     * @return static(DateTime)
     */
    function setTimestamp(int $timestamp): mixed
-----
METHOD DateTime::setTimezone
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param DateTimeZone $timezone
     * @return static(DateTime)
     */
    function setTimezone(DateTimeZone $timezone): mixed
-----
METHOD DateTime::sub
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param DateInterval $interval
     * @return static(DateTime)
     */
    function sub(DateInterval $interval): mixed
-----
CLASS DateTimeImmutable
-----
class DateTimeImmutable implements DateTimeInterface
{
}
-----
METHOD DateTimeImmutable::__construct
-----
Has side-effects: Maybe
Throw type: Exception
Visibility: public
Variants: 1
    /**
     * @param string $datetime
     * @param DateTimeZone|null $timezone
     * @return void
     */
    function __construct(string $datetime = 'now', DateTimeZone|null $timezone = null): mixed
-----
METHOD DateTimeImmutable::__set_state
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param array $array
     * @return static(DateTimeImmutable)
     */
    function __set_state(array $array): mixed
-----
METHOD DateTimeImmutable::add
-----
Visibility: public
Variants: 1
    /**
     * @param DateInterval $interval
     * @return static(DateTimeImmutable)
     */
    function add(DateInterval $interval): mixed
-----
METHOD DateTimeImmutable::createFromFormat
-----
Static
Visibility: public
Variants: 1
    /**
     * @param string $format
     * @param string $datetime
     * @param DateTimeZone|null $timezone
     * @return static(DateTimeImmutable)|false
     */
    function createFromFormat(string $format, string $datetime, DateTimeZone|null $timezone = null): mixed
-----
METHOD DateTimeImmutable::createFromInterface
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param DateTimeInterface $object
     * @return DateTimeImmutable
     */
    function createFromInterface(DateTimeInterface $object): DateTimeImmutable
-----
METHOD DateTimeImmutable::createFromMutable
-----
Static
Visibility: public
Variants: 1
    /**
     * @param DateTime $object
     * @return static(DateTimeImmutable)
     */
    function createFromMutable(DateTime $object): mixed
-----
METHOD DateTimeImmutable::getLastErrors
-----
Static
Visibility: public
Variants: 1
    /**
     * @return array{warning_count: int, warnings: array<int, string>, error_count: int, errors: array<int, string>}|false
     */
    function getLastErrors(): mixed
-----
METHOD DateTimeImmutable::modify
-----
Visibility: public
Variants: 1
    /**
     * @param string $modifier
     * @return (static(DateTimeImmutable)|false)
     */
    function modify(string $modifier): mixed
-----
METHOD DateTimeImmutable::setDate
-----
Visibility: public
Variants: 1
    /**
     * @param int $year
     * @param int $month
     * @param int $day
     * @return static(DateTimeImmutable)
     */
    function setDate(int $year, int $month, int $day): mixed
-----
METHOD DateTimeImmutable::setISODate
-----
Visibility: public
Variants: 1
    /**
     * @param int $year
     * @param int $week
     * @param int $dayOfWeek
     * @return static(DateTimeImmutable)
     */
    function setISODate(int $year, int $week, int $dayOfWeek = 1): mixed
-----
METHOD DateTimeImmutable::setTime
-----
Visibility: public
Variants: 1
    /**
     * @param int $hour
     * @param int $minute
     * @param int $second
     * @param int $microsecond
     * @return static(DateTimeImmutable)
     */
    function setTime(int $hour, int $minute, int $second = 0, int $microsecond = 0): mixed
-----
METHOD DateTimeImmutable::setTimestamp
-----
Visibility: public
Variants: 1
    /**
     * @param int $timestamp
     * @return static(DateTimeImmutable)
     */
    function setTimestamp(int $timestamp): mixed
-----
METHOD DateTimeImmutable::setTimezone
-----
Visibility: public
Variants: 1
    /**
     * @param DateTimeZone $timezone
     * @return static(DateTimeImmutable)
     */
    function setTimezone(DateTimeZone $timezone): mixed
-----
METHOD DateTimeImmutable::sub
-----
Visibility: public
Variants: 1
    /**
     * @param DateInterval $interval
     * @return static(DateTimeImmutable)
     */
    function sub(DateInterval $interval): mixed
-----
CLASS DateTimeInterface
-----
interface DateTimeInterface
{
}
-----
METHOD DateTimeInterface::diff
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param DateTimeInterface $targetObject
     * @param bool $absolute
     * @return DateInterval
     */
    function diff(DateTimeInterface $targetObject, bool $absolute = false): mixed
-----
METHOD DateTimeInterface::format
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $format
     * @return string
     */
    function format(string $format): mixed
-----
METHOD DateTimeInterface::getOffset
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getOffset(): mixed
-----
METHOD DateTimeInterface::getTimestamp
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getTimestamp(): mixed
-----
METHOD DateTimeInterface::getTimezone
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return DateTimeZone
     */
    function getTimezone(): mixed
-----
CLASS DateTimeZone
-----
class DateTimeZone
{
}
-----
METHOD DateTimeZone::__construct
-----
Has side-effects: Maybe
Throw type: Exception
Visibility: public
Variants: 1
    /**
     * @param string $timezone
     * @return void
     */
    function __construct(string $timezone): mixed
-----
METHOD DateTimeZone::getLocation
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array{country_code: string, latitude: float, longitude: float, comments: string}|false
     */
    function getLocation(): mixed
-----
METHOD DateTimeZone::getName
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getName(): mixed
-----
METHOD DateTimeZone::getOffset
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param DateTimeInterface $datetime
     * @return int
     */
    function getOffset(DateTimeInterface $datetime): mixed
-----
METHOD DateTimeZone::getTransitions
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $timestampBegin
     * @param int $timestampEnd
     * @return array<int, array{ts: int, time: string, offset: int, isdst: bool, abbr: string}>
     */
    function getTransitions(int $timestampBegin = -9223372036854775808|-2147483648, int $timestampEnd = 2147483647|9223372036854775807): mixed
-----
METHOD DateTimeZone::listAbbreviations
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return array<string, array<int, array{dst: bool, offset: int, timezone_id: string|null}>>
     */
    function listAbbreviations(): mixed
-----
METHOD DateTimeZone::listIdentifiers
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int $timezoneGroup
     * @param string|null $countryCode
     * @return array<int, string>
     */
    function listIdentifiers(int $timezoneGroup = 2047, string|null $countryCode = null): mixed
-----
CLASS Directory
-----
class Directory
{
}
-----
METHOD Directory::close
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function close(): mixed
-----
METHOD Directory::read
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string|false
     */
    function read(): mixed
-----
METHOD Directory::rewind
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): mixed
-----
CLASS DirectoryIterator
-----
class DirectoryIterator extends SplFileInfo implements SeekableIterator
{
}
-----
METHOD DirectoryIterator::__construct
-----
Has side-effects: Maybe
Throw type: RuntimeException
Visibility: public
Variants: 1
    /**
     * @param string $directory
     * @return void
     */
    function __construct(string $directory): mixed
-----
METHOD DirectoryIterator::__toString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): string
-----
METHOD DirectoryIterator::current
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return DirectoryIterator
     */
    function current(): mixed
-----
METHOD DirectoryIterator::getBasename
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $suffix
     * @return string
     */
    function getBasename(string $suffix = ''): mixed
-----
METHOD DirectoryIterator::getExtension
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getExtension(): mixed
-----
METHOD DirectoryIterator::getFilename
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getFilename(): mixed
-----
METHOD DirectoryIterator::isDot
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isDot(): mixed
-----
METHOD DirectoryIterator::key
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function key(): mixed
-----
METHOD DirectoryIterator::next
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): mixed
-----
METHOD DirectoryIterator::rewind
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): mixed
-----
METHOD DirectoryIterator::seek
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $offset
     * @return void
     */
    function seek(int $offset): mixed
-----
METHOD DirectoryIterator::valid
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function valid(): mixed
-----
CLASS DocResult
-----
MISSING
-----
CLASS Ds\Collection
-----
interface Ds\Collection extends Countable, IteratorAggregate, JsonSerializable
{
}
-----
METHOD Ds\Collection::clear
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function clear(): void
-----
METHOD Ds\Collection::copy
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return static(Ds\Collection<TKey (class Ds\Collection, argument), TValue (class Ds\Collection, argument)>)
     */
    function copy(): mixed
-----
METHOD Ds\Collection::isEmpty
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isEmpty(): bool
-----
METHOD Ds\Collection::toArray
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array<(int&TKey (class Ds\Collection, parameter))|(string&TKey (class Ds\Collection, parameter)), TValue (class Ds\Collection, parameter)>
     */
    function toArray(): array
-----
CLASS Ds\Deque
-----
class Ds\Deque implements Ds\Sequence
{
}
-----
METHOD Ds\Deque::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param iterable<TValue (class Ds\Deque, parameter)> $values
     * @return void
     */
    function __construct(mixed $values): mixed
-----
METHOD Ds\Deque::allocate
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $capacity
     * @return void
     */
    function allocate(int $capacity): void
-----
METHOD Ds\Deque::apply
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param callable(TValue): TValue $callback
     * @return void
     */
    function apply(callable(): mixed $callback): void
-----
METHOD Ds\Deque::capacity
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function capacity(): int
-----
METHOD Ds\Deque::clear
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function clear(): void
-----
METHOD Ds\Deque::contains
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TValue (class Ds\Deque, parameter) $values
     * @return bool
     */
    function contains(mixed ...$values): bool
-----
METHOD Ds\Deque::copy
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Ds\Deque<TValue (class Ds\Deque, parameter)>
     */
    function copy(): Ds\Collection
-----
METHOD Ds\Deque::count
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function count(): int
-----
METHOD Ds\Deque::filter
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param (callable(TValue): bool)|null $callback
     * @return Ds\Deque<TValue (class Ds\Deque, parameter)>
     */
    function filter((callable(): mixed)|null $callback = null): Ds\Deque
-----
METHOD Ds\Deque::find
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TValue (class Ds\Deque, parameter) $value
     * @return int|false
     */
    function find(mixed $value): mixed
-----
METHOD Ds\Deque::first
-----
Has side-effects: Maybe
Throw type: UnderflowException
Visibility: public
Variants: 1
    /**
     * @return TValue (class Ds\Deque, parameter)
     */
    function first(): mixed
-----
METHOD Ds\Deque::get
-----
Has side-effects: Maybe
Throw type: OutOfRangeException
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @return TValue (class Ds\Deque, parameter)
     */
    function get(int $index): mixed
-----
METHOD Ds\Deque::insert
-----
Has side-effects: Yes
Throw type: OutOfRangeException
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @param TValue (class Ds\Deque, parameter) $values
     * @return void
     */
    function insert(int $index, mixed ...$values): void
-----
METHOD Ds\Deque::isEmpty
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isEmpty(): bool
-----
METHOD Ds\Deque::join
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $glue
     * @return string
     */
    function join(string $glue = ''): string
-----
METHOD Ds\Deque::jsonSerialize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function jsonSerialize(): mixed
-----
METHOD Ds\Deque::last
-----
Has side-effects: Maybe
Throw type: UnderflowException
Visibility: public
Variants: 1
    /**
     * @return TValue (class Ds\Deque, parameter)
     */
    function last(): mixed
-----
METHOD Ds\Deque::map
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param callable(TValue): TNewValue $callback
     * @return Ds\Deque<TNewValue (method Ds\Deque::map(), parameter)>
     */
    function map(callable(): mixed $callback): Ds\Deque
-----
METHOD Ds\Deque::merge
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param iterable<TValue2 (method Ds\Deque::merge(), parameter)> $values
     * @return Ds\Deque<TValue (class Ds\Deque, parameter)|TValue2 (method Ds\Deque::merge(), parameter)>
     */
    function merge(mixed $values): Ds\Deque
-----
METHOD Ds\Deque::pop
-----
Has side-effects: Maybe
Throw type: UnderflowException
Visibility: public
Variants: 1
    /**
     * @return TValue (class Ds\Deque, parameter)
     */
    function pop(): mixed
-----
METHOD Ds\Deque::push
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param TValue (class Ds\Deque, parameter) $values
     * @return void
     */
    function push(mixed ...$values): void
-----
METHOD Ds\Deque::reduce
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param callable(TCarry, TValue): TCarry $callback
     * @param TCarry (method Ds\Sequence::reduce(), parameter) $initial
     * @return TCarry (method Ds\Sequence::reduce(), parameter)
     */
    function reduce(callable(): mixed $callback, mixed $initial = null): mixed
-----
METHOD Ds\Deque::remove
-----
Has side-effects: Maybe
Throw type: OutOfRangeException
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @return TValue (class Ds\Deque, parameter)
     */
    function remove(int $index): mixed
-----
METHOD Ds\Deque::reverse
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function reverse(): void
-----
METHOD Ds\Deque::reversed
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Ds\Deque<TValue (class Ds\Deque, parameter)>
     */
    function reversed(): Ds\Deque
-----
METHOD Ds\Deque::rotate
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $rotations
     * @return void
     */
    function rotate(int $rotations): void
-----
METHOD Ds\Deque::set
-----
Has side-effects: Yes
Throw type: OutOfRangeException
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @param TValue (class Ds\Deque, parameter) $value
     * @return void
     */
    function set(int $index, mixed $value): void
-----
METHOD Ds\Deque::shift
-----
Has side-effects: Maybe
Throw type: UnderflowException
Visibility: public
Variants: 1
    /**
     * @return TValue (class Ds\Deque, parameter)
     */
    function shift(): mixed
-----
METHOD Ds\Deque::slice
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @param int|null $length
     * @return Ds\Deque<TValue (class Ds\Deque, parameter)>
     */
    function slice(int $index, int|null $length = null): Ds\Deque
-----
METHOD Ds\Deque::sort
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param (callable(TValue, TValue): int)|null $comparator
     * @return void
     */
    function sort((callable(): mixed)|null $comparator = null): void
-----
METHOD Ds\Deque::sorted
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param (callable(TValue, TValue): int)|null $comparator
     * @return Ds\Sequence<TValue (class Ds\Deque, parameter)>
     */
    function sorted((callable(): mixed)|null $comparator = null): Ds\Deque
-----
METHOD Ds\Deque::sum
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return float|int
     */
    function sum(): float|int
-----
METHOD Ds\Deque::toArray
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array<int, TValue (class Ds\Deque, parameter)>
     */
    function toArray(): array
-----
METHOD Ds\Deque::unshift
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param TValue (class Ds\Deque, parameter) $values
     * @return void
     */
    function unshift(mixed ...$values): void
-----
CLASS Ds\Hashable
-----
interface Ds\Hashable
{
}
-----
METHOD Ds\Hashable::equals
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $obj
     * @return bool
     */
    function equals(mixed $obj): bool
-----
METHOD Ds\Hashable::hash
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function hash(): mixed
-----
CLASS Ds\Map
-----
class Ds\Map implements Ds\Collection, ArrayAccess
{
}
-----
METHOD Ds\Map::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param iterable<TKey (class Ds\Map, parameter), TValue (class Ds\Map, parameter)> $values
     * @return void
     */
    function __construct(mixed $values): mixed
-----
METHOD Ds\Map::allocate
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $capacity
     * @return void
     */
    function allocate(int $capacity): mixed
-----
METHOD Ds\Map::apply
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param callable(TKey, TValue): TValue $callback
     * @return void
     */
    function apply(callable(): mixed $callback): mixed
-----
METHOD Ds\Map::capacity
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function capacity(): int
-----
METHOD Ds\Map::clear
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function clear(): void
-----
METHOD Ds\Map::copy
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Ds\Map<TKey (class Ds\Map, parameter), TValue (class Ds\Map, parameter)>
     */
    function copy(): Ds\Collection
-----
METHOD Ds\Map::count
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function count(): int
-----
METHOD Ds\Map::diff
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param Ds\Map<TKey (class Ds\Map, parameter), TValue2 (method Ds\Map::diff(), parameter)> $map
     * @return Ds\Map<TKey (class Ds\Map, parameter), TValue (class Ds\Map, parameter)>
     */
    function diff(Ds\Map $map): Ds\Map
-----
METHOD Ds\Map::filter
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param (callable(TKey, TValue): bool)|null $callback
     * @return Ds\Map<TKey (class Ds\Map, parameter), TValue (class Ds\Map, parameter)>
     */
    function filter((callable(): mixed)|null $callback = null): Ds\Map
-----
METHOD Ds\Map::first
-----
Has side-effects: Maybe
Throw type: UnderflowException
Visibility: public
Variants: 1
    /**
     * @return Ds\Pair<TKey (class Ds\Map, parameter), TValue (class Ds\Map, parameter)>
     */
    function first(): Ds\Pair
-----
METHOD Ds\Map::get
-----
Has side-effects: Maybe
Throw type: OutOfBoundsException
Visibility: public
Variants: 1
    /**
     * @param TKey (class Ds\Map, parameter) $key
     * @param TDefault (method Ds\Map::get(), parameter) $default
     * @return TDefault (method Ds\Map::get(), parameter)|TValue (class Ds\Map, parameter)
     */
    function get(mixed $key, mixed $default = null): mixed
-----
METHOD Ds\Map::hasKey
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TKey (class Ds\Map, parameter) $key
     * @return bool
     */
    function hasKey(mixed $key): bool
-----
METHOD Ds\Map::hasValue
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TValue (class Ds\Map, parameter) $value
     * @return bool
     */
    function hasValue(mixed $value): bool
-----
METHOD Ds\Map::intersect
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param Ds\Map<TKey2 (method Ds\Map::intersect(), parameter), TValue2 (method Ds\Map::intersect(), parameter)> $map
     * @return Ds\Map<TKey (class Ds\Map, parameter)&TKey2 (method Ds\Map::intersect(), parameter), TValue (class Ds\Map, parameter)>
     */
    function intersect(Ds\Map $map): Ds\Map
-----
METHOD Ds\Map::isEmpty
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isEmpty(): bool
-----
METHOD Ds\Map::jsonSerialize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function jsonSerialize(): mixed
-----
METHOD Ds\Map::keys
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Ds\Set<TKey (class Ds\Map, parameter)>
     */
    function keys(): Ds\Set
-----
METHOD Ds\Map::ksort
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param (callable(TKey, TKey): int)|null $comparator
     * @return void
     */
    function ksort((callable(): mixed)|null $comparator = null): mixed
-----
METHOD Ds\Map::ksorted
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param (callable(TKey, TKey): int)|null $comparator
     * @return Ds\Map<TKey (class Ds\Map, parameter), TValue (class Ds\Map, parameter)>
     */
    function ksorted((callable(): mixed)|null $comparator = null): Ds\Map
-----
METHOD Ds\Map::last
-----
Has side-effects: Maybe
Throw type: UnderflowException
Visibility: public
Variants: 1
    /**
     * @return Ds\Pair<TKey (class Ds\Map, parameter), TValue (class Ds\Map, parameter)>
     */
    function last(): Ds\Pair
-----
METHOD Ds\Map::map
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param callable(TKey, TValue): TNewValue $callback
     * @return Ds\Map<TKey (class Ds\Map, parameter), TNewValue (method Ds\Map::map(), parameter)>
     */
    function map(callable(): mixed $callback): Ds\Map
-----
METHOD Ds\Map::merge
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param iterable<TKey2 (method Ds\Map::merge(), parameter), TValue2 (method Ds\Map::merge(), parameter)> $values
     * @return Ds\Map<TKey (class Ds\Map, parameter)|TKey2 (method Ds\Map::merge(), parameter), TValue (class Ds\Map, parameter)|TValue2 (method Ds\Map::merge(), parameter)>
     */
    function merge(mixed $values): Ds\Map
-----
METHOD Ds\Map::pairs
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Ds\Sequence<Ds\Pair<TKey (class Ds\Map, parameter), TValue (class Ds\Map, parameter)>>
     */
    function pairs(): Ds\Sequence
-----
METHOD Ds\Map::put
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param TKey (class Ds\Map, parameter) $key
     * @param TValue (class Ds\Map, parameter) $value
     * @return void
     */
    function put(mixed $key, mixed $value): mixed
-----
METHOD Ds\Map::putAll
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param iterable<TKey (class Ds\Map, parameter), TValue (class Ds\Map, parameter)> $values
     * @return void
     */
    function putAll(mixed $values): mixed
-----
METHOD Ds\Map::reduce
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param callable(TCarry, TKey, TValue): TCarry $callback
     * @param TCarry (method Ds\Map::reduce(), parameter) $initial
     * @return TCarry (method Ds\Map::reduce(), parameter)
     */
    function reduce(callable(): mixed $callback, mixed $initial): mixed
-----
METHOD Ds\Map::remove
-----
Has side-effects: Maybe
Throw type: OutOfBoundsException
Visibility: public
Variants: 1
    /**
     * @param TKey (class Ds\Map, parameter) $key
     * @param TDefault (method Ds\Map::remove(), parameter) $default
     * @return TDefault (method Ds\Map::remove(), parameter)|TValue (class Ds\Map, parameter)
     */
    function remove(mixed $key, mixed $default = null): mixed
-----
METHOD Ds\Map::reverse
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function reverse(): mixed
-----
METHOD Ds\Map::reversed
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Ds\Map<TKey (class Ds\Map, parameter), TValue (class Ds\Map, parameter)>
     */
    function reversed(): Ds\Map
-----
METHOD Ds\Map::skip
-----
Has side-effects: Maybe
Throw type: OutOfRangeException
Visibility: public
Variants: 1
    /**
     * @param int $position
     * @return Ds\Pair<TKey (class Ds\Map, parameter), TValue (class Ds\Map, parameter)>
     */
    function skip(int $position): Ds\Pair
-----
METHOD Ds\Map::slice
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @param int|null $length
     * @return Ds\Map<TKey (class Ds\Map, parameter), TValue (class Ds\Map, parameter)>
     */
    function slice(int $index, int|null $length = null): Ds\Map
-----
METHOD Ds\Map::sort
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param (callable(TValue, TValue): int)|null $comparator
     * @return void
     */
    function sort((callable(): mixed)|null $comparator = null): mixed
-----
METHOD Ds\Map::sorted
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param (callable(TValue, TValue): int)|null $comparator
     * @return Ds\Map<TKey (class Ds\Map, parameter), TValue (class Ds\Map, parameter)>
     */
    function sorted((callable(): mixed)|null $comparator = null): Ds\Map
-----
METHOD Ds\Map::sum
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return float|int
     */
    function sum(): float|int
-----
METHOD Ds\Map::toArray
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array<(int&TKey (class Ds\Map, parameter))|(string&TKey (class Ds\Map, parameter)), TValue (class Ds\Map, parameter)>
     */
    function toArray(): array
-----
METHOD Ds\Map::union
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param Ds\Map<TKey2 (method Ds\Map::union(), parameter), TValue2 (method Ds\Map::union(), parameter)> $map
     * @return Ds\Map<TKey (class Ds\Map, parameter)|TKey2 (method Ds\Map::union(), parameter), TValue (class Ds\Map, parameter)|TValue2 (method Ds\Map::union(), parameter)>
     */
    function union(Ds\Map $map): Ds\Map
-----
METHOD Ds\Map::values
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Ds\Sequence<TValue (class Ds\Map, parameter)>
     */
    function values(): Ds\Sequence
-----
METHOD Ds\Map::xor
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param Ds\Map<TKey2 (method Ds\Map::xor(), parameter), TValue2 (method Ds\Map::xor(), parameter)> $map
     * @return Ds\Map<TKey (class Ds\Map, parameter)|TKey2 (method Ds\Map::xor(), parameter), TValue (class Ds\Map, parameter)|TValue2 (method Ds\Map::xor(), parameter)>
     */
    function xor(Ds\Map $map): Ds\Map
-----
CLASS Ds\Pair
-----
class Ds\Pair implements JsonSerializable
{
}
-----
METHOD Ds\Pair::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TKey (class Ds\Pair, parameter) $key
     * @param TValue (class Ds\Pair, parameter) $value
     * @return void
     */
    function __construct(mixed $key = null, mixed $value = null): mixed
-----
METHOD Ds\Pair::clear
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function clear(): mixed
-----
METHOD Ds\Pair::copy
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Ds\Pair<TKey (class Ds\Pair, parameter), TValue (class Ds\Pair, parameter)>
     */
    function copy(): Ds\Pair
-----
METHOD Ds\Pair::isEmpty
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isEmpty(): bool
-----
METHOD Ds\Pair::jsonSerialize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function jsonSerialize(): mixed
-----
METHOD Ds\Pair::toArray
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function toArray(): array
-----
CLASS Ds\PriorityQueue
-----
class Ds\PriorityQueue implements Ds\Collection
{
}
-----
METHOD Ds\PriorityQueue::__construct
-----
MISSING
-----
METHOD Ds\PriorityQueue::allocate
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $capacity
     * @return void
     */
    function allocate(int $capacity): void
-----
METHOD Ds\PriorityQueue::capacity
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function capacity(): int
-----
METHOD Ds\PriorityQueue::clear
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function clear(): void
-----
METHOD Ds\PriorityQueue::copy
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Ds\PriorityQueue<TValue (class Ds\PriorityQueue, parameter)>
     */
    function copy(): mixed
-----
METHOD Ds\PriorityQueue::count
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function count(): int
-----
METHOD Ds\PriorityQueue::isEmpty
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isEmpty(): bool
-----
METHOD Ds\PriorityQueue::jsonSerialize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function jsonSerialize(): mixed
-----
METHOD Ds\PriorityQueue::peek
-----
Has side-effects: Maybe
Throw type: UnderflowException
Visibility: public
Variants: 1
    /**
     * @return TValue (class Ds\PriorityQueue, parameter)
     */
    function peek(): mixed
-----
METHOD Ds\PriorityQueue::pop
-----
Has side-effects: Maybe
Throw type: UnderflowException
Visibility: public
Variants: 1
    /**
     * @return TValue (class Ds\PriorityQueue, parameter)
     */
    function pop(): mixed
-----
METHOD Ds\PriorityQueue::push
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param TValue (class Ds\PriorityQueue, parameter) $value
     * @param int $priority
     * @return void
     */
    function push(mixed $value, int $priority): mixed
-----
METHOD Ds\PriorityQueue::toArray
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array<int, TValue (class Ds\PriorityQueue, parameter)>
     */
    function toArray(): array
-----
CLASS Ds\Queue
-----
class Ds\Queue implements Ds\Collection, ArrayAccess
{
}
-----
METHOD Ds\Queue::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param iterable<TValue (class Ds\Queue, parameter)> $values
     * @return void
     */
    function __construct(mixed $values = array{}): mixed
-----
METHOD Ds\Queue::allocate
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $capacity
     * @return void
     */
    function allocate(int $capacity): mixed
-----
METHOD Ds\Queue::capacity
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function capacity(): int
-----
METHOD Ds\Queue::clear
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function clear(): void
-----
METHOD Ds\Queue::copy
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Ds\Queue<TValue (class Ds\Queue, parameter)>
     */
    function copy(): Ds\Queue
-----
METHOD Ds\Queue::count
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function count(): int
-----
METHOD Ds\Queue::isEmpty
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isEmpty(): bool
-----
METHOD Ds\Queue::jsonSerialize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function jsonSerialize(): mixed
-----
METHOD Ds\Queue::peek
-----
Has side-effects: Maybe
Throw type: UnderflowException
Visibility: public
Variants: 1
    /**
     * @return TValue (class Ds\Queue, parameter)
     */
    function peek(): mixed
-----
METHOD Ds\Queue::pop
-----
Has side-effects: Maybe
Throw type: UnderflowException
Visibility: public
Variants: 1
    /**
     * @return TValue (class Ds\Queue, parameter)
     */
    function pop(): mixed
-----
METHOD Ds\Queue::push
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param TValue (class Ds\Queue, parameter) $values
     * @return void
     */
    function push(mixed ...$values): mixed
-----
METHOD Ds\Queue::toArray
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array<int, TValue (class Ds\Queue, parameter)>
     */
    function toArray(): array
-----
CLASS Ds\Sequence
-----
interface Ds\Sequence extends Ds\Collection, ArrayAccess
{
}
-----
METHOD Ds\Sequence::allocate
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $capacity
     * @return void
     */
    function allocate(int $capacity): void
-----
METHOD Ds\Sequence::apply
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param callable(TValue): TValue $callback
     * @return void
     */
    function apply(callable(): mixed $callback): void
-----
METHOD Ds\Sequence::capacity
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function capacity(): int
-----
METHOD Ds\Sequence::contains
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TValue (class Ds\Sequence, parameter) $values
     * @return bool
     */
    function contains(mixed ...$values): bool
-----
METHOD Ds\Sequence::filter
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param (callable(TValue): bool)|null $callback
     * @return Ds\Sequence<TValue (class Ds\Sequence, parameter)>
     */
    function filter((callable(): mixed)|null $callback = null): mixed
-----
METHOD Ds\Sequence::find
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TValue (class Ds\Sequence, parameter) $value
     * @return int|false
     */
    function find(mixed $value): mixed
-----
METHOD Ds\Sequence::first
-----
Has side-effects: Maybe
Throw type: UnderflowException
Visibility: public
Variants: 1
    /**
     * @return TValue (class Ds\Sequence, parameter)
     */
    function first(): mixed
-----
METHOD Ds\Sequence::get
-----
Has side-effects: Maybe
Throw type: OutOfRangeException
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @return TValue (class Ds\Sequence, parameter)
     */
    function get(int $index): mixed
-----
METHOD Ds\Sequence::insert
-----
Has side-effects: Yes
Throw type: OutOfRangeException
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @param TValue (class Ds\Sequence, parameter) $values
     * @return void
     */
    function insert(int $index, mixed ...$values): void
-----
METHOD Ds\Sequence::join
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $glue
     * @return string
     */
    function join(string $glue = ''): string
-----
METHOD Ds\Sequence::last
-----
Has side-effects: Maybe
Throw type: UnderflowException
Visibility: public
Variants: 1
    /**
     * @return TValue (class Ds\Sequence, parameter)
     */
    function last(): mixed
-----
METHOD Ds\Sequence::map
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param callable(TValue): TNewValue $callback
     * @return Ds\Sequence<TNewValue (method Ds\Sequence::map(), parameter)>
     */
    function map(callable(): mixed $callback): Ds\Sequence
-----
METHOD Ds\Sequence::merge
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param iterable<TValue2 (method Ds\Sequence::merge(), parameter)> $values
     * @return Ds\Sequence<TValue (class Ds\Sequence, parameter)|TValue2 (method Ds\Sequence::merge(), parameter)>
     */
    function merge(mixed $values): Ds\Sequence
-----
METHOD Ds\Sequence::pop
-----
Has side-effects: Maybe
Throw type: UnderflowException
Visibility: public
Variants: 1
    /**
     * @return TValue (class Ds\Sequence, parameter)
     */
    function pop(): mixed
-----
METHOD Ds\Sequence::push
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param TValue (class Ds\Sequence, parameter) $values
     * @return void
     */
    function push(mixed ...$values): void
-----
METHOD Ds\Sequence::reduce
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param callable(TCarry, TValue): TCarry $callback
     * @param TCarry (method Ds\Sequence::reduce(), parameter) $initial
     * @return TCarry (method Ds\Sequence::reduce(), parameter)
     */
    function reduce(callable(): mixed $callback, mixed $initial = null): mixed
-----
METHOD Ds\Sequence::remove
-----
Has side-effects: Maybe
Throw type: OutOfRangeException
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @return TValue (class Ds\Sequence, parameter)
     */
    function remove(int $index): mixed
-----
METHOD Ds\Sequence::reverse
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function reverse(): void
-----
METHOD Ds\Sequence::reversed
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Ds\Sequence<TValue (class Ds\Sequence, parameter)>
     */
    function reversed(): mixed
-----
METHOD Ds\Sequence::rotate
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $rotations
     * @return void
     */
    function rotate(int $rotations): void
-----
METHOD Ds\Sequence::set
-----
Has side-effects: Yes
Throw type: OutOfRangeException
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @param TValue (class Ds\Sequence, parameter) $value
     * @return void
     */
    function set(int $index, mixed $value): void
-----
METHOD Ds\Sequence::shift
-----
Has side-effects: Maybe
Throw type: UnderflowException
Visibility: public
Variants: 1
    /**
     * @return TValue (class Ds\Sequence, parameter)
     */
    function shift(): mixed
-----
METHOD Ds\Sequence::slice
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @param int|null $length
     * @return Ds\Sequence<TValue (class Ds\Sequence, parameter)>
     */
    function slice(int $index, int|null $length = null): mixed
-----
METHOD Ds\Sequence::sort
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param (callable(TValue, TValue): int)|null $comparator
     * @return void
     */
    function sort((callable(): mixed)|null $comparator = null): void
-----
METHOD Ds\Sequence::sorted
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param (callable(TValue, TValue): int)|null $comparator
     * @return Ds\Sequence<TValue (class Ds\Sequence, parameter)>
     */
    function sorted((callable(): mixed)|null $comparator = null): mixed
-----
METHOD Ds\Sequence::sum
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return float|int
     */
    function sum(): float|int
-----
METHOD Ds\Sequence::unshift
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param TValue (class Ds\Sequence, parameter) $values
     * @return void
     */
    function unshift(mixed ...$values): void
-----
CLASS Ds\Set
-----
class Ds\Set implements Ds\Collection, ArrayAccess
{
}
-----
METHOD Ds\Set::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param iterable<TValue (class Ds\Set, parameter)> $values
     * @return void
     */
    function __construct(iterable $values = array{}): mixed
-----
METHOD Ds\Set::add
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param TValue (class Ds\Set, parameter) $values
     * @return void
     */
    function add(mixed ...$values): mixed
-----
METHOD Ds\Set::allocate
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $capacity
     * @return void
     */
    function allocate(int $capacity): mixed
-----
METHOD Ds\Set::capacity
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function capacity(): int
-----
METHOD Ds\Set::clear
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function clear(): void
-----
METHOD Ds\Set::contains
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TValue (class Ds\Set, parameter) $values
     * @return bool
     */
    function contains(mixed ...$values): bool
-----
METHOD Ds\Set::copy
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Ds\Set<TValue (class Ds\Set, parameter)>
     */
    function copy(): Ds\Set
-----
METHOD Ds\Set::count
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function count(): int
-----
METHOD Ds\Set::diff
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param Ds\Set<TValue2 (method Ds\Set::diff(), parameter)> $set
     * @return Ds\Set<TValue (class Ds\Set, parameter)>
     */
    function diff(Ds\Set $set): Ds\Set
-----
METHOD Ds\Set::filter
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param (callable(TValue): bool)|null $callback
     * @return Ds\Set<TValue (class Ds\Set, parameter)>
     */
    function filter((callable(): mixed)|null $callback = null): Ds\Set
-----
METHOD Ds\Set::first
-----
Has side-effects: Maybe
Throw type: UnderflowException
Visibility: public
Variants: 1
    /**
     * @return TValue (class Ds\Set, parameter)
     */
    function first(): mixed
-----
METHOD Ds\Set::get
-----
Has side-effects: Maybe
Throw type: OutOfRangeException
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @return TValue (class Ds\Set, parameter)
     */
    function get(int $index): mixed
-----
METHOD Ds\Set::intersect
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param Ds\Set<TValue2 (method Ds\Set::intersect(), parameter)> $set
     * @return Ds\Set<TValue (class Ds\Set, parameter)&TValue2 (method Ds\Set::intersect(), parameter)>
     */
    function intersect(Ds\Set $set): Ds\Set
-----
METHOD Ds\Set::isEmpty
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isEmpty(): bool
-----
METHOD Ds\Set::join
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $glue
     * @return string
     */
    function join(string|null $glue = null): string
-----
METHOD Ds\Set::jsonSerialize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function jsonSerialize(): mixed
-----
METHOD Ds\Set::last
-----
Has side-effects: Maybe
Throw type: UnderflowException
Visibility: public
Variants: 1
    /**
     * @return TValue (class Ds\Set, parameter)
     */
    function last(): mixed
-----
METHOD Ds\Set::merge
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param iterable<TValue2 (method Ds\Set::merge(), parameter)> $values
     * @return Ds\Set<TValue (class Ds\Set, parameter)|TValue2 (method Ds\Set::merge(), parameter)>
     */
    function merge(mixed $values): Ds\Set
-----
METHOD Ds\Set::reduce
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param callable(TCarry, TValue): TCarry $callback
     * @param TCarry (method Ds\Set::reduce(), parameter) $initial
     * @return TCarry (method Ds\Set::reduce(), parameter)
     */
    function reduce(callable(): mixed $callback, mixed $initial = null): mixed
-----
METHOD Ds\Set::remove
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param TValue (class Ds\Set, parameter) $values
     * @return void
     */
    function remove(mixed ...$values): mixed
-----
METHOD Ds\Set::reverse
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function reverse(): mixed
-----
METHOD Ds\Set::reversed
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Ds\Set<TValue (class Ds\Set, parameter)>
     */
    function reversed(): Ds\Set
-----
METHOD Ds\Set::slice
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @param int|null $length
     * @return Ds\Set<TValue (class Ds\Set, parameter)>
     */
    function slice(int $index, int|null $length = null): Ds\Set
-----
METHOD Ds\Set::sort
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param (callable(TValue, TValue): int)|null $comparator
     * @return void
     */
    function sort((callable(): mixed)|null $comparator = null): mixed
-----
METHOD Ds\Set::sorted
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param (callable(TValue, TValue): int)|null $comparator
     * @return Ds\Set<TValue (class Ds\Set, parameter)>
     */
    function sorted((callable(): mixed)|null $comparator = null): Ds\Set
-----
METHOD Ds\Set::sum
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return float|int
     */
    function sum(): float|int
-----
METHOD Ds\Set::toArray
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array<int, TValue (class Ds\Set, parameter)>
     */
    function toArray(): array
-----
METHOD Ds\Set::union
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param Ds\Set<TValue2 (method Ds\Set::union(), parameter)> $set
     * @return Ds\Set<TValue (class Ds\Set, parameter)|TValue2 (method Ds\Set::union(), parameter)>
     */
    function union(Ds\Set $set): Ds\Set
-----
METHOD Ds\Set::xor
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param Ds\Set<TValue2 (method Ds\Set::xor(), parameter)> $set
     * @return Ds\Set<TValue (class Ds\Set, parameter)|TValue2 (method Ds\Set::xor(), parameter)>
     */
    function xor(Ds\Set $set): Ds\Set
-----
CLASS Ds\Stack
-----
class Ds\Stack implements Ds\Collection, ArrayAccess
{
}
-----
METHOD Ds\Stack::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param iterable<TValue (class Ds\Stack, parameter)> $values
     * @return void
     */
    function __construct(mixed $values = array{}): mixed
-----
METHOD Ds\Stack::allocate
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $capacity
     * @return void
     */
    function allocate(int $capacity): mixed
-----
METHOD Ds\Stack::capacity
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function capacity(): int
-----
METHOD Ds\Stack::clear
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function clear(): void
-----
METHOD Ds\Stack::copy
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Ds\Stack<TValue (class Ds\Stack, parameter)>
     */
    function copy(): Ds\Stack
-----
METHOD Ds\Stack::count
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function count(): int
-----
METHOD Ds\Stack::isEmpty
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isEmpty(): bool
-----
METHOD Ds\Stack::jsonSerialize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function jsonSerialize(): mixed
-----
METHOD Ds\Stack::peek
-----
Has side-effects: Maybe
Throw type: UnderflowException
Visibility: public
Variants: 1
    /**
     * @return TValue (class Ds\Stack, parameter)
     */
    function peek(): mixed
-----
METHOD Ds\Stack::pop
-----
Has side-effects: Maybe
Throw type: UnderflowException
Visibility: public
Variants: 1
    /**
     * @return TValue (class Ds\Stack, parameter)
     */
    function pop(): mixed
-----
METHOD Ds\Stack::push
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param TValue (class Ds\Stack, parameter) $values
     * @return void
     */
    function push(mixed ...$values): mixed
-----
METHOD Ds\Stack::toArray
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array<int, TValue (class Ds\Stack, parameter)>
     */
    function toArray(): array
-----
CLASS Ds\Vector
-----
class Ds\Vector implements Ds\Sequence
{
}
-----
METHOD Ds\Vector::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param iterable<TValue (class Ds\Vector, parameter)> $values
     * @return void
     */
    function __construct(mixed $values = array{}): mixed
-----
METHOD Ds\Vector::allocate
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $capacity
     * @return void
     */
    function allocate(int $capacity): void
-----
METHOD Ds\Vector::apply
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param callable(TValue): TValue $callback
     * @return void
     */
    function apply(callable(): mixed $callback): void
-----
METHOD Ds\Vector::capacity
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function capacity(): int
-----
METHOD Ds\Vector::clear
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function clear(): void
-----
METHOD Ds\Vector::contains
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TValue (class Ds\Vector, parameter) $values
     * @return bool
     */
    function contains(mixed ...$values): bool
-----
METHOD Ds\Vector::copy
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Ds\Vector<TValue (class Ds\Vector, parameter)>
     */
    function copy(): Ds\Vector
-----
METHOD Ds\Vector::count
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function count(): int
-----
METHOD Ds\Vector::filter
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param (callable(TValue): bool)|null $callback
     * @return Ds\Vector<TValue (class Ds\Vector, parameter)>
     */
    function filter((callable(): mixed)|null $callback = null): Ds\Vector
-----
METHOD Ds\Vector::find
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TValue (class Ds\Vector, parameter) $value
     * @return int|false
     */
    function find(mixed $value): mixed
-----
METHOD Ds\Vector::first
-----
Has side-effects: Maybe
Throw type: UnderflowException
Visibility: public
Variants: 1
    /**
     * @return TValue (class Ds\Vector, parameter)
     */
    function first(): mixed
-----
METHOD Ds\Vector::get
-----
Has side-effects: Maybe
Throw type: OutOfRangeException
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @return TValue (class Ds\Vector, parameter)
     */
    function get(int $index): mixed
-----
METHOD Ds\Vector::insert
-----
Has side-effects: Yes
Throw type: OutOfRangeException
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @param TValue (class Ds\Vector, parameter) $values
     * @return void
     */
    function insert(int $index, mixed ...$values): void
-----
METHOD Ds\Vector::isEmpty
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isEmpty(): bool
-----
METHOD Ds\Vector::join
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $glue
     * @return string
     */
    function join(string|null $glue = null): string
-----
METHOD Ds\Vector::jsonSerialize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function jsonSerialize(): mixed
-----
METHOD Ds\Vector::last
-----
Has side-effects: Maybe
Throw type: UnderflowException
Visibility: public
Variants: 1
    /**
     * @return TValue (class Ds\Vector, parameter)
     */
    function last(): mixed
-----
METHOD Ds\Vector::map
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param callable(TValue): TNewValue $callback
     * @return Ds\Vector<TNewValue (method Ds\Vector::map(), parameter)>
     */
    function map(callable(): mixed $callback): Ds\Vector
-----
METHOD Ds\Vector::merge
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param iterable<TValue2 (method Ds\Vector::merge(), parameter)> $values
     * @return Ds\Vector<TValue (class Ds\Vector, parameter)|TValue2 (method Ds\Vector::merge(), parameter)>
     */
    function merge(mixed $values): Ds\Vector
-----
METHOD Ds\Vector::pop
-----
Has side-effects: Maybe
Throw type: UnderflowException
Visibility: public
Variants: 1
    /**
     * @return TValue (class Ds\Vector, parameter)
     */
    function pop(): mixed
-----
METHOD Ds\Vector::push
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param TValue (class Ds\Vector, parameter) $values
     * @return void
     */
    function push(mixed ...$values): void
-----
METHOD Ds\Vector::reduce
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param callable(TCarry, TValue): TCarry $callback
     * @param TCarry (method Ds\Sequence::reduce(), parameter) $initial
     * @return TCarry (method Ds\Sequence::reduce(), parameter)
     */
    function reduce(callable(): mixed $callback, mixed $initial = null): mixed
-----
METHOD Ds\Vector::remove
-----
Has side-effects: Maybe
Throw type: OutOfRangeException
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @return TValue (class Ds\Vector, parameter)
     */
    function remove(int $index): mixed
-----
METHOD Ds\Vector::reverse
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function reverse(): void
-----
METHOD Ds\Vector::reversed
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Ds\Vector<TValue (class Ds\Vector, parameter)>
     */
    function reversed(): Ds\Vector
-----
METHOD Ds\Vector::rotate
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $rotations
     * @return void
     */
    function rotate(int $rotations): void
-----
METHOD Ds\Vector::set
-----
Has side-effects: Yes
Throw type: OutOfRangeException
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @param TValue (class Ds\Vector, parameter) $value
     * @return void
     */
    function set(int $index, mixed $value): void
-----
METHOD Ds\Vector::shift
-----
Has side-effects: Maybe
Throw type: UnderflowException
Visibility: public
Variants: 1
    /**
     * @return TValue (class Ds\Vector, parameter)
     */
    function shift(): mixed
-----
METHOD Ds\Vector::slice
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @param int|null $length
     * @return Ds\Vector<TValue (class Ds\Vector, parameter)>
     */
    function slice(int $index, int|null $length = null): Ds\Vector
-----
METHOD Ds\Vector::sort
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param (callable(TValue, TValue): int)|null $comparator
     * @return void
     */
    function sort((callable(): mixed)|null $comparator = null): void
-----
METHOD Ds\Vector::sorted
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param (callable(TValue, TValue): int)|null $comparator
     * @return Ds\Vector<TValue (class Ds\Vector, parameter)>
     */
    function sorted((callable(): mixed)|null $comparator = null): Ds\Vector
-----
METHOD Ds\Vector::sum
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return float|int
     */
    function sum(): float
-----
METHOD Ds\Vector::toArray
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array<int, TValue (class Ds\Vector, parameter)>
     */
    function toArray(): array
-----
METHOD Ds\Vector::unshift
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param TValue (class Ds\Vector, parameter) $values
     * @return void
     */
    function unshift(mixed ...$values): void
-----
CLASS EmptyIterator
-----
class EmptyIterator implements Iterator
{
}
-----
METHOD EmptyIterator::current
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return never
     */
    function current(): mixed
-----
METHOD EmptyIterator::key
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return never
     */
    function key(): mixed
-----
METHOD EmptyIterator::next
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): mixed
-----
METHOD EmptyIterator::rewind
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): mixed
-----
METHOD EmptyIterator::valid
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return false
     */
    function valid(): mixed
-----
CLASS Error
-----
class Error implements Throwable
{
}
-----
METHOD Error::__clone
-----
Has side-effects: Yes
Visibility: private
Variants: 1
    /**
     * @return void
     */
    function __clone(): void
-----
METHOD Error::__construct
-----
Visibility: public
Variants: 1
    /**
     * @param string $message
     * @param int $code
     * @param Throwable|null $previous
     * @return void
     */
    function __construct(string $message = '', int $code = 0, Throwable|null $previous = null): mixed
-----
METHOD Error::__toString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): string
-----
METHOD Error::getCode
-----
Is final: Yes
Has side-effects: Maybe
Throw type: void
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function getCode(): mixed
-----
METHOD Error::getFile
-----
Is final: Yes
Has side-effects: Maybe
Throw type: void
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getFile(): string
-----
METHOD Error::getLine
-----
Is final: Yes
Has side-effects: Maybe
Throw type: void
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getLine(): int
-----
METHOD Error::getMessage
-----
Is final: Yes
Has side-effects: Maybe
Throw type: void
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getMessage(): string
-----
METHOD Error::getPrevious
-----
Is final: Yes
Has side-effects: Maybe
Throw type: void
Visibility: public
Variants: 1
    /**
     * @return Throwable|null
     */
    function getPrevious(): Throwable|null
-----
METHOD Error::getTrace
-----
Is final: Yes
Has side-effects: Maybe
Throw type: void
Visibility: public
Variants: 1
    /**
     * @return array<int, array{function: string, line?: int, file?: string, class?: class-string, type?: '->'|'::', args?: array, object?: object}>
     */
    function getTrace(): array
-----
METHOD Error::getTraceAsString
-----
Is final: Yes
Has side-effects: Maybe
Throw type: void
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getTraceAsString(): string
-----
CLASS ErrorException
-----
class ErrorException extends Exception
{
}
-----
METHOD ErrorException::__construct
-----
Visibility: public
Variants: 1
    /**
     * @param string $message
     * @param int $code
     * @param int $severity
     * @param string|null $filename
     * @param int|null $line
     * @param Throwable|null $previous
     * @return void
     */
    function __construct(string $message = '', int $code = 0, int $severity = 1, string|null $filename = null, int|null $line = null, Throwable|null $previous = null): mixed
-----
METHOD ErrorException::getSeverity
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getSeverity(): int
-----
CLASS Ev
-----
final class Ev
{
}
-----
METHOD Ev::backend
-----
Is final: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function backend(): mixed
-----
METHOD Ev::depth
-----
Is final: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function depth(): mixed
-----
METHOD Ev::embeddableBackends
-----
Is final: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function embeddableBackends(): mixed
-----
METHOD Ev::feedSignal
-----
Is final: Yes
Has side-effects: Yes
Static
Visibility: public
Variants: 1
    /**
     * @param int $signum
     * @return void
     */
    function feedSignal(int $signum): mixed
-----
METHOD Ev::feedSignalEvent
-----
Is final: Yes
Has side-effects: Yes
Static
Visibility: public
Variants: 1
    /**
     * @param int $signum
     * @return void
     */
    function feedSignalEvent(int $signum): mixed
-----
METHOD Ev::iteration
-----
Is final: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function iteration(): mixed
-----
METHOD Ev::now
-----
Is final: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return float
     */
    function now(): mixed
-----
METHOD Ev::nowUpdate
-----
Is final: Yes
Has side-effects: Yes
Static
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function nowUpdate(): mixed
-----
METHOD Ev::recommendedBackends
-----
Is final: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function recommendedBackends(): mixed
-----
METHOD Ev::resume
-----
Is final: Yes
Has side-effects: Yes
Static
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function resume(): mixed
-----
METHOD Ev::run
-----
Is final: Yes
Has side-effects: Yes
Static
Visibility: public
Variants: 1
    /**
     * @param int $flags
     * @return void
     */
    function run(int $flags = 0): mixed
-----
METHOD Ev::sleep
-----
Is final: Yes
Has side-effects: Yes
Static
Visibility: public
Variants: 1
    /**
     * @param float $seconds
     * @return void
     */
    function sleep(float $seconds): mixed
-----
METHOD Ev::stop
-----
Is final: Yes
Has side-effects: Yes
Static
Visibility: public
Variants: 1
    /**
     * @param int $how
     * @return void
     */
    function stop(int $how = 1): mixed
-----
METHOD Ev::supportedBackends
-----
Is final: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function supportedBackends(): mixed
-----
METHOD Ev::suspend
-----
Is final: Yes
Has side-effects: Yes
Static
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function suspend(): mixed
-----
METHOD Ev::time
-----
Is final: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return float
     */
    function time(): mixed
-----
METHOD Ev::verify
-----
Is final: Yes
Has side-effects: Yes
Static
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function verify(): mixed
-----
CLASS EvCheck
-----
final class EvCheck extends EvWatcher
{
}
-----
METHOD EvCheck::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @param mixed $data
     * @param int $priority
     * @return void
     */
    function __construct(mixed $callback, mixed $data = null, mixed $priority = 0): mixed
-----
METHOD EvCheck::createStopped
-----
Is final: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $callback
     * @param string $data
     * @param string $priority
     * @return object
     */
    function createStopped(mixed $callback, mixed $data = null, int $priority = 0): mixed
-----
CLASS EvChild
-----
final class EvChild extends EvWatcher
{
}
-----
METHOD EvChild::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $pid
     * @param bool $trace
     * @param callable(): mixed $callback
     * @param mixed $data
     * @param int $priority
     * @return void
     */
    function __construct(mixed $pid, mixed $trace, mixed $callback, mixed $data = null, mixed $priority = 0): mixed
-----
METHOD EvChild::createStopped
-----
Is final: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int $pid
     * @param bool $trace
     * @param callable(): mixed $callback
     * @param mixed $data
     * @param int $priority
     * @return object
     */
    function createStopped(int $pid, bool $trace, mixed $callback, mixed $data = null, int $priority = 0): mixed
-----
METHOD EvChild::set
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $pid
     * @param bool $trace
     * @return void
     */
    function set(mixed $pid, mixed $trace): mixed
-----
CLASS EvEmbed
-----
final class EvEmbed extends EvWatcher
{
}
-----
METHOD EvEmbed::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param object $other
     * @param callable(): mixed $callback
     * @param mixed $data
     * @param int $priority
     * @return void
     */
    function __construct(EvLoop $other, mixed $callback, mixed $data = null, mixed $priority = 0): mixed
-----
METHOD EvEmbed::createStopped
-----
Is final: Yes
Has side-effects: Yes
Static
Visibility: public
Variants: 1
    /**
     * @param object $other
     * @param callable(): mixed $callback
     * @param mixed $data
     * @param int $priority
     * @return void
     */
    function createStopped(EvLoop $other, mixed $callback, mixed $data = null, int $priority = 0): mixed
-----
METHOD EvEmbed::set
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param object $other
     * @return void
     */
    function set(EvLoop $other): mixed
-----
METHOD EvEmbed::sweep
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function sweep(): mixed
-----
CLASS EvFork
-----
final class EvFork extends EvWatcher
{
}
-----
METHOD EvFork::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $loop
     * @param mixed $callback
     * @param int $data
     * @return void
     */
    function __construct(EvLoop $loop, mixed $callback, mixed $data = null): mixed
-----
METHOD EvFork::createStopped
-----
Is final: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $loop
     * @param string $callback
     * @param string $data
     * @return object
     */
    function createStopped(EvLoop $loop, mixed $callback, mixed $data = null): mixed
-----
CLASS EvIdle
-----
final class EvIdle extends EvWatcher
{
}
-----
METHOD EvIdle::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @param mixed $data
     * @param int $priority
     * @return void
     */
    function __construct(mixed $callback, mixed $data = null, int $priority = 0): mixed
-----
METHOD EvIdle::createStopped
-----
Is final: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $callback
     * @param mixed $data
     * @param int $priority
     * @return object
     */
    function createStopped(mixed $callback, mixed $data = null, int $priority = 0): mixed
-----
CLASS EvIo
-----
final class EvIo extends EvWatcher
{
}
-----
METHOD EvIo::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $fd
     * @param int $events
     * @param callable(): mixed $callback
     * @param mixed $data
     * @param int $priority
     * @return void
     */
    function __construct(mixed $fd, mixed $events, mixed $callback, mixed $data = null, mixed $priority = 0): mixed
-----
METHOD EvIo::createStopped
-----
Is final: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param mixed $fd
     * @param int $events
     * @param callable(): mixed $callback
     * @param mixed $data
     * @param int $priority
     * @return EvIo
     */
    function createStopped(mixed $fd, int $events, mixed $callback, mixed $data = null, int $priority = 0): mixed
-----
METHOD EvIo::set
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param mixed $fd
     * @param int $events
     * @return void
     */
    function set(mixed $fd, mixed $events): mixed
-----
CLASS EvLoop
-----
final class EvLoop
{
}
-----
METHOD EvLoop::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $flags
     * @param mixed $data
     * @param float $io_interval
     * @param float $timeout_interval
     * @return void
     */
    function __construct(int $flags = 0, mixed $data = null, float $io_interval = 0.0, float $timeout_interval = 0.0): mixed
-----
METHOD EvLoop::backend
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function backend(): mixed
-----
METHOD EvLoop::check
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $callback
     * @param string $data
     * @param string $priority
     * @return EvCheck
     */
    function check(callable(): mixed $callback, mixed $data = null, mixed $priority = 0): mixed
-----
METHOD EvLoop::child
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $pid
     * @param string $trace
     * @param string $callback
     * @param string $data
     * @param string $priority
     * @return EvChild
     */
    function child(int $pid, bool $trace, mixed $callback, mixed $data = null, int $priority = 0): mixed
-----
METHOD EvLoop::defaultLoop
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int $flags
     * @param mixed $data
     * @param float $io_interval
     * @param float $timeout_interval
     * @return EvLoop
     */
    function defaultLoop(int $flags = 0, mixed $data = null, float $io_interval = 0.0, float $timeout_interval = 0.0): mixed
-----
METHOD EvLoop::embed
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $other
     * @param string $callback
     * @param string $data
     * @param string $priority
     * @return EvEmbed
     */
    function embed(EvLoop $other, callable(): mixed $callback, mixed $data = null, mixed $priority = 0): mixed
-----
METHOD EvLoop::fork
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @param mixed $data
     * @param int $priority
     * @return EvFork
     */
    function fork(callable(): mixed $callback, mixed $data = null, mixed $priority = 0): mixed
-----
METHOD EvLoop::idle
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @param mixed $data
     * @param int $priority
     * @return EvIdle
     */
    function idle(mixed $callback, mixed $data = null, int $priority = 0): mixed
-----
METHOD EvLoop::invokePending
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function invokePending(): mixed
-----
METHOD EvLoop::io
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $fd
     * @param int $events
     * @param callable(): mixed $callback
     * @param mixed $data
     * @param int $priority
     * @return EvIo
     */
    function io(mixed $fd, int $events, mixed $callback, mixed $data = null, int $priority = 0): mixed
-----
METHOD EvLoop::loopFork
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function loopFork(): mixed
-----
METHOD EvLoop::now
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return float
     */
    function now(): mixed
-----
METHOD EvLoop::nowUpdate
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function nowUpdate(): mixed
-----
METHOD EvLoop::periodic
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $offset
     * @param float $interval
     * @param callable(): mixed $reschedule_cb
     * @param mixed $callback
     * @param int $data
     * @return EvPeriodic
     */
    function periodic(float $offset, float $interval, mixed $reschedule_cb, mixed $callback, mixed $data = null): mixed
-----
METHOD EvLoop::prepare
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @param mixed $data
     * @param int $priority
     * @return EvPrepare
     */
    function prepare(callable(): mixed $callback, mixed $data = null, mixed $priority = 0): mixed
-----
METHOD EvLoop::resume
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function resume(): mixed
-----
METHOD EvLoop::run
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $flags
     * @return void
     */
    function run(int $flags = 0): mixed
-----
METHOD EvLoop::signal
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $signum
     * @param callable(): mixed $callback
     * @param mixed $data
     * @param int $priority
     * @return EvSignal
     */
    function signal(int $signum, mixed $callback, mixed $data = null, int $priority = 0): mixed
-----
METHOD EvLoop::stat
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $path
     * @param float $interval
     * @param callable(): mixed $callback
     * @param mixed $data
     * @param int $priority
     * @return EvStat
     */
    function stat(string $path, float $interval, mixed $callback, mixed $data = null, int $priority = 0): mixed
-----
METHOD EvLoop::stop
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $how
     * @return void
     */
    function stop(int $how = 2): mixed
-----
METHOD EvLoop::suspend
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function suspend(): mixed
-----
METHOD EvLoop::timer
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $after
     * @param float $repeat
     * @param callable(): mixed $callback
     * @param mixed $data
     * @param int $priority
     * @return EvTimer
     */
    function timer(float $after, float $repeat, mixed $callback, mixed $data = null, int $priority = 0): mixed
-----
METHOD EvLoop::verify
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function verify(): mixed
-----
CLASS EvPeriodic
-----
final class EvPeriodic extends EvWatcher
{
}
-----
METHOD EvPeriodic::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $offset
     * @param string $interval
     * @param callable(): mixed $reschedule_cb
     * @param callable(): mixed $callback
     * @param mixed $data
     * @param int $priority
     * @return void
     */
    function __construct(mixed $offset, mixed $interval, mixed $reschedule_cb, mixed $callback, mixed $data = null, mixed $priority = 0): mixed
-----
METHOD EvPeriodic::again
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function again(): mixed
-----
METHOD EvPeriodic::at
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return float
     */
    function at(): mixed
-----
METHOD EvPeriodic::createStopped
-----
Is final: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param float $offset
     * @param float $interval
     * @param callable(): mixed $reschedule_cb
     * @param callable(): mixed $callback
     * @param mixed $data
     * @param int $priority
     * @return EvPeriodic
     */
    function createStopped(float $offset, float $interval, mixed $reschedule_cb, mixed $callback, mixed $data = null, int $priority = 0): mixed
-----
METHOD EvPeriodic::set
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param float $offset
     * @param float $interval
     * @return void
     */
    function set(mixed $offset, mixed $interval): mixed
-----
CLASS EvPrepare
-----
final class EvPrepare extends EvWatcher
{
}
-----
METHOD EvPrepare::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $callback
     * @param string $data
     * @param string $priority
     * @return void
     */
    function __construct(mixed $callback, mixed $data = null, mixed $priority = 0): mixed
-----
METHOD EvPrepare::createStopped
-----
Is final: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @param mixed $data
     * @param int $priority
     * @return EvPrepare
     */
    function createStopped(mixed $callback, mixed $data = null, int $priority = 0): mixed
-----
CLASS EvSignal
-----
final class EvSignal extends EvWatcher
{
}
-----
METHOD EvSignal::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $signum
     * @param callable(): mixed $callback
     * @param mixed $data
     * @param int $priority
     * @return void
     */
    function __construct(mixed $signum, mixed $callback, mixed $data = null, mixed $priority = 0): mixed
-----
METHOD EvSignal::createStopped
-----
Is final: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int $signum
     * @param callable(): mixed $callback
     * @param mixed $data
     * @param int $priority
     * @return EvSignal
     */
    function createStopped(int $signum, mixed $callback, mixed $data = null, int $priority = 0): mixed
-----
METHOD EvSignal::set
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $signum
     * @return void
     */
    function set(mixed $signum): mixed
-----
CLASS EvStat
-----
final class EvStat extends EvWatcher
{
}
-----
METHOD EvStat::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $path
     * @param float $interval
     * @param callable(): mixed $callback
     * @param mixed $data
     * @param int $priority
     * @return void
     */
    function __construct(mixed $path, mixed $interval, mixed $callback, mixed $data = null, mixed $priority = 0): mixed
-----
METHOD EvStat::attr
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function attr(): mixed
-----
METHOD EvStat::createStopped
-----
Is final: Yes
Has side-effects: Yes
Static
Visibility: public
Variants: 1
    /**
     * @param string $path
     * @param float $interval
     * @param callable(): mixed $callback
     * @param mixed $data
     * @param int $priority
     * @return void
     */
    function createStopped(string $path, float $interval, mixed $callback, mixed $data = null, int $priority = 0): mixed
-----
METHOD EvStat::prev
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function prev(): mixed
-----
METHOD EvStat::set
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $path
     * @param float $interval
     * @return void
     */
    function set(mixed $path, mixed $interval): mixed
-----
METHOD EvStat::stat
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function stat(): mixed
-----
CLASS EvTimer
-----
final class EvTimer extends EvWatcher
{
}
-----
METHOD EvTimer::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $after
     * @param float $repeat
     * @param callable(): mixed $callback
     * @param mixed $data
     * @param int $priority
     * @return void
     */
    function __construct(mixed $after, mixed $repeat, mixed $callback, mixed $data = null, mixed $priority = 0): mixed
-----
METHOD EvTimer::again
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function again(): mixed
-----
METHOD EvTimer::createStopped
-----
Is final: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param float $after
     * @param float $repeat
     * @param callable(): mixed $callback
     * @param mixed $data
     * @param int $priority
     * @return EvTimer
     */
    function createStopped(float $after, float $repeat, mixed $callback, mixed $data = null, int $priority = 0): mixed
-----
METHOD EvTimer::set
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param float $after
     * @param float $repeat
     * @return void
     */
    function set(mixed $after, mixed $repeat): mixed
-----
CLASS EvWatcher
-----
abstract class EvWatcher
{
}
-----
METHOD EvWatcher::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD EvWatcher::clear
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function clear(): mixed
-----
METHOD EvWatcher::feed
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $revents
     * @return void
     */
    function feed(mixed $revents): mixed
-----
METHOD EvWatcher::getLoop
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return EvLoop
     */
    function getLoop(): mixed
-----
METHOD EvWatcher::invoke
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $revents
     * @return void
     */
    function invoke(mixed $revents): mixed
-----
METHOD EvWatcher::keepalive
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $value
     * @return bool
     */
    function keepalive(mixed $value = true): mixed
-----
METHOD EvWatcher::setCallback
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @return void
     */
    function setCallback(mixed $callback): mixed
-----
METHOD EvWatcher::start
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function start(): mixed
-----
METHOD EvWatcher::stop
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function stop(): mixed
-----
CLASS Event
-----
final class Event
{
}
-----
METHOD Event::__construct
-----
Visibility: public
Variants: 1
    /**
     * @param EventBase $base
     * @param mixed $fd
     * @param int $what
     * @param callable(): mixed $cb
     * @param mixed $arg
     * @return void
     */
    function __construct(EventBase $base, mixed $fd, int $what, callable(): mixed $cb, mixed $arg = null): mixed
-----
METHOD Event::add
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $timeout
     * @return bool
     */
    function add(float $timeout = -1): bool
-----
METHOD Event::addSignal
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $timeout
     * @return bool
     */
    function addSignal(float $timeout = -1): bool
-----
METHOD Event::addTimer
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $timeout
     * @return bool
     */
    function addTimer(float $timeout = -1): bool
-----
METHOD Event::del
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function del(): bool
-----
METHOD Event::delSignal
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function delSignal(): bool
-----
METHOD Event::delTimer
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function delTimer(): bool
-----
METHOD Event::free
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function free(): void
-----
METHOD Event::getSupportedMethods
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getSupportedMethods(): array
-----
METHOD Event::pending
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $flags
     * @return bool
     */
    function pending(int $flags): bool
-----
METHOD Event::set
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param EventBase $base
     * @param mixed $fd
     * @param int $what
     * @param callable(): mixed $cb
     * @param mixed $arg
     * @return bool
     */
    function set(EventBase $base, mixed $fd, int $what, callable(): mixed $cb, mixed $arg): bool
-----
METHOD Event::setPriority
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $priority
     * @return bool
     */
    function setPriority(int $priority): bool
-----
METHOD Event::setTimer
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param EventBase $base
     * @param callable(): mixed $cb
     * @param mixed $arg
     * @return bool
     */
    function setTimer(EventBase $base, callable(): mixed $cb, mixed $arg): bool
-----
METHOD Event::signal
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param EventBase $base
     * @param int $signum
     * @param callable(): mixed $cb
     * @param mixed $arg
     * @return Event
     */
    function signal(EventBase $base, int $signum, callable(): mixed $cb, mixed $arg): Event
-----
METHOD Event::timer
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param EventBase $base
     * @param callable(): mixed $cb
     * @param mixed $arg
     * @return Event
     */
    function timer(EventBase $base, callable(): mixed $cb, mixed $arg): Event
-----
CLASS EventBase
-----
final class EventBase
{
}
-----
METHOD EventBase::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param EventConfig $cfg
     * @return void
     */
    function __construct(EventConfig|null $cfg = null): mixed
-----
METHOD EventBase::dispatch
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function dispatch(): void
-----
METHOD EventBase::exit
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $timeout
     * @return bool
     */
    function exit(float $timeout = 0.0): bool
-----
METHOD EventBase::free
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function free(): void
-----
METHOD EventBase::getFeatures
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getFeatures(): int
-----
METHOD EventBase::getMethod
-----
Visibility: public
Variants: 1
    /**
     * @param EventConfig $cfg
     * @return string
     */
    function getMethod(mixed $cfg): string
-----
METHOD EventBase::getTimeOfDayCached
-----
Visibility: public
Variants: 1
    /**
     * @return float
     */
    function getTimeOfDayCached(): float
-----
METHOD EventBase::gotExit
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function gotExit(): bool
-----
METHOD EventBase::gotStop
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function gotStop(): bool
-----
METHOD EventBase::loop
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $flags
     * @return bool
     */
    function loop(int $flags = -1): bool
-----
METHOD EventBase::priorityInit
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $n_priorities
     * @return bool
     */
    function priorityInit(int $n_priorities): bool
-----
METHOD EventBase::reInit
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function reInit(): bool
-----
METHOD EventBase::stop
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function stop(): bool
-----
CLASS EventBuffer
-----
class EventBuffer
{
}
-----
METHOD EventBuffer::__construct
-----
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD EventBuffer::add
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return bool
     */
    function add(string $data): bool
-----
METHOD EventBuffer::addBuffer
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param EventBuffer $buf
     * @return bool
     */
    function addBuffer(EventBuffer $buf): bool
-----
METHOD EventBuffer::appendFrom
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param EventBuffer $buf
     * @param int $len
     * @return int
     */
    function appendFrom(EventBuffer $buf, int $len): int
-----
METHOD EventBuffer::copyout
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @param int $max_bytes
     * @return int
     */
    function copyout(string &rw$data, int $max_bytes): int
-----
METHOD EventBuffer::drain
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $len
     * @return bool
     */
    function drain(int $len): bool
-----
METHOD EventBuffer::enableLocking
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function enableLocking(): void
-----
METHOD EventBuffer::expand
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $len
     * @return bool
     */
    function expand(int $len): bool
-----
METHOD EventBuffer::freeze
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $at_front
     * @return bool
     */
    function freeze(bool $at_front): bool
-----
METHOD EventBuffer::lock
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function lock(): void
-----
METHOD EventBuffer::prepend
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return bool
     */
    function prepend(string $data): bool
-----
METHOD EventBuffer::prependBuffer
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param EventBuffer $buf
     * @return bool
     */
    function prependBuffer(EventBuffer $buf): bool
-----
METHOD EventBuffer::pullup
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $size
     * @return string
     */
    function pullup(int $size): string|null
-----
METHOD EventBuffer::read
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $max_bytes
     * @return string
     */
    function read(int $max_bytes): string|null
-----
METHOD EventBuffer::readFrom
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $fd
     * @param int $howmuch
     * @return int
     */
    function readFrom(mixed $fd, int $howmuch): int
-----
METHOD EventBuffer::readLine
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $eol_style
     * @return string
     */
    function readLine(int $eol_style): string|null
-----
METHOD EventBuffer::search
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $what
     * @param int $start
     * @param int $end
     * @return mixed
     */
    function search(string $what, int $start = 1, int $end = 1): int|false
-----
METHOD EventBuffer::searchEol
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $start
     * @param int $eol_style
     * @return mixed
     */
    function searchEol(int $start = 1, int $eol_style = 0): int|false
-----
METHOD EventBuffer::substr
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $start
     * @param int $length
     * @return string
     */
    function substr(int $start, int $length): string
-----
METHOD EventBuffer::unfreeze
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $at_front
     * @return bool
     */
    function unfreeze(bool $at_front): bool
-----
METHOD EventBuffer::unlock
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function unlock(): void
-----
METHOD EventBuffer::write
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $fd
     * @param int $howmuch
     * @return int
     */
    function write(mixed $fd, int $howmuch): int|false
-----
CLASS EventBufferEvent
-----
final class EventBufferEvent
{
}
-----
METHOD EventBufferEvent::__construct
-----
Visibility: public
Variants: 1
    /**
     * @param EventBase $base
     * @param mixed $socket
     * @param int $options
     * @param callable(): mixed $readcb
     * @param callable(): mixed $writecb
     * @param callable(): mixed $eventcb
     * @return void
     */
    function __construct(EventBase $base, mixed $socket = null, int $options = 0, (callable(): mixed)|null $readcb = null, (callable(): mixed)|null $writecb = null, (callable(): mixed)|null $eventcb = null): mixed
-----
METHOD EventBufferEvent::close
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function close(): bool
-----
METHOD EventBufferEvent::connect
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $addr
     * @return bool
     */
    function connect(string $addr): bool
-----
METHOD EventBufferEvent::connectHost
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param EventDnsBase $dns_base
     * @param string $hostname
     * @param int $port
     * @param int $family
     * @return bool
     */
    function connectHost(EventDnsBase|null $dns_base, string $hostname, int $port, int $family = 0): bool
-----
METHOD EventBufferEvent::createPair
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param EventBase $base
     * @param int $options
     * @return array
     */
    function createPair(EventBase $base, int $options = 0): array
-----
METHOD EventBufferEvent::disable
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $events
     * @return bool
     */
    function disable(int $events): bool
-----
METHOD EventBufferEvent::enable
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $events
     * @return bool
     */
    function enable(int $events): bool
-----
METHOD EventBufferEvent::free
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function free(): void
-----
METHOD EventBufferEvent::getDnsErrorString
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getDnsErrorString(): string
-----
METHOD EventBufferEvent::getEnabled
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getEnabled(): int
-----
METHOD EventBufferEvent::getInput
-----
Visibility: public
Variants: 1
    /**
     * @return EventBuffer
     */
    function getInput(): EventBuffer
-----
METHOD EventBufferEvent::getOutput
-----
Visibility: public
Variants: 1
    /**
     * @return EventBuffer
     */
    function getOutput(): EventBuffer
-----
METHOD EventBufferEvent::read
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $size
     * @return string
     */
    function read(int $size): string|null
-----
METHOD EventBufferEvent::readBuffer
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param EventBuffer $buf
     * @return bool
     */
    function readBuffer(EventBuffer $buf): bool
-----
METHOD EventBufferEvent::setCallbacks
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $readcb
     * @param callable(): mixed $writecb
     * @param callable(): mixed $eventcb
     * @param string $arg
     * @return void
     */
    function setCallbacks(callable(): mixed $readcb, callable(): mixed $writecb, callable(): mixed $eventcb, mixed $arg = null): void
-----
METHOD EventBufferEvent::setPriority
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $priority
     * @return bool
     */
    function setPriority(int $priority): bool
-----
METHOD EventBufferEvent::setTimeouts
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $timeout_read
     * @param float $timeout_write
     * @return bool
     */
    function setTimeouts(float $timeout_read, float $timeout_write): bool
-----
METHOD EventBufferEvent::setWatermark
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $events
     * @param int $lowmark
     * @param int $highmark
     * @return void
     */
    function setWatermark(int $events, int $lowmark, int $highmark): void
-----
METHOD EventBufferEvent::sslError
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function sslError(): string|false
-----
METHOD EventBufferEvent::sslFilter
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param EventBase $base
     * @param EventBufferEvent $underlying
     * @param EventSslContext $ctx
     * @param int $state
     * @param int $options
     * @return EventBufferEvent
     */
    function sslFilter(EventBase $base, EventBufferEvent $underlying, EventSslContext $ctx, int $state, int $options = 0): EventBufferEvent
-----
METHOD EventBufferEvent::sslGetCipherInfo
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function sslGetCipherInfo(): string|false
-----
METHOD EventBufferEvent::sslGetCipherName
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function sslGetCipherName(): string|false
-----
METHOD EventBufferEvent::sslGetCipherVersion
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function sslGetCipherVersion(): string|false
-----
METHOD EventBufferEvent::sslGetProtocol
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function sslGetProtocol(): string
-----
METHOD EventBufferEvent::sslRenegotiate
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function sslRenegotiate(): void
-----
METHOD EventBufferEvent::sslSocket
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param EventBase $base
     * @param mixed $socket
     * @param EventSslContext $ctx
     * @param int $state
     * @param int $options
     * @return EventBufferEvent
     */
    function sslSocket(EventBase $base, mixed $socket, EventSslContext $ctx, int $state, int $options = 0): EventBufferEvent
-----
METHOD EventBufferEvent::write
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return bool
     */
    function write(string $data): bool
-----
METHOD EventBufferEvent::writeBuffer
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param EventBuffer $buf
     * @return bool
     */
    function writeBuffer(EventBuffer $buf): bool
-----
CLASS EventConfig
-----
final class EventConfig
{
}
-----
METHOD EventConfig::__construct
-----
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD EventConfig::avoidMethod
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $method
     * @return bool
     */
    function avoidMethod(string $method): bool
-----
METHOD EventConfig::requireFeatures
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $feature
     * @return bool
     */
    function requireFeatures(int $feature): bool
-----
METHOD EventConfig::setFlags
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $flags
     * @return bool
     */
    function setFlags(int $flags): bool
-----
METHOD EventConfig::setMaxDispatchInterval
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $max_interval
     * @param int $max_callbacks
     * @param int $min_priority
     * @return void
     */
    function setMaxDispatchInterval(int $max_interval, int $max_callbacks, int $min_priority): void
-----
CLASS EventDnsBase
-----
final class EventDnsBase
{
}
-----
METHOD EventDnsBase::__construct
-----
Visibility: public
Variants: 1
    /**
     * @param EventBase $base
     * @param bool $initialize
     * @return void
     */
    function __construct(EventBase $base, bool $initialize): mixed
-----
METHOD EventDnsBase::addNameserverIp
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $ip
     * @return bool
     */
    function addNameserverIp(string $ip): bool
-----
METHOD EventDnsBase::addSearch
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $domain
     * @return void
     */
    function addSearch(string $domain): void
-----
METHOD EventDnsBase::clearSearch
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function clearSearch(): void
-----
METHOD EventDnsBase::countNameservers
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function countNameservers(): int
-----
METHOD EventDnsBase::loadHosts
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $hosts
     * @return bool
     */
    function loadHosts(string $hosts): bool
-----
METHOD EventDnsBase::parseResolvConf
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $flags
     * @param string $filename
     * @return bool
     */
    function parseResolvConf(int $flags, string $filename): bool
-----
METHOD EventDnsBase::setOption
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $option
     * @param string $value
     * @return bool
     */
    function setOption(string $option, string $value): bool
-----
METHOD EventDnsBase::setSearchNdots
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $ndots
     * @return bool
     */
    function setSearchNdots(int $ndots): void
-----
CLASS EventHttp
-----
final class EventHttp
{
}
-----
METHOD EventHttp::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param EventBase $base
     * @param EventSslContext $ctx
     * @return void
     */
    function __construct(EventBase $base, EventSslContext|null $ctx = null): mixed
-----
METHOD EventHttp::accept
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $socket
     * @return bool
     */
    function accept(mixed $socket): bool
-----
METHOD EventHttp::addServerAlias
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $alias
     * @return bool
     */
    function addServerAlias(string $alias): bool
-----
METHOD EventHttp::bind
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $address
     * @param int $port
     * @return void
     */
    function bind(string $address, int $port): bool
-----
METHOD EventHttp::removeServerAlias
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $alias
     * @return bool
     */
    function removeServerAlias(string $alias): bool
-----
METHOD EventHttp::setAllowedMethods
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $methods
     * @return void
     */
    function setAllowedMethods(int $methods): void
-----
METHOD EventHttp::setCallback
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $path
     * @param string $cb
     * @param string $arg
     * @return void
     */
    function setCallback(string $path, string $cb, string|null $arg = null): bool
-----
METHOD EventHttp::setDefaultCallback
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $cb
     * @param string $arg
     * @return void
     */
    function setDefaultCallback(string $cb, string|null $arg = null): void
-----
METHOD EventHttp::setMaxBodySize
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $value
     * @return void
     */
    function setMaxBodySize(int $value): void
-----
METHOD EventHttp::setMaxHeadersSize
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $value
     * @return void
     */
    function setMaxHeadersSize(int $value): void
-----
METHOD EventHttp::setTimeout
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $value
     * @return void
     */
    function setTimeout(int $value): void
-----
CLASS EventHttpConnection
-----
class EventHttpConnection
{
}
-----
METHOD EventHttpConnection::__construct
-----
Visibility: public
Variants: 1
    /**
     * @param EventBase $base
     * @param EventDnsBase $dns_base
     * @param string $address
     * @param int $port
     * @param EventSslContext $ctx
     * @return void
     */
    function __construct(EventBase $base, EventDnsBase $dns_base, string $address, int $port, EventSslContext|null $ctx = null): mixed
-----
METHOD EventHttpConnection::getBase
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return EventBase
     */
    function getBase(): EventBase|false
-----
METHOD EventHttpConnection::getPeer
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $address
     * @param int $port
     * @return void
     */
    function getPeer(string &rw$address, int &rw$port): void
-----
METHOD EventHttpConnection::makeRequest
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param EventHttpRequest $req
     * @param int $type
     * @param string $uri
     * @return bool
     */
    function makeRequest(EventHttpRequest $req, int $type, string $uri): bool
-----
METHOD EventHttpConnection::setCloseCallback
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return void
     */
    function setCloseCallback(callable(): mixed $callback, mixed $data = null): void
-----
METHOD EventHttpConnection::setLocalAddress
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $address
     * @return void
     */
    function setLocalAddress(string $address): void
-----
METHOD EventHttpConnection::setLocalPort
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $port
     * @return void
     */
    function setLocalPort(int $port): void
-----
METHOD EventHttpConnection::setMaxBodySize
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $max_size
     * @return void
     */
    function setMaxBodySize(string $max_size): void
-----
METHOD EventHttpConnection::setMaxHeadersSize
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $max_size
     * @return void
     */
    function setMaxHeadersSize(string $max_size): void
-----
METHOD EventHttpConnection::setRetries
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $retries
     * @return void
     */
    function setRetries(int $retries): void
-----
METHOD EventHttpConnection::setTimeout
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $timeout
     * @return void
     */
    function setTimeout(int $timeout): void
-----
CLASS EventHttpRequest
-----
class EventHttpRequest
{
}
-----
METHOD EventHttpRequest::__construct
-----
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @param mixed $data
     * @return void
     */
    function __construct(callable(): mixed $callback, mixed $data = null): mixed
-----
METHOD EventHttpRequest::addHeader
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @param string $value
     * @param int $type
     * @return bool
     */
    function addHeader(string $key, string $value, int $type): bool
-----
METHOD EventHttpRequest::cancel
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function cancel(): void
-----
METHOD EventHttpRequest::clearHeaders
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function clearHeaders(): void
-----
METHOD EventHttpRequest::closeConnection
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function closeConnection(): void
-----
METHOD EventHttpRequest::findHeader
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @param string $type
     * @return void
     */
    function findHeader(string $key, string $type): string|null
-----
METHOD EventHttpRequest::free
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function free(): mixed
-----
METHOD EventHttpRequest::getBufferEvent
-----
MISSING
-----
METHOD EventHttpRequest::getCommand
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function getCommand(): int
-----
METHOD EventHttpRequest::getConnection
-----
Visibility: public
Variants: 1
    /**
     * @return EventHttpConnection
     */
    function getConnection(): EventHttpConnection|null
-----
METHOD EventHttpRequest::getHost
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getHost(): string
-----
METHOD EventHttpRequest::getInputBuffer
-----
Visibility: public
Variants: 1
    /**
     * @return EventBuffer
     */
    function getInputBuffer(): EventBuffer
-----
METHOD EventHttpRequest::getInputHeaders
-----
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getInputHeaders(): array
-----
METHOD EventHttpRequest::getOutputBuffer
-----
Visibility: public
Variants: 1
    /**
     * @return EventBuffer
     */
    function getOutputBuffer(): EventBuffer
-----
METHOD EventHttpRequest::getOutputHeaders
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function getOutputHeaders(): array
-----
METHOD EventHttpRequest::getResponseCode
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getResponseCode(): int
-----
METHOD EventHttpRequest::getUri
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getUri(): string
-----
METHOD EventHttpRequest::removeHeader
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @param string $type
     * @return void
     */
    function removeHeader(string $key, int $type): bool
-----
METHOD EventHttpRequest::sendError
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $error
     * @param string $reason
     * @return void
     */
    function sendError(int $error, string|null $reason = null): mixed
-----
METHOD EventHttpRequest::sendReply
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $code
     * @param string $reason
     * @param EventBuffer $buf
     * @return void
     */
    function sendReply(int $code, string $reason, EventBuffer|null $buf = null): mixed
-----
METHOD EventHttpRequest::sendReplyChunk
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param EventBuffer $buf
     * @return void
     */
    function sendReplyChunk(EventBuffer $buf): mixed
-----
METHOD EventHttpRequest::sendReplyEnd
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function sendReplyEnd(): void
-----
METHOD EventHttpRequest::sendReplyStart
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $code
     * @param string $reason
     * @return void
     */
    function sendReplyStart(int $code, string $reason): void
-----
CLASS EventListener
-----
final class EventListener
{
}
-----
METHOD EventListener::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param EventBase $base
     * @param callable(): mixed $cb
     * @param mixed $data
     * @param int $flags
     * @param int $backlog
     * @param mixed $target
     * @return void
     */
    function __construct(EventBase $base, callable(): mixed $cb, mixed $data, int $flags, int $backlog, mixed $target): mixed
-----
METHOD EventListener::disable
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function disable(): bool
-----
METHOD EventListener::enable
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function enable(): bool
-----
METHOD EventListener::getBase
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function getBase(): void
-----
METHOD EventListener::getSocketName
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $address
     * @param mixed $port
     * @return bool
     */
    function getSocketName(string &rw$address, int &rw$port): bool
-----
METHOD EventListener::setCallback
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $cb
     * @param mixed $arg
     * @return void
     */
    function setCallback(callable(): mixed $cb, mixed $arg = null): void
-----
METHOD EventListener::setErrorCallback
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $cb
     * @return void
     */
    function setErrorCallback(string $cb): void
-----
CLASS EventSslContext
-----
final class EventSslContext
{
}
-----
METHOD EventSslContext::__construct
-----
Visibility: public
Variants: 1
    /**
     * @param string $method
     * @param string $options
     * @return void
     */
    function __construct(int $method, array $options): mixed
-----
CLASS EventUtil
-----
final class EventUtil
{
}
-----
METHOD EventUtil::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD EventUtil::getLastSocketErrno
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param mixed $socket
     * @return int
     */
    function getLastSocketErrno(mixed $socket = null): int|false
-----
METHOD EventUtil::getLastSocketError
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param mixed $socket
     * @return string
     */
    function getLastSocketError(mixed $socket): string|false
-----
METHOD EventUtil::getSocketFd
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param mixed $socket
     * @return int
     */
    function getSocketFd(mixed $socket): int
-----
METHOD EventUtil::getSocketName
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param mixed $socket
     * @param string $address
     * @param mixed $port
     * @return bool
     */
    function getSocketName(mixed $socket, string &rw$address, int &rw$port): bool
-----
METHOD EventUtil::setSocketOption
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param mixed $socket
     * @param int $level
     * @param int $optname
     * @param mixed $optval
     * @return bool
     */
    function setSocketOption(mixed $socket, int $level, int $optname, array|int $optval): bool
-----
METHOD EventUtil::sslRandPoll
-----
Has side-effects: Yes
Static
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function sslRandPoll(): bool
-----
CLASS Exception
-----
class Exception implements Throwable
{
}
-----
METHOD Exception::__clone
-----
Has side-effects: Yes
Visibility: private
Variants: 1
    /**
     * @return void
     */
    function __clone(): void
-----
METHOD Exception::__construct
-----
Visibility: public
Variants: 1
    /**
     * @param string $message
     * @param int $code
     * @param Throwable|null $previous
     * @return void
     */
    function __construct(string $message = '', int $code = 0, Throwable|null $previous = null): mixed
-----
METHOD Exception::__toString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): string
-----
METHOD Exception::getCode
-----
Is final: Yes
Throw type: void
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function getCode(): mixed
-----
METHOD Exception::getFile
-----
Is final: Yes
Throw type: void
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getFile(): string
-----
METHOD Exception::getLine
-----
Is final: Yes
Throw type: void
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getLine(): int
-----
METHOD Exception::getMessage
-----
Is final: Yes
Throw type: void
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getMessage(): string
-----
METHOD Exception::getPrevious
-----
Is final: Yes
Throw type: void
Visibility: public
Variants: 1
    /**
     * @return Throwable|null
     */
    function getPrevious(): Throwable|null
-----
METHOD Exception::getTrace
-----
Is final: Yes
Throw type: void
Visibility: public
Variants: 1
    /**
     * @return array<int, array{function: string, line?: int, file?: string, class?: class-string, type?: '->'|'::', args?: array, object?: object}>
     */
    function getTrace(): array
-----
METHOD Exception::getTraceAsString
-----
Is final: Yes
Throw type: void
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getTraceAsString(): string
-----
CLASS Executable
-----
MISSING
-----
CLASS ExecutionStatus
-----
MISSING
-----
CLASS Expression
-----
MISSING
-----
CLASS FANNConnection
-----
class FANNConnection
{
}
-----
METHOD FANNConnection::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $from_neuron
     * @param int $to_neuron
     * @param float $weight
     * @return void
     */
    function __construct(mixed $from_neuron, mixed $to_neuron, mixed $weight): mixed
-----
METHOD FANNConnection::getFromNeuron
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getFromNeuron(): mixed
-----
METHOD FANNConnection::getToNeuron
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getToNeuron(): mixed
-----
METHOD FANNConnection::getWeight
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function getWeight(): mixed
-----
METHOD FANNConnection::setWeight
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $weight
     * @return bool
     */
    function setWeight(mixed $weight): mixed
-----
CLASS FFI
-----
class FFI
{
}
-----
METHOD FFI::addr
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param FFI\CData $ptr
     * @return FFI\CData
     */
    function addr(FFI\CData $ptr): FFI\CData
-----
METHOD FFI::alignof
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param FFI\CData|FFI\CType $ptr
     * @return int
     */
    function alignof(FFI\CData|FFI\CType $ptr): int
-----
METHOD FFI::arrayType
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param FFI\CType $type
     * @param array<int, int> $dimensions
     * @return FFI\CType
     */
    function arrayType(FFI\CType $type, array $dimensions): FFI\CType
-----
METHOD FFI::cast
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param FFI\CType|string $type
     * @param bool|FFI\CData|float|int|null $ptr
     * @return FFI\CData|null
     */
    function cast(FFI\CType|string $type, mixed $ptr): FFI\CData|null
-----
METHOD FFI::cdef
-----
Has side-effects: Maybe
Throw type: FFI\ParserException
Static
Visibility: public
Variants: 1
    /**
     * @param string $code
     * @param string|null $lib
     * @return FFI
     */
    function cdef(string $code = '', string|null $lib = null): FFI
-----
METHOD FFI::free
-----
Has side-effects: Yes
Static
Visibility: public
Variants: 1
    /**
     * @param FFI\CData $ptr
     * @return void
     */
    function free(FFI\CData $ptr): void
-----
METHOD FFI::isNull
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param FFI\CData $ptr
     * @return bool
     */
    function isNull(FFI\CData $ptr): bool
-----
METHOD FFI::load
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @return FFI|null
     */
    function load(string $filename): FFI|null
-----
METHOD FFI::memcmp
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param FFI\CData|string $ptr1
     * @param FFI\CData|string $ptr2
     * @param int $size
     * @return int
     */
    function memcmp(mixed $ptr1, mixed $ptr2, int $size): int
-----
METHOD FFI::memcpy
-----
Has side-effects: Yes
Static
Visibility: public
Variants: 1
    /**
     * @param FFI\CData $to
     * @param FFI\CData|string $from
     * @param int $size
     * @return void
     */
    function memcpy(FFI\CData $to, mixed $from, int $size): void
-----
METHOD FFI::memset
-----
Has side-effects: Yes
Static
Visibility: public
Variants: 1
    /**
     * @param FFI\CData $ptr
     * @param int $value
     * @param int $size
     * @return void
     */
    function memset(FFI\CData $ptr, int $value, int $size): void
-----
METHOD FFI::new
-----
Has side-effects: Maybe
Throw type: FFI\ParserException
Static
Visibility: public
Variants: 1
    /**
     * @param FFI\CType|string $type
     * @param bool $owned
     * @param bool $persistent
     * @return FFI\CData|null
     */
    function new(FFI\CType|string $type, bool $owned = true, bool $persistent = false): FFI\CData|null
-----
METHOD FFI::scope
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return FFI
     */
    function scope(string $name): FFI
-----
METHOD FFI::sizeof
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param FFI\CData|FFI\CType $ptr
     * @return int
     */
    function sizeof(FFI\CData|FFI\CType $ptr): int
-----
METHOD FFI::string
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param FFI\CData $ptr
     * @param int|null $size
     * @return string
     */
    function string(FFI\CData $ptr, int|null $size = null): string
-----
METHOD FFI::type
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $type
     * @return FFI\CType|null
     */
    function type(string $type): FFI\CType|null
-----
METHOD FFI::typeof
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param FFI\CData $ptr
     * @return FFI\CType
     */
    function typeof(FFI\CData $ptr): FFI\CType
-----
CLASS FFI\CType
-----
class FFI\CType
{
}
-----
METHOD FFI\CType::getAlignment
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getAlignment(): int
-----
METHOD FFI\CType::getArrayElementType
-----
Has side-effects: Maybe
Throw type: FFI\Exception
Visibility: public
Variants: 1
    /**
     * @return FFI\CType
     */
    function getArrayElementType(): FFI\CType
-----
METHOD FFI\CType::getArrayLength
-----
Has side-effects: Maybe
Throw type: FFI\Exception
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getArrayLength(): int
-----
METHOD FFI\CType::getAttributes
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getAttributes(): int
-----
METHOD FFI\CType::getEnumKind
-----
Has side-effects: Maybe
Throw type: FFI\Exception
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getEnumKind(): int
-----
METHOD FFI\CType::getFuncABI
-----
Has side-effects: Maybe
Throw type: FFI\Exception
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getFuncABI(): int
-----
METHOD FFI\CType::getFuncParameterCount
-----
Has side-effects: Maybe
Throw type: FFI\Exception
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getFuncParameterCount(): int
-----
METHOD FFI\CType::getFuncParameterType
-----
Has side-effects: Maybe
Throw type: FFI\Exception
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @return FFI\CType
     */
    function getFuncParameterType(int $index): FFI\CType
-----
METHOD FFI\CType::getFuncReturnType
-----
Has side-effects: Maybe
Throw type: FFI\Exception
Visibility: public
Variants: 1
    /**
     * @return FFI\CType
     */
    function getFuncReturnType(): FFI\CType
-----
METHOD FFI\CType::getKind
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getKind(): int
-----
METHOD FFI\CType::getName
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getName(): string
-----
METHOD FFI\CType::getPointerType
-----
Has side-effects: Maybe
Throw type: FFI\Exception
Visibility: public
Variants: 1
    /**
     * @return FFI\CType
     */
    function getPointerType(): FFI\CType
-----
METHOD FFI\CType::getSize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getSize(): int
-----
METHOD FFI\CType::getStructFieldNames
-----
Has side-effects: Maybe
Throw type: FFI\Exception
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getStructFieldNames(): array
-----
METHOD FFI\CType::getStructFieldOffset
-----
Has side-effects: Maybe
Throw type: FFI\Exception
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return int
     */
    function getStructFieldOffset(string $name): int
-----
METHOD FFI\CType::getStructFieldType
-----
Has side-effects: Maybe
Throw type: FFI\Exception
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return FFI\CType
     */
    function getStructFieldType(string $name): FFI\CType
-----
CLASS Fiber
-----
final class Fiber
{
}
-----
METHOD Fiber::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @return mixed
     */
    function __construct(callable(): mixed $callback): mixed
-----
METHOD Fiber::getCurrent
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return Fiber|null
     */
    function getCurrent(): Fiber|null
-----
METHOD Fiber::getReturn
-----
Has side-effects: Maybe
Throw type: FiberError
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function getReturn(): mixed
-----
METHOD Fiber::isRunning
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isRunning(): bool
-----
METHOD Fiber::isStarted
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isStarted(): bool
-----
METHOD Fiber::isSuspended
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isSuspended(): bool
-----
METHOD Fiber::isTerminated
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isTerminated(): bool
-----
METHOD Fiber::resume
-----
Has side-effects: Maybe
Throw type: Throwable
Visibility: public
Variants: 1
    /**
     * @param mixed $value
     * @return mixed
     */
    function resume(mixed $value = null): mixed
-----
METHOD Fiber::start
-----
Has side-effects: Maybe
Throw type: Throwable
Visibility: public
Variants: 1
    /**
     * @param mixed $args
     * @return mixed
     */
    function start(mixed ...$args): mixed
-----
METHOD Fiber::suspend
-----
Has side-effects: Maybe
Throw type: Throwable
Static
Visibility: public
Variants: 1
    /**
     * @param mixed $value
     * @return mixed
     */
    function suspend(mixed $value = null): mixed
-----
METHOD Fiber::throw
-----
Has side-effects: Maybe
Throw type: Throwable
Visibility: public
Variants: 1
    /**
     * @param Throwable $exception
     * @return mixed
     */
    function throw(Throwable $exception): mixed
-----
CLASS FiberError
-----
final class FiberError extends Error
{
}
-----
METHOD FiberError::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function __construct(): mixed
-----
CLASS FilesystemIterator
-----
class FilesystemIterator extends DirectoryIterator
{
}
-----
METHOD FilesystemIterator::__construct
-----
Has side-effects: Maybe
Throw type: UnexpectedValueException
Visibility: public
Variants: 1
    /**
     * @param string $directory
     * @param int $flags
     * @return void
     */
    function __construct(string $directory, int $flags = 4096): mixed
-----
METHOD FilesystemIterator::current
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return SplFileInfo|string
     */
    function current(): mixed
-----
METHOD FilesystemIterator::getFlags
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getFlags(): mixed
-----
METHOD FilesystemIterator::key
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function key(): mixed
-----
METHOD FilesystemIterator::next
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): mixed
-----
METHOD FilesystemIterator::rewind
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): mixed
-----
METHOD FilesystemIterator::setFlags
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $flags
     * @return void
     */
    function setFlags(int $flags): mixed
-----
CLASS FilterIterator
-----
abstract class FilterIterator extends IteratorIterator
{
}
-----
METHOD FilterIterator::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TIterator of Traversable<TKey (class FilterIterator, parameter), TValue (class FilterIterator, parameter)> (class FilterIterator, parameter) $iterator
     * @return void
     */
    function __construct(Iterator $iterator): mixed
-----
METHOD FilterIterator::accept
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function accept(): mixed
-----
METHOD FilterIterator::current
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return TValue (class FilterIterator, parameter)
     */
    function current(): mixed
-----
METHOD FilterIterator::key
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return TKey (class FilterIterator, parameter)
     */
    function key(): mixed
-----
METHOD FilterIterator::next
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): mixed
-----
METHOD FilterIterator::rewind
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): mixed
-----
METHOD FilterIterator::valid
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function valid(): bool
-----
CLASS GMP
-----
class GMP implements Serializable
{
}
-----
METHOD GMP::__serialize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function __serialize(): array
-----
METHOD GMP::__unserialize
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param array $data
     * @return void
     */
    function __unserialize(array $data): void
-----
CLASS GearmanClient
-----
class GearmanClient
{
}
-----
METHOD GearmanClient::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD GearmanClient::addOptions
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $options
     * @return bool
     */
    function addOptions(mixed $options): mixed
-----
METHOD GearmanClient::addServer
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $host
     * @param int $port
     * @return bool
     */
    function addServer(mixed $host = '127.0.0.1', mixed $port = 4730): mixed
-----
METHOD GearmanClient::addServers
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $servers
     * @return bool
     */
    function addServers(mixed $servers = '127.0.0.1:4730'): mixed
-----
METHOD GearmanClient::addTask
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $function_name
     * @param string $workload
     * @param mixed $context
     * @param string $unique
     * @return GearmanTask
     */
    function addTask(mixed $function_name, mixed $workload, mixed $context = null, mixed $unique = null): mixed
-----
METHOD GearmanClient::addTaskBackground
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $function_name
     * @param string $workload
     * @param mixed $context
     * @param string $unique
     * @return GearmanTask
     */
    function addTaskBackground(mixed $function_name, mixed $workload, mixed $context = null, mixed $unique = null): mixed
-----
METHOD GearmanClient::addTaskHigh
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $function_name
     * @param string $workload
     * @param mixed $context
     * @param string $unique
     * @return GearmanTask
     */
    function addTaskHigh(mixed $function_name, mixed $workload, mixed $context = null, mixed $unique = null): mixed
-----
METHOD GearmanClient::addTaskHighBackground
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $function_name
     * @param string $workload
     * @param mixed $context
     * @param string $unique
     * @return GearmanTask
     */
    function addTaskHighBackground(mixed $function_name, mixed $workload, mixed $context = null, mixed $unique = null): mixed
-----
METHOD GearmanClient::addTaskLow
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $function_name
     * @param string $workload
     * @param mixed $context
     * @param string $unique
     * @return GearmanTask
     */
    function addTaskLow(mixed $function_name, mixed $workload, mixed $context = null, mixed $unique = null): mixed
-----
METHOD GearmanClient::addTaskLowBackground
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $function_name
     * @param string $workload
     * @param mixed $context
     * @param string $unique
     * @return GearmanTask
     */
    function addTaskLowBackground(mixed $function_name, mixed $workload, mixed $context = null, mixed $unique = null): mixed
-----
METHOD GearmanClient::addTaskStatus
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $job_handle
     * @param string $context
     * @return GearmanTask
     */
    function addTaskStatus(mixed $job_handle, mixed $context = null): mixed
-----
METHOD GearmanClient::clearCallbacks
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function clearCallbacks(): mixed
-----
METHOD GearmanClient::clone
-----
MISSING
-----
METHOD GearmanClient::context
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function context(): mixed
-----
METHOD GearmanClient::data
-----
MISSING
-----
METHOD GearmanClient::do
-----
MISSING
-----
METHOD GearmanClient::doBackground
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $function
     * @param string $workload
     * @param string $unique
     * @return string
     */
    function doBackground(mixed $function, mixed $workload, mixed $unique = null): mixed
-----
METHOD GearmanClient::doHigh
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $function_name
     * @param string $workload
     * @param string $unique
     * @return string
     */
    function doHigh(mixed $function_name, mixed $workload, mixed $unique = null): mixed
-----
METHOD GearmanClient::doHighBackground
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $function
     * @param string $workload
     * @param string $unique
     * @return string
     */
    function doHighBackground(mixed $function, mixed $workload, mixed $unique = null): mixed
-----
METHOD GearmanClient::doJobHandle
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function doJobHandle(): mixed
-----
METHOD GearmanClient::doLow
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $function
     * @param string $workload
     * @param string $unique
     * @return string
     */
    function doLow(mixed $function, mixed $workload, mixed $unique = null): mixed
-----
METHOD GearmanClient::doLowBackground
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $function
     * @param string $workload
     * @param string $unique
     * @return string
     */
    function doLowBackground(mixed $function, mixed $workload, mixed $unique = null): mixed
-----
METHOD GearmanClient::doNormal
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $function_name
     * @param string $workload
     * @param string $unique
     * @return string
     */
    function doNormal(mixed $function_name, mixed $workload, mixed $unique = null): mixed
-----
METHOD GearmanClient::doStatus
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function doStatus(): mixed
-----
METHOD GearmanClient::echo
-----
MISSING
-----
METHOD GearmanClient::error
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function error(): mixed
-----
METHOD GearmanClient::getErrno
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getErrno(): mixed
-----
METHOD GearmanClient::jobStatus
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $job_handle
     * @return array
     */
    function jobStatus(mixed $job_handle): mixed
-----
METHOD GearmanClient::ping
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $workload
     * @return bool
     */
    function ping(mixed $workload): mixed
-----
METHOD GearmanClient::removeOptions
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $options
     * @return bool
     */
    function removeOptions(mixed $options): mixed
-----
METHOD GearmanClient::returnCode
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function returnCode(): mixed
-----
METHOD GearmanClient::runTasks
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function runTasks(): mixed
-----
METHOD GearmanClient::setClientCallback
-----
MISSING
-----
METHOD GearmanClient::setCompleteCallback
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @return bool
     */
    function setCompleteCallback(mixed $callback): mixed
-----
METHOD GearmanClient::setContext
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $context
     * @return bool
     */
    function setContext(mixed $context): mixed
-----
METHOD GearmanClient::setCreatedCallback
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $callback
     * @return bool
     */
    function setCreatedCallback(mixed $callback): mixed
-----
METHOD GearmanClient::setData
-----
MISSING
-----
METHOD GearmanClient::setDataCallback
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @return bool
     */
    function setDataCallback(mixed $callback): mixed
-----
METHOD GearmanClient::setExceptionCallback
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @return bool
     */
    function setExceptionCallback(mixed $callback): mixed
-----
METHOD GearmanClient::setFailCallback
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @return bool
     */
    function setFailCallback(mixed $callback): mixed
-----
METHOD GearmanClient::setOptions
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $options
     * @return bool
     */
    function setOptions(mixed $options): mixed
-----
METHOD GearmanClient::setStatusCallback
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @return bool
     */
    function setStatusCallback(mixed $callback): mixed
-----
METHOD GearmanClient::setTimeout
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $timeout
     * @return bool
     */
    function setTimeout(mixed $timeout): mixed
-----
METHOD GearmanClient::setWarningCallback
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @return bool
     */
    function setWarningCallback(mixed $callback): mixed
-----
METHOD GearmanClient::setWorkloadCallback
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @return bool
     */
    function setWorkloadCallback(mixed $callback): mixed
-----
METHOD GearmanClient::timeout
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function timeout(): mixed
-----
METHOD GearmanClient::wait
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function wait(): mixed
-----
CLASS GearmanJob
-----
class GearmanJob
{
}
-----
METHOD GearmanJob::__construct
-----
MISSING
-----
METHOD GearmanJob::complete
-----
MISSING
-----
METHOD GearmanJob::data
-----
MISSING
-----
METHOD GearmanJob::exception
-----
MISSING
-----
METHOD GearmanJob::fail
-----
MISSING
-----
METHOD GearmanJob::functionName
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function functionName(): mixed
-----
METHOD GearmanJob::handle
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function handle(): mixed
-----
METHOD GearmanJob::returnCode
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function returnCode(): mixed
-----
METHOD GearmanJob::sendComplete
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $result
     * @return bool
     */
    function sendComplete(mixed $result): mixed
-----
METHOD GearmanJob::sendData
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return bool
     */
    function sendData(mixed $data): mixed
-----
METHOD GearmanJob::sendException
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $exception
     * @return bool
     */
    function sendException(mixed $exception): mixed
-----
METHOD GearmanJob::sendFail
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function sendFail(): mixed
-----
METHOD GearmanJob::sendStatus
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $numerator
     * @param int $denominator
     * @return bool
     */
    function sendStatus(mixed $numerator, mixed $denominator): mixed
-----
METHOD GearmanJob::sendWarning
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $warning
     * @return bool
     */
    function sendWarning(mixed $warning): mixed
-----
METHOD GearmanJob::setReturn
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $gearman_return_t
     * @return bool
     */
    function setReturn(mixed $gearman_return_t): mixed
-----
METHOD GearmanJob::status
-----
MISSING
-----
METHOD GearmanJob::unique
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function unique(): mixed
-----
METHOD GearmanJob::warning
-----
MISSING
-----
METHOD GearmanJob::workload
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function workload(): mixed
-----
METHOD GearmanJob::workloadSize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function workloadSize(): mixed
-----
CLASS GearmanTask
-----
class GearmanTask
{
}
-----
METHOD GearmanTask::__construct
-----
MISSING
-----
METHOD GearmanTask::create
-----
MISSING
-----
METHOD GearmanTask::data
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function data(): mixed
-----
METHOD GearmanTask::dataSize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function dataSize(): mixed
-----
METHOD GearmanTask::function
-----
MISSING
-----
METHOD GearmanTask::functionName
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function functionName(): mixed
-----
METHOD GearmanTask::isKnown
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isKnown(): mixed
-----
METHOD GearmanTask::isRunning
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isRunning(): mixed
-----
METHOD GearmanTask::jobHandle
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function jobHandle(): mixed
-----
METHOD GearmanTask::recvData
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $data_len
     * @return array
     */
    function recvData(mixed $data_len): mixed
-----
METHOD GearmanTask::returnCode
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function returnCode(): mixed
-----
METHOD GearmanTask::sendData
-----
MISSING
-----
METHOD GearmanTask::sendWorkload
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return int
     */
    function sendWorkload(mixed $data): mixed
-----
METHOD GearmanTask::taskDenominator
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function taskDenominator(): mixed
-----
METHOD GearmanTask::taskNumerator
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function taskNumerator(): mixed
-----
METHOD GearmanTask::unique
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function unique(): mixed
-----
METHOD GearmanTask::uuid
-----
MISSING
-----
CLASS GearmanWorker
-----
class GearmanWorker
{
}
-----
METHOD GearmanWorker::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD GearmanWorker::addFunction
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $function_name
     * @param callable(): mixed $function
     * @param mixed $context
     * @param int $timeout
     * @return bool
     */
    function addFunction(mixed $function_name, mixed $function, mixed $context = null, mixed $timeout = 0): mixed
-----
METHOD GearmanWorker::addOptions
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $option
     * @return bool
     */
    function addOptions(mixed $option): mixed
-----
METHOD GearmanWorker::addServer
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $host
     * @param int $port
     * @return bool
     */
    function addServer(mixed $host = '127.0.0.1', mixed $port = 4730): mixed
-----
METHOD GearmanWorker::addServers
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $servers
     * @return bool
     */
    function addServers(mixed $servers = '127.0.0.1:4730'): mixed
-----
METHOD GearmanWorker::clone
-----
MISSING
-----
METHOD GearmanWorker::echo
-----
MISSING
-----
METHOD GearmanWorker::error
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function error(): mixed
-----
METHOD GearmanWorker::getErrno
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getErrno(): mixed
-----
METHOD GearmanWorker::options
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function options(): mixed
-----
METHOD GearmanWorker::register
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $function_name
     * @param int $timeout
     * @return bool
     */
    function register(mixed $function_name, mixed $timeout): mixed
-----
METHOD GearmanWorker::removeOptions
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $option
     * @return bool
     */
    function removeOptions(mixed $option): mixed
-----
METHOD GearmanWorker::returnCode
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function returnCode(): mixed
-----
METHOD GearmanWorker::setId
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $id
     * @return bool
     */
    function setId(mixed $id): mixed
-----
METHOD GearmanWorker::setOptions
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $option
     * @return bool
     */
    function setOptions(mixed $option): mixed
-----
METHOD GearmanWorker::setTimeout
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $timeout
     * @return bool
     */
    function setTimeout(mixed $timeout): mixed
-----
METHOD GearmanWorker::timeout
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function timeout(): mixed
-----
METHOD GearmanWorker::unregister
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $function_name
     * @return bool
     */
    function unregister(mixed $function_name): mixed
-----
METHOD GearmanWorker::unregisterAll
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function unregisterAll(): mixed
-----
METHOD GearmanWorker::wait
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function wait(): mixed
-----
METHOD GearmanWorker::work
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function work(): mixed
-----
CLASS Gender\Gender
-----
MISSING
-----
CLASS Generator
-----
final class Generator implements Iterator
{
}
-----
METHOD Generator::__wakeup
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __wakeup(): mixed
-----
METHOD Generator::current
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return TValue (class Generator, parameter)
     */
    function current(): mixed
-----
METHOD Generator::getReturn
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return TReturn (class Generator, parameter)
     */
    function getReturn(): mixed
-----
METHOD Generator::key
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return TKey (class Generator, parameter)
     */
    function key(): mixed
-----
METHOD Generator::next
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): void
-----
METHOD Generator::rewind
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): void
-----
METHOD Generator::send
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TSend (class Generator, parameter) $value
     * @return TValue (class Generator, parameter)
     */
    function send(mixed $value): mixed
-----
METHOD Generator::throw
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param Throwable $exception
     * @return mixed
     */
    function throw(Throwable $exception): mixed
-----
METHOD Generator::valid
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function valid(): bool
-----
CLASS GlobIterator
-----
class GlobIterator extends FilesystemIterator implements Countable
{
}
-----
METHOD GlobIterator::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $pattern
     * @param int $flags
     * @return void
     */
    function __construct(string $pattern, int $flags = 0): mixed
-----
METHOD GlobIterator::count
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int<0, max>
     */
    function count(): mixed
-----
CLASS Gmagick
-----
class Gmagick
{
}
-----
METHOD Gmagick::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @return void
     */
    function __construct(mixed $filename = null): mixed
-----
METHOD Gmagick::addimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param gmagick $Gmagick
     * @return Gmagick
     */
    function addimage(mixed $Gmagick): mixed
-----
METHOD Gmagick::addnoiseimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param int $NOISE
     * @return Gmagick
     */
    function addnoiseimage(mixed $NOISE): mixed
-----
METHOD Gmagick::annotateimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param gmagickdraw $GmagickDraw
     * @param float $x
     * @param float $y
     * @param float $angle
     * @param string $text
     * @return Gmagick
     */
    function annotateimage(mixed $GmagickDraw, mixed $x, mixed $y, mixed $angle, mixed $text): mixed
-----
METHOD Gmagick::blurimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param float $radius
     * @param float $sigma
     * @param int $channel
     * @return Gmagick
     */
    function blurimage(mixed $radius, mixed $sigma, mixed $channel = null): mixed
-----
METHOD Gmagick::borderimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param gmagickpixel $color
     * @param int $width
     * @param int $height
     * @return Gmagick
     */
    function borderimage(mixed $color, mixed $width, mixed $height): mixed
-----
METHOD Gmagick::charcoalimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param float $radius
     * @param float $sigma
     * @return Gmagick
     */
    function charcoalimage(mixed $radius, mixed $sigma): mixed
-----
METHOD Gmagick::chopimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param int $width
     * @param int $height
     * @param int $x
     * @param int $y
     * @return Gmagick
     */
    function chopimage(mixed $width, mixed $height, mixed $x, mixed $y): mixed
-----
METHOD Gmagick::clear
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return Gmagick
     */
    function clear(): mixed
-----
METHOD Gmagick::commentimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param string $comment
     * @return Gmagick
     */
    function commentimage(mixed $comment): mixed
-----
METHOD Gmagick::compositeimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param gmagick $source
     * @param int $COMPOSE
     * @param int $x
     * @param int $y
     * @return Gmagick
     */
    function compositeimage(mixed $source, mixed $COMPOSE, mixed $x, mixed $y): mixed
-----
METHOD Gmagick::cropimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param int $width
     * @param int $height
     * @param int $x
     * @param int $y
     * @return Gmagick
     */
    function cropimage(mixed $width, mixed $height, mixed $x, mixed $y): mixed
-----
METHOD Gmagick::cropthumbnailimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param int $width
     * @param int $height
     * @return Gmagick
     */
    function cropthumbnailimage(mixed $width, mixed $height): mixed
-----
METHOD Gmagick::current
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return Gmagick
     */
    function current(): mixed
-----
METHOD Gmagick::cyclecolormapimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param int $displace
     * @return Gmagick
     */
    function cyclecolormapimage(mixed $displace): mixed
-----
METHOD Gmagick::deconstructimages
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return Gmagick
     */
    function deconstructimages(): mixed
-----
METHOD Gmagick::despeckleimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return Gmagick
     */
    function despeckleimage(): mixed
-----
METHOD Gmagick::destroy
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function destroy(): mixed
-----
METHOD Gmagick::drawimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param gmagickdraw $GmagickDraw
     * @return Gmagick
     */
    function drawimage(mixed $GmagickDraw): mixed
-----
METHOD Gmagick::edgeimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param float $radius
     * @return Gmagick
     */
    function edgeimage(mixed $radius): mixed
-----
METHOD Gmagick::embossimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param float $radius
     * @param float $sigma
     * @return Gmagick
     */
    function embossimage(mixed $radius, mixed $sigma): mixed
-----
METHOD Gmagick::enhanceimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return Gmagick
     */
    function enhanceimage(): mixed
-----
METHOD Gmagick::equalizeimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return Gmagick
     */
    function equalizeimage(): mixed
-----
METHOD Gmagick::flipimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return Gmagick
     */
    function flipimage(): mixed
-----
METHOD Gmagick::flopimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return Gmagick
     */
    function flopimage(): mixed
-----
METHOD Gmagick::frameimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param gmagickpixel $color
     * @param int $width
     * @param int $height
     * @param int $inner_bevel
     * @param int $outer_bevel
     * @return Gmagick
     */
    function frameimage(mixed $color, mixed $width, mixed $height, mixed $inner_bevel, mixed $outer_bevel): mixed
-----
METHOD Gmagick::gammaimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param float $gamma
     * @return Gmagick
     */
    function gammaimage(mixed $gamma): mixed
-----
METHOD Gmagick::getcopyright
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getcopyright(): mixed
-----
METHOD Gmagick::getfilename
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getfilename(): mixed
-----
METHOD Gmagick::getimagebackgroundcolor
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return GmagickPixel
     */
    function getimagebackgroundcolor(): mixed
-----
METHOD Gmagick::getimageblueprimary
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getimageblueprimary(): mixed
-----
METHOD Gmagick::getimagebordercolor
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return GmagickPixel
     */
    function getimagebordercolor(): mixed
-----
METHOD Gmagick::getimagechanneldepth
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param int $channel_type
     * @return int
     */
    function getimagechanneldepth(mixed $channel_type): mixed
-----
METHOD Gmagick::getimagecolors
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getimagecolors(): mixed
-----
METHOD Gmagick::getimagecolorspace
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getimagecolorspace(): mixed
-----
METHOD Gmagick::getimagecompose
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getimagecompose(): mixed
-----
METHOD Gmagick::getimagedelay
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getimagedelay(): mixed
-----
METHOD Gmagick::getimagedepth
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getimagedepth(): mixed
-----
METHOD Gmagick::getimagedispose
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getimagedispose(): mixed
-----
METHOD Gmagick::getimageextrema
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getimageextrema(): mixed
-----
METHOD Gmagick::getimagefilename
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getimagefilename(): mixed
-----
METHOD Gmagick::getimageformat
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getimageformat(): mixed
-----
METHOD Gmagick::getimagegamma
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return float
     */
    function getimagegamma(): mixed
-----
METHOD Gmagick::getimagegreenprimary
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getimagegreenprimary(): mixed
-----
METHOD Gmagick::getimageheight
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getimageheight(): mixed
-----
METHOD Gmagick::getimagehistogram
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getimagehistogram(): mixed
-----
METHOD Gmagick::getimageindex
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getimageindex(): mixed
-----
METHOD Gmagick::getimageinterlacescheme
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getimageinterlacescheme(): mixed
-----
METHOD Gmagick::getimageiterations
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getimageiterations(): mixed
-----
METHOD Gmagick::getimagematte
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getimagematte(): mixed
-----
METHOD Gmagick::getimagemattecolor
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return GmagickPixel
     */
    function getimagemattecolor(): mixed
-----
METHOD Gmagick::getimageprofile
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return string
     */
    function getimageprofile(mixed $name): mixed
-----
METHOD Gmagick::getimageredprimary
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getimageredprimary(): mixed
-----
METHOD Gmagick::getimagerenderingintent
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getimagerenderingintent(): mixed
-----
METHOD Gmagick::getimageresolution
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getimageresolution(): mixed
-----
METHOD Gmagick::getimagescene
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getimagescene(): mixed
-----
METHOD Gmagick::getimagesignature
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getimagesignature(): mixed
-----
METHOD Gmagick::getimagetype
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getimagetype(): mixed
-----
METHOD Gmagick::getimageunits
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getimageunits(): mixed
-----
METHOD Gmagick::getimagewhitepoint
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getimagewhitepoint(): mixed
-----
METHOD Gmagick::getimagewidth
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getimagewidth(): mixed
-----
METHOD Gmagick::getpackagename
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getpackagename(): mixed
-----
METHOD Gmagick::getquantumdepth
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getquantumdepth(): mixed
-----
METHOD Gmagick::getreleasedate
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getreleasedate(): mixed
-----
METHOD Gmagick::getsamplingfactors
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getsamplingfactors(): mixed
-----
METHOD Gmagick::getsize
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getsize(): mixed
-----
METHOD Gmagick::getversion
-----
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getversion(): mixed
-----
METHOD Gmagick::hasnextimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function hasnextimage(): mixed
-----
METHOD Gmagick::haspreviousimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function haspreviousimage(): mixed
-----
METHOD Gmagick::implodeimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param float $radius
     * @return mixed
     */
    function implodeimage(mixed $radius): mixed
-----
METHOD Gmagick::labelimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param string $label
     * @return mixed
     */
    function labelimage(mixed $label): mixed
-----
METHOD Gmagick::levelimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param float $blackPoint
     * @param float $gamma
     * @param float $whitePoint
     * @param int $channel
     * @return mixed
     */
    function levelimage(mixed $blackPoint, mixed $gamma, mixed $whitePoint, mixed $channel = false): mixed
-----
METHOD Gmagick::magnifyimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function magnifyimage(): mixed
-----
METHOD Gmagick::mapimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param gmagick $gmagick
     * @param bool $dither
     * @return Gmagick
     */
    function mapimage(mixed $gmagick, mixed $dither): mixed
-----
METHOD Gmagick::medianfilterimage
-----
Has side-effects: Yes
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param float $radius
     * @return void
     */
    function medianfilterimage(mixed $radius): mixed
-----
METHOD Gmagick::minifyimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return Gmagick
     */
    function minifyimage(): mixed
-----
METHOD Gmagick::modulateimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param float $brightness
     * @param float $saturation
     * @param float $hue
     * @return Gmagick
     */
    function modulateimage(mixed $brightness, mixed $saturation, mixed $hue): mixed
-----
METHOD Gmagick::motionblurimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param float $radius
     * @param float $sigma
     * @param float $angle
     * @return Gmagick
     */
    function motionblurimage(mixed $radius, mixed $sigma, mixed $angle): mixed
-----
METHOD Gmagick::newimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param int $width
     * @param int $height
     * @param string $background
     * @param string $format
     * @return Gmagick
     */
    function newimage(mixed $width, mixed $height, mixed $background, mixed $format = null): mixed
-----
METHOD Gmagick::nextimage
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function nextimage(): mixed
-----
METHOD Gmagick::normalizeimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param int $channel
     * @return Gmagick
     */
    function normalizeimage(mixed $channel = null): mixed
-----
METHOD Gmagick::oilpaintimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param float $radius
     * @return Gmagick
     */
    function oilpaintimage(mixed $radius): mixed
-----
METHOD Gmagick::previousimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function previousimage(): mixed
-----
METHOD Gmagick::profileimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $profile
     * @return Gmagick
     */
    function profileimage(mixed $name, mixed $profile): mixed
-----
METHOD Gmagick::quantizeimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param int $numColors
     * @param int $colorspace
     * @param int $treeDepth
     * @param bool $dither
     * @param bool $measureError
     * @return Gmagick
     */
    function quantizeimage(mixed $numColors, mixed $colorspace, mixed $treeDepth, mixed $dither, mixed $measureError): mixed
-----
METHOD Gmagick::quantizeimages
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param int $numColors
     * @param int $colorspace
     * @param int $treeDepth
     * @param bool $dither
     * @param bool $measureError
     * @return Gmagick
     */
    function quantizeimages(mixed $numColors, mixed $colorspace, mixed $treeDepth, mixed $dither, mixed $measureError): mixed
-----
METHOD Gmagick::queryfontmetrics
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param gmagickdraw $draw
     * @param string $text
     * @return array
     */
    function queryfontmetrics(mixed $draw, mixed $text): mixed
-----
METHOD Gmagick::queryfonts
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param string $pattern
     * @return array
     */
    function queryfonts(mixed $pattern = '*'): mixed
-----
METHOD Gmagick::queryformats
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param string $pattern
     * @return array
     */
    function queryformats(mixed $pattern = '*'): mixed
-----
METHOD Gmagick::radialblurimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param float $angle
     * @param int $channel
     * @return Gmagick
     */
    function radialblurimage(mixed $angle, mixed $channel = 0): mixed
-----
METHOD Gmagick::raiseimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param int $width
     * @param int $height
     * @param int $x
     * @param int $y
     * @param bool $raise
     * @return Gmagick
     */
    function raiseimage(mixed $width, mixed $height, mixed $x, mixed $y, mixed $raise): mixed
-----
METHOD Gmagick::read
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @return Gmagick
     */
    function read(mixed $filename): mixed
-----
METHOD Gmagick::readimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @return Gmagick
     */
    function readimage(mixed $filename): mixed
-----
METHOD Gmagick::readimageblob
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param string $imageContents
     * @param string $filename
     * @return Gmagick
     */
    function readimageblob(mixed $imageContents, mixed $filename = null): mixed
-----
METHOD Gmagick::readimagefile
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param resource $fp
     * @param string $filename
     * @return Gmagick
     */
    function readimagefile(mixed $fp, mixed $filename = null): mixed
-----
METHOD Gmagick::reducenoiseimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param float $radius
     * @return Gmagick
     */
    function reducenoiseimage(mixed $radius): mixed
-----
METHOD Gmagick::removeimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return Gmagick
     */
    function removeimage(): mixed
-----
METHOD Gmagick::removeimageprofile
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return string
     */
    function removeimageprofile(mixed $name): mixed
-----
METHOD Gmagick::resampleimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param float $xResolution
     * @param float $yResolution
     * @param int $filter
     * @param float $blur
     * @return Gmagick
     */
    function resampleimage(mixed $xResolution, mixed $yResolution, mixed $filter, mixed $blur): mixed
-----
METHOD Gmagick::resizeimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param int $width
     * @param int $height
     * @param int $filter
     * @param float $blur
     * @param bool $fit
     * @return Gmagick
     */
    function resizeimage(mixed $width, mixed $height, mixed $filter, mixed $blur, mixed $fit = false): mixed
-----
METHOD Gmagick::rollimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param int $x
     * @param int $y
     * @return Gmagick
     */
    function rollimage(mixed $x, mixed $y): mixed
-----
METHOD Gmagick::rotateimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param mixed $color
     * @param float $degrees
     * @return Gmagick
     */
    function rotateimage(mixed $color, mixed $degrees): mixed
-----
METHOD Gmagick::scaleimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param int $width
     * @param int $height
     * @param bool $fit
     * @return Gmagick
     */
    function scaleimage(mixed $width, mixed $height, mixed $fit = false): mixed
-----
METHOD Gmagick::separateimagechannel
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param int $channel
     * @return Gmagick
     */
    function separateimagechannel(mixed $channel): mixed
-----
METHOD Gmagick::setCompressionQuality
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param int $quality
     * @return Gmagick
     */
    function setCompressionQuality(mixed $quality = 75): mixed
-----
METHOD Gmagick::setfilename
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @return Gmagick
     */
    function setfilename(mixed $filename): mixed
-----
METHOD Gmagick::setimagebackgroundcolor
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param gmagickpixel $color
     * @return Gmagick
     */
    function setimagebackgroundcolor(mixed $color): mixed
-----
METHOD Gmagick::setimageblueprimary
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param float $x
     * @param float $y
     * @return Gmagick
     */
    function setimageblueprimary(mixed $x, mixed $y): mixed
-----
METHOD Gmagick::setimagebordercolor
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param gmagickpixel $color
     * @return Gmagick
     */
    function setimagebordercolor(GmagickPixel $color): mixed
-----
METHOD Gmagick::setimagechanneldepth
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param int $channel
     * @param int $depth
     * @return Gmagick
     */
    function setimagechanneldepth(mixed $channel, mixed $depth): mixed
-----
METHOD Gmagick::setimagecolorspace
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param int $colorspace
     * @return Gmagick
     */
    function setimagecolorspace(mixed $colorspace): mixed
-----
METHOD Gmagick::setimagecompose
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param int $composite
     * @return Gmagick
     */
    function setimagecompose(mixed $composite): mixed
-----
METHOD Gmagick::setimagedelay
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param int $delay
     * @return Gmagick
     */
    function setimagedelay(mixed $delay): mixed
-----
METHOD Gmagick::setimagedepth
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param int $depth
     * @return Gmagick
     */
    function setimagedepth(mixed $depth): mixed
-----
METHOD Gmagick::setimagedispose
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param int $disposeType
     * @return Gmagick
     */
    function setimagedispose(mixed $disposeType): mixed
-----
METHOD Gmagick::setimagefilename
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @return Gmagick
     */
    function setimagefilename(mixed $filename): mixed
-----
METHOD Gmagick::setimageformat
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param string $imageFormat
     * @return Gmagick
     */
    function setimageformat(mixed $imageFormat): mixed
-----
METHOD Gmagick::setimagegamma
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param float $gamma
     * @return Gmagick
     */
    function setimagegamma(mixed $gamma): mixed
-----
METHOD Gmagick::setimagegreenprimary
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param float $x
     * @param float $y
     * @return Gmagick
     */
    function setimagegreenprimary(mixed $x, mixed $y): mixed
-----
METHOD Gmagick::setimageindex
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @return Gmagick
     */
    function setimageindex(mixed $index): mixed
-----
METHOD Gmagick::setimageinterlacescheme
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param int $interlace
     * @return Gmagick
     */
    function setimageinterlacescheme(mixed $interlace): mixed
-----
METHOD Gmagick::setimageiterations
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param int $iterations
     * @return Gmagick
     */
    function setimageiterations(mixed $iterations): mixed
-----
METHOD Gmagick::setimageprofile
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $profile
     * @return Gmagick
     */
    function setimageprofile(mixed $name, mixed $profile): mixed
-----
METHOD Gmagick::setimageredprimary
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param float $x
     * @param float $y
     * @return Gmagick
     */
    function setimageredprimary(mixed $x, mixed $y): mixed
-----
METHOD Gmagick::setimagerenderingintent
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param int $rendering_intent
     * @return Gmagick
     */
    function setimagerenderingintent(mixed $rendering_intent): mixed
-----
METHOD Gmagick::setimageresolution
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param float $xResolution
     * @param float $yResolution
     * @return Gmagick
     */
    function setimageresolution(mixed $xResolution, mixed $yResolution): mixed
-----
METHOD Gmagick::setimagescene
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param int $scene
     * @return Gmagick
     */
    function setimagescene(mixed $scene): mixed
-----
METHOD Gmagick::setimagetype
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param int $imgType
     * @return Gmagick
     */
    function setimagetype(mixed $imgType): mixed
-----
METHOD Gmagick::setimageunits
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param int $resolution
     * @return Gmagick
     */
    function setimageunits(mixed $resolution): mixed
-----
METHOD Gmagick::setimagewhitepoint
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param float $x
     * @param float $y
     * @return Gmagick
     */
    function setimagewhitepoint(mixed $x, mixed $y): mixed
-----
METHOD Gmagick::setsamplingfactors
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param array $factors
     * @return Gmagick
     */
    function setsamplingfactors(mixed $factors): mixed
-----
METHOD Gmagick::setsize
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param int $columns
     * @param int $rows
     * @return Gmagick
     */
    function setsize(mixed $columns, mixed $rows): mixed
-----
METHOD Gmagick::shearimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param mixed $color
     * @param float $xShear
     * @param float $yShear
     * @return Gmagick
     */
    function shearimage(mixed $color, mixed $xShear, mixed $yShear): mixed
-----
METHOD Gmagick::solarizeimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param int $threshold
     * @return Gmagick
     */
    function solarizeimage(mixed $threshold): mixed
-----
METHOD Gmagick::spreadimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param float $radius
     * @return Gmagick
     */
    function spreadimage(mixed $radius): mixed
-----
METHOD Gmagick::stripimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @return Gmagick
     */
    function stripimage(): mixed
-----
METHOD Gmagick::swirlimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param float $degrees
     * @return Gmagick
     */
    function swirlimage(mixed $degrees): mixed
-----
METHOD Gmagick::thumbnailimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param int $width
     * @param int $height
     * @param bool $fit
     * @return Gmagick
     */
    function thumbnailimage(mixed $width, mixed $height, mixed $fit = false): mixed
-----
METHOD Gmagick::trimimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param float $fuzz
     * @return Gmagick
     */
    function trimimage(mixed $fuzz): mixed
-----
METHOD Gmagick::write
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @return mixed
     */
    function write(mixed $filename): mixed
-----
METHOD Gmagick::writeimage
-----
Has side-effects: Maybe
Throw type: GmagickException
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @param bool $all_frames
     * @return Gmagick
     */
    function writeimage(mixed $filename, mixed $all_frames = false): mixed
-----
CLASS GmagickDraw
-----
class GmagickDraw
{
}
-----
METHOD GmagickDraw::annotate
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $x
     * @param float $y
     * @param string $text
     * @return GmagickDraw
     */
    function annotate(mixed $x, mixed $y, mixed $text): mixed
-----
METHOD GmagickDraw::arc
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $sx
     * @param float $sy
     * @param float $ex
     * @param float $ey
     * @param float $sd
     * @param float $ed
     * @return GmagickDraw
     */
    function arc(mixed $sx, mixed $sy, mixed $ex, mixed $ey, mixed $sd, mixed $ed): mixed
-----
METHOD GmagickDraw::bezier
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $coordinate_array
     * @return GmagickDraw
     */
    function bezier(array $coordinate_array): mixed
-----
METHOD GmagickDraw::ellipse
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $ox
     * @param float $oy
     * @param float $rx
     * @param float $ry
     * @param float $start
     * @param float $end
     * @return GmagickDraw
     */
    function ellipse(mixed $ox, mixed $oy, mixed $rx, mixed $ry, mixed $start, mixed $end): mixed
-----
METHOD GmagickDraw::getfillcolor
-----
Visibility: public
Variants: 1
    /**
     * @return GmagickPixel
     */
    function getfillcolor(): mixed
-----
METHOD GmagickDraw::getfillopacity
-----
Visibility: public
Variants: 1
    /**
     * @return float
     */
    function getfillopacity(): mixed
-----
METHOD GmagickDraw::getfont
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getfont(): mixed
-----
METHOD GmagickDraw::getfontsize
-----
Visibility: public
Variants: 1
    /**
     * @return float
     */
    function getfontsize(): mixed
-----
METHOD GmagickDraw::getfontstyle
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getfontstyle(): mixed
-----
METHOD GmagickDraw::getfontweight
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getfontweight(): mixed
-----
METHOD GmagickDraw::getstrokecolor
-----
Visibility: public
Variants: 1
    /**
     * @return GmagickPixel
     */
    function getstrokecolor(): mixed
-----
METHOD GmagickDraw::getstrokeopacity
-----
Visibility: public
Variants: 1
    /**
     * @return float
     */
    function getstrokeopacity(): mixed
-----
METHOD GmagickDraw::getstrokewidth
-----
Visibility: public
Variants: 1
    /**
     * @return float
     */
    function getstrokewidth(): mixed
-----
METHOD GmagickDraw::gettextdecoration
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function gettextdecoration(): mixed
-----
METHOD GmagickDraw::gettextencoding
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function gettextencoding(): mixed
-----
METHOD GmagickDraw::line
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $sx
     * @param float $sy
     * @param float $ex
     * @param float $ey
     * @return GmagickDraw
     */
    function line(mixed $sx, mixed $sy, mixed $ex, mixed $ey): mixed
-----
METHOD GmagickDraw::point
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $x
     * @param float $y
     * @return GmagickDraw
     */
    function point(mixed $x, mixed $y): mixed
-----
METHOD GmagickDraw::polygon
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $coordinates
     * @return GmagickDraw
     */
    function polygon(array $coordinates): mixed
-----
METHOD GmagickDraw::polyline
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $coordinate_array
     * @return GmagickDraw
     */
    function polyline(array $coordinate_array): mixed
-----
METHOD GmagickDraw::rectangle
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $x1
     * @param float $y1
     * @param float $x2
     * @param float $y2
     * @return GmagickDraw
     */
    function rectangle(mixed $x1, mixed $y1, mixed $x2, mixed $y2): mixed
-----
METHOD GmagickDraw::rotate
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $degrees
     * @return GmagickDraw
     */
    function rotate(mixed $degrees): mixed
-----
METHOD GmagickDraw::roundrectangle
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $x1
     * @param float $y1
     * @param float $x2
     * @param float $y2
     * @param float $rx
     * @param float $ry
     * @return GmagickDraw
     */
    function roundrectangle(mixed $x1, mixed $y1, mixed $x2, mixed $y2, mixed $rx, mixed $ry): mixed
-----
METHOD GmagickDraw::scale
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $x
     * @param float $y
     * @return GmagickDraw
     */
    function scale(mixed $x, mixed $y): mixed
-----
METHOD GmagickDraw::setfillcolor
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $color
     * @return GmagickDraw
     */
    function setfillcolor(mixed $color): mixed
-----
METHOD GmagickDraw::setfillopacity
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $fill_opacity
     * @return GmagickDraw
     */
    function setfillopacity(mixed $fill_opacity): mixed
-----
METHOD GmagickDraw::setfont
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $font
     * @return GmagickDraw
     */
    function setfont(mixed $font): mixed
-----
METHOD GmagickDraw::setfontsize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $pointsize
     * @return GmagickDraw
     */
    function setfontsize(mixed $pointsize): mixed
-----
METHOD GmagickDraw::setfontstyle
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $style
     * @return GmagickDraw
     */
    function setfontstyle(mixed $style): mixed
-----
METHOD GmagickDraw::setfontweight
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $weight
     * @return GmagickDraw
     */
    function setfontweight(mixed $weight): mixed
-----
METHOD GmagickDraw::setstrokecolor
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param gmagickpixel $color
     * @return GmagickDraw
     */
    function setstrokecolor(mixed $color): mixed
-----
METHOD GmagickDraw::setstrokeopacity
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $stroke_opacity
     * @return GmagickDraw
     */
    function setstrokeopacity(mixed $stroke_opacity): mixed
-----
METHOD GmagickDraw::setstrokewidth
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $width
     * @return GmagickDraw
     */
    function setstrokewidth(mixed $width): mixed
-----
METHOD GmagickDraw::settextdecoration
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $decoration
     * @return GmagickDraw
     */
    function settextdecoration(mixed $decoration): mixed
-----
METHOD GmagickDraw::settextencoding
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $encoding
     * @return GmagickDraw
     */
    function settextencoding(mixed $encoding): mixed
-----
CLASS GmagickPixel
-----
class GmagickPixel
{
}
-----
METHOD GmagickPixel::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $color
     * @return void
     */
    function __construct(mixed $color = null): mixed
-----
METHOD GmagickPixel::getcolor
-----
Throw type: GmagickPixelException
Visibility: public
Variants: 1
    /**
     * @param bool $as_array
     * @param bool $normalize_array
     * @return mixed
     */
    function getcolor(mixed $as_array = null, mixed $normalize_array = null): mixed
-----
METHOD GmagickPixel::getcolorcount
-----
Throw type: GmagickPixelException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getcolorcount(): mixed
-----
METHOD GmagickPixel::getcolorvalue
-----
Throw type: GmagickPixelException
Visibility: public
Variants: 1
    /**
     * @param int $color
     * @return float
     */
    function getcolorvalue(mixed $color): mixed
-----
METHOD GmagickPixel::setcolor
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $color
     * @return GmagickPixel
     */
    function setcolor(mixed $color): mixed
-----
METHOD GmagickPixel::setcolorvalue
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $color
     * @param float $value
     * @return GmagickPixel
     */
    function setcolorvalue(mixed $color, mixed $value): mixed
-----
CLASS HRTime\PerformanceCounter
-----
MISSING
-----
CLASS HRTime\StopWatch
-----
MISSING
-----
CLASS HashContext
-----
final class HashContext
{
}
-----
METHOD HashContext::__construct
-----
Has side-effects: Maybe
Visibility: private
Variants: 1
    /**
     * @return mixed
     */
    function __construct(): mixed
-----
METHOD HashContext::__serialize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function __serialize(): array
-----
METHOD HashContext::__unserialize
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param array $data
     * @return void
     */
    function __unserialize(array $data): void
-----
CLASS Imagick
-----
class Imagick implements Iterator, Countable, Stringable
{
}
-----
METHOD Imagick::__construct
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param mixed $files
     * @return void
     */
    function __construct(mixed $files = null): mixed
-----
METHOD Imagick::__toString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): mixed
-----
METHOD Imagick::adaptiveBlurImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $radius
     * @param float $sigma
     * @param int $channel
     * @return bool
     */
    function adaptiveBlurImage(mixed $radius, mixed $sigma, mixed $channel = 134217719): mixed
-----
METHOD Imagick::adaptiveResizeImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $columns
     * @param int $rows
     * @param bool $bestfit
     * @return bool
     */
    function adaptiveResizeImage(mixed $columns, mixed $rows, mixed $bestfit = false): mixed
-----
METHOD Imagick::adaptiveSharpenImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $radius
     * @param float $sigma
     * @param int $channel
     * @return bool
     */
    function adaptiveSharpenImage(mixed $radius, mixed $sigma, mixed $channel = 134217719): mixed
-----
METHOD Imagick::adaptiveThresholdImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $width
     * @param int $height
     * @param int $offset
     * @return bool
     */
    function adaptiveThresholdImage(mixed $width, mixed $height, mixed $offset): mixed
-----
METHOD Imagick::addImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param imagick $source
     * @return bool
     */
    function addImage(Imagick $source): mixed
-----
METHOD Imagick::addNoiseImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $noise_type
     * @param int $channel
     * @return bool
     */
    function addNoiseImage(mixed $noise_type, mixed $channel = 134217719): mixed
-----
METHOD Imagick::affineTransformImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param imagickdraw $matrix
     * @return bool
     */
    function affineTransformImage(ImagickDraw $matrix): mixed
-----
METHOD Imagick::animateImages
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $x_server
     * @return bool
     */
    function animateImages(mixed $x_server): mixed
-----
METHOD Imagick::annotateImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param imagickdraw $draw_settings
     * @param float $x
     * @param float $y
     * @param float $angle
     * @param string $text
     * @return bool
     */
    function annotateImage(ImagickDraw $draw_settings, mixed $x, mixed $y, mixed $angle, mixed $text): mixed
-----
METHOD Imagick::appendImages
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param bool $stack
     * @return Imagick
     */
    function appendImages(mixed $stack = false): mixed
-----
METHOD Imagick::autoLevelImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $CHANNEL
     * @return bool
     */
    function autoLevelImage(mixed $CHANNEL): mixed
-----
METHOD Imagick::averageImages
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return Imagick
     */
    function averageImages(): mixed
-----
METHOD Imagick::blackThresholdImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param mixed $threshold
     * @return bool
     */
    function blackThresholdImage(mixed $threshold): mixed
-----
METHOD Imagick::blueShiftImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $factor
     * @return bool
     */
    function blueShiftImage(mixed $factor): mixed
-----
METHOD Imagick::blurImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $radius
     * @param float $sigma
     * @param int $channel
     * @return bool
     */
    function blurImage(mixed $radius, mixed $sigma, mixed $channel = null): mixed
-----
METHOD Imagick::borderImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param mixed $bordercolor
     * @param int $width
     * @param int $height
     * @return bool
     */
    function borderImage(mixed $bordercolor, mixed $width, mixed $height): mixed
-----
METHOD Imagick::brightnessContrastImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $brightness
     * @param float $contrast
     * @param int $CHANNEL
     * @return bool
     */
    function brightnessContrastImage(mixed $brightness, mixed $contrast, mixed $CHANNEL = 134217719): mixed
-----
METHOD Imagick::charcoalImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $radius
     * @param float $sigma
     * @return bool
     */
    function charcoalImage(mixed $radius, mixed $sigma): mixed
-----
METHOD Imagick::chopImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $width
     * @param int $height
     * @param int $x
     * @param int $y
     * @return bool
     */
    function chopImage(mixed $width, mixed $height, mixed $x, mixed $y): mixed
-----
METHOD Imagick::clampImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $CHANNEL
     * @return bool
     */
    function clampImage(mixed $CHANNEL): mixed
-----
METHOD Imagick::clear
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function clear(): mixed
-----
METHOD Imagick::clipImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function clipImage(): mixed
-----
METHOD Imagick::clipImagePath
-----
Has side-effects: Yes
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $pathname
     * @param string $inside
     * @return void
     */
    function clipImagePath(mixed $pathname, mixed $inside): mixed
-----
METHOD Imagick::clipPathImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $pathname
     * @param bool $inside
     * @return bool
     */
    function clipPathImage(mixed $pathname, mixed $inside): mixed
-----
METHOD Imagick::clone
-----
MISSING
-----
METHOD Imagick::clutImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param imagick $lookup_table
     * @param float $channel
     * @return bool
     */
    function clutImage(Imagick $lookup_table, mixed $channel = 134217719): mixed
-----
METHOD Imagick::coalesceImages
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return Imagick
     */
    function coalesceImages(): mixed
-----
METHOD Imagick::colorFloodfillImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param mixed $fill
     * @param float $fuzz
     * @param mixed $bordercolor
     * @param int $x
     * @param int $y
     * @return bool
     */
    function colorFloodfillImage(mixed $fill, mixed $fuzz, mixed $bordercolor, mixed $x, mixed $y): mixed
-----
METHOD Imagick::colorMatrixImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param array $color_matrix
     * @return bool
     */
    function colorMatrixImage(mixed $color_matrix = 134217719): mixed
-----
METHOD Imagick::colorizeImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param mixed $colorize
     * @param mixed $opacity
     * @return bool
     */
    function colorizeImage(mixed $colorize, mixed $opacity): mixed
-----
METHOD Imagick::combineImages
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $channelType
     * @return Imagick
     */
    function combineImages(mixed $channelType): mixed
-----
METHOD Imagick::commentImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $comment
     * @return bool
     */
    function commentImage(mixed $comment): mixed
-----
METHOD Imagick::compareImageChannels
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param imagick $image
     * @param int $channelType
     * @param int $metricType
     * @return array{Imagick, float}
     */
    function compareImageChannels(Imagick $image, mixed $channelType, mixed $metricType): mixed
-----
METHOD Imagick::compareImageLayers
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $method
     * @return Imagick
     */
    function compareImageLayers(mixed $method): mixed
-----
METHOD Imagick::compareImages
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param imagick $compare
     * @param int $metric
     * @return array{Imagick, float}
     */
    function compareImages(Imagick $compare, mixed $metric): mixed
-----
METHOD Imagick::compositeImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param imagick $composite_object
     * @param int $composite
     * @param int $x
     * @param int $y
     * @param int $channel
     * @return bool
     */
    function compositeImage(Imagick $composite_object, mixed $composite, mixed $x, mixed $y, mixed $channel = 134217727): mixed
-----
METHOD Imagick::contrastImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param bool $sharpen
     * @return bool
     */
    function contrastImage(mixed $sharpen): mixed
-----
METHOD Imagick::contrastStretchImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $black_point
     * @param float $white_point
     * @param int $channel
     * @return bool
     */
    function contrastStretchImage(mixed $black_point, mixed $white_point, mixed $channel = 134217727): mixed
-----
METHOD Imagick::convolveImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param array $kernel
     * @param int $channel
     * @return bool
     */
    function convolveImage(array $kernel, mixed $channel = 134217727): mixed
-----
METHOD Imagick::count
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $mode
     * @return int<0, max>
     */
    function count(mixed $mode): mixed
-----
METHOD Imagick::cropImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $width
     * @param int $height
     * @param int $x
     * @param int $y
     * @return bool
     */
    function cropImage(mixed $width, mixed $height, mixed $x, mixed $y): mixed
-----
METHOD Imagick::cropThumbnailImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $width
     * @param int $height
     * @param bool $legacy
     * @return bool
     */
    function cropThumbnailImage(mixed $width, mixed $height, mixed $legacy = false): mixed
-----
METHOD Imagick::current
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Imagick
     */
    function current(): mixed
-----
METHOD Imagick::cycleColormapImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $displace
     * @return bool
     */
    function cycleColormapImage(mixed $displace): mixed
-----
METHOD Imagick::decipherImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $passphrase
     * @return bool
     */
    function decipherImage(mixed $passphrase): mixed
-----
METHOD Imagick::deconstructImages
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return Imagick
     */
    function deconstructImages(): mixed
-----
METHOD Imagick::deleteImageArtifact
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $artifact
     * @return bool
     */
    function deleteImageArtifact(mixed $artifact): mixed
-----
METHOD Imagick::deleteImageProperty
-----
Has side-effects: Yes
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return void
     */
    function deleteImageProperty(mixed $name): mixed
-----
METHOD Imagick::deskewImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $threshold
     * @return bool
     */
    function deskewImage(mixed $threshold): mixed
-----
METHOD Imagick::despeckleImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function despeckleImage(): mixed
-----
METHOD Imagick::destroy
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function destroy(): mixed
-----
METHOD Imagick::displayImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $servername
     * @return bool
     */
    function displayImage(mixed $servername): mixed
-----
METHOD Imagick::displayImages
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $servername
     * @return bool
     */
    function displayImages(mixed $servername): mixed
-----
METHOD Imagick::distortImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $method
     * @param array $arguments
     * @param bool $bestfit
     * @return bool
     */
    function distortImage(mixed $method, array $arguments, mixed $bestfit): mixed
-----
METHOD Imagick::drawImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param imagickdraw $draw
     * @return bool
     */
    function drawImage(ImagickDraw $draw): mixed
-----
METHOD Imagick::edgeImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $radius
     * @return bool
     */
    function edgeImage(mixed $radius): mixed
-----
METHOD Imagick::embossImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $radius
     * @param float $sigma
     * @return bool
     */
    function embossImage(mixed $radius, mixed $sigma): mixed
-----
METHOD Imagick::encipherImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $passphrase
     * @return bool
     */
    function encipherImage(mixed $passphrase): mixed
-----
METHOD Imagick::enhanceImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function enhanceImage(): mixed
-----
METHOD Imagick::equalizeImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function equalizeImage(): mixed
-----
METHOD Imagick::evaluateImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $op
     * @param float $constant
     * @param int $channel
     * @return bool
     */
    function evaluateImage(mixed $op, mixed $constant, mixed $channel = 134217727): mixed
-----
METHOD Imagick::exportImagePixels
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $x
     * @param int $y
     * @param int $width
     * @param int $height
     * @param string $map
     * @param int $STORAGE
     * @return array<int, int>
     */
    function exportImagePixels(mixed $x, mixed $y, mixed $width, mixed $height, mixed $map, mixed $STORAGE): mixed
-----
METHOD Imagick::extentImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $width
     * @param int $height
     * @param int $x
     * @param int $y
     * @return bool
     */
    function extentImage(mixed $width, mixed $height, mixed $x, mixed $y): mixed
-----
METHOD Imagick::filter
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param ImagickKernel $ImagickKernel
     * @param int $CHANNEL
     * @return bool
     */
    function filter(ImagickKernel $ImagickKernel, mixed $CHANNEL = 134217719): mixed
-----
METHOD Imagick::flattenImages
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return Imagick
     */
    function flattenImages(): mixed
-----
METHOD Imagick::flipImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function flipImage(): mixed
-----
METHOD Imagick::floodFillPaintImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param mixed $fill
     * @param float $fuzz
     * @param mixed $target
     * @param int $x
     * @param int $y
     * @param bool $invert
     * @param int $channel
     * @return bool
     */
    function floodFillPaintImage(mixed $fill, mixed $fuzz, mixed $target, mixed $x, mixed $y, mixed $invert, mixed $channel = 134217719): mixed
-----
METHOD Imagick::flopImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function flopImage(): mixed
-----
METHOD Imagick::forwardFourierTransformImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param bool $magnitude
     * @return bool
     */
    function forwardFourierTransformimage(mixed $magnitude): mixed
-----
METHOD Imagick::frameImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param mixed $matte_color
     * @param int $width
     * @param int $height
     * @param int $inner_bevel
     * @param int $outer_bevel
     * @return bool
     */
    function frameImage(mixed $matte_color, mixed $width, mixed $height, mixed $inner_bevel, mixed $outer_bevel): mixed
-----
METHOD Imagick::functionImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $function
     * @param array $arguments
     * @param int $channel
     * @return bool
     */
    function functionImage(mixed $function, array $arguments, mixed $channel = 134217719): mixed
-----
METHOD Imagick::fxImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $expression
     * @param int $channel
     * @return Imagick
     */
    function fxImage(mixed $expression, mixed $channel = 134217727): mixed
-----
METHOD Imagick::gammaImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $gamma
     * @param int $channel
     * @return bool
     */
    function gammaImage(mixed $gamma, mixed $channel = 134217727): mixed
-----
METHOD Imagick::gaussianBlurImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $radius
     * @param float $sigma
     * @param int $channel
     * @return bool
     */
    function gaussianBlurImage(mixed $radius, mixed $sigma, mixed $channel = 134217727): mixed
-----
METHOD Imagick::getColorspace
-----
Visibility: public
Variants: 1
    /**
     * @return 0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33
     */
    function getColorspace(): mixed
-----
METHOD Imagick::getCompression
-----
Visibility: public
Variants: 1
    /**
     * @return 0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21
     */
    function getCompression(): mixed
-----
METHOD Imagick::getCompressionQuality
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getCompressionQuality(): mixed
-----
METHOD Imagick::getCopyright
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getCopyright(): mixed
-----
METHOD Imagick::getFilename
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getFilename(): mixed
-----
METHOD Imagick::getFont
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getFont(): mixed
-----
METHOD Imagick::getFormat
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getFormat(): mixed
-----
METHOD Imagick::getGravity
-----
Visibility: public
Variants: 1
    /**
     * @return 0|1|2|3|4|5|6|7|8|9|10
     */
    function getGravity(): mixed
-----
METHOD Imagick::getHomeURL
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getHomeURL(): mixed
-----
METHOD Imagick::getImage
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return Imagick
     */
    function getImage(): mixed
-----
METHOD Imagick::getImageAlphaChannel
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function getImageAlphaChannel(): mixed
-----
METHOD Imagick::getImageArtifact
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $artifact
     * @return string
     */
    function getImageArtifact(mixed $artifact): mixed
-----
METHOD Imagick::getImageAttribute
-----
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @return string
     */
    function getImageAttribute(mixed $key): mixed
-----
METHOD Imagick::getImageBackgroundColor
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return ImagickPixel
     */
    function getImageBackgroundColor(): mixed
-----
METHOD Imagick::getImageBlob
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getImageBlob(): mixed
-----
METHOD Imagick::getImageBluePrimary
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return array{x: float, y: float}
     */
    function getImageBluePrimary(): mixed
-----
METHOD Imagick::getImageBorderColor
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return ImagickPixel
     */
    function getImageBorderColor(): mixed
-----
METHOD Imagick::getImageChannelDepth
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $channel
     * @return int
     */
    function getImageChannelDepth(mixed $channel): mixed
-----
METHOD Imagick::getImageChannelDistortion
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param imagick $reference
     * @param int $channel
     * @param int $metric
     * @return float
     */
    function getImageChannelDistortion(Imagick $reference, mixed $channel, mixed $metric): mixed
-----
METHOD Imagick::getImageChannelDistortions
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param imagick $reference
     * @param int $metric
     * @param int $channel
     * @return float
     */
    function getImageChannelDistortions(Imagick $reference, mixed $metric, mixed $channel = 134217719): mixed
-----
METHOD Imagick::getImageChannelExtrema
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $channel
     * @return array{minima: int<0, max>, maxima: int<0, max>}
     */
    function getImageChannelExtrema(mixed $channel): mixed
-----
METHOD Imagick::getImageChannelKurtosis
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $channel
     * @return array{kurtosis: float, skewness: float}
     */
    function getImageChannelKurtosis(mixed $channel = 134217719): mixed
-----
METHOD Imagick::getImageChannelMean
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $channel
     * @return array{mean: float, standardDeviation: float}
     */
    function getImageChannelMean(mixed $channel): mixed
-----
METHOD Imagick::getImageChannelRange
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $channel
     * @return array{minima: float, maxima: float}
     */
    function getImageChannelRange(mixed $channel): mixed
-----
METHOD Imagick::getImageChannelStatistics
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return array{mean: float, minima: float, maxima: float, standardDeviation: float, depth: int}
     */
    function getImageChannelStatistics(): mixed
-----
METHOD Imagick::getImageClipMask
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return Imagick
     */
    function getImageClipMask(): mixed
-----
METHOD Imagick::getImageColormapColor
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @return ImagickPixel
     */
    function getImageColormapColor(mixed $index): mixed
-----
METHOD Imagick::getImageColors
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getImageColors(): mixed
-----
METHOD Imagick::getImageColorspace
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return 0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33
     */
    function getImageColorspace(): mixed
-----
METHOD Imagick::getImageCompose
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return 0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|33|34|35|36|37|38|39|40|41|42|43|44|45|46|47|48|49|50|51|52|53|54|55|56|57|58|59|60|61|62|63|64|65|66|67
     */
    function getImageCompose(): mixed
-----
METHOD Imagick::getImageCompression
-----
Visibility: public
Variants: 1
    /**
     * @return 0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21
     */
    function getImageCompression(): mixed
-----
METHOD Imagick::getImageCompressionQuality
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getImageCompressionQuality(): mixed
-----
METHOD Imagick::getImageDelay
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getImageDelay(): mixed
-----
METHOD Imagick::getImageDepth
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getImageDepth(): mixed
-----
METHOD Imagick::getImageDispose
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return 0|1|2|3
     */
    function getImageDispose(): mixed
-----
METHOD Imagick::getImageDistortion
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param magickwand $reference
     * @param int $metric
     * @return float
     */
    function getImageDistortion(Imagick $reference, mixed $metric): mixed
-----
METHOD Imagick::getImageExtrema
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return array{min: int<0, max>, max: int<0, max>}
     */
    function getImageExtrema(): mixed
-----
METHOD Imagick::getImageFilename
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getImageFilename(): mixed
-----
METHOD Imagick::getImageFormat
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getImageFormat(): mixed
-----
METHOD Imagick::getImageGamma
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return float
     */
    function getImageGamma(): mixed
-----
METHOD Imagick::getImageGeometry
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return array{width: int, height: int}
     */
    function getImageGeometry(): mixed
-----
METHOD Imagick::getImageGravity
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return 0|1|2|3|4|5|6|7|8|9|10
     */
    function getImageGravity(): mixed
-----
METHOD Imagick::getImageGreenPrimary
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return array{x: float, y: float}
     */
    function getImageGreenPrimary(): mixed
-----
METHOD Imagick::getImageHeight
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getImageHeight(): mixed
-----
METHOD Imagick::getImageHistogram
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return array<int, ImagickPixel>
     */
    function getImageHistogram(): mixed
-----
METHOD Imagick::getImageIndex
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getImageIndex(): mixed
-----
METHOD Imagick::getImageInterlaceScheme
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return 0|1|2|3|4|5|6|7
     */
    function getImageInterlaceScheme(): mixed
-----
METHOD Imagick::getImageInterpolateMethod
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return 0|1|2|3|4|5|6|7|8
     */
    function getImageInterpolateMethod(): mixed
-----
METHOD Imagick::getImageIterations
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getImageIterations(): mixed
-----
METHOD Imagick::getImageLength
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return int<0, max>
     */
    function getImageLength(): mixed
-----
METHOD Imagick::getImageMatte
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function getImageMatte(): mixed
-----
METHOD Imagick::getImageMatteColor
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return ImagickPixel
     */
    function getImageMatteColor(): mixed
-----
METHOD Imagick::getImageMimeType
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return non-empty-string
     */
    function getImageMimeType(): mixed
-----
METHOD Imagick::getImageOrientation
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return 0|1|2|3|4|5|6|7|8
     */
    function getImageOrientation(): mixed
-----
METHOD Imagick::getImagePage
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return array{width: int, height: int, x: int, y: int}
     */
    function getImagePage(): mixed
-----
METHOD Imagick::getImagePixelColor
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $x
     * @param int $y
     * @return ImagickPixel
     */
    function getImagePixelColor(mixed $x, mixed $y): mixed
-----
METHOD Imagick::getImageProfile
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return string
     */
    function getImageProfile(mixed $name): mixed
-----
METHOD Imagick::getImageProfiles
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $pattern
     * @param bool $include_values
     * @return array
     */
    function getImageProfiles(mixed $pattern = '*', mixed $include_values = true): mixed
-----
METHOD Imagick::getImageProperties
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $pattern
     * @param bool $only_names
     * @return array
     */
    function getImageProperties(mixed $pattern = '*', mixed $only_names = true): mixed
-----
METHOD Imagick::getImageProperty
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return string
     */
    function getImageProperty(mixed $name): mixed
-----
METHOD Imagick::getImageRedPrimary
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return array{x: float, y: float}
     */
    function getImageRedPrimary(): mixed
-----
METHOD Imagick::getImageRegion
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $width
     * @param int $height
     * @param int $x
     * @param int $y
     * @return Imagick
     */
    function getImageRegion(mixed $width, mixed $height, mixed $x, mixed $y): mixed
-----
METHOD Imagick::getImageRenderingIntent
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return 0|1|2|3|4
     */
    function getImageRenderingIntent(): mixed
-----
METHOD Imagick::getImageResolution
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return array{x: float, y: float}
     */
    function getImageResolution(): mixed
-----
METHOD Imagick::getImageScene
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return int<0, max>
     */
    function getImageScene(): mixed
-----
METHOD Imagick::getImageSignature
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getImageSignature(): mixed
-----
METHOD Imagick::getImageSize
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return int<0, max>
     */
    function getImageSize(): mixed
-----
METHOD Imagick::getImageTicksPerSecond
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return int<0, max>
     */
    function getImageTicksPerSecond(): mixed
-----
METHOD Imagick::getImageTotalInkDensity
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return float
     */
    function getImageTotalInkDensity(): mixed
-----
METHOD Imagick::getImageType
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return 0|1|2|3|4|5|6|7|8|9|10|11
     */
    function getImageType(): mixed
-----
METHOD Imagick::getImageUnits
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getImageUnits(): mixed
-----
METHOD Imagick::getImageVirtualPixelMethod
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getImageVirtualPixelMethod(): mixed
-----
METHOD Imagick::getImageWhitePoint
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return array{x: float, y: float}
     */
    function getImageWhitePoint(): mixed
-----
METHOD Imagick::getImageWidth
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return int<0, max>
     */
    function getImageWidth(): mixed
-----
METHOD Imagick::getImagesBlob
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getImagesBlob(): mixed
-----
METHOD Imagick::getInterlaceScheme
-----
Visibility: public
Variants: 1
    /**
     * @return 0|1|2|3|4|5|6|7
     */
    function getInterlaceScheme(): mixed
-----
METHOD Imagick::getIteratorIndex
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getIteratorIndex(): mixed
-----
METHOD Imagick::getNumberImages
-----
Visibility: public
Variants: 1
    /**
     * @return int<0, max>
     */
    function getNumberImages(): mixed
-----
METHOD Imagick::getOption
-----
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @return string
     */
    function getOption(mixed $key): mixed
-----
METHOD Imagick::getPackageName
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getPackageName(): mixed
-----
METHOD Imagick::getPage
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return array{width: int, height: int, x: int, y: int}
     */
    function getPage(): mixed
-----
METHOD Imagick::getPixelIterator
-----
Throw type: ImagickException|ImagickPixelIteratorException
Visibility: public
Variants: 1
    /**
     * @return ImagickPixelIterator
     */
    function getPixelIterator(): mixed
-----
METHOD Imagick::getPixelRegionIterator
-----
Throw type: ImagickException|ImagickPixelIteratorException
Visibility: public
Variants: 1
    /**
     * @param int $x
     * @param int $y
     * @param int $columns
     * @param int $rows
     * @return ImagickPixelIterator
     */
    function getPixelRegionIterator(mixed $x, mixed $y, mixed $columns, mixed $rows): mixed
-----
METHOD Imagick::getPointSize
-----
Visibility: public
Variants: 1
    /**
     * @return float
     */
    function getPointSize(): mixed
-----
METHOD Imagick::getQuantum
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return int<0, max>
     */
    function getQuantum(): mixed
-----
METHOD Imagick::getQuantumDepth
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return array{quantumDepthLong: int<0, max>, quantumDepthString: numeric-string}
     */
    function getQuantumDepth(): mixed
-----
METHOD Imagick::getQuantumRange
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return array{quantumRangeLong: int<0, max>, quantumRangeString: numeric-string}
     */
    function getQuantumRange(): mixed
-----
METHOD Imagick::getRegistry
-----
Has side-effects: Maybe
Throw type: ImagickException
Static
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @return string
     */
    function getRegistry(mixed $key): mixed
-----
METHOD Imagick::getReleaseDate
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getReleaseDate(): mixed
-----
METHOD Imagick::getResource
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int $type
     * @return int
     */
    function getResource(mixed $type): mixed
-----
METHOD Imagick::getResourceLimit
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int $type
     * @return int
     */
    function getResourceLimit(mixed $type): mixed
-----
METHOD Imagick::getSamplingFactors
-----
Visibility: public
Variants: 1
    /**
     * @return array<int, float>
     */
    function getSamplingFactors(): mixed
-----
METHOD Imagick::getSize
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return array{columns: int<0, max>, rows: int<0, max>}
     */
    function getSize(): mixed
-----
METHOD Imagick::getSizeOffset
-----
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getSizeOffset(): mixed
-----
METHOD Imagick::getVersion
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return array{versionNumber: int<0, max>, versionString: non-falsy-string}
     */
    function getVersion(): mixed
-----
METHOD Imagick::haldClutImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param imagick $clut
     * @param int $channel
     * @return bool
     */
    function haldClutImage(Imagick $clut, mixed $channel = 134217719): mixed
-----
METHOD Imagick::hasNextImage
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function hasNextImage(): mixed
-----
METHOD Imagick::hasPreviousImage
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function hasPreviousImage(): mixed
-----
METHOD Imagick::identifyFormat
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $embedText
     * @return string|false
     */
    function identifyFormat(mixed $embedText): mixed
-----
METHOD Imagick::identifyImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param bool $appendRawOutput
     * @return array{width: int<0, max>, height: int<0, max>}
     */
    function identifyImage(mixed $appendRawOutput = false): mixed
-----
METHOD Imagick::implodeImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $radius
     * @return bool
     */
    function implodeImage(mixed $radius): mixed
-----
METHOD Imagick::importImagePixels
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $x
     * @param int $y
     * @param int $width
     * @param int $height
     * @param string $map
     * @param int $storage
     * @param array $pixels
     * @return bool
     */
    function importImagePixels(mixed $x, mixed $y, mixed $width, mixed $height, mixed $map, mixed $storage, array $pixels): mixed
-----
METHOD Imagick::inverseFourierTransformImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param Imagick $complement
     * @param bool $magnitude
     * @return bool
     */
    function inverseFourierTransformImage(mixed $complement, mixed $magnitude): mixed
-----
METHOD Imagick::labelImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $label
     * @return bool
     */
    function labelImage(mixed $label): mixed
-----
METHOD Imagick::levelImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $blackPoint
     * @param float $gamma
     * @param float $whitePoint
     * @param int $channel
     * @return bool
     */
    function levelImage(mixed $blackPoint, mixed $gamma, mixed $whitePoint, mixed $channel = 134217727): mixed
-----
METHOD Imagick::linearStretchImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $blackPoint
     * @param float $whitePoint
     * @return bool
     */
    function linearStretchImage(mixed $blackPoint, mixed $whitePoint): mixed
-----
METHOD Imagick::liquidRescaleImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $width
     * @param int $height
     * @param float $delta_x
     * @param float $rigidity
     * @return bool
     */
    function liquidRescaleImage(mixed $width, mixed $height, mixed $delta_x, mixed $rigidity): mixed
-----
METHOD Imagick::listRegistry
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return array<string, string>
     */
    function listRegistry(): mixed
-----
METHOD Imagick::magnifyImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function magnifyImage(): mixed
-----
METHOD Imagick::mapImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param imagick $map
     * @param bool $dither
     * @return bool
     */
    function mapImage(Imagick $map, mixed $dither): mixed
-----
METHOD Imagick::matteFloodfillImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $alpha
     * @param float $fuzz
     * @param mixed $bordercolor
     * @param int $x
     * @param int $y
     * @return bool
     */
    function matteFloodfillImage(mixed $alpha, mixed $fuzz, mixed $bordercolor, mixed $x, mixed $y): mixed
-----
METHOD Imagick::medianFilterImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $radius
     * @return bool
     */
    function medianFilterImage(mixed $radius): mixed
-----
METHOD Imagick::mergeImageLayers
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $layer_method
     * @return Imagick
     */
    function mergeImageLayers(mixed $layer_method): mixed
-----
METHOD Imagick::minifyImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function minifyImage(): mixed
-----
METHOD Imagick::modulateImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $brightness
     * @param float $saturation
     * @param float $hue
     * @return bool
     */
    function modulateImage(mixed $brightness, mixed $saturation, mixed $hue): mixed
-----
METHOD Imagick::montageImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param imagickdraw $draw
     * @param string $tile_geometry
     * @param string $thumbnail_geometry
     * @param int $mode
     * @param string $frame
     * @return Imagick
     */
    function montageImage(ImagickDraw $draw, mixed $tile_geometry, mixed $thumbnail_geometry, mixed $mode, mixed $frame): mixed
-----
METHOD Imagick::morphImages
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $number_frames
     * @return Imagick
     */
    function morphImages(mixed $number_frames): mixed
-----
METHOD Imagick::morphology
-----
Has side-effects: Maybe
Throw type: ImagickException|ImagickKernelException
Visibility: public
Variants: 1
    /**
     * @param int $morphologyMethod
     * @param int $iterations
     * @param ImagickKernel $ImagickKernel
     * @param int $CHANNEL
     * @return bool
     */
    function morphology(mixed $morphologyMethod, mixed $iterations, ImagickKernel $ImagickKernel, mixed $CHANNEL = 134217719): mixed
-----
METHOD Imagick::mosaicImages
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return Imagick
     */
    function mosaicImages(): mixed
-----
METHOD Imagick::motionBlurImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $radius
     * @param float $sigma
     * @param float $angle
     * @param int $channel
     * @return bool
     */
    function motionBlurImage(mixed $radius, mixed $sigma, mixed $angle, mixed $channel = 134217719): mixed
-----
METHOD Imagick::negateImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param bool $gray
     * @param int $channel
     * @return bool
     */
    function negateImage(mixed $gray, mixed $channel = 134217727): mixed
-----
METHOD Imagick::newImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $cols
     * @param int $rows
     * @param mixed $background
     * @param string $format
     * @return bool
     */
    function newImage(mixed $cols, mixed $rows, mixed $background, mixed $format = null): mixed
-----
METHOD Imagick::newPseudoImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $columns
     * @param int $rows
     * @param string $pseudoString
     * @return bool
     */
    function newPseudoImage(mixed $columns, mixed $rows, mixed $pseudoString): mixed
-----
METHOD Imagick::nextImage
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function nextImage(): mixed
-----
METHOD Imagick::normalizeImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $channel
     * @return bool
     */
    function normalizeImage(mixed $channel = 134217727): mixed
-----
METHOD Imagick::oilPaintImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $radius
     * @return bool
     */
    function oilPaintImage(mixed $radius): mixed
-----
METHOD Imagick::opaquePaintImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param mixed $target
     * @param mixed $fill
     * @param float $fuzz
     * @param bool $invert
     * @param int $channel
     * @return bool
     */
    function opaquePaintImage(mixed $target, mixed $fill, mixed $fuzz, mixed $invert, mixed $channel = 134217719): mixed
-----
METHOD Imagick::optimizeImageLayers
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function optimizeImageLayers(): mixed
-----
METHOD Imagick::orderedPosterizeImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $threshold_map
     * @param int $channel
     * @return bool
     */
    function orderedPosterizeImage(mixed $threshold_map, mixed $channel = 134217727): mixed
-----
METHOD Imagick::paintFloodfillImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param mixed $fill
     * @param float $fuzz
     * @param mixed $bordercolor
     * @param int $x
     * @param int $y
     * @param int $channel
     * @return bool
     */
    function paintFloodfillImage(mixed $fill, mixed $fuzz, mixed $bordercolor, mixed $x, mixed $y, mixed $channel = 134217727): mixed
-----
METHOD Imagick::paintOpaqueImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param mixed $target
     * @param mixed $fill
     * @param float $fuzz
     * @param int $channel
     * @return bool
     */
    function paintOpaqueImage(mixed $target, mixed $fill, mixed $fuzz, mixed $channel = 134217727): mixed
-----
METHOD Imagick::paintTransparentImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param mixed $target
     * @param float $alpha
     * @param float $fuzz
     * @return bool
     */
    function paintTransparentImage(mixed $target, mixed $alpha, mixed $fuzz): mixed
-----
METHOD Imagick::pingImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @return bool
     */
    function pingImage(mixed $filename): mixed
-----
METHOD Imagick::pingImageBlob
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $image
     * @return bool
     */
    function pingImageBlob(mixed $image): mixed
-----
METHOD Imagick::pingImageFile
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param resource $filehandle
     * @param string $fileName
     * @return bool
     */
    function pingImageFile(mixed $filehandle, mixed $fileName = null): mixed
-----
METHOD Imagick::polaroidImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param imagickdraw $properties
     * @param float $angle
     * @return bool
     */
    function polaroidImage(ImagickDraw $properties, mixed $angle): mixed
-----
METHOD Imagick::posterizeImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $levels
     * @param bool $dither
     * @return bool
     */
    function posterizeImage(mixed $levels, mixed $dither): mixed
-----
METHOD Imagick::previewImages
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $preview
     * @return bool
     */
    function previewImages(mixed $preview): mixed
-----
METHOD Imagick::previousImage
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function previousImage(): mixed
-----
METHOD Imagick::profileImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string|null $profile
     * @return bool
     */
    function profileImage(mixed $name, mixed $profile): mixed
-----
METHOD Imagick::quantizeImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $numberColors
     * @param int $colorspace
     * @param int $treedepth
     * @param bool $dither
     * @param bool $measureError
     * @return bool
     */
    function quantizeImage(mixed $numberColors, mixed $colorspace, mixed $treedepth, mixed $dither, mixed $measureError): mixed
-----
METHOD Imagick::quantizeImages
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $numberColors
     * @param int $colorspace
     * @param int $treedepth
     * @param bool $dither
     * @param bool $measureError
     * @return bool
     */
    function quantizeImages(mixed $numberColors, mixed $colorspace, mixed $treedepth, mixed $dither, mixed $measureError): mixed
-----
METHOD Imagick::queryFontMetrics
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param imagickdraw $properties
     * @param string $text
     * @param bool $multiline
     * @return array{characterWidth: float, characterHeight: float, ascender: float, descender: float, textWidth: float, textHeight: float, maxHorizontalAdvance: float, boundingBox: array{x1: float, x2: float, y1: float, y2: float}, originX: float, originY: float}
     */
    function queryFontMetrics(ImagickDraw $properties, mixed $text, mixed $multiline = null): mixed
-----
METHOD Imagick::queryFonts
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $pattern
     * @return array<int, string>
     */
    function queryFonts(mixed $pattern = '*'): mixed
-----
METHOD Imagick::queryFormats
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $pattern
     * @return array<int, string>
     */
    function queryFormats(mixed $pattern = '*'): mixed
-----
METHOD Imagick::radialBlurImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $angle
     * @param int $channel
     * @return bool
     */
    function radialBlurImage(mixed $angle, mixed $channel = 134217727): mixed
-----
METHOD Imagick::raiseImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $width
     * @param int $height
     * @param int $x
     * @param int $y
     * @param bool $raise
     * @return bool
     */
    function raiseImage(mixed $width, mixed $height, mixed $x, mixed $y, mixed $raise): mixed
-----
METHOD Imagick::randomThresholdImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $low
     * @param float $high
     * @param int $channel
     * @return bool
     */
    function randomThresholdImage(mixed $low, mixed $high, mixed $channel = 134217727): mixed
-----
METHOD Imagick::readImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @return bool
     */
    function readImage(mixed $filename): mixed
-----
METHOD Imagick::readImageBlob
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $image
     * @param string $filename
     * @return bool
     */
    function readImageBlob(mixed $image, mixed $filename = null): mixed
-----
METHOD Imagick::readImageFile
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param resource $filehandle
     * @param string $fileName
     * @return bool
     */
    function readImageFile(mixed $filehandle, mixed $fileName = null): mixed
-----
METHOD Imagick::readimages
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $filenames
     * @return Imagick
     */
    function readImages(mixed $filenames): mixed
-----
METHOD Imagick::recolorImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param array $matrix
     * @return bool
     */
    function recolorImage(array $matrix): mixed
-----
METHOD Imagick::reduceNoiseImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $radius
     * @return bool
     */
    function reduceNoiseImage(mixed $radius): mixed
-----
METHOD Imagick::remapImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param imagick $replacement
     * @param int $DITHER
     * @return bool
     */
    function remapImage(Imagick $replacement, mixed $DITHER): mixed
-----
METHOD Imagick::removeImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function removeImage(): mixed
-----
METHOD Imagick::removeImageProfile
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return string
     */
    function removeImageProfile(mixed $name): mixed
-----
METHOD Imagick::render
-----
MISSING
-----
METHOD Imagick::resampleImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $x_resolution
     * @param float $y_resolution
     * @param int $filter
     * @param float $blur
     * @return bool
     */
    function resampleImage(mixed $x_resolution, mixed $y_resolution, mixed $filter, mixed $blur): mixed
-----
METHOD Imagick::resetImagePage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $page
     * @return bool
     */
    function resetImagePage(mixed $page): mixed
-----
METHOD Imagick::resizeImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $columns
     * @param int $rows
     * @param int $filter
     * @param float $blur
     * @param bool $bestfit
     * @return bool
     */
    function resizeImage(mixed $columns, mixed $rows, mixed $filter, mixed $blur, mixed $bestfit = false): mixed
-----
METHOD Imagick::rollImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $x
     * @param int $y
     * @return bool
     */
    function rollImage(mixed $x, mixed $y): mixed
-----
METHOD Imagick::rotateImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param mixed $background
     * @param float $degrees
     * @return bool
     */
    function rotateImage(mixed $background, mixed $degrees): mixed
-----
METHOD Imagick::rotationalBlurImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $angle
     * @param int $CHANNEL
     * @return bool
     */
    function rotationalBlurImage(mixed $angle, mixed $CHANNEL = 134217719): mixed
-----
METHOD Imagick::roundCorners
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $x_rounding
     * @param float $y_rounding
     * @param float $stroke_width
     * @param float $displace
     * @param float $size_correction
     * @return bool
     */
    function roundCorners(mixed $x_rounding, mixed $y_rounding, mixed $stroke_width = 10.0, mixed $displace = 5.0, mixed $size_correction = -6.0): mixed
-----
METHOD Imagick::sampleImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $columns
     * @param int $rows
     * @return bool
     */
    function sampleImage(mixed $columns, mixed $rows): mixed
-----
METHOD Imagick::scaleImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $columns
     * @param int $rows
     * @param bool $bestfit
     * @return bool
     */
    function scaleImage(mixed $columns, mixed $rows, mixed $bestfit = false): mixed
-----
METHOD Imagick::segmentImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $COLORSPACE
     * @param float $cluster_threshold
     * @param float $smooth_threshold
     * @param bool $verbose
     * @return bool
     */
    function segmentImage(mixed $COLORSPACE, mixed $cluster_threshold, mixed $smooth_threshold, mixed $verbose = false): mixed
-----
METHOD Imagick::selectiveBlurImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $radius
     * @param float $sigma
     * @param float $threshold
     * @param int $CHANNEL
     * @return bool
     */
    function selectiveBlurImage(mixed $radius, mixed $sigma, mixed $threshold, mixed $CHANNEL = 134217719): mixed
-----
METHOD Imagick::separateImageChannel
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $channel
     * @return bool
     */
    function separateImageChannel(mixed $channel): mixed
-----
METHOD Imagick::sepiaToneImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $threshold
     * @return bool
     */
    function sepiaToneImage(mixed $threshold): mixed
-----
METHOD Imagick::setBackgroundColor
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param mixed $background
     * @return bool
     */
    function setBackgroundColor(mixed $background): mixed
-----
METHOD Imagick::setColorspace
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $COLORSPACE
     * @return bool
     */
    function setColorspace(mixed $COLORSPACE): mixed
-----
METHOD Imagick::setCompression
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $compression
     * @return bool
     */
    function setCompression(mixed $compression): mixed
-----
METHOD Imagick::setCompressionQuality
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $quality
     * @return bool
     */
    function setCompressionQuality(mixed $quality): mixed
-----
METHOD Imagick::setFilename
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @return bool
     */
    function setFilename(mixed $filename): mixed
-----
METHOD Imagick::setFirstIterator
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function setFirstIterator(): mixed
-----
METHOD Imagick::setFont
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $font
     * @return bool
     */
    function setFont(mixed $font): mixed
-----
METHOD Imagick::setFormat
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $format
     * @return bool
     */
    function setFormat(mixed $format): mixed
-----
METHOD Imagick::setGravity
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $gravity
     * @return bool
     */
    function setGravity(mixed $gravity): mixed
-----
METHOD Imagick::setImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param imagick $replace
     * @return bool
     */
    function setImage(Imagick $replace): mixed
-----
METHOD Imagick::setImageAlphaChannel
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $mode
     * @return bool
     */
    function setImageAlphaChannel(mixed $mode): mixed
-----
METHOD Imagick::setImageArtifact
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $artifact
     * @param string $value
     * @return bool
     */
    function setImageArtifact(mixed $artifact, mixed $value): mixed
-----
METHOD Imagick::setImageAttribute
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @param string $value
     * @return bool
     */
    function setImageAttribute(mixed $key, mixed $value): mixed
-----
METHOD Imagick::setImageBackgroundColor
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param mixed $background
     * @return bool
     */
    function setImageBackgroundColor(mixed $background): mixed
-----
METHOD Imagick::setImageBias
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $bias
     * @return bool
     */
    function setImageBias(mixed $bias): mixed
-----
METHOD Imagick::setImageBiasQuantum
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $bias
     * @return void
     */
    function setImageBiasQuantum(mixed $bias): mixed
-----
METHOD Imagick::setImageBluePrimary
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $x
     * @param float $y
     * @return bool
     */
    function setImageBluePrimary(mixed $x, mixed $y): mixed
-----
METHOD Imagick::setImageBorderColor
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param mixed $border
     * @return bool
     */
    function setImageBorderColor(mixed $border): mixed
-----
METHOD Imagick::setImageChannelDepth
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $channel
     * @param int $depth
     * @return bool
     */
    function setImageChannelDepth(mixed $channel, mixed $depth): mixed
-----
METHOD Imagick::setImageClipMask
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param imagick $clip_mask
     * @return bool
     */
    function setImageClipMask(Imagick $clip_mask): mixed
-----
METHOD Imagick::setImageColormapColor
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @param imagickpixel $color
     * @return bool
     */
    function setImageColormapColor(mixed $index, ImagickPixel $color): mixed
-----
METHOD Imagick::setImageColorspace
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $colorspace
     * @return bool
     */
    function setImageColorspace(mixed $colorspace): mixed
-----
METHOD Imagick::setImageCompose
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $compose
     * @return bool
     */
    function setImageCompose(mixed $compose): mixed
-----
METHOD Imagick::setImageCompression
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $compression
     * @return bool
     */
    function setImageCompression(mixed $compression): mixed
-----
METHOD Imagick::setImageCompressionQuality
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $quality
     * @return bool
     */
    function setImageCompressionQuality(mixed $quality): mixed
-----
METHOD Imagick::setImageDelay
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $delay
     * @return bool
     */
    function setImageDelay(mixed $delay): mixed
-----
METHOD Imagick::setImageDepth
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $depth
     * @return bool
     */
    function setImageDepth(mixed $depth): mixed
-----
METHOD Imagick::setImageDispose
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $dispose
     * @return bool
     */
    function setImageDispose(mixed $dispose): mixed
-----
METHOD Imagick::setImageExtent
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $columns
     * @param int $rows
     * @return bool
     */
    function setImageExtent(mixed $columns, mixed $rows): mixed
-----
METHOD Imagick::setImageFilename
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @return bool
     */
    function setImageFilename(mixed $filename): mixed
-----
METHOD Imagick::setImageFormat
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $format
     * @return bool
     */
    function setImageFormat(mixed $format): mixed
-----
METHOD Imagick::setImageGamma
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $gamma
     * @return bool
     */
    function setImageGamma(mixed $gamma): mixed
-----
METHOD Imagick::setImageGravity
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $gravity
     * @return bool
     */
    function setImageGravity(mixed $gravity): mixed
-----
METHOD Imagick::setImageGreenPrimary
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $x
     * @param float $y
     * @return bool
     */
    function setImageGreenPrimary(mixed $x, mixed $y): mixed
-----
METHOD Imagick::setImageIndex
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @return bool
     */
    function setImageIndex(mixed $index): mixed
-----
METHOD Imagick::setImageInterlaceScheme
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $interlace_scheme
     * @return bool
     */
    function setImageInterlaceScheme(mixed $interlace_scheme): mixed
-----
METHOD Imagick::setImageInterpolateMethod
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $method
     * @return bool
     */
    function setImageInterpolateMethod(mixed $method): mixed
-----
METHOD Imagick::setImageIterations
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $iterations
     * @return bool
     */
    function setImageIterations(mixed $iterations): mixed
-----
METHOD Imagick::setImageMatte
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param bool $matte
     * @return bool
     */
    function setImageMatte(mixed $matte): mixed
-----
METHOD Imagick::setImageMatteColor
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param mixed $matte
     * @return bool
     */
    function setImageMatteColor(mixed $matte): mixed
-----
METHOD Imagick::setImageOpacity
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $opacity
     * @return bool
     */
    function setImageOpacity(mixed $opacity): mixed
-----
METHOD Imagick::setImageOrientation
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $orientation
     * @return bool
     */
    function setImageOrientation(mixed $orientation): mixed
-----
METHOD Imagick::setImagePage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $width
     * @param int $height
     * @param int $x
     * @param int $y
     * @return bool
     */
    function setImagePage(mixed $width, mixed $height, mixed $x, mixed $y): mixed
-----
METHOD Imagick::setImageProfile
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $profile
     * @return bool
     */
    function setImageProfile(mixed $name, mixed $profile): mixed
-----
METHOD Imagick::setImageProperty
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $value
     * @return bool
     */
    function setImageProperty(mixed $name, mixed $value): mixed
-----
METHOD Imagick::setImageRedPrimary
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $x
     * @param float $y
     * @return bool
     */
    function setImageRedPrimary(mixed $x, mixed $y): mixed
-----
METHOD Imagick::setImageRenderingIntent
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $rendering_intent
     * @return bool
     */
    function setImageRenderingIntent(mixed $rendering_intent): mixed
-----
METHOD Imagick::setImageResolution
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $x_resolution
     * @param float $y_resolution
     * @return bool
     */
    function setImageResolution(mixed $x_resolution, mixed $y_resolution): mixed
-----
METHOD Imagick::setImageScene
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $scene
     * @return bool
     */
    function setImageScene(mixed $scene): mixed
-----
METHOD Imagick::setImageTicksPerSecond
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $ticks_per_second
     * @return bool
     */
    function setImageTicksPerSecond(mixed $ticks_per_second): mixed
-----
METHOD Imagick::setImageType
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $image_type
     * @return bool
     */
    function setImageType(mixed $image_type): mixed
-----
METHOD Imagick::setImageUnits
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $units
     * @return bool
     */
    function setImageUnits(mixed $units): mixed
-----
METHOD Imagick::setImageVirtualPixelMethod
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $method
     * @return bool
     */
    function setImageVirtualPixelMethod(mixed $method): mixed
-----
METHOD Imagick::setImageWhitePoint
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $x
     * @param float $y
     * @return bool
     */
    function setImageWhitePoint(mixed $x, mixed $y): mixed
-----
METHOD Imagick::setInterlaceScheme
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $interlace_scheme
     * @return bool
     */
    function setInterlaceScheme(mixed $interlace_scheme): mixed
-----
METHOD Imagick::setIteratorIndex
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @return bool
     */
    function setIteratorIndex(mixed $index): mixed
-----
METHOD Imagick::setLastIterator
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function setLastIterator(): mixed
-----
METHOD Imagick::setOption
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @param string $value
     * @return bool
     */
    function setOption(mixed $key, mixed $value): mixed
-----
METHOD Imagick::setPage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $width
     * @param int $height
     * @param int $x
     * @param int $y
     * @return bool
     */
    function setPage(mixed $width, mixed $height, mixed $x, mixed $y): mixed
-----
METHOD Imagick::setPointSize
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $point_size
     * @return bool
     */
    function setPointSize(mixed $point_size): mixed
-----
METHOD Imagick::setProgressMonitor
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @return bool
     */
    function setProgressMonitor(mixed $callback): mixed
-----
METHOD Imagick::setRegistry
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @param string $value
     * @return bool
     */
    function setRegistry(mixed $key, mixed $value): mixed
-----
METHOD Imagick::setResolution
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $x_resolution
     * @param float $y_resolution
     * @return bool
     */
    function setResolution(mixed $x_resolution, mixed $y_resolution): mixed
-----
METHOD Imagick::setResourceLimit
-----
Has side-effects: Maybe
Throw type: ImagickException
Static
Visibility: public
Variants: 1
    /**
     * @param int $type
     * @param int $limit
     * @return bool
     */
    function setResourceLimit(mixed $type, mixed $limit): mixed
-----
METHOD Imagick::setSamplingFactors
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param array $factors
     * @return bool
     */
    function setSamplingFactors(array $factors): mixed
-----
METHOD Imagick::setSize
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $columns
     * @param int $rows
     * @return bool
     */
    function setSize(mixed $columns, mixed $rows): mixed
-----
METHOD Imagick::setSizeOffset
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $columns
     * @param int $rows
     * @param int $offset
     * @return bool
     */
    function setSizeOffset(mixed $columns, mixed $rows, mixed $offset): mixed
-----
METHOD Imagick::setType
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $image_type
     * @return bool
     */
    function setType(mixed $image_type): mixed
-----
METHOD Imagick::shadeImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param bool $gray
     * @param float $azimuth
     * @param float $elevation
     * @return bool
     */
    function shadeImage(mixed $gray, mixed $azimuth, mixed $elevation): mixed
-----
METHOD Imagick::shadowImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $opacity
     * @param float $sigma
     * @param int $x
     * @param int $y
     * @return bool
     */
    function shadowImage(mixed $opacity, mixed $sigma, mixed $x, mixed $y): mixed
-----
METHOD Imagick::sharpenImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $radius
     * @param float $sigma
     * @param int $channel
     * @return bool
     */
    function sharpenImage(mixed $radius, mixed $sigma, mixed $channel = 134217727): mixed
-----
METHOD Imagick::shaveImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $columns
     * @param int $rows
     * @return bool
     */
    function shaveImage(mixed $columns, mixed $rows): mixed
-----
METHOD Imagick::shearImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param mixed $background
     * @param float $x_shear
     * @param float $y_shear
     * @return bool
     */
    function shearImage(mixed $background, mixed $x_shear, mixed $y_shear): mixed
-----
METHOD Imagick::sigmoidalContrastImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param bool $sharpen
     * @param float $alpha
     * @param float $beta
     * @param int $channel
     * @return bool
     */
    function sigmoidalContrastImage(mixed $sharpen, mixed $alpha, mixed $beta, mixed $channel = 134217727): mixed
-----
METHOD Imagick::sketchImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $radius
     * @param float $sigma
     * @param float $angle
     * @return bool
     */
    function sketchImage(mixed $radius, mixed $sigma, mixed $angle): mixed
-----
METHOD Imagick::smushImages
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param bool $stack
     * @param int $offset
     * @return Imagick
     */
    function smushImages(mixed $stack, mixed $offset): mixed
-----
METHOD Imagick::solarizeImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int<0, max> $threshold
     * @return bool
     */
    function solarizeImage(mixed $threshold): mixed
-----
METHOD Imagick::sparseColorImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $SPARSE_METHOD
     * @param array $arguments
     * @param int $channel
     * @return bool
     */
    function sparseColorImage(mixed $SPARSE_METHOD, array $arguments, mixed $channel = 134217719): mixed
-----
METHOD Imagick::spliceImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $width
     * @param int $height
     * @param int $x
     * @param int $y
     * @return bool
     */
    function spliceImage(mixed $width, mixed $height, mixed $x, mixed $y): mixed
-----
METHOD Imagick::spreadImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $radius
     * @return bool
     */
    function spreadImage(mixed $radius): mixed
-----
METHOD Imagick::statisticImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $type
     * @param int $width
     * @param int $height
     * @param int $channel
     * @return bool
     */
    function statisticImage(mixed $type, mixed $width, mixed $height, mixed $channel = 134217719): mixed
-----
METHOD Imagick::steganoImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param imagick $watermark_wand
     * @param int $offset
     * @return Imagick
     */
    function steganoImage(Imagick $watermark_wand, mixed $offset): mixed
-----
METHOD Imagick::stereoImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param imagick $offset_wand
     * @return bool
     */
    function stereoImage(Imagick $offset_wand): mixed
-----
METHOD Imagick::stripImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function stripImage(): mixed
-----
METHOD Imagick::subImageMatch
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param Imagick $imagick
     * @param array $bestMatch
     * @param float $similarity
     * @return Imagick
     */
    function subImageMatch(Imagick $imagick, array &rw$bestMatch, mixed &rw$similarity): mixed
-----
METHOD Imagick::swirlImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $degrees
     * @return bool
     */
    function swirlImage(mixed $degrees): mixed
-----
METHOD Imagick::textureImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param imagick $texture_wand
     * @return Imagick
     */
    function textureImage(Imagick $texture_wand): mixed
-----
METHOD Imagick::thresholdImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $threshold
     * @param int $channel
     * @return bool
     */
    function thresholdImage(mixed $threshold, mixed $channel = 134217727): mixed
-----
METHOD Imagick::thumbnailImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $columns
     * @param int $rows
     * @param bool $bestfit
     * @param bool $fill
     * @param bool $legacy
     * @return bool
     */
    function thumbnailImage(mixed $columns, mixed $rows, mixed $bestfit = false, mixed $fill = false, mixed $legacy = false): mixed
-----
METHOD Imagick::tintImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param mixed $tint
     * @param mixed $opacity
     * @return bool
     */
    function tintImage(mixed $tint, mixed $opacity): mixed
-----
METHOD Imagick::transformImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $crop
     * @param string $geometry
     * @return Imagick
     */
    function transformImage(mixed $crop, mixed $geometry): mixed
-----
METHOD Imagick::transformImageColorspace
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $COLORSPACE
     * @return bool
     */
    function transformImageColorspace(mixed $COLORSPACE): mixed
-----
METHOD Imagick::transparentPaintImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param mixed $target
     * @param float $alpha
     * @param float $fuzz
     * @param bool $invert
     * @return bool
     */
    function transparentPaintImage(mixed $target, mixed $alpha, mixed $fuzz, mixed $invert): mixed
-----
METHOD Imagick::transposeImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function transposeImage(): mixed
-----
METHOD Imagick::transverseImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function transverseImage(): mixed
-----
METHOD Imagick::trimImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $fuzz
     * @return bool
     */
    function trimImage(mixed $fuzz): mixed
-----
METHOD Imagick::uniqueImageColors
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function uniqueImageColors(): mixed
-----
METHOD Imagick::unsharpMaskImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $radius
     * @param float $sigma
     * @param float $amount
     * @param float $threshold
     * @param int $channel
     * @return bool
     */
    function unsharpMaskImage(mixed $radius, mixed $sigma, mixed $amount, mixed $threshold, mixed $channel = 134217727): mixed
-----
METHOD Imagick::valid
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function valid(): mixed
-----
METHOD Imagick::vignetteImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $blackPoint
     * @param float $whitePoint
     * @param int $x
     * @param int $y
     * @return bool
     */
    function vignetteImage(mixed $blackPoint, mixed $whitePoint, mixed $x, mixed $y): mixed
-----
METHOD Imagick::waveImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param float $amplitude
     * @param float $length
     * @return bool
     */
    function waveImage(mixed $amplitude, mixed $length): mixed
-----
METHOD Imagick::whiteThresholdImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param mixed $threshold
     * @return bool
     */
    function whiteThresholdImage(mixed $threshold): mixed
-----
METHOD Imagick::writeImage
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @return bool
     */
    function writeImage(mixed $filename = null): mixed
-----
METHOD Imagick::writeImageFile
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param resource $filehandle
     * @return bool
     */
    function writeImageFile(mixed $filehandle): mixed
-----
METHOD Imagick::writeImages
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @param bool $adjoin
     * @return bool
     */
    function writeImages(mixed $filename, mixed $adjoin): mixed
-----
METHOD Imagick::writeImagesFile
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param resource $filehandle
     * @return bool
     */
    function writeImagesFile(mixed $filehandle): mixed
-----
CLASS ImagickDraw
-----
class ImagickDraw
{
}
-----
METHOD ImagickDraw::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD ImagickDraw::affine
-----
Has side-effects: Maybe
Throw type: ImagickDrawException
Visibility: public
Variants: 1
    /**
     * @param array $affine
     * @return bool
     */
    function affine(array $affine): mixed
-----
METHOD ImagickDraw::annotation
-----
Has side-effects: Maybe
Throw type: ImagickDrawException
Visibility: public
Variants: 1
    /**
     * @param float $x
     * @param float $y
     * @param string $text
     * @return bool
     */
    function annotation(mixed $x, mixed $y, mixed $text): mixed
-----
METHOD ImagickDraw::arc
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $sx
     * @param float $sy
     * @param float $ex
     * @param float $ey
     * @param float $sd
     * @param float $ed
     * @return bool
     */
    function arc(mixed $sx, mixed $sy, mixed $ex, mixed $ey, mixed $sd, mixed $ed): mixed
-----
METHOD ImagickDraw::bezier
-----
Has side-effects: Maybe
Throw type: ImagickDrawException
Visibility: public
Variants: 1
    /**
     * @param array $coordinates
     * @return bool
     */
    function bezier(array $coordinates): mixed
-----
METHOD ImagickDraw::circle
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $ox
     * @param float $oy
     * @param float $px
     * @param float $py
     * @return bool
     */
    function circle(mixed $ox, mixed $oy, mixed $px, mixed $py): mixed
-----
METHOD ImagickDraw::clear
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function clear(): mixed
-----
METHOD ImagickDraw::clone
-----
MISSING
-----
METHOD ImagickDraw::color
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $x
     * @param float $y
     * @param int $paintMethod
     * @return bool
     */
    function color(mixed $x, mixed $y, mixed $paintMethod): mixed
-----
METHOD ImagickDraw::comment
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $comment
     * @return bool
     */
    function comment(mixed $comment): mixed
-----
METHOD ImagickDraw::composite
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param int $compose
     * @param float $x
     * @param float $y
     * @param float $width
     * @param float $height
     * @param imagick $compositeWand
     * @return bool
     */
    function composite(mixed $compose, mixed $x, mixed $y, mixed $width, mixed $height, Imagick $compositeWand): mixed
-----
METHOD ImagickDraw::destroy
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function destroy(): mixed
-----
METHOD ImagickDraw::ellipse
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $ox
     * @param float $oy
     * @param float $rx
     * @param float $ry
     * @param float $start
     * @param float $end
     * @return bool
     */
    function ellipse(mixed $ox, mixed $oy, mixed $rx, mixed $ry, mixed $start, mixed $end): mixed
-----
METHOD ImagickDraw::getClipPath
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getClipPath(): mixed
-----
METHOD ImagickDraw::getClipRule
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getClipRule(): mixed
-----
METHOD ImagickDraw::getClipUnits
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getClipUnits(): mixed
-----
METHOD ImagickDraw::getFillColor
-----
Visibility: public
Variants: 1
    /**
     * @return ImagickPixel
     */
    function getFillColor(): mixed
-----
METHOD ImagickDraw::getFillOpacity
-----
Visibility: public
Variants: 1
    /**
     * @return float
     */
    function getFillOpacity(): mixed
-----
METHOD ImagickDraw::getFillRule
-----
Visibility: public
Variants: 1
    /**
     * @return 0|1|2
     */
    function getFillRule(): mixed
-----
METHOD ImagickDraw::getFont
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getFont(): mixed
-----
METHOD ImagickDraw::getFontFamily
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getFontFamily(): mixed
-----
METHOD ImagickDraw::getFontSize
-----
Visibility: public
Variants: 1
    /**
     * @return float
     */
    function getFontSize(): mixed
-----
METHOD ImagickDraw::getFontStretch
-----
Visibility: public
Variants: 1
    /**
     * @return 1|2|3|4|5|6|7|8|9|10
     */
    function getFontStretch(): mixed
-----
METHOD ImagickDraw::getFontStyle
-----
Visibility: public
Variants: 1
    /**
     * @return 1|2|3|4
     */
    function getFontStyle(): mixed
-----
METHOD ImagickDraw::getFontWeight
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getFontWeight(): mixed
-----
METHOD ImagickDraw::getGravity
-----
Visibility: public
Variants: 1
    /**
     * @return 0|1|2|3|4|5|6|7|8|9|10
     */
    function getGravity(): mixed
-----
METHOD ImagickDraw::getStrokeAntialias
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function getStrokeAntialias(): mixed
-----
METHOD ImagickDraw::getStrokeColor
-----
Visibility: public
Variants: 1
    /**
     * @return ImagickPixel
     */
    function getStrokeColor(): mixed
-----
METHOD ImagickDraw::getStrokeDashArray
-----
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getStrokeDashArray(): mixed
-----
METHOD ImagickDraw::getStrokeDashOffset
-----
Visibility: public
Variants: 1
    /**
     * @return float
     */
    function getStrokeDashOffset(): mixed
-----
METHOD ImagickDraw::getStrokeLineCap
-----
Visibility: public
Variants: 1
    /**
     * @return 0|1|2|3
     */
    function getStrokeLineCap(): mixed
-----
METHOD ImagickDraw::getStrokeLineJoin
-----
Visibility: public
Variants: 1
    /**
     * @return 0|1|2|3
     */
    function getStrokeLineJoin(): mixed
-----
METHOD ImagickDraw::getStrokeMiterLimit
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getStrokeMiterLimit(): mixed
-----
METHOD ImagickDraw::getStrokeOpacity
-----
Visibility: public
Variants: 1
    /**
     * @return float
     */
    function getStrokeOpacity(): mixed
-----
METHOD ImagickDraw::getStrokeWidth
-----
Visibility: public
Variants: 1
    /**
     * @return float
     */
    function getStrokeWidth(): mixed
-----
METHOD ImagickDraw::getTextAlignment
-----
Visibility: public
Variants: 1
    /**
     * @return 0|1|2|3
     */
    function getTextAlignment(): mixed
-----
METHOD ImagickDraw::getTextAntialias
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function getTextAntialias(): mixed
-----
METHOD ImagickDraw::getTextDecoration
-----
Visibility: public
Variants: 1
    /**
     * @return 1|2|3|4
     */
    function getTextDecoration(): mixed
-----
METHOD ImagickDraw::getTextEncoding
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getTextEncoding(): mixed
-----
METHOD ImagickDraw::getTextInterlineSpacing
-----
Visibility: public
Variants: 1
    /**
     * @return float
     */
    function getTextInterLineSpacing(): mixed
-----
METHOD ImagickDraw::getTextInterwordSpacing
-----
Visibility: public
Variants: 1
    /**
     * @return float
     */
    function getTextInterWordSpacing(): mixed
-----
METHOD ImagickDraw::getTextKerning
-----
Visibility: public
Variants: 1
    /**
     * @return float
     */
    function getTextKerning(): mixed
-----
METHOD ImagickDraw::getTextUnderColor
-----
Throw type: ImagickDrawException
Visibility: public
Variants: 1
    /**
     * @return ImagickPixel
     */
    function getTextUnderColor(): mixed
-----
METHOD ImagickDraw::getVectorGraphics
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getVectorGraphics(): mixed
-----
METHOD ImagickDraw::line
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $sx
     * @param float $sy
     * @param float $ex
     * @param float $ey
     * @return bool
     */
    function line(mixed $sx, mixed $sy, mixed $ex, mixed $ey): mixed
-----
METHOD ImagickDraw::matte
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $x
     * @param float $y
     * @param int $paintMethod
     * @return bool
     */
    function matte(mixed $x, mixed $y, mixed $paintMethod): mixed
-----
METHOD ImagickDraw::pathClose
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function pathClose(): mixed
-----
METHOD ImagickDraw::pathCurveToAbsolute
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $x1
     * @param float $y1
     * @param float $x2
     * @param float $y2
     * @param float $x
     * @param float $y
     * @return bool
     */
    function pathCurveToAbsolute(mixed $x1, mixed $y1, mixed $x2, mixed $y2, mixed $x, mixed $y): mixed
-----
METHOD ImagickDraw::pathCurveToQuadraticBezierAbsolute
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $x1
     * @param float $y1
     * @param float $x
     * @param float $y
     * @return bool
     */
    function pathCurveToQuadraticBezierAbsolute(mixed $x1, mixed $y1, mixed $x, mixed $y): mixed
-----
METHOD ImagickDraw::pathCurveToQuadraticBezierRelative
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $x1
     * @param float $y1
     * @param float $x
     * @param float $y
     * @return bool
     */
    function pathCurveToQuadraticBezierRelative(mixed $x1, mixed $y1, mixed $x, mixed $y): mixed
-----
METHOD ImagickDraw::pathCurveToQuadraticBezierSmoothAbsolute
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $x
     * @param float $y
     * @return bool
     */
    function pathCurveToQuadraticBezierSmoothAbsolute(mixed $x, mixed $y): mixed
-----
METHOD ImagickDraw::pathCurveToQuadraticBezierSmoothRelative
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $x
     * @param float $y
     * @return bool
     */
    function pathCurveToQuadraticBezierSmoothRelative(mixed $x, mixed $y): mixed
-----
METHOD ImagickDraw::pathCurveToRelative
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $x1
     * @param float $y1
     * @param float $x2
     * @param float $y2
     * @param float $x
     * @param float $y
     * @return bool
     */
    function pathCurveToRelative(mixed $x1, mixed $y1, mixed $x2, mixed $y2, mixed $x, mixed $y): mixed
-----
METHOD ImagickDraw::pathCurveToSmoothAbsolute
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $x2
     * @param float $y2
     * @param float $x
     * @param float $y
     * @return bool
     */
    function pathCurveToSmoothAbsolute(mixed $x2, mixed $y2, mixed $x, mixed $y): mixed
-----
METHOD ImagickDraw::pathCurveToSmoothRelative
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $x2
     * @param float $y2
     * @param float $x
     * @param float $y
     * @return bool
     */
    function pathCurveToSmoothRelative(mixed $x2, mixed $y2, mixed $x, mixed $y): mixed
-----
METHOD ImagickDraw::pathEllipticArcAbsolute
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $rx
     * @param float $ry
     * @param float $x_axis_rotation
     * @param bool $large_arc_flag
     * @param bool $sweep_flag
     * @param float $x
     * @param float $y
     * @return bool
     */
    function pathEllipticArcAbsolute(mixed $rx, mixed $ry, mixed $x_axis_rotation, mixed $large_arc_flag, mixed $sweep_flag, mixed $x, mixed $y): mixed
-----
METHOD ImagickDraw::pathEllipticArcRelative
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $rx
     * @param float $ry
     * @param float $x_axis_rotation
     * @param bool $large_arc_flag
     * @param bool $sweep_flag
     * @param float $x
     * @param float $y
     * @return bool
     */
    function pathEllipticArcRelative(mixed $rx, mixed $ry, mixed $x_axis_rotation, mixed $large_arc_flag, mixed $sweep_flag, mixed $x, mixed $y): mixed
-----
METHOD ImagickDraw::pathFinish
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function pathFinish(): mixed
-----
METHOD ImagickDraw::pathLineToAbsolute
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $x
     * @param float $y
     * @return bool
     */
    function pathLineToAbsolute(mixed $x, mixed $y): mixed
-----
METHOD ImagickDraw::pathLineToHorizontalAbsolute
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $x
     * @return bool
     */
    function pathLineToHorizontalAbsolute(mixed $x): mixed
-----
METHOD ImagickDraw::pathLineToHorizontalRelative
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $x
     * @return bool
     */
    function pathLineToHorizontalRelative(mixed $x): mixed
-----
METHOD ImagickDraw::pathLineToRelative
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $x
     * @param float $y
     * @return bool
     */
    function pathLineToRelative(mixed $x, mixed $y): mixed
-----
METHOD ImagickDraw::pathLineToVerticalAbsolute
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $y
     * @return bool
     */
    function pathLineToVerticalAbsolute(mixed $y): mixed
-----
METHOD ImagickDraw::pathLineToVerticalRelative
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $y
     * @return bool
     */
    function pathLineToVerticalRelative(mixed $y): mixed
-----
METHOD ImagickDraw::pathMoveToAbsolute
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $x
     * @param float $y
     * @return bool
     */
    function pathMoveToAbsolute(mixed $x, mixed $y): mixed
-----
METHOD ImagickDraw::pathMoveToRelative
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $x
     * @param float $y
     * @return bool
     */
    function pathMoveToRelative(mixed $x, mixed $y): mixed
-----
METHOD ImagickDraw::pathStart
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function pathStart(): mixed
-----
METHOD ImagickDraw::point
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $x
     * @param float $y
     * @return bool
     */
    function point(mixed $x, mixed $y): mixed
-----
METHOD ImagickDraw::polygon
-----
Has side-effects: Maybe
Throw type: ImagickDrawException
Visibility: public
Variants: 1
    /**
     * @param array $coordinates
     * @return bool
     */
    function polygon(array $coordinates): mixed
-----
METHOD ImagickDraw::polyline
-----
Has side-effects: Maybe
Throw type: ImagickDrawException
Visibility: public
Variants: 1
    /**
     * @param array $coordinates
     * @return bool
     */
    function polyline(array $coordinates): mixed
-----
METHOD ImagickDraw::pop
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function pop(): mixed
-----
METHOD ImagickDraw::popClipPath
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function popClipPath(): mixed
-----
METHOD ImagickDraw::popDefs
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function popDefs(): mixed
-----
METHOD ImagickDraw::popPattern
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function popPattern(): mixed
-----
METHOD ImagickDraw::push
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function push(): mixed
-----
METHOD ImagickDraw::pushClipPath
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $clip_mask_id
     * @return bool
     */
    function pushClipPath(mixed $clip_mask_id): mixed
-----
METHOD ImagickDraw::pushDefs
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function pushDefs(): mixed
-----
METHOD ImagickDraw::pushPattern
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $pattern_id
     * @param float $x
     * @param float $y
     * @param float $width
     * @param float $height
     * @return bool
     */
    function pushPattern(mixed $pattern_id, mixed $x, mixed $y, mixed $width, mixed $height): mixed
-----
METHOD ImagickDraw::rectangle
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $x1
     * @param float $y1
     * @param float $x2
     * @param float $y2
     * @return bool
     */
    function rectangle(mixed $x1, mixed $y1, mixed $x2, mixed $y2): mixed
-----
METHOD ImagickDraw::render
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function render(): mixed
-----
METHOD ImagickDraw::resetVectorGraphics
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function resetVectorGraphics(): mixed
-----
METHOD ImagickDraw::rotate
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $degrees
     * @return bool
     */
    function rotate(mixed $degrees): mixed
-----
METHOD ImagickDraw::roundRectangle
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $x1
     * @param float $y1
     * @param float $x2
     * @param float $y2
     * @param float $rx
     * @param float $ry
     * @return bool
     */
    function roundRectangle(mixed $x1, mixed $y1, mixed $x2, mixed $y2, mixed $rx, mixed $ry): mixed
-----
METHOD ImagickDraw::scale
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $x
     * @param float $y
     * @return bool
     */
    function scale(mixed $x, mixed $y): mixed
-----
METHOD ImagickDraw::setClipPath
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $clip_mask
     * @return bool
     */
    function setClipPath(mixed $clip_mask): mixed
-----
METHOD ImagickDraw::setClipRule
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $fill_rule
     * @return bool
     */
    function setClipRule(mixed $fill_rule): mixed
-----
METHOD ImagickDraw::setClipUnits
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $clip_units
     * @return bool
     */
    function setClipUnits(mixed $clip_units): mixed
-----
METHOD ImagickDraw::setFillAlpha
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $opacity
     * @return bool
     */
    function setFillAlpha(mixed $opacity): mixed
-----
METHOD ImagickDraw::setFillColor
-----
Has side-effects: Maybe
Throw type: ImagickDrawException
Visibility: public
Variants: 1
    /**
     * @param ImagickPixel|string $fill_pixel
     * @return bool
     */
    function setFillColor(ImagickPixel $fill_pixel): mixed
-----
METHOD ImagickDraw::setFillOpacity
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $fillOpacity
     * @return bool
     */
    function setFillOpacity(mixed $fillOpacity): mixed
-----
METHOD ImagickDraw::setFillPatternURL
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $fill_url
     * @return bool
     */
    function setFillPatternURL(mixed $fill_url): mixed
-----
METHOD ImagickDraw::setFillRule
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $fill_rule
     * @return bool
     */
    function setFillRule(mixed $fill_rule): mixed
-----
METHOD ImagickDraw::setFont
-----
Has side-effects: Maybe
Throw type: ImagickDrawException|ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $font_name
     * @return bool
     */
    function setFont(mixed $font_name): mixed
-----
METHOD ImagickDraw::setFontFamily
-----
Has side-effects: Maybe
Throw type: ImagickDrawException|ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $font_family
     * @return bool
     */
    function setFontFamily(mixed $font_family): mixed
-----
METHOD ImagickDraw::setFontSize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $pointsize
     * @return bool
     */
    function setFontSize(mixed $pointsize): mixed
-----
METHOD ImagickDraw::setFontStretch
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $fontStretch
     * @return bool
     */
    function setFontStretch(mixed $fontStretch): mixed
-----
METHOD ImagickDraw::setFontStyle
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $style
     * @return bool
     */
    function setFontStyle(mixed $style): mixed
-----
METHOD ImagickDraw::setFontWeight
-----
Has side-effects: Maybe
Throw type: ImagickDrawException
Visibility: public
Variants: 1
    /**
     * @param int $font_weight
     * @return bool
     */
    function setFontWeight(mixed $font_weight): mixed
-----
METHOD ImagickDraw::setGravity
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $gravity
     * @return bool
     */
    function setGravity(mixed $gravity): mixed
-----
METHOD ImagickDraw::setResolution
-----
Has side-effects: Yes
Throw type: ImagickDrawException
Visibility: public
Variants: 1
    /**
     * @param float $x_resolution
     * @param float $y_resolution
     * @return void
     */
    function setResolution(mixed $x_resolution, mixed $y_resolution): mixed
-----
METHOD ImagickDraw::setStrokeAlpha
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $opacity
     * @return bool
     */
    function setStrokeAlpha(mixed $opacity): mixed
-----
METHOD ImagickDraw::setStrokeAntialias
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $stroke_antialias
     * @return bool
     */
    function setStrokeAntialias(mixed $stroke_antialias): mixed
-----
METHOD ImagickDraw::setStrokeColor
-----
Has side-effects: Maybe
Throw type: ImagickDrawException
Visibility: public
Variants: 1
    /**
     * @param ImagickPixel|string $stroke_pixel
     * @return bool
     */
    function setStrokeColor(ImagickPixel $stroke_pixel): mixed
-----
METHOD ImagickDraw::setStrokeDashArray
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $dashArray
     * @return bool
     */
    function setStrokeDashArray(array $dashArray): mixed
-----
METHOD ImagickDraw::setStrokeDashOffset
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $dash_offset
     * @return bool
     */
    function setStrokeDashOffset(mixed $dash_offset): mixed
-----
METHOD ImagickDraw::setStrokeLineCap
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $linecap
     * @return bool
     */
    function setStrokeLineCap(mixed $linecap): mixed
-----
METHOD ImagickDraw::setStrokeLineJoin
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $linejoin
     * @return bool
     */
    function setStrokeLineJoin(mixed $linejoin): mixed
-----
METHOD ImagickDraw::setStrokeMiterLimit
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $miterlimit
     * @return bool
     */
    function setStrokeMiterLimit(mixed $miterlimit): mixed
-----
METHOD ImagickDraw::setStrokeOpacity
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $stroke_opacity
     * @return bool
     */
    function setStrokeOpacity(mixed $stroke_opacity): mixed
-----
METHOD ImagickDraw::setStrokePatternURL
-----
Has side-effects: Maybe
Throw type: ImagickException
Visibility: public
Variants: 1
    /**
     * @param string $stroke_url
     * @return bool
     */
    function setStrokePatternURL(mixed $stroke_url): mixed
-----
METHOD ImagickDraw::setStrokeWidth
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $stroke_width
     * @return bool
     */
    function setStrokeWidth(mixed $stroke_width): mixed
-----
METHOD ImagickDraw::setTextAlignment
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $alignment
     * @return bool
     */
    function setTextAlignment(mixed $alignment): mixed
-----
METHOD ImagickDraw::setTextAntialias
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $antiAlias
     * @return bool
     */
    function setTextAntialias(mixed $antiAlias): mixed
-----
METHOD ImagickDraw::setTextDecoration
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $decoration
     * @return bool
     */
    function setTextDecoration(mixed $decoration): mixed
-----
METHOD ImagickDraw::setTextEncoding
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $encoding
     * @return bool
     */
    function setTextEncoding(mixed $encoding): mixed
-----
METHOD ImagickDraw::setTextInterlineSpacing
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param float $spacing
     * @return void
     */
    function setTextInterLineSpacing(mixed $spacing): mixed
-----
METHOD ImagickDraw::setTextInterwordSpacing
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param float $spacing
     * @return void
     */
    function setTextInterWordSpacing(mixed $spacing): mixed
-----
METHOD ImagickDraw::setTextKerning
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param float $kerning
     * @return void
     */
    function setTextKerning(mixed $kerning): mixed
-----
METHOD ImagickDraw::setTextUnderColor
-----
Has side-effects: Maybe
Throw type: ImagickDrawException
Visibility: public
Variants: 1
    /**
     * @param ImagickPixel|string $under_color
     * @return bool
     */
    function setTextUnderColor(ImagickPixel $under_color): mixed
-----
METHOD ImagickDraw::setVectorGraphics
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $xml
     * @return bool
     */
    function setVectorGraphics(mixed $xml): mixed
-----
METHOD ImagickDraw::setViewbox
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $x1
     * @param int $y1
     * @param int $x2
     * @param int $y2
     * @return bool
     */
    function setViewbox(mixed $x1, mixed $y1, mixed $x2, mixed $y2): mixed
-----
METHOD ImagickDraw::skewX
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $degrees
     * @return bool
     */
    function skewX(mixed $degrees): mixed
-----
METHOD ImagickDraw::skewY
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $degrees
     * @return bool
     */
    function skewY(mixed $degrees): mixed
-----
METHOD ImagickDraw::translate
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $x
     * @param float $y
     * @return bool
     */
    function translate(mixed $x, mixed $y): mixed
-----
CLASS ImagickKernel
-----
class ImagickKernel
{
}
-----
METHOD ImagickKernel::addKernel
-----
Has side-effects: Yes
Throw type: ImagickKernelException
Visibility: public
Variants: 1
    /**
     * @param ImagickKernel $imagickKernel
     * @return void
     */
    function addKernel(ImagickKernel $imagickKernel): mixed
-----
METHOD ImagickKernel::addUnityKernel
-----
Has side-effects: Yes
Throw type: ImagickKernelException
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function addUnityKernel(): mixed
-----
METHOD ImagickKernel::fromBuiltIn
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int $kernelType
     * @param string $kernelString
     * @return ImagickKernel
     */
    function fromBuiltin(mixed $kernelType, mixed $kernelString): mixed
-----
METHOD ImagickKernel::fromMatrix
-----
Has side-effects: Maybe
Throw type: ImagickKernelException
Static
Visibility: public
Variants: 1
    /**
     * @param array $matrix
     * @param array $origin
     * @return ImagickKernel
     */
    function fromMatrix(mixed $matrix, mixed $origin): mixed
-----
METHOD ImagickKernel::getMatrix
-----
Throw type: ImagickKernelException
Visibility: public
Variants: 1
    /**
     * @return array<int, array<int, float|false>>
     */
    function getMatrix(): mixed
-----
METHOD ImagickKernel::scale
-----
Has side-effects: Yes
Throw type: ImagickKernelException
Visibility: public
Variants: 1
    /**
     * @param float $scale
     * @param int $normalizeFlag
     * @return void
     */
    function scale(mixed $scale, mixed $normalizeFlag): mixed
-----
METHOD ImagickKernel::separate
-----
MISSING
-----
CLASS ImagickPixel
-----
class ImagickPixel
{
}
-----
METHOD ImagickPixel::__construct
-----
Has side-effects: Maybe
Throw type: ImagickPixelException
Visibility: public
Variants: 1
    /**
     * @param string $color
     * @return void
     */
    function __construct(mixed $color = null): mixed
-----
METHOD ImagickPixel::clear
-----
Has side-effects: Maybe
Throw type: ImagickPixelException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function clear(): mixed
-----
METHOD ImagickPixel::destroy
-----
Has side-effects: Maybe
Throw type: ImagickPixelException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function destroy(): mixed
-----
METHOD ImagickPixel::getColor
-----
Visibility: public
Variants: 1
    /**
     * @param 0|1|2 $normalized
     * @return ($normalized is 0 ? array{r: int<0, 255>, g: int<0, 255>, b: int<0, 255>, a: int<0, 1>} : ($normalized is 1 ? array{r: float, g: float, b: float, a: float} : ($normalized is 2 ? array{r: int<0, 255>, g: int<0, 255>, b: int<0, 255>, a: int<0, 255>} : array{})))
     */
    function getColor(mixed $normalized = 0): mixed
-----
METHOD ImagickPixel::getColorAsString
-----
Throw type: ImagickPixelException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getColorAsString(): mixed
-----
METHOD ImagickPixel::getColorCount
-----
Throw type: ImagickPixelException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getColorCount(): mixed
-----
METHOD ImagickPixel::getColorQuantum
-----
Throw type: ImagickPixelException
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function getColorQuantum(): mixed
-----
METHOD ImagickPixel::getColorValue
-----
Throw type: ImagickPixelException
Visibility: public
Variants: 1
    /**
     * @param int $color
     * @return float
     */
    function getColorValue(mixed $color): mixed
-----
METHOD ImagickPixel::getColorValueQuantum
-----
Throw type: ImagickPixelException
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function getColorValueQuantum(): mixed
-----
METHOD ImagickPixel::getHSL
-----
Throw type: ImagickPixelException
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getHSL(): mixed
-----
METHOD ImagickPixel::getIndex
-----
Throw type: ImagickPixelException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getIndex(): mixed
-----
METHOD ImagickPixel::isPixelSimilar
-----
Has side-effects: Maybe
Throw type: ImagickPixelException
Visibility: public
Variants: 1
    /**
     * @param ImagickPixel $color
     * @param float $fuzz
     * @return bool
     */
    function isPixelSimilar(ImagickPixel $color, mixed $fuzz): mixed
-----
METHOD ImagickPixel::isPixelSimilarQuantum
-----
Has side-effects: Maybe
Throw type: ImagickPixelException
Visibility: public
Variants: 1
    /**
     * @param string $color
     * @param string $fuzz
     * @return bool
     */
    function isPixelSimilarQuantum(mixed $color, mixed $fuzz): mixed
-----
METHOD ImagickPixel::isSimilar
-----
Has side-effects: Maybe
Throw type: ImagickPixelException
Visibility: public
Variants: 1
    /**
     * @param imagickpixel $color
     * @param float $fuzz
     * @return bool
     */
    function isSimilar(ImagickPixel $color, mixed $fuzz): mixed
-----
METHOD ImagickPixel::setColor
-----
Has side-effects: Maybe
Throw type: ImagickPixelException
Visibility: public
Variants: 1
    /**
     * @param string $color
     * @return bool
     */
    function setColor(mixed $color): mixed
-----
METHOD ImagickPixel::setColorCount
-----
Has side-effects: Yes
Throw type: ImagickPixelException
Visibility: public
Variants: 1
    /**
     * @param string $colorCount
     * @return void
     */
    function setColorCount(mixed $colorCount): mixed
-----
METHOD ImagickPixel::setColorValue
-----
Has side-effects: Maybe
Throw type: ImagickPixelException
Visibility: public
Variants: 1
    /**
     * @param int $color
     * @param float $value
     * @return bool
     */
    function setColorValue(mixed $color, mixed $value): mixed
-----
METHOD ImagickPixel::setColorValueQuantum
-----
Has side-effects: Yes
Throw type: ImagickPixelException
Visibility: public
Variants: 1
    /**
     * @param int $color_value
     * @param mixed $value
     * @return void
     */
    function setColorValueQuantum(mixed $color_value, mixed $value): mixed
-----
METHOD ImagickPixel::setHSL
-----
Has side-effects: Maybe
Throw type: ImagickPixelException
Visibility: public
Variants: 1
    /**
     * @param float $hue
     * @param float $saturation
     * @param float $luminosity
     * @return bool
     */
    function setHSL(mixed $hue, mixed $saturation, mixed $luminosity): mixed
-----
METHOD ImagickPixel::setIndex
-----
Has side-effects: Yes
Throw type: ImagickPixelException
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @return void
     */
    function setIndex(mixed $index): mixed
-----
CLASS ImagickPixelIterator
-----
class ImagickPixelIterator implements Iterator
{
}
-----
METHOD ImagickPixelIterator::__construct
-----
Has side-effects: Maybe
Throw type: ImagickException|ImagickPixelIteratorException
Visibility: public
Variants: 1
    /**
     * @param imagick $wand
     * @return void
     */
    function __construct(Imagick $wand): mixed
-----
METHOD ImagickPixelIterator::clear
-----
Has side-effects: Maybe
Throw type: ImagickPixelIteratorException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function clear(): mixed
-----
METHOD ImagickPixelIterator::destroy
-----
Has side-effects: Maybe
Throw type: ImagickPixelIteratorException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function destroy(): mixed
-----
METHOD ImagickPixelIterator::getCurrentIteratorRow
-----
Throw type: ImagickPixelIteratorException
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getCurrentIteratorRow(): mixed
-----
METHOD ImagickPixelIterator::getIteratorRow
-----
Throw type: ImagickPixelIteratorException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getIteratorRow(): mixed
-----
METHOD ImagickPixelIterator::getNextIteratorRow
-----
Throw type: ImagickPixelIteratorException
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getNextIteratorRow(): mixed
-----
METHOD ImagickPixelIterator::getPreviousIteratorRow
-----
Throw type: ImagickPixelIteratorException
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getPreviousIteratorRow(): mixed
-----
METHOD ImagickPixelIterator::newPixelIterator
-----
Has side-effects: Maybe
Throw type: ImagickException|ImagickPixelIteratorException
Visibility: public
Variants: 1
    /**
     * @param imagick $wand
     * @return bool
     */
    function newPixelIterator(Imagick $wand): mixed
-----
METHOD ImagickPixelIterator::newPixelRegionIterator
-----
Has side-effects: Maybe
Throw type: ImagickException|ImagickPixelIteratorException
Visibility: public
Variants: 1
    /**
     * @param imagick $wand
     * @param int $x
     * @param int $y
     * @param int $columns
     * @param int $rows
     * @return bool
     */
    function newPixelRegionIterator(Imagick $wand, mixed $x, mixed $y, mixed $columns, mixed $rows): mixed
-----
METHOD ImagickPixelIterator::resetIterator
-----
Has side-effects: Maybe
Throw type: ImagickPixelIteratorException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function resetIterator(): mixed
-----
METHOD ImagickPixelIterator::setIteratorFirstRow
-----
Has side-effects: Maybe
Throw type: ImagickPixelIteratorException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function setIteratorFirstRow(): mixed
-----
METHOD ImagickPixelIterator::setIteratorLastRow
-----
Has side-effects: Maybe
Throw type: ImagickPixelIteratorException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function setIteratorLastRow(): mixed
-----
METHOD ImagickPixelIterator::setIteratorRow
-----
Has side-effects: Maybe
Throw type: ImagickPixelIteratorException
Visibility: public
Variants: 1
    /**
     * @param int $row
     * @return bool
     */
    function setIteratorRow(mixed $row): mixed
-----
METHOD ImagickPixelIterator::syncIterator
-----
Has side-effects: Maybe
Throw type: ImagickPixelIteratorException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function syncIterator(): mixed
-----
CLASS InfiniteIterator
-----
class InfiniteIterator extends IteratorIterator
{
}
-----
METHOD InfiniteIterator::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TIterator of Iterator<TKey (class InfiniteIterator, parameter), TValue (class InfiniteIterator, parameter)> (class InfiniteIterator, parameter) $iterator
     * @return void
     */
    function __construct(Iterator $iterator): mixed
-----
METHOD InfiniteIterator::next
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): mixed
-----
CLASS InternalIterator
-----
final class InternalIterator implements Iterator
{
}
-----
METHOD InternalIterator::__construct
-----
Has side-effects: Maybe
Visibility: private
Variants: 1
    /**
     * @return mixed
     */
    function __construct(): mixed
-----
METHOD InternalIterator::current
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function current(): mixed
-----
METHOD InternalIterator::key
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function key(): mixed
-----
METHOD InternalIterator::next
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): void
-----
METHOD InternalIterator::rewind
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): void
-----
METHOD InternalIterator::valid
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function valid(): bool
-----
CLASS IntlBreakIterator
-----
class IntlBreakIterator implements IteratorAggregate
{
}
-----
METHOD IntlBreakIterator::__construct
-----
Has side-effects: Maybe
Visibility: private
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD IntlBreakIterator::createCharacterInstance
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string|null $locale
     * @return IntlRuleBasedBreakIterator
     */
    function createCharacterInstance(string|null $locale = null): mixed
-----
METHOD IntlBreakIterator::createCodePointInstance
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return IntlCodePointBreakIterator
     */
    function createCodePointInstance(): mixed
-----
METHOD IntlBreakIterator::createLineInstance
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string|null $locale
     * @return IntlRuleBasedBreakIterator
     */
    function createLineInstance(string|null $locale = null): mixed
-----
METHOD IntlBreakIterator::createSentenceInstance
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string|null $locale
     * @return IntlRuleBasedBreakIterator
     */
    function createSentenceInstance(string|null $locale = null): mixed
-----
METHOD IntlBreakIterator::createTitleInstance
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string|null $locale
     * @return IntlRuleBasedBreakIterator
     */
    function createTitleInstance(string|null $locale = null): mixed
-----
METHOD IntlBreakIterator::createWordInstance
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string|null $locale
     * @return IntlRuleBasedBreakIterator
     */
    function createWordInstance(string|null $locale = null): mixed
-----
METHOD IntlBreakIterator::current
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function current(): mixed
-----
METHOD IntlBreakIterator::first
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function first(): mixed
-----
METHOD IntlBreakIterator::following
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $offset
     * @return int
     */
    function following(int $offset): mixed
-----
METHOD IntlBreakIterator::getErrorCode
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getErrorCode(): mixed
-----
METHOD IntlBreakIterator::getErrorMessage
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getErrorMessage(): mixed
-----
METHOD IntlBreakIterator::getLocale
-----
Visibility: public
Variants: 1
    /**
     * @param int $type
     * @return string
     */
    function getLocale(int $type): mixed
-----
METHOD IntlBreakIterator::getPartsIterator
-----
Visibility: public
Variants: 1
    /**
     * @param string $type
     * @return IntlPartsIterator
     */
    function getPartsIterator(string $type = 0): mixed
-----
METHOD IntlBreakIterator::getText
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getText(): mixed
-----
METHOD IntlBreakIterator::isBoundary
-----
Visibility: public
Variants: 1
    /**
     * @param int $offset
     * @return bool
     */
    function isBoundary(int $offset): mixed
-----
METHOD IntlBreakIterator::last
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function last(): mixed
-----
METHOD IntlBreakIterator::next
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int|null $offset
     * @return int
     */
    function next(int|null $offset = null): mixed
-----
METHOD IntlBreakIterator::preceding
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $offset
     * @return int
     */
    function preceding(int $offset): mixed
-----
METHOD IntlBreakIterator::previous
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function previous(): mixed
-----
METHOD IntlBreakIterator::setText
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $text
     * @return bool
     */
    function setText(string $text): mixed
-----
CLASS IntlCalendar
-----
class IntlCalendar
{
}
-----
METHOD IntlCalendar::__construct
-----
Has side-effects: Maybe
Visibility: private
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD IntlCalendar::add
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $field
     * @param int $value
     * @return bool
     */
    function add(int $field, int $value): mixed
-----
METHOD IntlCalendar::after
-----
Visibility: public
Variants: 1
    /**
     * @param IntlCalendar $other
     * @return bool
     */
    function after(IntlCalendar $other): mixed
-----
METHOD IntlCalendar::before
-----
Visibility: public
Variants: 1
    /**
     * @param IntlCalendar $other
     * @return bool
     */
    function before(IntlCalendar $other): mixed
-----
METHOD IntlCalendar::clear
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int|null $field
     * @return bool
     */
    function clear(int|null $field = null): mixed
-----
METHOD IntlCalendar::createInstance
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param DateTimeZone|IntlTimeZone|string|null $timezone
     * @param string|null $locale
     * @return IntlCalendar
     */
    function createInstance(mixed $timezone = null, string|null $locale = null): mixed
-----
METHOD IntlCalendar::equals
-----
Visibility: public
Variants: 1
    /**
     * @param IntlCalendar $other
     * @return bool
     */
    function equals(IntlCalendar $other): mixed
-----
METHOD IntlCalendar::fieldDifference
-----
Visibility: public
Variants: 1
    /**
     * @param float $timestamp
     * @param int $field
     * @return int
     */
    function fieldDifference(float $timestamp, int $field): mixed
-----
METHOD IntlCalendar::fromDateTime
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param DateTime|string $datetime
     * @param string|null $locale
     * @return IntlCalendar
     */
    function fromDateTime(DateTime|string $datetime, string|null $locale = null): mixed
-----
METHOD IntlCalendar::get
-----
Visibility: public
Variants: 1
    /**
     * @param int $field
     * @return int
     */
    function get(int $field): mixed
-----
METHOD IntlCalendar::getActualMaximum
-----
Visibility: public
Variants: 1
    /**
     * @param int $field
     * @return int
     */
    function getActualMaximum(int $field): mixed
-----
METHOD IntlCalendar::getActualMinimum
-----
Visibility: public
Variants: 1
    /**
     * @param int $field
     * @return int
     */
    function getActualMinimum(int $field): mixed
-----
METHOD IntlCalendar::getAvailableLocales
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getAvailableLocales(): mixed
-----
METHOD IntlCalendar::getDayOfWeekType
-----
Visibility: public
Variants: 1
    /**
     * @param int $dayOfWeek
     * @return int
     */
    function getDayOfWeekType(int $dayOfWeek): mixed
-----
METHOD IntlCalendar::getErrorCode
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getErrorCode(): mixed
-----
METHOD IntlCalendar::getErrorMessage
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getErrorMessage(): mixed
-----
METHOD IntlCalendar::getFirstDayOfWeek
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getFirstDayOfWeek(): mixed
-----
METHOD IntlCalendar::getGreatestMinimum
-----
Visibility: public
Variants: 1
    /**
     * @param int $field
     * @return int
     */
    function getGreatestMinimum(int $field): mixed
-----
METHOD IntlCalendar::getKeywordValuesForLocale
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $keyword
     * @param string $locale
     * @param bool $onlyCommon
     * @return Iterator
     */
    function getKeywordValuesForLocale(string $keyword, string $locale, bool $onlyCommon): mixed
-----
METHOD IntlCalendar::getLeastMaximum
-----
Visibility: public
Variants: 1
    /**
     * @param int $field
     * @return int
     */
    function getLeastMaximum(int $field): mixed
-----
METHOD IntlCalendar::getLocale
-----
Visibility: public
Variants: 1
    /**
     * @param int $type
     * @return string
     */
    function getLocale(int $type): mixed
-----
METHOD IntlCalendar::getMaximum
-----
Visibility: public
Variants: 1
    /**
     * @param int $field
     * @return int
     */
    function getMaximum(int $field): mixed
-----
METHOD IntlCalendar::getMinimalDaysInFirstWeek
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getMinimalDaysInFirstWeek(): mixed
-----
METHOD IntlCalendar::getMinimum
-----
Visibility: public
Variants: 1
    /**
     * @param int $field
     * @return int
     */
    function getMinimum(int $field): mixed
-----
METHOD IntlCalendar::getNow
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return float
     */
    function getNow(): mixed
-----
METHOD IntlCalendar::getRepeatedWallTimeOption
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getRepeatedWallTimeOption(): mixed
-----
METHOD IntlCalendar::getSkippedWallTimeOption
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getSkippedWallTimeOption(): mixed
-----
METHOD IntlCalendar::getTime
-----
Visibility: public
Variants: 1
    /**
     * @return float
     */
    function getTime(): mixed
-----
METHOD IntlCalendar::getTimeZone
-----
Visibility: public
Variants: 1
    /**
     * @return IntlTimeZone
     */
    function getTimeZone(): mixed
-----
METHOD IntlCalendar::getType
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getType(): mixed
-----
METHOD IntlCalendar::getWeekendTransition
-----
Visibility: public
Variants: 1
    /**
     * @param int $dayOfWeek
     * @return int
     */
    function getWeekendTransition(int $dayOfWeek): mixed
-----
METHOD IntlCalendar::inDaylightTime
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function inDaylightTime(): mixed
-----
METHOD IntlCalendar::isEquivalentTo
-----
Visibility: public
Variants: 1
    /**
     * @param IntlCalendar $other
     * @return bool
     */
    function isEquivalentTo(IntlCalendar $other): mixed
-----
METHOD IntlCalendar::isLenient
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isLenient(): mixed
-----
METHOD IntlCalendar::isSet
-----
MISSING
-----
METHOD IntlCalendar::isWeekend
-----
Visibility: public
Variants: 1
    /**
     * @param float|null $timestamp
     * @return bool
     */
    function isWeekend(float|null $timestamp = null): mixed
-----
METHOD IntlCalendar::roll
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $field
     * @param bool|int $value
     * @return bool
     */
    function roll(int $field, mixed $value): mixed
-----
METHOD IntlCalendar::set
-----
Has side-effects: Maybe
Visibility: public
Variants: 2
    /**
     * @param int $year
     * @param int $month
     * @return bool
     */
    function set(mixed $year, mixed $month): mixed
    /**
     * @param int $year
     * @param int $month
     * @param int $dayOfMonth
     * @param int $hour
     * @param int $minute
     * @param int $second
     * @return bool
     */
    function set(mixed $year, mixed $month, mixed $dayOfMonth = null, mixed $hour = null, mixed $minute = null, mixed $second = null): mixed
-----
METHOD IntlCalendar::setFirstDayOfWeek
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $dayOfWeek
     * @return bool
     */
    function setFirstDayOfWeek(int $dayOfWeek): mixed
-----
METHOD IntlCalendar::setLenient
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $lenient
     * @return bool
     */
    function setLenient(bool $lenient): mixed
-----
METHOD IntlCalendar::setMinimalDaysInFirstWeek
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $days
     * @return bool
     */
    function setMinimalDaysInFirstWeek(int $days): mixed
-----
METHOD IntlCalendar::setRepeatedWallTimeOption
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $option
     * @return bool
     */
    function setRepeatedWallTimeOption(int $option): mixed
-----
METHOD IntlCalendar::setSkippedWallTimeOption
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $option
     * @return bool
     */
    function setSkippedWallTimeOption(int $option): mixed
-----
METHOD IntlCalendar::setTime
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $timestamp
     * @return bool
     */
    function setTime(float $timestamp): mixed
-----
METHOD IntlCalendar::setTimeZone
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param DateTimeZone|IntlTimeZone|string|null $timezone
     * @return bool
     */
    function setTimeZone(mixed $timezone): mixed
-----
METHOD IntlCalendar::toDateTime
-----
Visibility: public
Variants: 1
    /**
     * @return DateTime
     */
    function toDateTime(): mixed
-----
CLASS IntlChar
-----
class IntlChar
{
}
-----
METHOD IntlChar::charAge
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return array
     */
    function charAge(int|string $codepoint): mixed
-----
METHOD IntlChar::charDigitValue
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return int
     */
    function charDigitValue(int|string $codepoint): mixed
-----
METHOD IntlChar::charDirection
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return int
     */
    function charDirection(int|string $codepoint): mixed
-----
METHOD IntlChar::charFromName
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param int $type
     * @return int
     */
    function charFromName(string $name, int $type = 0): mixed
-----
METHOD IntlChar::charMirror
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return mixed
     */
    function charMirror(int|string $codepoint): mixed
-----
METHOD IntlChar::charName
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @param int $type
     * @return string
     */
    function charName(int|string $codepoint, int $type = 0): mixed
-----
METHOD IntlChar::charType
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return int
     */
    function charType(int|string $codepoint): mixed
-----
METHOD IntlChar::chr
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return string
     */
    function chr(int|string $codepoint): mixed
-----
METHOD IntlChar::digit
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @param int $base
     * @return int
     */
    function digit(int|string $codepoint, int $base = 10): mixed
-----
METHOD IntlChar::enumCharNames
-----
Has side-effects: Yes
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $start
     * @param int|string $end
     * @param callable(): mixed $callback
     * @param int $type
     * @return void
     */
    function enumCharNames(int|string $start, int|string $end, callable(): mixed $callback, int $type = 0): mixed
-----
METHOD IntlChar::enumCharTypes
-----
Has side-effects: Yes
Static
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @return void
     */
    function enumCharTypes(callable(): mixed $callback): mixed
-----
METHOD IntlChar::foldCase
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @param int $options
     * @return int|string
     */
    function foldCase(int|string $codepoint, int $options = 0): mixed
-----
METHOD IntlChar::forDigit
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int $digit
     * @param int $base
     * @return int
     */
    function forDigit(int $digit, int $base = 10): mixed
-----
METHOD IntlChar::getBidiPairedBracket
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return mixed
     */
    function getBidiPairedBracket(int|string $codepoint): mixed
-----
METHOD IntlChar::getBlockCode
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return int
     */
    function getBlockCode(int|string $codepoint): mixed
-----
METHOD IntlChar::getCombiningClass
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return int
     */
    function getCombiningClass(int|string $codepoint): mixed
-----
METHOD IntlChar::getFC_NFKC_Closure
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return string
     */
    function getFC_NFKC_Closure(int|string $codepoint): mixed
-----
METHOD IntlChar::getIntPropertyMaxValue
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int $property
     * @return int
     */
    function getIntPropertyMaxValue(int $property): mixed
-----
METHOD IntlChar::getIntPropertyMinValue
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int $property
     * @return int
     */
    function getIntPropertyMinValue(int $property): mixed
-----
METHOD IntlChar::getIntPropertyValue
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @param int $property
     * @return int
     */
    function getIntPropertyValue(int|string $codepoint, int $property): mixed
-----
METHOD IntlChar::getNumericValue
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return float
     */
    function getNumericValue(int|string $codepoint): mixed
-----
METHOD IntlChar::getPropertyEnum
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $alias
     * @return int
     */
    function getPropertyEnum(string $alias): mixed
-----
METHOD IntlChar::getPropertyName
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int $property
     * @param int $type
     * @return string
     */
    function getPropertyName(int $property, int $type = 1): mixed
-----
METHOD IntlChar::getPropertyValueEnum
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int $property
     * @param string $name
     * @return int
     */
    function getPropertyValueEnum(int $property, string $name): mixed
-----
METHOD IntlChar::getPropertyValueName
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int $property
     * @param int $value
     * @param int $type
     * @return string
     */
    function getPropertyValueName(int $property, int $value, int $type = 1): mixed
-----
METHOD IntlChar::getUnicodeVersion
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getUnicodeVersion(): mixed
-----
METHOD IntlChar::hasBinaryProperty
-----
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @param int $property
     * @return bool
     */
    function hasBinaryProperty(int|string $codepoint, int $property): mixed
-----
METHOD IntlChar::isIDIgnorable
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return bool
     */
    function isIDIgnorable(int|string $codepoint): mixed
-----
METHOD IntlChar::isIDPart
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return bool
     */
    function isIDPart(int|string $codepoint): mixed
-----
METHOD IntlChar::isIDStart
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return bool
     */
    function isIDStart(int|string $codepoint): mixed
-----
METHOD IntlChar::isISOControl
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return bool
     */
    function isISOControl(int|string $codepoint): mixed
-----
METHOD IntlChar::isJavaIDPart
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return bool
     */
    function isJavaIDPart(int|string $codepoint): mixed
-----
METHOD IntlChar::isJavaIDStart
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return bool
     */
    function isJavaIDStart(int|string $codepoint): mixed
-----
METHOD IntlChar::isJavaSpaceChar
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return bool
     */
    function isJavaSpaceChar(int|string $codepoint): mixed
-----
METHOD IntlChar::isMirrored
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return bool
     */
    function isMirrored(int|string $codepoint): mixed
-----
METHOD IntlChar::isUAlphabetic
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return bool
     */
    function isUAlphabetic(int|string $codepoint): mixed
-----
METHOD IntlChar::isULowercase
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return bool
     */
    function isULowercase(int|string $codepoint): mixed
-----
METHOD IntlChar::isUUppercase
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return bool
     */
    function isUUppercase(int|string $codepoint): mixed
-----
METHOD IntlChar::isUWhiteSpace
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return bool
     */
    function isUWhiteSpace(int|string $codepoint): mixed
-----
METHOD IntlChar::isWhitespace
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return bool
     */
    function isWhitespace(int|string $codepoint): mixed
-----
METHOD IntlChar::isalnum
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return bool
     */
    function isalnum(int|string $codepoint): mixed
-----
METHOD IntlChar::isalpha
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return bool
     */
    function isalpha(int|string $codepoint): mixed
-----
METHOD IntlChar::isbase
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return bool
     */
    function isbase(int|string $codepoint): mixed
-----
METHOD IntlChar::isblank
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return bool
     */
    function isblank(int|string $codepoint): mixed
-----
METHOD IntlChar::iscntrl
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return bool
     */
    function iscntrl(int|string $codepoint): mixed
-----
METHOD IntlChar::isdefined
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return bool
     */
    function isdefined(int|string $codepoint): mixed
-----
METHOD IntlChar::isdigit
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return bool
     */
    function isdigit(int|string $codepoint): mixed
-----
METHOD IntlChar::isgraph
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return bool
     */
    function isgraph(int|string $codepoint): mixed
-----
METHOD IntlChar::islower
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return bool
     */
    function islower(int|string $codepoint): mixed
-----
METHOD IntlChar::isprint
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return bool
     */
    function isprint(int|string $codepoint): mixed
-----
METHOD IntlChar::ispunct
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return bool
     */
    function ispunct(int|string $codepoint): mixed
-----
METHOD IntlChar::isspace
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return bool
     */
    function isspace(int|string $codepoint): mixed
-----
METHOD IntlChar::istitle
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return bool
     */
    function istitle(int|string $codepoint): mixed
-----
METHOD IntlChar::isupper
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return bool
     */
    function isupper(int|string $codepoint): mixed
-----
METHOD IntlChar::isxdigit
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return bool
     */
    function isxdigit(int|string $codepoint): mixed
-----
METHOD IntlChar::ord
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $character
     * @return int
     */
    function ord(int|string $character): mixed
-----
METHOD IntlChar::tolower
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return mixed
     */
    function tolower(int|string $codepoint): mixed
-----
METHOD IntlChar::totitle
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return mixed
     */
    function totitle(int|string $codepoint): mixed
-----
METHOD IntlChar::toupper
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int|string $codepoint
     * @return mixed
     */
    function toupper(int|string $codepoint): mixed
-----
CLASS IntlCodePointBreakIterator
-----
class IntlCodePointBreakIterator extends IntlBreakIterator
{
}
-----
METHOD IntlCodePointBreakIterator::getLastCodePoint
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getLastCodePoint(): mixed
-----
CLASS IntlDateFormatter
-----
class IntlDateFormatter
{
}
-----
METHOD IntlDateFormatter::create
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string|null $locale
     * @param int $dateType
     * @param int $timeType
     * @param DateTimeZone|IntlTimeZone|string|null $timezone
     * @param int|IntlCalendar|null $calendar
     * @param string|null $pattern
     * @return IntlDateFormatter|null
     */
    function create(string|null $locale, int $dateType = 0, int $timeType = 0, mixed $timezone = null, int|IntlCalendar|null $calendar = null, string|null $pattern = null): mixed
-----
METHOD IntlDateFormatter::format
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array|DateTimeInterface|float|int|IntlCalendar|string $datetime
     * @return string|false
     */
    function format(mixed $datetime): mixed
-----
METHOD IntlDateFormatter::formatObject
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param DateTimeInterface|IntlCalendar $datetime
     * @param array|int|string|null $format
     * @param string|null $locale
     * @return string
     */
    function formatObject(mixed $datetime, mixed $format = null, string|null $locale = null): mixed
-----
METHOD IntlDateFormatter::getCalendar
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getCalendar(): mixed
-----
METHOD IntlDateFormatter::getCalendarObject
-----
Visibility: public
Variants: 1
    /**
     * @return IntlCalendar
     */
    function getCalendarObject(): mixed
-----
METHOD IntlDateFormatter::getDateType
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getDateType(): mixed
-----
METHOD IntlDateFormatter::getErrorCode
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getErrorCode(): mixed
-----
METHOD IntlDateFormatter::getErrorMessage
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getErrorMessage(): mixed
-----
METHOD IntlDateFormatter::getLocale
-----
Visibility: public
Variants: 1
    /**
     * @param int $type
     * @return string
     */
    function getLocale(int $type = 0): mixed
-----
METHOD IntlDateFormatter::getPattern
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getPattern(): mixed
-----
METHOD IntlDateFormatter::getTimeType
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getTimeType(): mixed
-----
METHOD IntlDateFormatter::getTimeZone
-----
Visibility: public
Variants: 1
    /**
     * @return IntlTimeZone
     */
    function getTimeZone(): mixed
-----
METHOD IntlDateFormatter::getTimeZoneId
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getTimeZoneId(): mixed
-----
METHOD IntlDateFormatter::isLenient
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isLenient(): mixed
-----
METHOD IntlDateFormatter::localtime
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $string
     * @param int $offset
     * @return array
     */
    function localtime(string $string, mixed &rw$offset = null): mixed
-----
METHOD IntlDateFormatter::parse
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $string
     * @param int $offset
     * @return int|false
     */
    function parse(string $string, mixed &rw$offset = null): mixed
-----
METHOD IntlDateFormatter::setCalendar
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int|IntlCalendar|null $calendar
     * @return bool
     */
    function setCalendar(int|IntlCalendar|null $calendar): mixed
-----
METHOD IntlDateFormatter::setLenient
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $lenient
     * @return bool
     */
    function setLenient(bool $lenient): mixed
-----
METHOD IntlDateFormatter::setPattern
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $pattern
     * @return bool
     */
    function setPattern(string $pattern): mixed
-----
METHOD IntlDateFormatter::setTimeZone
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param DateTimeZone|IntlTimeZone|string|null $timezone
     * @return bool
     */
    function setTimeZone(mixed $timezone): mixed
-----
CLASS IntlDatePatternGenerator
-----
class IntlDatePatternGenerator
{
}
-----
METHOD IntlDatePatternGenerator::create
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string|null $locale
     * @return IntlDatePatternGenerator|null
     */
    function create(string|null $locale = null): IntlDatePatternGenerator|null
-----
METHOD IntlDatePatternGenerator::getBestPattern
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $skeleton
     * @return string|false
     */
    function getBestPattern(string $skeleton): string|false
-----
CLASS IntlGregorianCalendar
-----
class IntlGregorianCalendar extends IntlCalendar
{
}
-----
METHOD IntlGregorianCalendar::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param DateTimeZone|int|IntlTimeZone|string|null $timezoneOrYear
     * @param int|string|null $localeOrMonth
     * @param int $day
     * @param int $hour
     * @param int $minute
     * @param int $second
     * @return mixed
     */
    function __construct(mixed $timezoneOrYear = *ERROR*, mixed $localeOrMonth = *ERROR*, mixed $day = *ERROR*, mixed $hour = *ERROR*, mixed $minute = *ERROR*, mixed $second = *ERROR*): mixed
-----
METHOD IntlGregorianCalendar::getGregorianChange
-----
Visibility: public
Variants: 1
    /**
     * @return float
     */
    function getGregorianChange(): mixed
-----
METHOD IntlGregorianCalendar::isLeapYear
-----
Visibility: public
Variants: 1
    /**
     * @param int $year
     * @return bool
     */
    function isLeapYear(int $year): mixed
-----
METHOD IntlGregorianCalendar::setGregorianChange
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $timestamp
     * @return bool
     */
    function setGregorianChange(float $timestamp): mixed
-----
CLASS IntlIterator
-----
class IntlIterator implements Iterator
{
}
-----
METHOD IntlIterator::current
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function current(): mixed
-----
METHOD IntlIterator::key
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function key(): mixed
-----
METHOD IntlIterator::next
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): mixed
-----
METHOD IntlIterator::rewind
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): mixed
-----
METHOD IntlIterator::valid
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function valid(): mixed
-----
CLASS IntlPartsIterator
-----
class IntlPartsIterator extends IntlIterator
{
}
-----
METHOD IntlPartsIterator::getBreakIterator
-----
Visibility: public
Variants: 1
    /**
     * @return IntlBreakIterator
     */
    function getBreakIterator(): mixed
-----
CLASS IntlRuleBasedBreakIterator
-----
class IntlRuleBasedBreakIterator extends IntlBreakIterator
{
}
-----
METHOD IntlRuleBasedBreakIterator::__construct
-----
Visibility: public
Variants: 1
    /**
     * @param string $rules
     * @param bool $compiled
     * @return void
     */
    function __construct(string $rules, bool $compiled = false): mixed
-----
METHOD IntlRuleBasedBreakIterator::getBinaryRules
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getBinaryRules(): mixed
-----
METHOD IntlRuleBasedBreakIterator::getRuleStatus
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getRuleStatus(): mixed
-----
METHOD IntlRuleBasedBreakIterator::getRuleStatusVec
-----
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getRuleStatusVec(): mixed
-----
METHOD IntlRuleBasedBreakIterator::getRules
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getRules(): mixed
-----
CLASS IntlTimeZone
-----
class IntlTimeZone
{
}
-----
METHOD IntlTimeZone::__construct
-----
Has side-effects: Maybe
Visibility: private
Variants: 1
    /**
     * @return mixed
     */
    function __construct(): mixed
-----
METHOD IntlTimeZone::countEquivalentIDs
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $timezoneId
     * @return int
     */
    function countEquivalentIDs(string $timezoneId): mixed
-----
METHOD IntlTimeZone::createDefault
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return IntlTimeZone
     */
    function createDefault(): mixed
-----
METHOD IntlTimeZone::createEnumeration
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param float|int|IntlTimeZone|string|null $countryOrRawOffset
     * @return IntlIterator
     */
    function createEnumeration(mixed $countryOrRawOffset = null): mixed
-----
METHOD IntlTimeZone::createTimeZone
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $timezoneId
     * @return IntlTimeZone
     */
    function createTimeZone(string $timezoneId): mixed
-----
METHOD IntlTimeZone::createTimeZoneIDEnumeration
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int $type
     * @param string|null $region
     * @param int|null $rawOffset
     * @return IntlIterator
     */
    function createTimeZoneIDEnumeration(int $type, string|null $region = null, int|null $rawOffset = null): mixed
-----
METHOD IntlTimeZone::fromDateTimeZone
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param DateTimeZone $timezone
     * @return IntlTimeZone
     */
    function fromDateTimeZone(DateTimeZone $timezone): mixed
-----
METHOD IntlTimeZone::getCanonicalID
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $timezoneId
     * @param bool $isSystemId
     * @return string
     */
    function getCanonicalID(string $timezoneId, mixed &rw$isSystemId = null): mixed
-----
METHOD IntlTimeZone::getDSTSavings
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getDSTSavings(): mixed
-----
METHOD IntlTimeZone::getDisplayName
-----
Visibility: public
Variants: 1
    /**
     * @param bool $dst
     * @param int $style
     * @param string|null $locale
     * @return string
     */
    function getDisplayName(bool $dst = false, int $style = 2, string|null $locale = null): mixed
-----
METHOD IntlTimeZone::getEquivalentID
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $timezoneId
     * @param int $offset
     * @return string
     */
    function getEquivalentID(string $timezoneId, int $offset): mixed
-----
METHOD IntlTimeZone::getErrorCode
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getErrorCode(): mixed
-----
METHOD IntlTimeZone::getErrorMessage
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getErrorMessage(): mixed
-----
METHOD IntlTimeZone::getGMT
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return IntlTimeZone
     */
    function getGMT(): mixed
-----
METHOD IntlTimeZone::getID
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getID(): mixed
-----
METHOD IntlTimeZone::getIDForWindowsID
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $timezoneId
     * @param string|null $region
     * @return string
     */
    function getIDForWindowsID(string $timezoneId, string|null $region = null): mixed
-----
METHOD IntlTimeZone::getOffset
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $timestamp
     * @param bool $local
     * @param int $rawOffset
     * @param int $dstOffset
     * @return int
     */
    function getOffset(float $timestamp, bool $local, mixed &rw$rawOffset, mixed &rw$dstOffset): mixed
-----
METHOD IntlTimeZone::getRawOffset
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getRawOffset(): mixed
-----
METHOD IntlTimeZone::getRegion
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $timezoneId
     * @return string
     */
    function getRegion(string $timezoneId): mixed
-----
METHOD IntlTimeZone::getTZDataVersion
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getTZDataVersion(): mixed
-----
METHOD IntlTimeZone::getUnknown
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return IntlTimeZone
     */
    function getUnknown(): mixed
-----
METHOD IntlTimeZone::getWindowsID
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $timezoneId
     * @return string
     */
    function getWindowsID(string $timezoneId): mixed
-----
METHOD IntlTimeZone::hasSameRules
-----
Visibility: public
Variants: 1
    /**
     * @param IntlTimeZone $other
     * @return bool
     */
    function hasSameRules(IntlTimeZone $other): mixed
-----
METHOD IntlTimeZone::toDateTimeZone
-----
Visibility: public
Variants: 1
    /**
     * @return DateTimeZone
     */
    function toDateTimeZone(): mixed
-----
METHOD IntlTimeZone::useDaylightTime
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function useDaylightTime(): mixed
-----
CLASS Iterator
-----
interface Iterator extends Traversable
{
}
-----
METHOD Iterator::current
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return TValue (class Iterator, parameter)
     */
    function current(): mixed
-----
METHOD Iterator::key
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return TKey (class Iterator, parameter)
     */
    function key(): mixed
-----
METHOD Iterator::next
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): mixed
-----
METHOD Iterator::rewind
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): mixed
-----
METHOD Iterator::valid
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function valid(): mixed
-----
CLASS IteratorAggregate
-----
interface IteratorAggregate extends Traversable
{
}
-----
METHOD IteratorAggregate::getIterator
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Traversable<TKey (class IteratorAggregate, parameter), TValue (class IteratorAggregate, parameter)>
     */
    function getIterator(): mixed
-----
CLASS IteratorIterator
-----
class IteratorIterator implements OuterIterator
{
}
-----
METHOD IteratorIterator::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TIterator of Traversable<TKey (class IteratorIterator, parameter), TValue (class IteratorIterator, parameter)> (class IteratorIterator, parameter) $iterator
     * @param string|null $class
     * @return void
     */
    function __construct(Traversable $iterator, string|null $class = null): mixed
-----
METHOD IteratorIterator::current
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return TValue (class IteratorIterator, parameter)
     */
    function current(): mixed
-----
METHOD IteratorIterator::getInnerIterator
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Iterator<TKey (class IteratorIterator, parameter), TValue (class IteratorIterator, parameter)>
     */
    function getInnerIterator(): mixed
-----
METHOD IteratorIterator::key
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return TKey (class IteratorIterator, parameter)
     */
    function key(): mixed
-----
METHOD IteratorIterator::next
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): mixed
-----
METHOD IteratorIterator::rewind
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): mixed
-----
METHOD IteratorIterator::valid
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function valid(): mixed
-----
CLASS JsonSerializable
-----
Not builtin
interface JsonSerializable
{
}
-----
METHOD JsonSerializable::jsonSerialize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function jsonSerialize(): mixed
-----
CLASS LimitIterator
-----
class LimitIterator extends IteratorIterator
{
}
-----
METHOD LimitIterator::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TIterator of Iterator<TKey (class LimitIterator, parameter), TValue (class LimitIterator, parameter)> (class LimitIterator, parameter) $iterator
     * @param int $offset
     * @param int $limit
     * @return void
     */
    function __construct(Iterator $iterator, int $offset = 0, int $limit = -1): mixed
-----
METHOD LimitIterator::current
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return TValue (class LimitIterator, parameter)
     */
    function current(): mixed
-----
METHOD LimitIterator::getPosition
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getPosition(): mixed
-----
METHOD LimitIterator::key
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return TKey (class LimitIterator, parameter)
     */
    function key(): mixed
-----
METHOD LimitIterator::next
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): mixed
-----
METHOD LimitIterator::rewind
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): mixed
-----
METHOD LimitIterator::seek
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $offset
     * @return int
     */
    function seek(int $offset): mixed
-----
METHOD LimitIterator::valid
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function valid(): mixed
-----
CLASS Locale
-----
class Locale
{
}
-----
METHOD Locale::acceptFromHttp
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $header
     * @return string|false
     */
    function acceptFromHttp(string $header): mixed
-----
METHOD Locale::canonicalize
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $locale
     * @return string
     */
    function canonicalize(string $locale): mixed
-----
METHOD Locale::composeLocale
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param array $subtags
     * @return string
     */
    function composeLocale(array $subtags): mixed
-----
METHOD Locale::filterMatches
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $languageTag
     * @param string $locale
     * @param bool $canonicalize
     * @return bool
     */
    function filterMatches(string $languageTag, string $locale, bool $canonicalize = false): mixed
-----
METHOD Locale::getAllVariants
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $locale
     * @return array
     */
    function getAllVariants(string $locale): mixed
-----
METHOD Locale::getDefault
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getDefault(): mixed
-----
METHOD Locale::getDisplayLanguage
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $locale
     * @param string|null $displayLocale
     * @return string
     */
    function getDisplayLanguage(string $locale, string|null $displayLocale = null): mixed
-----
METHOD Locale::getDisplayName
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $locale
     * @param string|null $displayLocale
     * @return string
     */
    function getDisplayName(string $locale, string|null $displayLocale = null): mixed
-----
METHOD Locale::getDisplayRegion
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $locale
     * @param string|null $displayLocale
     * @return string
     */
    function getDisplayRegion(string $locale, string|null $displayLocale = null): mixed
-----
METHOD Locale::getDisplayScript
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $locale
     * @param string|null $displayLocale
     * @return string
     */
    function getDisplayScript(string $locale, string|null $displayLocale = null): mixed
-----
METHOD Locale::getDisplayVariant
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $locale
     * @param string|null $displayLocale
     * @return string
     */
    function getDisplayVariant(string $locale, string|null $displayLocale = null): mixed
-----
METHOD Locale::getKeywords
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $locale
     * @return array|false
     */
    function getKeywords(string $locale): mixed
-----
METHOD Locale::getPrimaryLanguage
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $locale
     * @return string
     */
    function getPrimaryLanguage(string $locale): mixed
-----
METHOD Locale::getRegion
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $locale
     * @return string
     */
    function getRegion(string $locale): mixed
-----
METHOD Locale::getScript
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $locale
     * @return string
     */
    function getScript(string $locale): mixed
-----
METHOD Locale::lookup
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param array $languageTag
     * @param string $locale
     * @param bool $canonicalize
     * @param string|null $defaultLocale
     * @return string
     */
    function lookup(array $languageTag, string $locale, bool $canonicalize = false, string|null $defaultLocale = null): mixed
-----
METHOD Locale::parseLocale
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $locale
     * @return array
     */
    function parseLocale(string $locale): mixed
-----
METHOD Locale::setDefault
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $locale
     * @return bool
     */
    function setDefault(string $locale): mixed
-----
CLASS Lua
-----
class Lua
{
}
-----
METHOD Lua::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $lua_script_file
     * @return void
     */
    function __construct(string|null $lua_script_file = null): mixed
-----
METHOD Lua::assign
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $value
     * @return mixed
     */
    function assign(string $name, mixed $value): mixed
-----
METHOD Lua::call
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $lua_func
     * @param array $args
     * @param int $use_self
     * @return mixed
     */
    function call(callable(): mixed $lua_func, array $args = array{}, bool $use_self = false): mixed
-----
METHOD Lua::eval
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $statements
     * @return mixed
     */
    function eval(string $statements): mixed
-----
METHOD Lua::getVersion
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getVersion(): string
-----
METHOD Lua::include
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $file
     * @return mixed
     */
    function include(string $file): mixed
-----
METHOD Lua::registerCallback
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param callable(): mixed $function
     * @return mixed
     */
    function registerCallback(string $name, callable(): mixed $function): mixed
-----
CLASS LuaClosure
-----
MISSING
-----
CLASS LuaSandbox
-----
class LuaSandbox
{
}
-----
METHOD LuaSandbox::callFunction
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param array $arguments
     * @return *ERROR*
     */
    function callFunction(mixed $name, array $arguments): mixed
-----
METHOD LuaSandbox::disableProfiler
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function disableProfiler(): mixed
-----
METHOD LuaSandbox::enableProfiler
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $period
     * @return *ERROR*
     */
    function enableProfiler(mixed $period = 0.02): mixed
-----
METHOD LuaSandbox::getCPUUsage
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return *ERROR*
     */
    function getCPUUsage(): mixed
-----
METHOD LuaSandbox::getMemoryUsage
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getMemoryUsage(): mixed
-----
METHOD LuaSandbox::getPeakMemoryUsage
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return *ERROR*
     */
    function getPeakMemoryUsage(): mixed
-----
METHOD LuaSandbox::getProfilerFunctionReport
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $units
     * @return array<p>
     */
    function getProfilerFunctionReport(mixed $units = 1): mixed
-----
METHOD LuaSandbox::getVersionInfo
-----
Is internal: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getVersionInfo(): mixed
-----
METHOD LuaSandbox::loadBinary
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $code
     * @param string $chunkName
     * @return LuaSandboxFunction
     */
    function loadBinary(mixed $code, mixed $chunkName = ''): mixed
-----
METHOD LuaSandbox::loadString
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $code
     * @param string $chunkName
     * @return LuaSandboxFunction
     */
    function loadString(mixed $code, mixed $chunkName = ''): mixed
-----
METHOD LuaSandbox::pauseUsageTimer
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return *ERROR*
     */
    function pauseUsageTimer(): mixed
-----
METHOD LuaSandbox::registerLibrary
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $libname
     * @param array $functions
     * @return mixed
     */
    function registerLibrary(mixed $libname, mixed $functions): mixed
-----
METHOD LuaSandbox::setCPULimit
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool|float $limit
     * @return mixed
     */
    function setCPULimit(mixed $limit): mixed
-----
METHOD LuaSandbox::setMemoryLimit
-----
Is internal: Yes
Has side-effects: Maybe
Throw type: LuaSandboxMemoryError<p>
Visibility: public
Variants: 1
    /**
     * @param int $limit
     * @return mixed
     */
    function setMemoryLimit(mixed $limit): mixed
-----
METHOD LuaSandbox::unpauseUsageTimer
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function unpauseUsageTimer(): mixed
-----
METHOD LuaSandbox::wrapPhpFunction
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $function
     * @return LuaSandboxFunction
     */
    function wrapPhpFunction(mixed $function): mixed
-----
CLASS LuaSandboxFunction
-----
class LuaSandboxFunction
{
}
-----
METHOD LuaSandboxFunction::__construct
-----
MISSING
-----
METHOD LuaSandboxFunction::call
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array<string> $arguments
     * @return *ERROR*
     */
    function call(mixed $arguments): mixed
-----
METHOD LuaSandboxFunction::dump
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function dump(): mixed
-----
CLASS Memcache
-----
class Memcache extends MemcachePool
{
}
-----
METHOD Memcache::add
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @param mixed $var
     * @param int $flag
     * @param int $expire
     * @return bool
     */
    function add(mixed $key, mixed $var, mixed $flag = null, mixed $expire = null): mixed
-----
METHOD Memcache::addServer
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $host
     * @param int $port
     * @param bool $persistent
     * @param int|null $weight
     * @param int $timeout
     * @param int $retry_interval
     * @param bool $status
     * @param (callable(): mixed)|null $failure_callback
     * @param int|null $timeoutms
     * @return bool
     */
    function addServer(mixed $host, mixed $port = 11211, mixed $persistent = true, mixed $weight = null, mixed $timeout = 1, mixed $retry_interval = 15, mixed $status = true, (callable(): mixed)|null $failure_callback = null, mixed $timeoutms = null): mixed
-----
METHOD Memcache::close
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function close(): mixed
-----
METHOD Memcache::connect
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $host
     * @param int $port
     * @param int $timeout
     * @return *ERROR*
     */
    function connect(mixed $host, mixed $port, mixed $timeout = 1): mixed
-----
METHOD Memcache::decrement
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @param int $value
     * @return int
     */
    function decrement(mixed $key, mixed $value = 1): mixed
-----
METHOD Memcache::delete
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @param int $timeout
     * @return bool
     */
    function delete(mixed $key, mixed $timeout = 0): mixed
-----
METHOD Memcache::flush
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function flush(): mixed
-----
METHOD Memcache::get
-----
Has side-effects: Maybe
Visibility: public
Variants: 2
    /**
     * @param string $key
     * @param int $flags
     * @return mixed
     */
    function get(mixed $key, mixed &rw$flags = null): mixed
    /**
     * @param array<string> $key
     * @param array<int> $flags
     * @return array|false
     */
    function get(mixed $key, mixed &rw$flags = null): mixed
-----
METHOD Memcache::getExtendedStats
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $type
     * @param int $slabid
     * @param int $limit
     * @return array
     */
    function getExtendedStats(mixed $type = null, mixed $slabid = null, mixed $limit = 100): mixed
-----
METHOD Memcache::getServerStatus
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $host
     * @param int $port
     * @return int
     */
    function getServerStatus(mixed $host, mixed $port = 11211): mixed
-----
METHOD Memcache::getStats
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $type
     * @param int $slabid
     * @param int $limit
     * @return array
     */
    function getStats(mixed $type = null, mixed $slabid = null, mixed $limit = 100): mixed
-----
METHOD Memcache::getVersion
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getVersion(): mixed
-----
METHOD Memcache::increment
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @param int $value
     * @return int
     */
    function increment(mixed $key, mixed $value = 1): mixed
-----
METHOD Memcache::pconnect
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $host
     * @param int $port
     * @param int $timeout
     * @return bool
     */
    function pconnect(mixed $host, mixed $port, mixed $timeout = 1): mixed
-----
METHOD Memcache::replace
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @param mixed $var
     * @param int $flag
     * @param int $expire
     * @return bool
     */
    function replace(mixed $key, mixed $var, mixed $flag = null, mixed $expire = null): mixed
-----
METHOD Memcache::set
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @param mixed $var
     * @param int $flag
     * @param int $expire
     * @return bool
     */
    function set(mixed $key, mixed $var, mixed $flag = null, mixed $expire = null): mixed
-----
METHOD Memcache::setCompressThreshold
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $thresold
     * @param float $min_saving
     * @return bool
     */
    function setCompressThreshold(mixed $thresold, mixed $min_saving = 0.2): mixed
-----
METHOD Memcache::setServerParams
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $host
     * @param int $port
     * @param int $timeout
     * @param int $retry_interval
     * @param bool $status
     * @param callable(): mixed $failure_callback
     * @return bool
     */
    function setServerParams(mixed $host, mixed $port = 11211, mixed $timeout = 1, mixed $retry_interval = 15, mixed $status = true, (callable(): mixed)|null $failure_callback = null): mixed
-----
CLASS Memcached
-----
class Memcached
{
}
-----
METHOD Memcached::__construct
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $persistent_id
     * @param (callable(): mixed)|null $on_new_object_cb
     * @param string $connection_str
     * @return void
     */
    function __construct(mixed $persistent_id = '', mixed $on_new_object_cb = null, mixed $connection_str = ''): mixed
-----
METHOD Memcached::add
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @param mixed $value
     * @param int $expiration
     * @return bool
     */
    function add(mixed $key, mixed $value, mixed $expiration = 0): mixed
-----
METHOD Memcached::addByKey
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $server_key
     * @param string $key
     * @param mixed $value
     * @param int $expiration
     * @return bool
     */
    function addByKey(mixed $server_key, mixed $key, mixed $value, mixed $expiration = 0): mixed
-----
METHOD Memcached::addServer
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $host
     * @param int $port
     * @param int $weight
     * @return bool
     */
    function addServer(mixed $host, mixed $port, mixed $weight = 0): mixed
-----
METHOD Memcached::addServers
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $servers
     * @return bool
     */
    function addServers(array $servers): mixed
-----
METHOD Memcached::append
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @param string $value
     * @return bool
     */
    function append(mixed $key, mixed $value): mixed
-----
METHOD Memcached::appendByKey
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $server_key
     * @param string $key
     * @param string $value
     * @return bool
     */
    function appendByKey(mixed $server_key, mixed $key, mixed $value): mixed
-----
METHOD Memcached::cas
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $cas_token
     * @param string $key
     * @param mixed $value
     * @param int $expiration
     * @return bool
     */
    function cas(mixed $cas_token, mixed $key, mixed $value, mixed $expiration = 0): mixed
-----
METHOD Memcached::casByKey
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $cas_token
     * @param string $server_key
     * @param string $key
     * @param mixed $value
     * @param int $expiration
     * @return bool
     */
    function casByKey(mixed $cas_token, mixed $server_key, mixed $key, mixed $value, mixed $expiration = 0): mixed
-----
METHOD Memcached::decrement
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @param int $offset
     * @param int $initial_value
     * @param int $expiry
     * @return int|false
     */
    function decrement(mixed $key, mixed $offset = 1, mixed $initial_value = 0, mixed $expiry = 0): mixed
-----
METHOD Memcached::decrementByKey
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $server_key
     * @param string $key
     * @param int $offset
     * @param int $initial_value
     * @param int $expiry
     * @return int|false
     */
    function decrementByKey(mixed $server_key, mixed $key, mixed $offset = 1, mixed $initial_value = 0, mixed $expiry = 0): mixed
-----
METHOD Memcached::delete
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @param int $time
     * @return bool
     */
    function delete(mixed $key, mixed $time = 0): mixed
-----
METHOD Memcached::deleteByKey
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $server_key
     * @param string $key
     * @param int $time
     * @return bool
     */
    function deleteByKey(mixed $server_key, mixed $key, mixed $time = 0): mixed
-----
METHOD Memcached::deleteMulti
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $keys
     * @param int $time
     * @return array
     */
    function deleteMulti(array $keys, mixed $time = 0): mixed
-----
METHOD Memcached::deleteMultiByKey
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $server_key
     * @param array $keys
     * @param int $time
     * @return bool
     */
    function deleteMultiByKey(mixed $server_key, array $keys, mixed $time = 0): mixed
-----
METHOD Memcached::fetch
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function fetch(): mixed
-----
METHOD Memcached::fetchAll
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function fetchAll(): mixed
-----
METHOD Memcached::flush
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $delay
     * @return bool
     */
    function flush(mixed $delay = 0): mixed
-----
METHOD Memcached::get
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @param (callable(): mixed)|null $cache_cb
     * @param int $flags
     * @return mixed
     */
    function get(mixed $key, (callable(): mixed)|null $cache_cb = null, mixed $flags = 0): mixed
-----
METHOD Memcached::getAllKeys
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array|false
     */
    function getAllKeys(): mixed
-----
METHOD Memcached::getByKey
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $server_key
     * @param string $key
     * @param (callable(): mixed)|null $cache_cb
     * @param int $flags
     * @return mixed
     */
    function getByKey(mixed $server_key, mixed $key, (callable(): mixed)|null $cache_cb = null, mixed $flags = 0): mixed
-----
METHOD Memcached::getDelayed
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $keys
     * @param bool $with_cas
     * @param callable(): mixed $value_cb
     * @return bool
     */
    function getDelayed(array $keys, mixed $with_cas = null, (callable(): mixed)|null $value_cb = null): mixed
-----
METHOD Memcached::getDelayedByKey
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $server_key
     * @param array $keys
     * @param bool $with_cas
     * @param (callable(): mixed)|null $value_cb
     * @return bool
     */
    function getDelayedByKey(mixed $server_key, array $keys, mixed $with_cas = null, (callable(): mixed)|null $value_cb = null): mixed
-----
METHOD Memcached::getMulti
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $keys
     * @param int $flags
     * @return array|false
     */
    function getMulti(array $keys, mixed $flags = 0): mixed
-----
METHOD Memcached::getMultiByKey
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $server_key
     * @param array $keys
     * @param int $flags
     * @return array
     */
    function getMultiByKey(mixed $server_key, array $keys, mixed $flags = 0): mixed
-----
METHOD Memcached::getOption
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $option
     * @return mixed
     */
    function getOption(mixed $option): mixed
-----
METHOD Memcached::getResultCode
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getResultCode(): mixed
-----
METHOD Memcached::getResultMessage
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getResultMessage(): mixed
-----
METHOD Memcached::getServerByKey
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $server_key
     * @return array
     */
    function getServerByKey(mixed $server_key): mixed
-----
METHOD Memcached::getServerList
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getServerList(): mixed
-----
METHOD Memcached::getStats
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string|null $type
     * @return array
     */
    function getStats(mixed $type = null): mixed
-----
METHOD Memcached::getVersion
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getVersion(): mixed
-----
METHOD Memcached::increment
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @param int $offset
     * @param int $initial_value
     * @param int $expiry
     * @return int|false
     */
    function increment(mixed $key, mixed $offset = 1, mixed $initial_value = 0, mixed $expiry = 0): mixed
-----
METHOD Memcached::incrementByKey
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $server_key
     * @param string $key
     * @param int $offset
     * @param int $initial_value
     * @param int $expiry
     * @return int|false
     */
    function incrementByKey(mixed $server_key, mixed $key, mixed $offset = 1, mixed $initial_value = 0, mixed $expiry = 0): mixed
-----
METHOD Memcached::isPersistent
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isPersistent(): mixed
-----
METHOD Memcached::isPristine
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isPristine(): mixed
-----
METHOD Memcached::prepend
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @param string $value
     * @return bool
     */
    function prepend(mixed $key, mixed $value): mixed
-----
METHOD Memcached::prependByKey
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $server_key
     * @param string $key
     * @param string $value
     * @return bool
     */
    function prependByKey(mixed $server_key, mixed $key, mixed $value): mixed
-----
METHOD Memcached::quit
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function quit(): mixed
-----
METHOD Memcached::replace
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @param mixed $value
     * @param int $expiration
     * @return bool
     */
    function replace(mixed $key, mixed $value, mixed $expiration = null): mixed
-----
METHOD Memcached::replaceByKey
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $server_key
     * @param string $key
     * @param mixed $value
     * @param int $expiration
     * @return bool
     */
    function replaceByKey(mixed $server_key, mixed $key, mixed $value, mixed $expiration = null): mixed
-----
METHOD Memcached::resetServerList
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function resetServerList(): mixed
-----
METHOD Memcached::set
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @param mixed $value
     * @param int $expiration
     * @return bool
     */
    function set(mixed $key, mixed $value, mixed $expiration = 0): mixed
-----
METHOD Memcached::setByKey
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $server_key
     * @param string $key
     * @param mixed $value
     * @param int $expiration
     * @return bool
     */
    function setByKey(mixed $server_key, mixed $key, mixed $value, mixed $expiration = 0): mixed
-----
METHOD Memcached::setMulti
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $items
     * @param int $expiration
     * @return bool
     */
    function setMulti(array $items, mixed $expiration = 0): mixed
-----
METHOD Memcached::setMultiByKey
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $server_key
     * @param array $items
     * @param int $expiration
     * @return bool
     */
    function setMultiByKey(mixed $server_key, array $items, mixed $expiration = 0): mixed
-----
METHOD Memcached::setOption
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $option
     * @param mixed $value
     * @return bool
     */
    function setOption(mixed $option, mixed $value): mixed
-----
METHOD Memcached::setOptions
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $options
     * @return bool
     */
    function setOptions(array $options): mixed
-----
METHOD Memcached::setSaslAuthData
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $username
     * @param string $password
     * @return void
     */
    function setSaslAuthData(string $username, string $password): mixed
-----
METHOD Memcached::touch
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @param int $expiration
     * @return bool
     */
    function touch(mixed $key, mixed $expiration = 0): mixed
-----
METHOD Memcached::touchByKey
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $server_key
     * @param string $key
     * @param int $expiration
     * @return bool
     */
    function touchByKey(mixed $server_key, mixed $key, mixed $expiration): mixed
-----
CLASS MessageFormatter
-----
class MessageFormatter
{
}
-----
METHOD MessageFormatter::create
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $locale
     * @param string $pattern
     * @return MessageFormatter
     */
    function create(string $locale, string $pattern): mixed
-----
METHOD MessageFormatter::format
-----
Visibility: public
Variants: 1
    /**
     * @param array $values
     * @return string|false
     */
    function format(array $values): mixed
-----
METHOD MessageFormatter::formatMessage
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $locale
     * @param string $pattern
     * @param array $values
     * @return string|false
     */
    function formatMessage(string $locale, string $pattern, array $values): mixed
-----
METHOD MessageFormatter::getErrorCode
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getErrorCode(): mixed
-----
METHOD MessageFormatter::getErrorMessage
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getErrorMessage(): mixed
-----
METHOD MessageFormatter::getLocale
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getLocale(): mixed
-----
METHOD MessageFormatter::getPattern
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getPattern(): mixed
-----
METHOD MessageFormatter::parse
-----
Visibility: public
Variants: 1
    /**
     * @param string $string
     * @return array
     */
    function parse(string $string): mixed
-----
METHOD MessageFormatter::parseMessage
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $locale
     * @param string $pattern
     * @param string $message
     * @return array
     */
    function parseMessage(string $locale, string $pattern, string $message): mixed
-----
METHOD MessageFormatter::setPattern
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $pattern
     * @return bool
     */
    function setPattern(string $pattern): mixed
-----
CLASS MongoDB\BSON\Binary
-----
final class MongoDB\BSON\Binary implements MongoDB\BSON\Type, MongoDB\BSON\BinaryInterface, Serializable, JsonSerializable
{
}
-----
METHOD MongoDB\BSON\Binary::__construct
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @param int $type
     * @return void
     */
    function __construct(string $data, int $type = 0): mixed
-----
METHOD MongoDB\BSON\Binary::__toString
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): string
-----
METHOD MongoDB\BSON\Binary::getData
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getData(): string
-----
METHOD MongoDB\BSON\Binary::getType
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getType(): int
-----
METHOD MongoDB\BSON\Binary::jsonSerialize
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function jsonSerialize(): mixed
-----
METHOD MongoDB\BSON\Binary::serialize
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function serialize(): string
-----
METHOD MongoDB\BSON\Binary::unserialize
-----
Is final: Yes
Has side-effects: Yes
Throw type: MongoDB\Driver\Exception\InvalidArgumentException|MongoDB\Driver\Exception\UnexpectedValueException
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return void
     */
    function unserialize(string $data): mixed
-----
CLASS MongoDB\BSON\BinaryInterface
-----
interface MongoDB\BSON\BinaryInterface extends Stringable
{
}
-----
METHOD MongoDB\BSON\BinaryInterface::__toString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): mixed
-----
METHOD MongoDB\BSON\BinaryInterface::getData
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getData(): mixed
-----
METHOD MongoDB\BSON\BinaryInterface::getType
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getType(): mixed
-----
CLASS MongoDB\BSON\DBPointer
-----
Deprecated
final class MongoDB\BSON\DBPointer implements MongoDB\BSON\Type, Serializable, JsonSerializable, Stringable
{
}
-----
METHOD MongoDB\BSON\DBPointer::__construct
-----
Is final: Yes
Is internal: Yes
Has side-effects: Maybe
Visibility: private
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD MongoDB\BSON\DBPointer::__toString
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): string
-----
METHOD MongoDB\BSON\DBPointer::jsonSerialize
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function jsonSerialize(): mixed
-----
METHOD MongoDB\BSON\DBPointer::serialize
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function serialize(): string
-----
METHOD MongoDB\BSON\DBPointer::unserialize
-----
Is final: Yes
Has side-effects: Yes
Throw type: MongoDB\Driver\Exception\InvalidArgumentException|MongoDB\Driver\Exception\UnexpectedValueException
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return void
     */
    function unserialize(string $data): void
-----
CLASS MongoDB\BSON\Decimal128
-----
final class MongoDB\BSON\Decimal128 implements MongoDB\BSON\Type, MongoDB\BSON\Decimal128Interface, Serializable, JsonSerializable
{
}
-----
METHOD MongoDB\BSON\Decimal128::__construct
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $value
     * @return void
     */
    function __construct(string $value = ''): mixed
-----
METHOD MongoDB\BSON\Decimal128::__toString
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): string
-----
METHOD MongoDB\BSON\Decimal128::jsonSerialize
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function jsonSerialize(): mixed
-----
METHOD MongoDB\BSON\Decimal128::serialize
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function serialize(): string
-----
METHOD MongoDB\BSON\Decimal128::unserialize
-----
Is final: Yes
Has side-effects: Yes
Throw type: MongoDB\Driver\Exception\InvalidArgumentException|MongoDB\Driver\Exception\UnexpectedValueException
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return void
     */
    function unserialize(string $data): void
-----
CLASS MongoDB\BSON\Decimal128Interface
-----
interface MongoDB\BSON\Decimal128Interface extends Stringable
{
}
-----
METHOD MongoDB\BSON\Decimal128Interface::__toString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): mixed
-----
CLASS MongoDB\BSON\Document
-----
final class MongoDB\BSON\Document implements IteratorAggregate, Serializable, Stringable
{
}
-----
METHOD MongoDB\BSON\Document::__construct
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: private
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD MongoDB\BSON\Document::__toString
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): string
-----
METHOD MongoDB\BSON\Document::fromBSON
-----
Is final: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $bson
     * @return MongoDB\BSON\Document
     */
    function fromBSON(string $bson): MongoDB\BSON\Document
-----
METHOD MongoDB\BSON\Document::fromJSON
-----
Is final: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $json
     * @return MongoDB\BSON\Document
     */
    function fromJSON(string $json): MongoDB\BSON\Document
-----
METHOD MongoDB\BSON\Document::fromPHP
-----
Is final: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param array|object $value
     * @return MongoDB\BSON\Document
     */
    function fromPHP(array|object $value): MongoDB\BSON\Document
-----
METHOD MongoDB\BSON\Document::get
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @return mixed
     */
    function get(string $key): mixed
-----
METHOD MongoDB\BSON\Document::getIterator
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return MongoDB\BSON\Iterator
     */
    function getIterator(): MongoDB\BSON\Iterator
-----
METHOD MongoDB\BSON\Document::has
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @return bool
     */
    function has(string $key): bool
-----
METHOD MongoDB\BSON\Document::serialize
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function serialize(): string
-----
METHOD MongoDB\BSON\Document::toCanonicalExtendedJSON
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function toCanonicalExtendedJSON(): string
-----
METHOD MongoDB\BSON\Document::toPHP
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array|null $typeMap
     * @return array|object
     */
    function toPHP(array|null $typeMap = null): array|object
-----
METHOD MongoDB\BSON\Document::toRelaxedExtendedJSON
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function toRelaxedExtendedJSON(): string
-----
METHOD MongoDB\BSON\Document::unserialize
-----
Is final: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $serialized
     * @return void
     */
    function unserialize(string $serialized): void
-----
CLASS MongoDB\BSON\Int64
-----
final class MongoDB\BSON\Int64 implements MongoDB\BSON\Type, Serializable, JsonSerializable, Stringable
{
}
-----
METHOD MongoDB\BSON\Int64::__construct
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int|string $value
     * @return void
     */
    function __construct(int|string $value): mixed
-----
METHOD MongoDB\BSON\Int64::__toString
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): string
-----
METHOD MongoDB\BSON\Int64::jsonSerialize
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function jsonSerialize(): mixed
-----
METHOD MongoDB\BSON\Int64::serialize
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function serialize(): string
-----
METHOD MongoDB\BSON\Int64::unserialize
-----
Is final: Yes
Has side-effects: Yes
Throw type: MongoDB\Driver\Exception\InvalidArgumentException|MongoDB\Driver\Exception\UnexpectedValueException
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return void
     */
    function unserialize(string $data): void
-----
CLASS MongoDB\BSON\Iterator
-----
final class MongoDB\BSON\Iterator implements Iterator
{
}
-----
METHOD MongoDB\BSON\Iterator::__construct
-----
Is final: Yes
Is internal: Yes
Has side-effects: Maybe
Visibility: private
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD MongoDB\BSON\Iterator::current
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function current(): mixed
-----
METHOD MongoDB\BSON\Iterator::key
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int|string
     */
    function key(): int|string
-----
METHOD MongoDB\BSON\Iterator::next
-----
Is final: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): void
-----
METHOD MongoDB\BSON\Iterator::rewind
-----
Is final: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): void
-----
METHOD MongoDB\BSON\Iterator::valid
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function valid(): bool
-----
CLASS MongoDB\BSON\Javascript
-----
final class MongoDB\BSON\Javascript implements MongoDB\BSON\Type, MongoDB\BSON\JavascriptInterface, Serializable, JsonSerializable
{
}
-----
METHOD MongoDB\BSON\Javascript::__construct
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $javascript
     * @param array|object|null $scope
     * @return void
     */
    function __construct(string $javascript, array|object|null $scope = null): mixed
-----
METHOD MongoDB\BSON\Javascript::__toString
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): string
-----
METHOD MongoDB\BSON\Javascript::getCode
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getCode(): string
-----
METHOD MongoDB\BSON\Javascript::getScope
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return object|null
     */
    function getScope(): object|null
-----
METHOD MongoDB\BSON\Javascript::jsonSerialize
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function jsonSerialize(): mixed
-----
METHOD MongoDB\BSON\Javascript::serialize
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function serialize(): string
-----
METHOD MongoDB\BSON\Javascript::unserialize
-----
Is final: Yes
Has side-effects: Yes
Throw type: MongoDB\Driver\Exception\InvalidArgumentException|MongoDB\Driver\Exception\UnexpectedValueException
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return void
     */
    function unserialize(string $data): void
-----
CLASS MongoDB\BSON\JavascriptInterface
-----
interface MongoDB\BSON\JavascriptInterface extends Stringable
{
}
-----
METHOD MongoDB\BSON\JavascriptInterface::__toString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): mixed
-----
METHOD MongoDB\BSON\JavascriptInterface::getCode
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getCode(): mixed
-----
METHOD MongoDB\BSON\JavascriptInterface::getScope
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return object|null
     */
    function getScope(): mixed
-----
CLASS MongoDB\BSON\MaxKey
-----
final class MongoDB\BSON\MaxKey implements MongoDB\BSON\Type, MongoDB\BSON\MaxKeyInterface, Serializable, JsonSerializable
{
}
-----
METHOD MongoDB\BSON\MaxKey::__construct
-----
MISSING
-----
METHOD MongoDB\BSON\MaxKey::jsonSerialize
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function jsonSerialize(): mixed
-----
METHOD MongoDB\BSON\MaxKey::serialize
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function serialize(): string
-----
METHOD MongoDB\BSON\MaxKey::unserialize
-----
Is final: Yes
Has side-effects: Yes
Throw type: MongoDB\Driver\Exception\InvalidArgumentException|MongoDB\Driver\Exception\UnexpectedValueException
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return void
     */
    function unserialize(string $data): void
-----
CLASS MongoDB\BSON\MinKey
-----
final class MongoDB\BSON\MinKey implements MongoDB\BSON\Type, MongoDB\BSON\MinKeyInterface, Serializable, JsonSerializable
{
}
-----
METHOD MongoDB\BSON\MinKey::__construct
-----
MISSING
-----
METHOD MongoDB\BSON\MinKey::jsonSerialize
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function jsonSerialize(): mixed
-----
METHOD MongoDB\BSON\MinKey::serialize
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function serialize(): string
-----
METHOD MongoDB\BSON\MinKey::unserialize
-----
Is final: Yes
Has side-effects: Yes
Throw type: MongoDB\Driver\Exception\InvalidArgumentException|MongoDB\Driver\Exception\UnexpectedValueException
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return void
     */
    function unserialize(string $data): void
-----
CLASS MongoDB\BSON\ObjectId
-----
final class MongoDB\BSON\ObjectId implements MongoDB\BSON\Type, MongoDB\BSON\ObjectIdInterface, Serializable, JsonSerializable
{
}
-----
METHOD MongoDB\BSON\ObjectId::__construct
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @param string|null $id
     * @return void
     */
    function __construct(string|null $id = null): mixed
-----
METHOD MongoDB\BSON\ObjectId::__toString
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): string
-----
METHOD MongoDB\BSON\ObjectId::getTimestamp
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getTimestamp(): int
-----
METHOD MongoDB\BSON\ObjectId::jsonSerialize
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function jsonSerialize(): mixed
-----
METHOD MongoDB\BSON\ObjectId::serialize
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function serialize(): string
-----
METHOD MongoDB\BSON\ObjectId::unserialize
-----
Is final: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return void
     */
    function unserialize(string $data): void
-----
CLASS MongoDB\BSON\ObjectIdInterface
-----
interface MongoDB\BSON\ObjectIdInterface extends Stringable
{
}
-----
METHOD MongoDB\BSON\ObjectIdInterface::__toString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): mixed
-----
METHOD MongoDB\BSON\ObjectIdInterface::getTimestamp
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getTimestamp(): mixed
-----
CLASS MongoDB\BSON\PackedArray
-----
final class MongoDB\BSON\PackedArray implements IteratorAggregate, Serializable, Stringable
{
}
-----
METHOD MongoDB\BSON\PackedArray::__construct
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: private
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD MongoDB\BSON\PackedArray::__toString
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): string
-----
METHOD MongoDB\BSON\PackedArray::fromPHP
-----
Is final: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param array $value
     * @return MongoDB\BSON\PackedArray
     */
    function fromPHP(array $value): MongoDB\BSON\PackedArray
-----
METHOD MongoDB\BSON\PackedArray::get
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @return mixed
     */
    function get(int $index): mixed
-----
METHOD MongoDB\BSON\PackedArray::getIterator
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return MongoDB\BSON\Iterator
     */
    function getIterator(): MongoDB\BSON\Iterator
-----
METHOD MongoDB\BSON\PackedArray::has
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @return bool
     */
    function has(int $index): bool
-----
METHOD MongoDB\BSON\PackedArray::serialize
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function serialize(): string
-----
METHOD MongoDB\BSON\PackedArray::toPHP
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array|null $typeMap
     * @return array|object
     */
    function toPHP(array|null $typeMap = null): array|object
-----
METHOD MongoDB\BSON\PackedArray::unserialize
-----
Is final: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $serialized
     * @return void
     */
    function unserialize(string $serialized): void
-----
CLASS MongoDB\BSON\Persistable
-----
interface MongoDB\BSON\Persistable extends MongoDB\BSON\Unserializable, MongoDB\BSON\Serializable
{
}
-----
METHOD MongoDB\BSON\Persistable::bsonSerialize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array|object
     */
    function bsonSerialize(): mixed
-----
CLASS MongoDB\BSON\Regex
-----
final class MongoDB\BSON\Regex implements MongoDB\BSON\Type, MongoDB\BSON\RegexInterface, Serializable, JsonSerializable
{
}
-----
METHOD MongoDB\BSON\Regex::__construct
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $pattern
     * @param string $flags
     * @return void
     */
    function __construct(string $pattern, string $flags = ''): mixed
-----
METHOD MongoDB\BSON\Regex::__toString
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): string
-----
METHOD MongoDB\BSON\Regex::getFlags
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getFlags(): string
-----
METHOD MongoDB\BSON\Regex::getPattern
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getPattern(): string
-----
METHOD MongoDB\BSON\Regex::jsonSerialize
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function jsonSerialize(): mixed
-----
METHOD MongoDB\BSON\Regex::serialize
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function serialize(): string
-----
METHOD MongoDB\BSON\Regex::unserialize
-----
Is final: Yes
Has side-effects: Yes
Throw type: MongoDB\Driver\Exception\InvalidArgumentException|MongoDB\Driver\Exception\UnexpectedValueException
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return void
     */
    function unserialize(string $data): void
-----
CLASS MongoDB\BSON\RegexInterface
-----
interface MongoDB\BSON\RegexInterface extends Stringable
{
}
-----
METHOD MongoDB\BSON\RegexInterface::__toString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): mixed
-----
METHOD MongoDB\BSON\RegexInterface::getFlags
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getFlags(): mixed
-----
METHOD MongoDB\BSON\RegexInterface::getPattern
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getPattern(): mixed
-----
CLASS MongoDB\BSON\Serializable
-----
interface MongoDB\BSON\Serializable extends MongoDB\BSON\Type
{
}
-----
METHOD MongoDB\BSON\Serializable::bsonSerialize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array|object
     */
    function bsonSerialize(): mixed
-----
CLASS MongoDB\BSON\Symbol
-----
Deprecated
final class MongoDB\BSON\Symbol implements MongoDB\BSON\Type, Serializable, JsonSerializable, Stringable
{
}
-----
METHOD MongoDB\BSON\Symbol::__construct
-----
Is final: Yes
Is internal: Yes
Has side-effects: Maybe
Visibility: private
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD MongoDB\BSON\Symbol::__toString
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): string
-----
METHOD MongoDB\BSON\Symbol::jsonSerialize
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function jsonSerialize(): mixed
-----
METHOD MongoDB\BSON\Symbol::serialize
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function serialize(): string
-----
METHOD MongoDB\BSON\Symbol::unserialize
-----
Is final: Yes
Has side-effects: Yes
Throw type: MongoDB\Driver\Exception\InvalidArgumentException|MongoDB\Driver\Exception\UnexpectedValueException
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return void
     */
    function unserialize(string $data): void
-----
CLASS MongoDB\BSON\Timestamp
-----
final class MongoDB\BSON\Timestamp implements MongoDB\BSON\TimestampInterface, MongoDB\BSON\Type, Serializable, JsonSerializable
{
}
-----
METHOD MongoDB\BSON\Timestamp::__construct
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int|string $increment
     * @param int|string $timestamp
     * @return void
     */
    function __construct(int $increment, int $timestamp): mixed
-----
METHOD MongoDB\BSON\Timestamp::__toString
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): string
-----
METHOD MongoDB\BSON\Timestamp::getIncrement
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getIncrement(): int
-----
METHOD MongoDB\BSON\Timestamp::getTimestamp
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getTimestamp(): int
-----
METHOD MongoDB\BSON\Timestamp::jsonSerialize
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function jsonSerialize(): mixed
-----
METHOD MongoDB\BSON\Timestamp::serialize
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function serialize(): string
-----
METHOD MongoDB\BSON\Timestamp::unserialize
-----
Is final: Yes
Has side-effects: Yes
Throw type: MongoDB\Driver\Exception\InvalidArgumentException|MongoDB\Driver\Exception\UnexpectedValueException
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return void
     */
    function unserialize(string $data): void
-----
CLASS MongoDB\BSON\TimestampInterface
-----
interface MongoDB\BSON\TimestampInterface extends Stringable
{
}
-----
METHOD MongoDB\BSON\TimestampInterface::__toString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): mixed
-----
METHOD MongoDB\BSON\TimestampInterface::getIncrement
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getIncrement(): mixed
-----
METHOD MongoDB\BSON\TimestampInterface::getTimestamp
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getTimestamp(): mixed
-----
CLASS MongoDB\BSON\UTCDateTime
-----
final class MongoDB\BSON\UTCDateTime implements MongoDB\BSON\Type, MongoDB\BSON\UTCDateTimeInterface, Serializable, JsonSerializable
{
}
-----
METHOD MongoDB\BSON\UTCDateTime::__construct
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param DateTimeInterface|float|int|string|null $milliseconds
     * @return void
     */
    function __construct(DateTimeInterface|float|int|string|null $milliseconds = null): mixed
-----
METHOD MongoDB\BSON\UTCDateTime::__toString
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): string
-----
METHOD MongoDB\BSON\UTCDateTime::jsonSerialize
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function jsonSerialize(): mixed
-----
METHOD MongoDB\BSON\UTCDateTime::serialize
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function serialize(): string
-----
METHOD MongoDB\BSON\UTCDateTime::toDateTime
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return DateTime
     */
    function toDateTime(): DateTime
-----
METHOD MongoDB\BSON\UTCDateTime::unserialize
-----
Is final: Yes
Has side-effects: Yes
Throw type: MongoDB\Driver\Exception\InvalidArgumentException|MongoDB\Driver\Exception\UnexpectedValueException
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return void
     */
    function unserialize(string $data): void
-----
CLASS MongoDB\BSON\UTCDateTimeInterface
-----
interface MongoDB\BSON\UTCDateTimeInterface extends Stringable
{
}
-----
METHOD MongoDB\BSON\UTCDateTimeInterface::__toString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): mixed
-----
METHOD MongoDB\BSON\UTCDateTimeInterface::toDateTime
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return DateTime
     */
    function toDateTime(): mixed
-----
CLASS MongoDB\BSON\Undefined
-----
Deprecated
final class MongoDB\BSON\Undefined implements MongoDB\BSON\Type, Serializable, JsonSerializable, Stringable
{
}
-----
METHOD MongoDB\BSON\Undefined::__construct
-----
Is final: Yes
Is internal: Yes
Has side-effects: Maybe
Visibility: private
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD MongoDB\BSON\Undefined::__toString
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): string
-----
METHOD MongoDB\BSON\Undefined::jsonSerialize
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function jsonSerialize(): mixed
-----
METHOD MongoDB\BSON\Undefined::serialize
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function serialize(): string
-----
METHOD MongoDB\BSON\Undefined::unserialize
-----
Is final: Yes
Has side-effects: Yes
Throw type: MongoDB\Driver\Exception\InvalidArgumentException|MongoDB\Driver\Exception\UnexpectedValueException
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return void
     */
    function unserialize(string $data): void
-----
CLASS MongoDB\BSON\Unserializable
-----
interface MongoDB\BSON\Unserializable extends MongoDB\BSON\Type
{
}
-----
METHOD MongoDB\BSON\Unserializable::bsonUnserialize
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param array $data
     * @return void
     */
    function bsonUnserialize(array $data): mixed
-----
CLASS MongoDB\Driver\BulkWrite
-----
final class MongoDB\Driver\BulkWrite implements Countable
{
}
-----
METHOD MongoDB\Driver\BulkWrite::__construct
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @param array|null $options
     * @return void
     */
    function __construct(array|null $options = null): mixed
-----
METHOD MongoDB\Driver\BulkWrite::count
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function count(): int
-----
METHOD MongoDB\Driver\BulkWrite::delete
-----
Is final: Yes
Has side-effects: Yes
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @param array|object $filter
     * @param array|null $deleteOptions
     * @return void
     */
    function delete(array|object $filter, array|null $deleteOptions = null): void
-----
METHOD MongoDB\Driver\BulkWrite::insert
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @param array|object $document
     * @return mixed
     */
    function insert(array|object $document): mixed
-----
METHOD MongoDB\Driver\BulkWrite::update
-----
Is final: Yes
Has side-effects: Yes
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @param array|object $filter
     * @param array|object $newObj
     * @param array|null $updateOptions
     * @return void
     */
    function update(array|object $filter, array|object $newObj, array|null $updateOptions = null): mixed
-----
CLASS MongoDB\Driver\ClientEncryption
-----
final class MongoDB\Driver\ClientEncryption
{
}
-----
METHOD MongoDB\Driver\ClientEncryption::__construct
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $options
     * @return void
     */
    function __construct(array $options): mixed
-----
METHOD MongoDB\Driver\ClientEncryption::addKeyAltName
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @param MongoDB\BSON\Binary $keyId
     * @param string $keyAltName
     * @return object|null
     */
    function addKeyAltName(MongoDB\BSON\Binary $keyId, string $keyAltName): object|null
-----
METHOD MongoDB\Driver\ClientEncryption::createDataKey
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\EncryptionException|MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @param string $kmsProvider
     * @param array|null $options
     * @return MongoDB\BSON\Binary
     */
    function createDataKey(string $kmsProvider, array|null $options = null): MongoDB\BSON\Binary
-----
METHOD MongoDB\Driver\ClientEncryption::decrypt
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\EncryptionException|MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @param MongoDB\BSON\Binary $keyVaultClient
     * @return mixed
     */
    function decrypt(MongoDB\BSON\Binary $keyVaultClient): mixed
-----
METHOD MongoDB\Driver\ClientEncryption::deleteKey
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @param MongoDB\BSON\Binary $keyId
     * @return object
     */
    function deleteKey(MongoDB\BSON\Binary $keyId): object
-----
METHOD MongoDB\Driver\ClientEncryption::encrypt
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\EncryptionException|MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @param mixed $value
     * @param array|null $options
     * @return MongoDB\BSON\Binary
     */
    function encrypt(mixed $value, array|null $options = null): MongoDB\BSON\Binary
-----
METHOD MongoDB\Driver\ClientEncryption::encryptExpression
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @param array|object $expr
     * @param array|null $options
     * @return object
     */
    function encryptExpression(array|object $expr, array|null $options = null): object
-----
METHOD MongoDB\Driver\ClientEncryption::getKey
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @param MongoDB\BSON\Binary $keyId
     * @return object|null
     */
    function getKey(MongoDB\BSON\Binary $keyId): object|null
-----
METHOD MongoDB\Driver\ClientEncryption::getKeyByAltName
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @param string $keyAltName
     * @return object|null
     */
    function getKeyByAltName(string $keyAltName): object|null
-----
METHOD MongoDB\Driver\ClientEncryption::getKeys
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return MongoDB\Driver\Cursor
     */
    function getKeys(): MongoDB\Driver\Cursor
-----
METHOD MongoDB\Driver\ClientEncryption::removeKeyAltName
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param MongoDB\BSON\Binary $keyId
     * @param string $keyAltName
     * @return object|null
     */
    function removeKeyAltName(MongoDB\BSON\Binary $keyId, string $keyAltName): object|null
-----
METHOD MongoDB\Driver\ClientEncryption::rewrapManyDataKey
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array|object $filter
     * @param array|null $options
     * @return object
     */
    function rewrapManyDataKey(array|object $filter, array|null $options = null): object
-----
CLASS MongoDB\Driver\Command
-----
final class MongoDB\Driver\Command
{
}
-----
METHOD MongoDB\Driver\Command::__construct
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @param array|object $document
     * @param array|null $commandOptions
     * @return void
     */
    function __construct(array|object $document, array|null $commandOptions = null): mixed
-----
CLASS MongoDB\Driver\Cursor
-----
final class MongoDB\Driver\Cursor implements MongoDB\Driver\CursorInterface, Iterator
{
}
-----
METHOD MongoDB\Driver\Cursor::__construct
-----
Is final: Yes
Is internal: Yes
Has side-effects: Maybe
Visibility: private
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD MongoDB\Driver\Cursor::current
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array|object|null
     */
    function current(): array|object|null
-----
METHOD MongoDB\Driver\Cursor::getId
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return MongoDB\Driver\CursorId
     */
    function getId(): MongoDB\Driver\CursorId
-----
METHOD MongoDB\Driver\Cursor::getServer
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return MongoDB\Driver\Server
     */
    function getServer(): MongoDB\Driver\Server
-----
METHOD MongoDB\Driver\Cursor::isDead
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isDead(): bool
-----
METHOD MongoDB\Driver\Cursor::key
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int|null
     */
    function key(): int|null
-----
METHOD MongoDB\Driver\Cursor::next
-----
Has side-effects: Yes
Throw type: MongoDB\Driver\Exception\ConnectionException|MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): void
-----
METHOD MongoDB\Driver\Cursor::rewind
-----
Has side-effects: Yes
Throw type: MongoDB\Driver\Exception\ConnectionException|MongoDB\Driver\Exception\InvalidArgumentException|MongoDB\Driver\Exception\LogicException
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): void
-----
METHOD MongoDB\Driver\Cursor::setTypeMap
-----
Is final: Yes
Has side-effects: Yes
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @param array $typemap
     * @return void
     */
    function setTypeMap(array $typemap): void
-----
METHOD MongoDB\Driver\Cursor::toArray
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function toArray(): array
-----
METHOD MongoDB\Driver\Cursor::valid
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function valid(): bool
-----
CLASS MongoDB\Driver\CursorId
-----
final class MongoDB\Driver\CursorId implements Serializable, Stringable
{
}
-----
METHOD MongoDB\Driver\CursorId::__construct
-----
Is final: Yes
Is internal: Yes
Has side-effects: Maybe
Visibility: private
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD MongoDB\Driver\CursorId::__toString
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): string
-----
METHOD MongoDB\Driver\CursorId::serialize
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function serialize(): string
-----
METHOD MongoDB\Driver\CursorId::unserialize
-----
Is final: Yes
Has side-effects: Yes
Throw type: MongoDB\Driver\Exception\InvalidArgumentException|MongoDB\Driver\Exception\UnexpectedValueException
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return void
     */
    function unserialize(string $data): void
-----
CLASS MongoDB\Driver\CursorInterface
-----
interface MongoDB\Driver\CursorInterface extends Traversable
{
}
-----
METHOD MongoDB\Driver\CursorInterface::getId
-----
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return MongoDB\Driver\CursorId
     */
    function getId(): mixed
-----
METHOD MongoDB\Driver\CursorInterface::getServer
-----
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return MongoDB\Driver\Server
     */
    function getServer(): mixed
-----
METHOD MongoDB\Driver\CursorInterface::isDead
-----
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isDead(): mixed
-----
METHOD MongoDB\Driver\CursorInterface::setTypeMap
-----
Has side-effects: Yes
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @param array $typemap
     * @return void
     */
    function setTypeMap(array $typemap): mixed
-----
METHOD MongoDB\Driver\CursorInterface::toArray
-----
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function toArray(): mixed
-----
CLASS MongoDB\Driver\Exception\CommandException
-----
class MongoDB\Driver\Exception\CommandException extends MongoDB\Driver\Exception\ServerException
{
}
-----
METHOD MongoDB\Driver\Exception\CommandException::getResultDocument
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return object
     */
    function getResultDocument(): object
-----
CLASS MongoDB\Driver\Exception\RuntimeException
-----
class MongoDB\Driver\Exception\RuntimeException extends RuntimeException implements MongoDB\Driver\Exception\Exception
{
}
-----
METHOD MongoDB\Driver\Exception\RuntimeException::hasErrorLabel
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $label
     * @return bool
     */
    function hasErrorLabel(string $label): bool
-----
CLASS MongoDB\Driver\Exception\WriteException
-----
abstract class MongoDB\Driver\Exception\WriteException extends MongoDB\Driver\Exception\ServerException
{
}
-----
METHOD MongoDB\Driver\Exception\WriteException::getWriteResult
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return MongoDB\Driver\WriteResult
     */
    function getWriteResult(): MongoDB\Driver\WriteResult
-----
CLASS MongoDB\Driver\Manager
-----
final class MongoDB\Driver\Manager
{
}
-----
METHOD MongoDB\Driver\Manager::__construct
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException|MongoDB\Driver\Exception\RuntimeException
Visibility: public
Variants: 1
    /**
     * @param string|null $uri
     * @param array|null $options
     * @param array|null $driverOptions
     * @return void
     */
    function __construct(string|null $uri = null, array|null $options = null, array|null $driverOptions = null): mixed
-----
METHOD MongoDB\Driver\Manager::addSubscriber
-----
Is final: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param MongoDB\Driver\Monitoring\Subscriber $subscriber
     * @return void
     */
    function addSubscriber(MongoDB\Driver\Monitoring\Subscriber $subscriber): void
-----
METHOD MongoDB\Driver\Manager::createClientEncryption
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException|MongoDB\Driver\Exception\RuntimeException
Visibility: public
Variants: 1
    /**
     * @param array $options
     * @return MongoDB\Driver\ClientEncryption
     */
    function createClientEncryption(array $options): mixed
-----
METHOD MongoDB\Driver\Manager::executeBulkWrite
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException|MongoDB\Driver\Exception\RuntimeException
Visibility: public
Variants: 1
    /**
     * @param string $namespace
     * @param MongoDB\Driver\BulkWrite $bulk
     * @param array|MongoDB\Driver\WriteConcern|null $options
     * @return MongoDB\Driver\WriteResult
     */
    function executeBulkWrite(string $namespace, MongoDB\Driver\BulkWrite $bulk, array|MongoDB\Driver\WriteConcern|null $options = null): MongoDB\Driver\WriteResult
-----
METHOD MongoDB\Driver\Manager::executeCommand
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\Exception
Visibility: public
Variants: 1
    /**
     * @param string $db
     * @param MongoDB\Driver\Command $command
     * @param array|MongoDB\Driver\ReadPreference|null $options
     * @return MongoDB\Driver\Cursor
     */
    function executeCommand(string $db, MongoDB\Driver\Command $command, array|MongoDB\Driver\ReadPreference|null $options = null): MongoDB\Driver\Cursor
-----
METHOD MongoDB\Driver\Manager::executeQuery
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\Exception
Visibility: public
Variants: 1
    /**
     * @param string $namespace
     * @param MongoDB\Driver\Query $query
     * @param array|MongoDB\Driver\ReadPreference|null $options
     * @return MongoDB\Driver\Cursor
     */
    function executeQuery(string $namespace, MongoDB\Driver\Query $query, array|MongoDB\Driver\ReadPreference|null $options = null): MongoDB\Driver\Cursor
-----
METHOD MongoDB\Driver\Manager::executeReadCommand
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\Exception
Visibility: public
Variants: 1
    /**
     * @param string $db
     * @param MongoDB\Driver\Command $command
     * @param array|null $options
     * @return MongoDB\Driver\Cursor
     */
    function executeReadCommand(string $db, MongoDB\Driver\Command $command, array|null $options = null): MongoDB\Driver\Cursor
-----
METHOD MongoDB\Driver\Manager::executeReadWriteCommand
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\Exception
Visibility: public
Variants: 1
    /**
     * @param string $db
     * @param MongoDB\Driver\Command $command
     * @param array|null $options
     * @return MongoDB\Driver\Cursor
     */
    function executeReadWriteCommand(string $db, MongoDB\Driver\Command $command, array|null $options = null): MongoDB\Driver\Cursor
-----
METHOD MongoDB\Driver\Manager::executeWriteCommand
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\Exception
Visibility: public
Variants: 1
    /**
     * @param string $db
     * @param MongoDB\Driver\Command $command
     * @param array|null $options
     * @return MongoDB\Driver\Cursor
     */
    function executeWriteCommand(string $db, MongoDB\Driver\Command $command, array|null $options = null): MongoDB\Driver\Cursor
-----
METHOD MongoDB\Driver\Manager::getEncryptedFieldsMap
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array|object|null
     */
    function getEncryptedFieldsMap(): array|object|null
-----
METHOD MongoDB\Driver\Manager::getReadConcern
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return MongoDB\Driver\ReadConcern
     */
    function getReadConcern(): MongoDB\Driver\ReadConcern
-----
METHOD MongoDB\Driver\Manager::getReadPreference
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return MongoDB\Driver\ReadPreference
     */
    function getReadPreference(): MongoDB\Driver\ReadPreference
-----
METHOD MongoDB\Driver\Manager::getServers
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getServers(): array
-----
METHOD MongoDB\Driver\Manager::getWriteConcern
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return MongoDB\Driver\WriteConcern
     */
    function getWriteConcern(): MongoDB\Driver\WriteConcern
-----
METHOD MongoDB\Driver\Manager::removeSubscriber
-----
Is final: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param MongoDB\Driver\Monitoring\Subscriber $subscriber
     * @return void
     */
    function removeSubscriber(MongoDB\Driver\Monitoring\Subscriber $subscriber): void
-----
METHOD MongoDB\Driver\Manager::selectServer
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException|MongoDB\Driver\Exception\RuntimeException
Visibility: public
Variants: 1
    /**
     * @param MongoDB\Driver\ReadPreference|null $readPreference
     * @return MongoDB\Driver\Server
     */
    function selectServer(MongoDB\Driver\ReadPreference|null $readPreference = null): mixed
-----
METHOD MongoDB\Driver\Manager::startSession
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException|MongoDB\Driver\Exception\RuntimeException
Visibility: public
Variants: 1
    /**
     * @param array|null $options
     * @return MongoDB\Driver\Session
     */
    function startSession(array|null $options = null): mixed
-----
CLASS MongoDB\Driver\Monitoring\CommandFailedEvent
-----
class MongoDB\Driver\Monitoring\CommandFailedEvent
{
}
-----
METHOD MongoDB\Driver\Monitoring\CommandFailedEvent::getCommandName
-----
Is final: Yes
Has side-effects: Maybe
Throw type: InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getCommandName(): string
-----
METHOD MongoDB\Driver\Monitoring\CommandFailedEvent::getDurationMicros
-----
Is final: Yes
Has side-effects: Maybe
Throw type: InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getDurationMicros(): int
-----
METHOD MongoDB\Driver\Monitoring\CommandFailedEvent::getError
-----
Is final: Yes
Has side-effects: Maybe
Throw type: InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return Exception
     */
    function getError(): Exception
-----
METHOD MongoDB\Driver\Monitoring\CommandFailedEvent::getOperationId
-----
Is final: Yes
Has side-effects: Maybe
Throw type: InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getOperationId(): string
-----
METHOD MongoDB\Driver\Monitoring\CommandFailedEvent::getReply
-----
Is final: Yes
Has side-effects: Maybe
Throw type: InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return object
     */
    function getReply(): object
-----
METHOD MongoDB\Driver\Monitoring\CommandFailedEvent::getRequestId
-----
Is final: Yes
Has side-effects: Maybe
Throw type: InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getRequestId(): string
-----
METHOD MongoDB\Driver\Monitoring\CommandFailedEvent::getServer
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return MongoDB\Driver\Server
     */
    function getServer(): MongoDB\Driver\Server
-----
METHOD MongoDB\Driver\Monitoring\CommandFailedEvent::getServerConnectionId
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int|null
     */
    function getServerConnectionId(): int|null
-----
METHOD MongoDB\Driver\Monitoring\CommandFailedEvent::getServiceId
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return MongoDB\BSON\ObjectId|null
     */
    function getServiceId(): MongoDB\BSON\ObjectId|null
-----
CLASS MongoDB\Driver\Monitoring\CommandStartedEvent
-----
class MongoDB\Driver\Monitoring\CommandStartedEvent
{
}
-----
METHOD MongoDB\Driver\Monitoring\CommandStartedEvent::getCommand
-----
Is final: Yes
Has side-effects: Maybe
Throw type: InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return object
     */
    function getCommand(): object
-----
METHOD MongoDB\Driver\Monitoring\CommandStartedEvent::getCommandName
-----
Is final: Yes
Has side-effects: Maybe
Throw type: InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getCommandName(): string
-----
METHOD MongoDB\Driver\Monitoring\CommandStartedEvent::getDatabaseName
-----
Is final: Yes
Has side-effects: Maybe
Throw type: InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getDatabaseName(): string
-----
METHOD MongoDB\Driver\Monitoring\CommandStartedEvent::getOperationId
-----
Is final: Yes
Has side-effects: Maybe
Throw type: InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getOperationId(): string
-----
METHOD MongoDB\Driver\Monitoring\CommandStartedEvent::getRequestId
-----
Is final: Yes
Has side-effects: Maybe
Throw type: InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getRequestId(): string
-----
METHOD MongoDB\Driver\Monitoring\CommandStartedEvent::getServer
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return MongoDB\Driver\Server
     */
    function getServer(): MongoDB\Driver\Server
-----
METHOD MongoDB\Driver\Monitoring\CommandStartedEvent::getServerConnectionId
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int|null
     */
    function getServerConnectionId(): int|null
-----
METHOD MongoDB\Driver\Monitoring\CommandStartedEvent::getServiceId
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return MongoDB\BSON\ObjectId|null
     */
    function getServiceId(): MongoDB\BSON\ObjectId|null
-----
CLASS MongoDB\Driver\Monitoring\CommandSubscriber
-----
interface MongoDB\Driver\Monitoring\CommandSubscriber extends MongoDB\Driver\Monitoring\Subscriber
{
}
-----
METHOD MongoDB\Driver\Monitoring\CommandSubscriber::commandFailed
-----
Has side-effects: Yes
Throw type: InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @param MongoDB\Driver\Monitoring\CommandFailedEvent $event
     * @return void
     */
    function commandFailed(MongoDB\Driver\Monitoring\CommandFailedEvent $event): mixed
-----
METHOD MongoDB\Driver\Monitoring\CommandSubscriber::commandStarted
-----
Has side-effects: Yes
Throw type: InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @param MongoDB\Driver\Monitoring\CommandStartedEvent $event
     * @return void
     */
    function commandStarted(MongoDB\Driver\Monitoring\CommandStartedEvent $event): mixed
-----
METHOD MongoDB\Driver\Monitoring\CommandSubscriber::commandSucceeded
-----
Has side-effects: Yes
Throw type: InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @param MongoDB\Driver\Monitoring\CommandSucceededEvent $event
     * @return void
     */
    function commandSucceeded(MongoDB\Driver\Monitoring\CommandSucceededEvent $event): mixed
-----
CLASS MongoDB\Driver\Monitoring\CommandSucceededEvent
-----
class MongoDB\Driver\Monitoring\CommandSucceededEvent
{
}
-----
METHOD MongoDB\Driver\Monitoring\CommandSucceededEvent::getCommandName
-----
Is final: Yes
Has side-effects: Maybe
Throw type: InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getCommandName(): string
-----
METHOD MongoDB\Driver\Monitoring\CommandSucceededEvent::getDurationMicros
-----
Is final: Yes
Has side-effects: Maybe
Throw type: InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getDurationMicros(): int
-----
METHOD MongoDB\Driver\Monitoring\CommandSucceededEvent::getOperationId
-----
Is final: Yes
Has side-effects: Maybe
Throw type: InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getOperationId(): string
-----
METHOD MongoDB\Driver\Monitoring\CommandSucceededEvent::getReply
-----
Is final: Yes
Has side-effects: Maybe
Throw type: InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return object
     */
    function getReply(): object
-----
METHOD MongoDB\Driver\Monitoring\CommandSucceededEvent::getRequestId
-----
Is final: Yes
Has side-effects: Maybe
Throw type: InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getRequestId(): string
-----
METHOD MongoDB\Driver\Monitoring\CommandSucceededEvent::getServer
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return MongoDB\Driver\Server
     */
    function getServer(): MongoDB\Driver\Server
-----
METHOD MongoDB\Driver\Monitoring\CommandSucceededEvent::getServerConnectionId
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int|null
     */
    function getServerConnectionId(): int|null
-----
METHOD MongoDB\Driver\Monitoring\CommandSucceededEvent::getServiceId
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return MongoDB\BSON\ObjectId|null
     */
    function getServiceId(): MongoDB\BSON\ObjectId|null
-----
CLASS MongoDB\Driver\Monitoring\SDAMSubscriber
-----
interface MongoDB\Driver\Monitoring\SDAMSubscriber extends MongoDB\Driver\Monitoring\Subscriber
{
}
-----
METHOD MongoDB\Driver\Monitoring\SDAMSubscriber::serverChanged
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param MongoDB\Driver\Monitoring\ServerChangedEvent $event
     * @return void
     */
    function serverChanged(MongoDB\Driver\Monitoring\ServerChangedEvent $event): void
-----
METHOD MongoDB\Driver\Monitoring\SDAMSubscriber::serverClosed
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param MongoDB\Driver\Monitoring\ServerClosedEvent $event
     * @return void
     */
    function serverClosed(MongoDB\Driver\Monitoring\ServerClosedEvent $event): void
-----
METHOD MongoDB\Driver\Monitoring\SDAMSubscriber::serverHeartbeatFailed
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param MongoDB\Driver\Monitoring\ServerHeartbeatFailedEvent $event
     * @return void
     */
    function serverHeartbeatFailed(MongoDB\Driver\Monitoring\ServerHeartbeatFailedEvent $event): void
-----
METHOD MongoDB\Driver\Monitoring\SDAMSubscriber::serverHeartbeatStarted
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param MongoDB\Driver\Monitoring\ServerHeartbeatStartedEvent $event
     * @return void
     */
    function serverHeartbeatStarted(MongoDB\Driver\Monitoring\ServerHeartbeatStartedEvent $event): void
-----
METHOD MongoDB\Driver\Monitoring\SDAMSubscriber::serverHeartbeatSucceeded
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param MongoDB\Driver\Monitoring\ServerHeartbeatSucceededEvent $event
     * @return void
     */
    function serverHeartbeatSucceeded(MongoDB\Driver\Monitoring\ServerHeartbeatSucceededEvent $event): void
-----
METHOD MongoDB\Driver\Monitoring\SDAMSubscriber::serverOpening
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param MongoDB\Driver\Monitoring\ServerOpeningEvent $event
     * @return void
     */
    function serverOpening(MongoDB\Driver\Monitoring\ServerOpeningEvent $event): void
-----
METHOD MongoDB\Driver\Monitoring\SDAMSubscriber::topologyChanged
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param MongoDB\Driver\Monitoring\TopologyChangedEvent $event
     * @return void
     */
    function topologyChanged(MongoDB\Driver\Monitoring\TopologyChangedEvent $event): void
-----
METHOD MongoDB\Driver\Monitoring\SDAMSubscriber::topologyClosed
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param MongoDB\Driver\Monitoring\TopologyClosedEvent $event
     * @return void
     */
    function topologyClosed(MongoDB\Driver\Monitoring\TopologyClosedEvent $event): void
-----
METHOD MongoDB\Driver\Monitoring\SDAMSubscriber::topologyOpening
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param MongoDB\Driver\Monitoring\TopologyOpeningEvent $event
     * @return void
     */
    function topologyOpening(MongoDB\Driver\Monitoring\TopologyOpeningEvent $event): void
-----
CLASS MongoDB\Driver\Monitoring\ServerChangedEvent
-----
final class MongoDB\Driver\Monitoring\ServerChangedEvent
{
}
-----
METHOD MongoDB\Driver\Monitoring\ServerChangedEvent::getHost
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getHost(): string
-----
METHOD MongoDB\Driver\Monitoring\ServerChangedEvent::getNewDescription
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return MongoDB\Driver\ServerDescription
     */
    function getNewDescription(): MongoDB\Driver\ServerDescription
-----
METHOD MongoDB\Driver\Monitoring\ServerChangedEvent::getPort
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getPort(): int
-----
METHOD MongoDB\Driver\Monitoring\ServerChangedEvent::getPreviousDescription
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return MongoDB\Driver\ServerDescription
     */
    function getPreviousDescription(): MongoDB\Driver\ServerDescription
-----
METHOD MongoDB\Driver\Monitoring\ServerChangedEvent::getTopologyId
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return MongoDB\BSON\ObjectId
     */
    function getTopologyId(): MongoDB\BSON\ObjectId
-----
CLASS MongoDB\Driver\Monitoring\ServerClosedEvent
-----
final class MongoDB\Driver\Monitoring\ServerClosedEvent
{
}
-----
METHOD MongoDB\Driver\Monitoring\ServerClosedEvent::getHost
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getHost(): string
-----
METHOD MongoDB\Driver\Monitoring\ServerClosedEvent::getPort
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getPort(): int
-----
METHOD MongoDB\Driver\Monitoring\ServerClosedEvent::getTopologyId
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return MongoDB\BSON\ObjectId
     */
    function getTopologyId(): MongoDB\BSON\ObjectId
-----
CLASS MongoDB\Driver\Monitoring\ServerHeartbeatFailedEvent
-----
final class MongoDB\Driver\Monitoring\ServerHeartbeatFailedEvent
{
}
-----
METHOD MongoDB\Driver\Monitoring\ServerHeartbeatFailedEvent::getDurationMicros
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getDurationMicros(): int
-----
METHOD MongoDB\Driver\Monitoring\ServerHeartbeatFailedEvent::getError
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Exception
     */
    function getError(): Exception
-----
METHOD MongoDB\Driver\Monitoring\ServerHeartbeatFailedEvent::getHost
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getHost(): string
-----
METHOD MongoDB\Driver\Monitoring\ServerHeartbeatFailedEvent::getPort
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getPort(): int
-----
METHOD MongoDB\Driver\Monitoring\ServerHeartbeatFailedEvent::isAwaited
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isAwaited(): bool
-----
CLASS MongoDB\Driver\Monitoring\ServerHeartbeatStartedEvent
-----
final class MongoDB\Driver\Monitoring\ServerHeartbeatStartedEvent
{
}
-----
METHOD MongoDB\Driver\Monitoring\ServerHeartbeatStartedEvent::getHost
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getHost(): string
-----
METHOD MongoDB\Driver\Monitoring\ServerHeartbeatStartedEvent::getPort
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getPort(): int
-----
METHOD MongoDB\Driver\Monitoring\ServerHeartbeatStartedEvent::isAwaited
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isAwaited(): bool
-----
CLASS MongoDB\Driver\Monitoring\ServerHeartbeatSucceededEvent
-----
final class MongoDB\Driver\Monitoring\ServerHeartbeatSucceededEvent
{
}
-----
METHOD MongoDB\Driver\Monitoring\ServerHeartbeatSucceededEvent::getDurationMicros
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getDurationMicros(): int
-----
METHOD MongoDB\Driver\Monitoring\ServerHeartbeatSucceededEvent::getHost
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getHost(): string
-----
METHOD MongoDB\Driver\Monitoring\ServerHeartbeatSucceededEvent::getPort
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getPort(): int
-----
METHOD MongoDB\Driver\Monitoring\ServerHeartbeatSucceededEvent::getReply
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return object
     */
    function getReply(): object
-----
METHOD MongoDB\Driver\Monitoring\ServerHeartbeatSucceededEvent::isAwaited
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isAwaited(): bool
-----
CLASS MongoDB\Driver\Monitoring\ServerOpeningEvent
-----
final class MongoDB\Driver\Monitoring\ServerOpeningEvent
{
}
-----
METHOD MongoDB\Driver\Monitoring\ServerOpeningEvent::getHost
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getHost(): string
-----
METHOD MongoDB\Driver\Monitoring\ServerOpeningEvent::getPort
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getPort(): int
-----
METHOD MongoDB\Driver\Monitoring\ServerOpeningEvent::getTopologyId
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return MongoDB\BSON\ObjectId
     */
    function getTopologyId(): MongoDB\BSON\ObjectId
-----
CLASS MongoDB\Driver\Monitoring\TopologyChangedEvent
-----
final class MongoDB\Driver\Monitoring\TopologyChangedEvent
{
}
-----
METHOD MongoDB\Driver\Monitoring\TopologyChangedEvent::getNewDescription
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return MongoDB\Driver\TopologyDescription
     */
    function getNewDescription(): MongoDB\Driver\TopologyDescription
-----
METHOD MongoDB\Driver\Monitoring\TopologyChangedEvent::getPreviousDescription
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return MongoDB\Driver\TopologyDescription
     */
    function getPreviousDescription(): MongoDB\Driver\TopologyDescription
-----
METHOD MongoDB\Driver\Monitoring\TopologyChangedEvent::getTopologyId
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return MongoDB\BSON\ObjectId
     */
    function getTopologyId(): MongoDB\BSON\ObjectId
-----
CLASS MongoDB\Driver\Monitoring\TopologyClosedEvent
-----
final class MongoDB\Driver\Monitoring\TopologyClosedEvent
{
}
-----
METHOD MongoDB\Driver\Monitoring\TopologyClosedEvent::getTopologyId
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return MongoDB\BSON\ObjectId
     */
    function getTopologyId(): MongoDB\BSON\ObjectId
-----
CLASS MongoDB\Driver\Monitoring\TopologyOpeningEvent
-----
final class MongoDB\Driver\Monitoring\TopologyOpeningEvent
{
}
-----
METHOD MongoDB\Driver\Monitoring\TopologyOpeningEvent::getTopologyId
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return MongoDB\BSON\ObjectId
     */
    function getTopologyId(): MongoDB\BSON\ObjectId
-----
CLASS MongoDB\Driver\Query
-----
final class MongoDB\Driver\Query
{
}
-----
METHOD MongoDB\Driver\Query::__construct
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @param array|object $filter
     * @param array|null $queryOptions
     * @return void
     */
    function __construct(array|object $filter, array|null $queryOptions = null): mixed
-----
CLASS MongoDB\Driver\ReadConcern
-----
final class MongoDB\Driver\ReadConcern implements MongoDB\BSON\Serializable, Serializable
{
}
-----
METHOD MongoDB\Driver\ReadConcern::__construct
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string|null $level
     * @return void
     */
    function __construct(string|null $level = null): mixed
-----
METHOD MongoDB\Driver\ReadConcern::bsonSerialize
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array|object
     */
    function bsonSerialize(): array|object
-----
METHOD MongoDB\Driver\ReadConcern::getLevel
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string|null
     */
    function getLevel(): string|null
-----
METHOD MongoDB\Driver\ReadConcern::isDefault
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isDefault(): bool
-----
METHOD MongoDB\Driver\ReadConcern::serialize
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function serialize(): string
-----
METHOD MongoDB\Driver\ReadConcern::unserialize
-----
Is final: Yes
Has side-effects: Yes
Throw type: MongoDB\Driver\Exception\InvalidArgumentException|MongoDB\Driver\Exception\UnexpectedValueException
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return void
     */
    function unserialize(string $data): void
-----
CLASS MongoDB\Driver\ReadPreference
-----
final class MongoDB\Driver\ReadPreference implements MongoDB\BSON\Serializable, Serializable
{
}
-----
METHOD MongoDB\Driver\ReadPreference::__construct
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @param int|string $mode
     * @param array|null $tagSets
     * @param array|null $options
     * @return void
     */
    function __construct(int|string $mode, array|null $tagSets = null, array|null $options = null): mixed
-----
METHOD MongoDB\Driver\ReadPreference::bsonSerialize
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return array|object
     */
    function bsonSerialize(): array|object
-----
METHOD MongoDB\Driver\ReadPreference::getHedge
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return object|null
     */
    function getHedge(): object|null
-----
METHOD MongoDB\Driver\ReadPreference::getMaxStalenessSeconds
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getMaxStalenessSeconds(): mixed
-----
METHOD MongoDB\Driver\ReadPreference::getMode
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getMode(): int
-----
METHOD MongoDB\Driver\ReadPreference::getModeString
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getModeString(): string
-----
METHOD MongoDB\Driver\ReadPreference::getTagSets
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getTagSets(): array
-----
METHOD MongoDB\Driver\ReadPreference::serialize
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function serialize(): string
-----
METHOD MongoDB\Driver\ReadPreference::unserialize
-----
Is final: Yes
Has side-effects: Yes
Throw type: MongoDB\Driver\Exception\InvalidArgumentException|MongoDB\Driver\Exception\UnexpectedValueException
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return void
     */
    function unserialize(string $data): void
-----
CLASS MongoDB\Driver\Server
-----
final class MongoDB\Driver\Server
{
}
-----
METHOD MongoDB\Driver\Server::__construct
-----
Is final: Yes
Is internal: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\RuntimeException
Visibility: private
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD MongoDB\Driver\Server::executeBulkWrite
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException|MongoDB\Driver\Exception\RuntimeException
Visibility: public
Variants: 1
    /**
     * @param string $namespace
     * @param MongoDB\Driver\BulkWrite $bulkWrite
     * @param array|MongoDB\Driver\WriteConcern|null $options
     * @return MongoDB\Driver\WriteResult
     */
    function executeBulkWrite(string $namespace, MongoDB\Driver\BulkWrite $bulkWrite, array|MongoDB\Driver\WriteConcern|null $options = null): MongoDB\Driver\WriteResult
-----
METHOD MongoDB\Driver\Server::executeCommand
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException|MongoDB\Driver\Exception\RuntimeException
Visibility: public
Variants: 1
    /**
     * @param string $db
     * @param MongoDB\Driver\Command $command
     * @param array|MongoDB\Driver\ReadPreference|null $options
     * @return MongoDB\Driver\Cursor
     */
    function executeCommand(string $db, MongoDB\Driver\Command $command, array|MongoDB\Driver\ReadPreference|null $options = null): MongoDB\Driver\Cursor
-----
METHOD MongoDB\Driver\Server::executeQuery
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException|MongoDB\Driver\Exception\RuntimeException
Visibility: public
Variants: 1
    /**
     * @param string $namespace
     * @param MongoDB\Driver\Query $query
     * @param array|MongoDB\Driver\ReadPreference|null $options
     * @return MongoDB\Driver\Cursor
     */
    function executeQuery(string $namespace, MongoDB\Driver\Query $query, array|MongoDB\Driver\ReadPreference|null $options = null): MongoDB\Driver\Cursor
-----
METHOD MongoDB\Driver\Server::executeReadCommand
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException|MongoDB\Driver\Exception\RuntimeException
Visibility: public
Variants: 1
    /**
     * @param string $db
     * @param MongoDB\Driver\Command $command
     * @param array|null $options
     * @return MongoDB\Driver\Cursor
     */
    function executeReadCommand(string $db, MongoDB\Driver\Command $command, array|null $options = null): MongoDB\Driver\Cursor
-----
METHOD MongoDB\Driver\Server::executeReadWriteCommand
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException|MongoDB\Driver\Exception\RuntimeException
Visibility: public
Variants: 1
    /**
     * @param string $db
     * @param MongoDB\Driver\Command $command
     * @param array|null $options
     * @return MongoDB\Driver\Cursor
     */
    function executeReadWriteCommand(string $db, MongoDB\Driver\Command $command, array|null $options = null): MongoDB\Driver\Cursor
-----
METHOD MongoDB\Driver\Server::executeWriteCommand
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException|MongoDB\Driver\Exception\RuntimeException
Visibility: public
Variants: 1
    /**
     * @param string $db
     * @param MongoDB\Driver\Command $command
     * @param array|null $options
     * @return MongoDB\Driver\Cursor
     */
    function executeWriteCommand(string $db, MongoDB\Driver\Command $command, array|null $options = null): MongoDB\Driver\Cursor
-----
METHOD MongoDB\Driver\Server::getHost
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getHost(): string
-----
METHOD MongoDB\Driver\Server::getInfo
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getInfo(): array
-----
METHOD MongoDB\Driver\Server::getLatency
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return int|null
     */
    function getLatency(): int
-----
METHOD MongoDB\Driver\Server::getPort
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getPort(): int
-----
METHOD MongoDB\Driver\Server::getServerDescription
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return MongoDB\Driver\ServerDescription
     */
    function getServerDescription(): MongoDB\Driver\ServerDescription
-----
METHOD MongoDB\Driver\Server::getTags
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getTags(): array
-----
METHOD MongoDB\Driver\Server::getType
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getType(): int
-----
METHOD MongoDB\Driver\Server::isArbiter
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isArbiter(): bool
-----
METHOD MongoDB\Driver\Server::isHidden
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isHidden(): bool
-----
METHOD MongoDB\Driver\Server::isPassive
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isPassive(): bool
-----
METHOD MongoDB\Driver\Server::isPrimary
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isPrimary(): bool
-----
METHOD MongoDB\Driver\Server::isSecondary
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isSecondary(): bool
-----
CLASS MongoDB\Driver\ServerApi
-----
final class MongoDB\Driver\ServerApi implements MongoDB\BSON\Serializable, Serializable
{
}
-----
METHOD MongoDB\Driver\ServerApi::__construct
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $version
     * @param bool|null $strict
     * @param bool|null $deprecationErrors
     * @return void
     */
    function __construct(string $version, bool|null $strict = false, bool|null $deprecationErrors = false): mixed
-----
METHOD MongoDB\Driver\ServerApi::bsonSerialize
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array|object
     */
    function bsonSerialize(): array|object
-----
METHOD MongoDB\Driver\ServerApi::serialize
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function serialize(): string
-----
METHOD MongoDB\Driver\ServerApi::unserialize
-----
Is final: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $serialized
     * @return void
     */
    function unserialize(string $serialized): void
-----
CLASS MongoDB\Driver\ServerDescription
-----
final class MongoDB\Driver\ServerDescription
{
}
-----
METHOD MongoDB\Driver\ServerDescription::getHelloResponse
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getHelloResponse(): array
-----
METHOD MongoDB\Driver\ServerDescription::getHost
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getHost(): string
-----
METHOD MongoDB\Driver\ServerDescription::getLastUpdateTime
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getLastUpdateTime(): int
-----
METHOD MongoDB\Driver\ServerDescription::getPort
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getPort(): int
-----
METHOD MongoDB\Driver\ServerDescription::getRoundTripTime
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int|null
     */
    function getRoundTripTime(): int|null
-----
METHOD MongoDB\Driver\ServerDescription::getType
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getType(): string
-----
CLASS MongoDB\Driver\Session
-----
final class MongoDB\Driver\Session
{
}
-----
METHOD MongoDB\Driver\Session::__construct
-----
Is final: Yes
Is internal: Yes
Has side-effects: Maybe
Visibility: private
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD MongoDB\Driver\Session::abortTransaction
-----
Is final: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function abortTransaction(): void
-----
METHOD MongoDB\Driver\Session::advanceClusterTime
-----
Is final: Yes
Has side-effects: Yes
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @param array|object $clusterTime
     * @return void
     */
    function advanceClusterTime(array|object $clusterTime): void
-----
METHOD MongoDB\Driver\Session::advanceOperationTime
-----
Is final: Yes
Has side-effects: Yes
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @param MongoDB\BSON\TimestampInterface $operationTime
     * @return void
     */
    function advanceOperationTime(MongoDB\BSON\TimestampInterface $operationTime): void
-----
METHOD MongoDB\Driver\Session::commitTransaction
-----
Is final: Yes
Has side-effects: Yes
Throw type: MongoDB\Driver\Exception\InvalidArgumentException|MongoDB\Driver\Exception\RuntimeException
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function commitTransaction(): void
-----
METHOD MongoDB\Driver\Session::endSession
-----
Is final: Yes
Has side-effects: Yes
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function endSession(): void
-----
METHOD MongoDB\Driver\Session::getClusterTime
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return object|null
     */
    function getClusterTime(): object|null
-----
METHOD MongoDB\Driver\Session::getLogicalSessionId
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return object
     */
    function getLogicalSessionId(): object
-----
METHOD MongoDB\Driver\Session::getOperationTime
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return MongoDB\BSON\Timestamp|null
     */
    function getOperationTime(): MongoDB\BSON\Timestamp|null
-----
METHOD MongoDB\Driver\Session::getServer
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return MongoDB\Driver\Server|null
     */
    function getServer(): MongoDB\Driver\Server|null
-----
METHOD MongoDB\Driver\Session::getTransactionOptions
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return array|null
     */
    function getTransactionOptions(): array|null
-----
METHOD MongoDB\Driver\Session::getTransactionState
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getTransactionState(): string
-----
METHOD MongoDB\Driver\Session::isDirty
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isDirty(): bool
-----
METHOD MongoDB\Driver\Session::isInTransaction
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isInTransaction(): bool
-----
METHOD MongoDB\Driver\Session::startTransaction
-----
Is final: Yes
Has side-effects: Yes
Throw type: MongoDB\Driver\Exception\InvalidArgumentException|MongoDB\Driver\Exception\RuntimeException
Visibility: public
Variants: 1
    /**
     * @param array|null $options
     * @return void
     */
    function startTransaction(array|null $options = null): void
-----
CLASS MongoDB\Driver\TopologyDescription
-----
class MongoDB\Driver\TopologyDescription
{
}
-----
METHOD MongoDB\Driver\TopologyDescription::getServers
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getServers(): array
-----
METHOD MongoDB\Driver\TopologyDescription::getType
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getType(): string
-----
METHOD MongoDB\Driver\TopologyDescription::hasReadableServer
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param MongoDB\Driver\ReadPreference|null $readPreference
     * @return bool
     */
    function hasReadableServer(MongoDB\Driver\ReadPreference|null $readPreference = null): bool
-----
METHOD MongoDB\Driver\TopologyDescription::hasWritableServer
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function hasWritableServer(): bool
-----
CLASS MongoDB\Driver\WriteConcern
-----
final class MongoDB\Driver\WriteConcern implements MongoDB\BSON\Serializable, Serializable
{
}
-----
METHOD MongoDB\Driver\WriteConcern::__construct
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @param int|string $w
     * @param int|null $wtimeout
     * @param bool|null $journal
     * @return void
     */
    function __construct(int|string $w, int|null $wtimeout = null, bool|null $journal = null): mixed
-----
METHOD MongoDB\Driver\WriteConcern::bsonSerialize
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return array|object
     */
    function bsonSerialize(): array|object
-----
METHOD MongoDB\Driver\WriteConcern::getJournal
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool|null
     */
    function getJournal(): bool|null
-----
METHOD MongoDB\Driver\WriteConcern::getW
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int|string|null
     */
    function getW(): int|string|null
-----
METHOD MongoDB\Driver\WriteConcern::getWtimeout
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getWtimeout(): int
-----
METHOD MongoDB\Driver\WriteConcern::isDefault
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isDefault(): bool
-----
METHOD MongoDB\Driver\WriteConcern::serialize
-----
Is final: Yes
Has side-effects: Maybe
Throw type: MongoDB\Driver\Exception\InvalidArgumentException
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function serialize(): string
-----
METHOD MongoDB\Driver\WriteConcern::unserialize
-----
Is final: Yes
Has side-effects: Yes
Throw type: MongoDB\Driver\Exception\InvalidArgumentException|MongoDB\Driver\Exception\UnexpectedValueException
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return void
     */
    function unserialize(string $data): void
-----
CLASS MongoDB\Driver\WriteConcernError
-----
final class MongoDB\Driver\WriteConcernError
{
}
-----
METHOD MongoDB\Driver\WriteConcernError::getCode
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getCode(): int
-----
METHOD MongoDB\Driver\WriteConcernError::getInfo
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return object|null
     */
    function getInfo(): object|null
-----
METHOD MongoDB\Driver\WriteConcernError::getMessage
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getMessage(): string
-----
CLASS MongoDB\Driver\WriteError
-----
final class MongoDB\Driver\WriteError
{
}
-----
METHOD MongoDB\Driver\WriteError::getCode
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getCode(): int
-----
METHOD MongoDB\Driver\WriteError::getIndex
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getIndex(): int
-----
METHOD MongoDB\Driver\WriteError::getInfo
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return object|null
     */
    function getInfo(): object|null
-----
METHOD MongoDB\Driver\WriteError::getMessage
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getMessage(): string
-----
CLASS MongoDB\Driver\WriteResult
-----
final class MongoDB\Driver\WriteResult
{
}
-----
METHOD MongoDB\Driver\WriteResult::getDeletedCount
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int|null
     */
    function getDeletedCount(): int|null
-----
METHOD MongoDB\Driver\WriteResult::getInsertedCount
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int|null
     */
    function getInsertedCount(): int|null
-----
METHOD MongoDB\Driver\WriteResult::getMatchedCount
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int|null
     */
    function getMatchedCount(): int|null
-----
METHOD MongoDB\Driver\WriteResult::getModifiedCount
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int|null
     */
    function getModifiedCount(): int|null
-----
METHOD MongoDB\Driver\WriteResult::getServer
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return MongoDB\Driver\Server
     */
    function getServer(): MongoDB\Driver\Server
-----
METHOD MongoDB\Driver\WriteResult::getUpsertedCount
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int|null
     */
    function getUpsertedCount(): int|null
-----
METHOD MongoDB\Driver\WriteResult::getUpsertedIds
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getUpsertedIds(): array
-----
METHOD MongoDB\Driver\WriteResult::getWriteConcernError
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return MongoDB\Driver\WriteConcernError|null
     */
    function getWriteConcernError(): MongoDB\Driver\WriteConcernError|null
-----
METHOD MongoDB\Driver\WriteResult::getWriteErrors
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getWriteErrors(): array
-----
METHOD MongoDB\Driver\WriteResult::isAcknowledged
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isAcknowledged(): bool
-----
CLASS MultipleIterator
-----
class MultipleIterator implements Iterator
{
}
-----
METHOD MultipleIterator::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $flags
     * @return void
     */
    function __construct(int $flags = 1): mixed
-----
METHOD MultipleIterator::attachIterator
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param Iterator $iterator
     * @param int|string|null $info
     * @return void
     */
    function attachIterator(Iterator $iterator, int|string|null $info = null): mixed
-----
METHOD MultipleIterator::containsIterator
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param Iterator $iterator
     * @return bool
     */
    function containsIterator(Iterator $iterator): mixed
-----
METHOD MultipleIterator::countIterators
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function countIterators(): mixed
-----
METHOD MultipleIterator::current
-----
Has side-effects: Maybe
Throw type: InvalidArgumentException|RuntimeException
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function current(): mixed
-----
METHOD MultipleIterator::detachIterator
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param Iterator $iterator
     * @return void
     */
    function detachIterator(Iterator $iterator): mixed
-----
METHOD MultipleIterator::getFlags
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getFlags(): mixed
-----
METHOD MultipleIterator::key
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function key(): mixed
-----
METHOD MultipleIterator::next
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): mixed
-----
METHOD MultipleIterator::rewind
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): mixed
-----
METHOD MultipleIterator::setFlags
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $flags
     * @return int
     */
    function setFlags(int $flags): mixed
-----
METHOD MultipleIterator::valid
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function valid(): mixed
-----
CLASS NoRewindIterator
-----
class NoRewindIterator extends IteratorIterator
{
}
-----
METHOD NoRewindIterator::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TIterator of Iterator<TKey (class NoRewindIterator, parameter), TValue (class NoRewindIterator, parameter)> (class NoRewindIterator, parameter) $iterator
     * @return void
     */
    function __construct(Iterator $iterator): mixed
-----
METHOD NoRewindIterator::current
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return TValue (class NoRewindIterator, parameter)
     */
    function current(): mixed
-----
METHOD NoRewindIterator::key
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return TKey (class NoRewindIterator, parameter)
     */
    function key(): mixed
-----
METHOD NoRewindIterator::next
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): mixed
-----
METHOD NoRewindIterator::rewind
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): mixed
-----
METHOD NoRewindIterator::valid
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function valid(): mixed
-----
CLASS Normalizer
-----
Not builtin
class Normalizer extends Symfony\Polyfill\Intl\Normalizer\Normalizer
{
}
-----
METHOD Normalizer::getRawDecomposition
-----
MISSING
-----
METHOD Normalizer::isNormalized
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $s
     * @param int $form
     * @return mixed
     */
    function isNormalized(string $s, int $form = 16): mixed
-----
METHOD Normalizer::normalize
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $s
     * @param int $form
     * @return mixed
     */
    function normalize(string $s, int $form = 16): mixed
-----
CLASS NumberFormatter
-----
class NumberFormatter
{
}
-----
METHOD NumberFormatter::create
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $locale
     * @param int $style
     * @param string|null $pattern
     * @return NumberFormatter
     */
    function create(string $locale, int $style, string|null $pattern = null): mixed
-----
METHOD NumberFormatter::format
-----
Visibility: public
Variants: 1
    /**
     * @param float|int $num
     * @param int $type
     * @return string|false
     */
    function format(float|int $num, int $type = 0): mixed
-----
METHOD NumberFormatter::formatCurrency
-----
Visibility: public
Variants: 1
    /**
     * @param float $amount
     * @param string $currency
     * @return string|false
     */
    function formatCurrency(float $amount, string $currency): mixed
-----
METHOD NumberFormatter::getAttribute
-----
Visibility: public
Variants: 1
    /**
     * @param int $attribute
     * @return int
     */
    function getAttribute(int $attribute): mixed
-----
METHOD NumberFormatter::getErrorCode
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getErrorCode(): mixed
-----
METHOD NumberFormatter::getErrorMessage
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getErrorMessage(): mixed
-----
METHOD NumberFormatter::getLocale
-----
Visibility: public
Variants: 1
    /**
     * @param int $type
     * @return string
     */
    function getLocale(int $type = 0): mixed
-----
METHOD NumberFormatter::getPattern
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getPattern(): mixed
-----
METHOD NumberFormatter::getSymbol
-----
Visibility: public
Variants: 1
    /**
     * @param int $symbol
     * @return string
     */
    function getSymbol(int $symbol): mixed
-----
METHOD NumberFormatter::getTextAttribute
-----
Visibility: public
Variants: 1
    /**
     * @param int $attribute
     * @return string
     */
    function getTextAttribute(int $attribute): mixed
-----
METHOD NumberFormatter::parse
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $string
     * @param int $type
     * @param int $offset
     * @return float|false
     */
    function parse(string $string, int $type = 3, mixed &r$offset = null): mixed
-----
METHOD NumberFormatter::parseCurrency
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $string
     * @param string $currency
     * @param int $offset
     * @return float|false
     */
    function parseCurrency(string $string, mixed &rw$currency, mixed &r$offset = null): mixed
-----
METHOD NumberFormatter::setAttribute
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $attribute
     * @param float|int $value
     * @return bool
     */
    function setAttribute(int $attribute, float|int $value): mixed
-----
METHOD NumberFormatter::setPattern
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $pattern
     * @return bool
     */
    function setPattern(string $pattern): mixed
-----
METHOD NumberFormatter::setSymbol
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $symbol
     * @param string $value
     * @return bool
     */
    function setSymbol(int $symbol, string $value): mixed
-----
METHOD NumberFormatter::setTextAttribute
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $attribute
     * @param string $value
     * @return bool
     */
    function setTextAttribute(int $attribute, string $value): mixed
-----
CLASS OAuth
-----
class OAuth
{
}
-----
METHOD OAuth::__construct
-----
Has side-effects: Maybe
Throw type: OAuthException
Visibility: public
Variants: 1
    /**
     * @param string $consumer_key
     * @param string $consumer_secret
     * @param string $signature_method
     * @param int $auth_type
     * @return void
     */
    function __construct(mixed $consumer_key, mixed $consumer_secret, mixed $signature_method = 'HMAC-SHA1', mixed $auth_type = 3): mixed
-----
METHOD OAuth::__destruct
-----
MISSING
-----
METHOD OAuth::disableDebug
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function disableDebug(): mixed
-----
METHOD OAuth::disableRedirects
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function disableRedirects(): mixed
-----
METHOD OAuth::disableSSLChecks
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function disableSSLChecks(): mixed
-----
METHOD OAuth::enableDebug
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function enableDebug(): mixed
-----
METHOD OAuth::enableRedirects
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function enableRedirects(): mixed
-----
METHOD OAuth::enableSSLChecks
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function enableSSLChecks(): mixed
-----
METHOD OAuth::fetch
-----
Has side-effects: Maybe
Throw type: OAuthException
Visibility: public
Variants: 1
    /**
     * @param string $protected_resource_url
     * @param array $extra_parameters
     * @param string $http_method
     * @param array $http_headers
     * @return mixed
     */
    function fetch(mixed $protected_resource_url, mixed $extra_parameters = array{}, mixed $http_method = null, mixed $http_headers = array{}): mixed
-----
METHOD OAuth::generateSignature
-----
MISSING
-----
METHOD OAuth::getAccessToken
-----
Has side-effects: Maybe
Throw type: OAuthException
Visibility: public
Variants: 1
    /**
     * @param string $access_token_url
     * @param string $auth_session_handle
     * @param string $verifier_token
     * @return array|false
     */
    function getAccessToken(mixed $access_token_url, mixed $auth_session_handle = null, mixed $verifier_token = null): mixed
-----
METHOD OAuth::getCAPath
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getCAPath(): mixed
-----
METHOD OAuth::getLastResponse
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getLastResponse(): mixed
-----
METHOD OAuth::getLastResponseHeaders
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string|false
     */
    function getLastResponseHeaders(): mixed
-----
METHOD OAuth::getLastResponseInfo
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getLastResponseInfo(): mixed
-----
METHOD OAuth::getRequestHeader
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $http_method
     * @param string $url
     * @param mixed $extra_parameters
     * @return string|false
     */
    function getRequestHeader(mixed $http_method, mixed $url, mixed $extra_parameters = ''): mixed
-----
METHOD OAuth::getRequestToken
-----
Has side-effects: Maybe
Throw type: OAuthException
Visibility: public
Variants: 1
    /**
     * @param string $request_token_url
     * @param string $callback_url
     * @return array|false
     */
    function getRequestToken(mixed $request_token_url, mixed $callback_url = null): mixed
-----
METHOD OAuth::setAuthType
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $auth_type
     * @return bool
     */
    function setAuthType(mixed $auth_type): mixed
-----
METHOD OAuth::setCAPath
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $ca_path
     * @param string $ca_info
     * @return mixed
     */
    function setCAPath(mixed $ca_path = null, mixed $ca_info = null): mixed
-----
METHOD OAuth::setNonce
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $nonce
     * @return mixed
     */
    function setNonce(mixed $nonce): mixed
-----
METHOD OAuth::setRSACertificate
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $cert
     * @return mixed
     */
    function setRSACertificate(mixed $cert): mixed
-----
METHOD OAuth::setRequestEngine
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $reqengine
     * @return void
     */
    function setRequestEngine(mixed $reqengine): mixed
-----
METHOD OAuth::setSSLChecks
-----
MISSING
-----
METHOD OAuth::setTimestamp
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $timestamp
     * @return mixed
     */
    function setTimestamp(mixed $timestamp): mixed
-----
METHOD OAuth::setToken
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $token
     * @param string $token_secret
     * @return bool
     */
    function setToken(mixed $token, mixed $token_secret): mixed
-----
METHOD OAuth::setVersion
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $version
     * @return bool
     */
    function setVersion(mixed $version): mixed
-----
CLASS OAuthProvider
-----
class OAuthProvider
{
}
-----
METHOD OAuthProvider::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $params_array
     * @return void
     */
    function __construct(mixed $params_array): mixed
-----
METHOD OAuthProvider::addRequiredParameter
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $req_params
     * @return bool
     */
    function addRequiredParameter(mixed $req_params): mixed
-----
METHOD OAuthProvider::callTimestampNonceHandler
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function callTimestampNonceHandler(): mixed
-----
METHOD OAuthProvider::callconsumerHandler
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function callconsumerHandler(): mixed
-----
METHOD OAuthProvider::calltokenHandler
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function calltokenHandler(): mixed
-----
METHOD OAuthProvider::checkOAuthRequest
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $uri
     * @param string $method
     * @return void
     */
    function checkOAuthRequest(mixed $uri = '', mixed $method = ''): mixed
-----
METHOD OAuthProvider::consumerHandler
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $callback_function
     * @return void
     */
    function consumerHandler(mixed $callback_function): mixed
-----
METHOD OAuthProvider::generateToken
-----
Is final: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int $size
     * @param bool $strong
     * @return string
     */
    function generateToken(mixed $size, mixed $strong = false): mixed
-----
METHOD OAuthProvider::is2LeggedEndpoint
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param mixed $params_array
     * @return void
     */
    function is2LeggedEndpoint(mixed $params_array): mixed
-----
METHOD OAuthProvider::isRequestTokenEndpoint
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param bool $will_issue_request_token
     * @return void
     */
    function isRequestTokenEndpoint(mixed $will_issue_request_token): mixed
-----
METHOD OAuthProvider::removeRequiredParameter
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $req_params
     * @return bool
     */
    function removeRequiredParameter(mixed $req_params): mixed
-----
METHOD OAuthProvider::reportProblem
-----
Is final: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $oauthexception
     * @param bool $send_headers
     * @return string
     */
    function reportProblem(mixed $oauthexception, mixed $send_headers = true): mixed
-----
METHOD OAuthProvider::setParam
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $param_key
     * @param mixed $param_val
     * @return bool
     */
    function setParam(mixed $param_key, mixed $param_val = null): mixed
-----
METHOD OAuthProvider::setRequestTokenPath
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $path
     * @return bool
     */
    function setRequestTokenPath(mixed $path): mixed
-----
METHOD OAuthProvider::timestampNonceHandler
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $callback_function
     * @return void
     */
    function timestampNonceHandler(mixed $callback_function): mixed
-----
METHOD OAuthProvider::tokenHandler
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $callback_function
     * @return void
     */
    function tokenHandler(mixed $callback_function): mixed
-----
CLASS OCICollection
-----
class OCICollection
{
}
-----
METHOD OCICollection::append
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $value
     * @return bool
     */
    function append(string $value): mixed
-----
METHOD OCICollection::assign
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param OCICollection $from
     * @return bool
     */
    function assign(OCICollection $from): mixed
-----
METHOD OCICollection::assignElem
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @param string $value
     * @return bool
     */
    function assignelem(int $index, string $value): mixed
-----
METHOD OCICollection::free
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function free(): mixed
-----
METHOD OCICollection::getElem
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @return float|string|false|null
     */
    function getelem(int $index): mixed
-----
METHOD OCICollection::max
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int|false
     */
    function max(): mixed
-----
METHOD OCICollection::size
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int|false
     */
    function size(): mixed
-----
METHOD OCICollection::trim
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $num
     * @return bool
     */
    function trim(int $num): mixed
-----
CLASS OCILob
-----
class OCILob
{
}
-----
METHOD OCILob::append
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param OCILob $lob_from
     * @return bool
     */
    function append(OCILob $lob_from): mixed
-----
METHOD OCILob::close
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function close(): mixed
-----
METHOD OCILob::eof
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function eof(): mixed
-----
METHOD OCILob::erase
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int|null $offset
     * @param int|null $length
     * @return int|false
     */
    function erase(int|null $offset = null, int|null $length = null): mixed
-----
METHOD OCILob::export
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @param int|null $start
     * @param int|null $length
     * @return bool
     */
    function export(string $filename, int|null $start = null, int|null $length = null): mixed
-----
METHOD OCILob::flush
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $flag
     * @return bool
     */
    function flush(int $flag = 0): bool
-----
METHOD OCILob::free
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function free(): mixed
-----
METHOD OCILob::getBuffering
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function getbuffering(): mixed
-----
METHOD OCILob::import
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @return bool
     */
    function import(string $filename): mixed
-----
METHOD OCILob::load
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string|false
     */
    function load(): mixed
-----
METHOD OCILob::read
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $length
     * @return string|false
     */
    function read(int $length): mixed
-----
METHOD OCILob::rewind
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function rewind(): mixed
-----
METHOD OCILob::save
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @param int $offset
     * @return bool
     */
    function save(string $data, int $offset = 0): mixed
-----
METHOD OCILob::saveFile
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @return bool
     */
    function savefile(string $filename): mixed
-----
METHOD OCILob::seek
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $offset
     * @param int $whence
     * @return bool
     */
    function seek(int $offset, int $whence = 0): mixed
-----
METHOD OCILob::setBuffering
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $on_off
     * @return bool
     */
    function setbuffering(bool $on_off): mixed
-----
METHOD OCILob::size
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int|false
     */
    function size(): mixed
-----
METHOD OCILob::tell
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int|false
     */
    function tell(): mixed
-----
METHOD OCILob::truncate
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $length
     * @return bool
     */
    function truncate(int $length = 0): mixed
-----
METHOD OCILob::write
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @param int|null $length
     * @return int|false
     */
    function write(string $data, int|null $length = null): mixed
-----
METHOD OCILob::writeTemporary
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @param int $lob_type
     * @return bool
     */
    function writeTemporary(string $data, int $lob_type = 2): mixed
-----
METHOD OCILob::writeToFile
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @param int|null $start
     * @param int|null $length
     * @return bool
     */
    function writetofile(string $filename, int|null $start = null, int|null $length = null): mixed
-----
CLASS OuterIterator
-----
interface OuterIterator extends Iterator
{
}
-----
METHOD OuterIterator::getInnerIterator
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Iterator<TKey (class OuterIterator, parameter), TValue (class OuterIterator, parameter)>
     */
    function getInnerIterator(): mixed
-----
CLASS PDO
-----
class PDO
{
}
-----
METHOD PDO::__construct
-----
Has side-effects: Maybe
Throw type: PDOException
Visibility: public
Variants: 1
    /**
     * @param string $dsn
     * @param string|null $username
     * @param string|null $password
     * @param array|null $options
     * @return void
     */
    function __construct(string $dsn, string|null $username = null, string|null $password = null, array|null $options = null): mixed
-----
METHOD PDO::beginTransaction
-----
Has side-effects: Maybe
Throw type: PDOException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function beginTransaction(): mixed
-----
METHOD PDO::commit
-----
Has side-effects: Maybe
Throw type: PDOException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function commit(): mixed
-----
METHOD PDO::cubrid_schema
-----
MISSING
-----
METHOD PDO::errorCode
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function errorCode(): mixed
-----
METHOD PDO::errorInfo
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function errorInfo(): mixed
-----
METHOD PDO::exec
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $statement
     * @return int|false
     */
    function exec(string $statement): mixed
-----
METHOD PDO::getAttribute
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $attribute
     * @return mixed
     */
    function getAttribute(int $attribute): mixed
-----
METHOD PDO::getAvailableDrivers
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getAvailableDrivers(): mixed
-----
METHOD PDO::inTransaction
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function inTransaction(): mixed
-----
METHOD PDO::lastInsertId
-----
Has side-effects: Maybe
Throw type: PDOException
Visibility: public
Variants: 1
    /**
     * @param string|null $name
     * @return string|false
     */
    function lastInsertId(string|null $name = null): mixed
-----
METHOD PDO::pgsqlCopyFromArray
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $tableName
     * @param array $rows
     * @param string $separator
     * @param string $nullAs
     * @param string $fields
     * @return bool
     */
    function pgsqlCopyFromArray(string $tableName, array $rows, string $separator = "\t", string $nullAs = '\\\\N', string|null $fields = null): bool
-----
METHOD PDO::pgsqlCopyFromFile
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $tableName
     * @param string $filename
     * @param string $separator
     * @param string $nullAs
     * @param string $fields
     * @return bool
     */
    function pgsqlCopyFromFile(string $tableName, string $filename, string $separator = "\t", string $nullAs = '\\\\N', string|null $fields = null): bool
-----
METHOD PDO::pgsqlCopyToArray
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $tableName
     * @param string $separator
     * @param string $nullAs
     * @param string $fields
     * @return array
     */
    function pgsqlCopyToArray(string $tableName, string $separator = "\t", string $nullAs = '\\\\N', string|null $fields = null): array|false
-----
METHOD PDO::pgsqlCopyToFile
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $tableName
     * @param string $filename
     * @param string $separator
     * @param string $nullAs
     * @param string $fields
     * @return bool
     */
    function pgsqlCopyToFile(string $tableName, string $filename, string $separator = "\t", string $nullAs = '\\\\N', string|null $fields = null): bool
-----
METHOD PDO::pgsqlGetNotify
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $fetchMode
     * @param int $timeoutMilliseconds
     * @return array
     */
    function pgsqlGetNotify(int $fetchMode = 1, int $timeoutMilliseconds = 0): array|false
-----
METHOD PDO::pgsqlGetPid
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function pgsqlGetPid(): int
-----
METHOD PDO::pgsqlLOBCreate
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function pgsqlLOBCreate(): string|false
-----
METHOD PDO::pgsqlLOBOpen
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $oid
     * @param string $mode
     * @return resource
     */
    function pgsqlLOBOpen(string $oid, string $mode = 'rb'): mixed
-----
METHOD PDO::pgsqlLOBUnlink
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $oid
     * @return bool
     */
    function pgsqlLOBUnlink(string $oid): bool
-----
METHOD PDO::prepare
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $query
     * @param array $options
     * @return (PDOStatement|false)
     */
    function prepare(string $query, array $options = array{}): mixed
-----
METHOD PDO::query
-----
Has side-effects: Maybe
Visibility: public
Variants: 4
    /**
     * @param string $query
     * @return PDOStatement|false
     */
    function query(string $query): mixed
    /**
     * @param string $query
     * @param int $fetchMode
     * @param int $fetch_mode_args
     * @return PDOStatement|false
     */
    function query(string $query, int|null $fetchMode = null, mixed $fetch_mode_args): mixed
    /**
     * @param string $query
     * @param int $fetchMode
     * @param string $fetch_mode_args
     * @param array $ctorargs
     * @return PDOStatement|false
     */
    function query(string $query, int|null $fetchMode = null, mixed $fetch_mode_args, mixed $ctorargs): mixed
    /**
     * @param string $query
     * @param int $fetchMode
     * @param object $fetch_mode_args
     * @return PDOStatement|false
     */
    function query(string $query, int|null $fetchMode = null, mixed $fetch_mode_args): mixed
-----
METHOD PDO::quote
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $string
     * @param int $type
     * @return string
     */
    function quote(string $string, int $type = 2): mixed
-----
METHOD PDO::rollBack
-----
Has side-effects: Maybe
Throw type: PDOException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function rollBack(): mixed
-----
METHOD PDO::setAttribute
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $attribute
     * @param mixed $value
     * @return bool
     */
    function setAttribute(int $attribute, mixed $value): bool
-----
METHOD PDO::sqliteCreateAggregate
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $function_name
     * @param callable(): mixed $step_func
     * @param callable(): mixed $finalize_func
     * @param int $num_args
     * @return bool
     */
    function sqliteCreateAggregate(mixed $function_name, mixed $step_func, mixed $finalize_func, mixed $num_args = -1): mixed
-----
METHOD PDO::sqliteCreateCollation
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param callable(): mixed $callback
     * @return bool
     */
    function sqliteCreateCollation(mixed $name, mixed $callback): mixed
-----
METHOD PDO::sqliteCreateFunction
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $function_name
     * @param callable(): mixed $callback
     * @param int $num_args
     * @param int $flags
     * @return bool
     */
    function sqliteCreateFunction(mixed $function_name, mixed $callback, mixed $num_args = -1, mixed $flags = 0): mixed
-----
CLASS PDOStatement
-----
class PDOStatement implements IteratorAggregate
{
}
-----
METHOD PDOStatement::bindColumn
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int|string $column
     * @param mixed $var
     * @param int $type
     * @param int $maxLength
     * @param mixed $driverOptions
     * @return bool
     */
    function bindColumn(int|string $column, mixed &rw$var, int $type = 2, int $maxLength = 0, mixed $driverOptions = null): mixed
-----
METHOD PDOStatement::bindParam
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int|string $param
     * @param mixed $var
     * @param int $type
     * @param int $maxLength
     * @param mixed $driverOptions
     * @return bool
     */
    function bindParam(int|string $param, mixed &rw$var, int $type = 2, int $maxLength = 0, mixed $driverOptions = null): mixed
-----
METHOD PDOStatement::bindValue
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int|string $param
     * @param mixed $value
     * @param int $type
     * @return bool
     */
    function bindValue(int|string $param, mixed $value, int $type = 2): mixed
-----
METHOD PDOStatement::closeCursor
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function closeCursor(): mixed
-----
METHOD PDOStatement::columnCount
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int<0, max>
     */
    function columnCount(): mixed
-----
METHOD PDOStatement::debugDumpParams
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function debugDumpParams(): mixed
-----
METHOD PDOStatement::errorCode
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function errorCode(): mixed
-----
METHOD PDOStatement::errorInfo
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function errorInfo(): mixed
-----
METHOD PDOStatement::execute
-----
Has side-effects: Maybe
Throw type: PDOException
Visibility: public
Variants: 1
    /**
     * @param array|null $params
     * @return bool
     */
    function execute(array|null $params = null): mixed
-----
METHOD PDOStatement::fetch
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $mode
     * @param int $cursorOrientation
     * @param int $cursorOffset
     * @return mixed
     */
    function fetch(int $mode = 0, int $cursorOrientation = 0, int $cursorOffset = 0): mixed
-----
METHOD PDOStatement::fetchAll
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $mode
     * @param (callable(): mixed)|int|string $args
     * @return array
     */
    function fetchAll(int $mode = 0, mixed ...$args): mixed
-----
METHOD PDOStatement::fetchColumn
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $column
     * @return int|string|false|null
     */
    function fetchColumn(int $column = 0): mixed
-----
METHOD PDOStatement::fetchObject
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param class-string<T of object (method PDOStatement::fetchObject(), parameter)> $class
     * @param array $constructorArgs
     * @return T of object (method PDOStatement::fetchObject(), parameter)|false
     */
    function fetchObject(string|null $class = 'stdClass', array $constructorArgs = array{}): mixed
-----
METHOD PDOStatement::getAttribute
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $name
     * @return mixed
     */
    function getAttribute(int $name): mixed
-----
METHOD PDOStatement::getColumnMeta
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $column
     * @return array{name: string, table?: string, native_type?: string, len: int, flags: array<int, string>, precision: int<0, max>, pdo_type: 0|1|2|3|4|5|6|536870912|1073741824|2147483648}|false
     */
    function getColumnMeta(int $column): mixed
-----
METHOD PDOStatement::getIterator
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Traversable<mixed, array<int|string, mixed>>
     */
    function getIterator(): Iterator
-----
METHOD PDOStatement::nextRowset
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function nextRowset(): mixed
-----
METHOD PDOStatement::rowCount
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int<0, max>
     */
    function rowCount(): mixed
-----
METHOD PDOStatement::setAttribute
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $attribute
     * @param mixed $value
     * @return bool
     */
    function setAttribute(int $attribute, mixed $value): mixed
-----
METHOD PDOStatement::setFetchMode
-----
Has side-effects: Maybe
Visibility: public
Variants: 4
    /**
     * @param int $mode
     * @return bool
     */
    function setFetchMode(mixed $mode): mixed
    /**
     * @param int $mode
     * @param int $className
     * @return bool
     */
    function setFetchMode(mixed $mode, mixed $className = null): mixed
    /**
     * @param int $mode
     * @param string $className
     * @param array|null $params
     * @return bool
     */
    function setFetchMode(mixed $mode, mixed $className = null, mixed $params): mixed
    /**
     * @param int $mode
     * @param object $className
     * @return bool
     */
    function setFetchMode(mixed $mode, mixed $className = null): mixed
-----
CLASS ParentIterator
-----
class ParentIterator extends RecursiveFilterIterator
{
}
-----
METHOD ParentIterator::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param RecursiveIterator $iterator
     * @return void
     */
    function __construct(RecursiveIterator $iterator): mixed
-----
METHOD ParentIterator::accept
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function accept(): mixed
-----
METHOD ParentIterator::getChildren
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return ParentIterator
     */
    function getChildren(): mixed
-----
METHOD ParentIterator::hasChildren
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function hasChildren(): mixed
-----
METHOD ParentIterator::next
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): mixed
-----
METHOD ParentIterator::rewind
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): mixed
-----
CLASS Parle\Lexer
-----
class Parle\Lexer
{
}
-----
METHOD Parle\Lexer::advance
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function advance(): void
-----
METHOD Parle\Lexer::build
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function build(): void
-----
METHOD Parle\Lexer::callout
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $id
     * @param callable(): mixed $callback
     * @return void
     */
    function callout(int $id, callable(): mixed $callback): void
-----
METHOD Parle\Lexer::consume
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return void
     */
    function consume(string $data): void
-----
METHOD Parle\Lexer::dump
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function dump(): void
-----
METHOD Parle\Lexer::getToken
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Parle\Token
     */
    function getToken(): Parle\Token
-----
METHOD Parle\Lexer::insertMacro
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $regex
     * @return void
     */
    function insertMacro(string $name, string $regex): void
-----
METHOD Parle\Lexer::push
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $regex
     * @param int $id
     * @return void
     */
    function push(string $regex, int $id): void
-----
METHOD Parle\Lexer::reset
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $pos
     * @return void
     */
    function reset(int $pos): void
-----
CLASS Parle\Parser
-----
class Parle\Parser
{
}
-----
METHOD Parle\Parser::advance
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function advance(): void
-----
METHOD Parle\Parser::build
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function build(): void
-----
METHOD Parle\Parser::consume
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @param Parle\Lexer $lexer
     * @return void
     */
    function consume(string $data, Parle\Lexer $lexer): void
-----
METHOD Parle\Parser::dump
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function dump(): void
-----
METHOD Parle\Parser::errorInfo
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Parle\ErrorInfo
     */
    function errorInfo(): Parle\ErrorInfo
-----
METHOD Parle\Parser::left
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $token
     * @return void
     */
    function left(string $token): void
-----
METHOD Parle\Parser::nonassoc
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $token
     * @return void
     */
    function nonassoc(string $token): void
-----
METHOD Parle\Parser::precedence
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $token
     * @return void
     */
    function precedence(string $token): void
-----
METHOD Parle\Parser::push
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $rule
     * @return int
     */
    function push(string $name, string $rule): int
-----
METHOD Parle\Parser::reset
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $tokenId
     * @return void
     */
    function reset(int $tokenId): void
-----
METHOD Parle\Parser::right
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $token
     * @return void
     */
    function right(string $token): void
-----
METHOD Parle\Parser::sigil
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $idx
     * @return string
     */
    function sigil(int $idx): string
-----
METHOD Parle\Parser::sigilCount
-----
MISSING
-----
METHOD Parle\Parser::sigilName
-----
MISSING
-----
METHOD Parle\Parser::token
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $token
     * @return void
     */
    function token(string $token): void
-----
METHOD Parle\Parser::tokenId
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $token
     * @return int
     */
    function tokenId(string $token): int
-----
METHOD Parle\Parser::trace
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function trace(): string
-----
METHOD Parle\Parser::validate
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @param Parle\Lexer $lexer
     * @return bool
     */
    function validate(string $data, Parle\Lexer $lexer): bool
-----
CLASS Parle\RLexer
-----
class Parle\RLexer
{
}
-----
METHOD Parle\RLexer::advance
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function advance(): void
-----
METHOD Parle\RLexer::build
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function build(): void
-----
METHOD Parle\RLexer::callout
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $id
     * @param callable(): mixed $callback
     * @return void
     */
    function callout(int $id, callable(): mixed $callback): void
-----
METHOD Parle\RLexer::consume
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return void
     */
    function consume(string $data): void
-----
METHOD Parle\RLexer::dump
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function dump(): void
-----
METHOD Parle\RLexer::getToken
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Parle\Token
     */
    function getToken(): Parle\Token
-----
METHOD Parle\RLexer::insertMacro
-----
MISSING
-----
METHOD Parle\RLexer::push
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $regex
     * @param string $id
     * @param string $newState
     * @return void
     */
    function push(string $regex, int $id, mixed $newState): void
-----
METHOD Parle\RLexer::pushState
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $state
     * @return int
     */
    function pushState(string $state): int
-----
METHOD Parle\RLexer::reset
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $pos
     * @return void
     */
    function reset(int $pos): void
-----
CLASS Parle\RParser
-----
class Parle\RParser
{
}
-----
METHOD Parle\RParser::advance
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function advance(): void
-----
METHOD Parle\RParser::build
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function build(): void
-----
METHOD Parle\RParser::consume
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @param Parle\Lexer $lexer
     * @return void
     */
    function consume(string $data, Parle\Lexer $lexer): void
-----
METHOD Parle\RParser::dump
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function dump(): void
-----
METHOD Parle\RParser::errorInfo
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Parle\ErrorInfo
     */
    function errorInfo(): Parle\ErrorInfo
-----
METHOD Parle\RParser::left
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $token
     * @return void
     */
    function left(string $token): void
-----
METHOD Parle\RParser::nonassoc
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $token
     * @return void
     */
    function nonassoc(string $token): void
-----
METHOD Parle\RParser::precedence
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $token
     * @return void
     */
    function precedence(string $token): void
-----
METHOD Parle\RParser::push
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $rule
     * @return int
     */
    function push(string $name, string $rule): int
-----
METHOD Parle\RParser::reset
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $tokenId
     * @return void
     */
    function reset(int $tokenId): void
-----
METHOD Parle\RParser::right
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $token
     * @return void
     */
    function right(string $token): void
-----
METHOD Parle\RParser::sigil
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $idx
     * @return string
     */
    function sigil(int $idx): string
-----
METHOD Parle\RParser::sigilCount
-----
MISSING
-----
METHOD Parle\RParser::sigilName
-----
MISSING
-----
METHOD Parle\RParser::token
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $token
     * @return void
     */
    function token(string $token): void
-----
METHOD Parle\RParser::tokenId
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $token
     * @return int
     */
    function tokenId(string $token): int
-----
METHOD Parle\RParser::trace
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function trace(): string
-----
METHOD Parle\RParser::validate
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @param Parle\Lexer $lexer
     * @return bool
     */
    function validate(string $data, Parle\RLexer $lexer): bool
-----
CLASS Parle\Stack
-----
class Parle\Stack
{
}
-----
METHOD Parle\Stack::pop
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function pop(): void
-----
METHOD Parle\Stack::push
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param mixed $item
     * @return void
     */
    function push(mixed $item): mixed
-----
CLASS Phar
-----
class Phar extends RecursiveDirectoryIterator implements Countable, ArrayAccess
{
}
-----
METHOD Phar::__construct
-----
Has side-effects: Maybe
Throw type: BadMethodCallException|UnexpectedValueException
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @param int $flags
     * @param string|null $alias
     * @return void
     */
    function __construct(string $filename, int $flags = 12288, string|null $alias = null): mixed
-----
METHOD Phar::__destruct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function __destruct(): mixed
-----
METHOD Phar::addEmptyDir
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $directory
     * @return mixed
     */
    function addEmptyDir(string $directory): mixed
-----
METHOD Phar::addFile
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @param string|null $localName
     * @return mixed
     */
    function addFile(string $filename, string|null $localName = null): mixed
-----
METHOD Phar::addFromString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $localName
     * @param string $contents
     * @return mixed
     */
    function addFromString(string $localName, string $contents): mixed
-----
METHOD Phar::apiVersion
-----
Is final: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function apiVersion(): string
-----
METHOD Phar::buildFromDirectory
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $directory
     * @param string $pattern
     * @return array
     */
    function buildFromDirectory(string $directory, string $pattern = ''): mixed
-----
METHOD Phar::buildFromIterator
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param Iterator $iterator
     * @param string|null $baseDirectory
     * @return array
     */
    function buildFromIterator(Traversable $iterator, string|null $baseDirectory = null): mixed
-----
METHOD Phar::canCompress
-----
Is final: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int $compression
     * @return bool
     */
    function canCompress(int $compression = 0): bool
-----
METHOD Phar::canWrite
-----
Is final: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function canWrite(): bool
-----
METHOD Phar::compress
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $compression
     * @param string|null $extension
     * @return Phar
     */
    function compress(int $compression, string|null $extension = null): mixed
-----
METHOD Phar::compressFiles
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $compression
     * @return mixed
     */
    function compressFiles(int $compression): mixed
-----
METHOD Phar::convertToData
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int|null $format
     * @param int|null $compression
     * @param string|null $extension
     * @return PharData
     */
    function convertToData(int|null $format = null, int|null $compression = null, string|null $extension = null): mixed
-----
METHOD Phar::convertToExecutable
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int|null $format
     * @param int|null $compression
     * @param string|null $extension
     * @return Phar
     */
    function convertToExecutable(int|null $format = null, int|null $compression = null, string|null $extension = null): mixed
-----
METHOD Phar::copy
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $to
     * @param string $from
     * @return bool
     */
    function copy(string $to, string $from): mixed
-----
METHOD Phar::count
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $mode
     * @return int<0, max>
     */
    function count(int $mode = 0): mixed
-----
METHOD Phar::createDefaultStub
-----
Is final: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string|null $index
     * @param string|null $webIndex
     * @return string
     */
    function createDefaultStub(string|null $index = null, string|null $webIndex = null): string
-----
METHOD Phar::decompress
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string|null $extension
     * @return Phar
     */
    function decompress(string|null $extension = null): mixed
-----
METHOD Phar::decompressFiles
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function decompressFiles(): mixed
-----
METHOD Phar::delMetadata
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function delMetadata(): mixed
-----
METHOD Phar::delete
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $localName
     * @return bool
     */
    function delete(string $localName): mixed
-----
METHOD Phar::extractTo
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $directory
     * @param array|string|null $files
     * @param bool $overwrite
     * @return bool
     */
    function extractTo(string $directory, array|string|null $files = null, bool $overwrite = false): mixed
-----
METHOD Phar::getAlias
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getAlias(): mixed
-----
METHOD Phar::getMetadata
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $unserializeOptions
     * @return mixed
     */
    function getMetadata(array $unserializeOptions = array{}): mixed
-----
METHOD Phar::getModified
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function getModified(): mixed
-----
METHOD Phar::getPath
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getPath(): mixed
-----
METHOD Phar::getSignature
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array{hash: string, hash_type: string}
     */
    function getSignature(): mixed
-----
METHOD Phar::getStub
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getStub(): mixed
-----
METHOD Phar::getSupportedCompression
-----
Is final: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getSupportedCompression(): array
-----
METHOD Phar::getSupportedSignatures
-----
Is final: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getSupportedSignatures(): array
-----
METHOD Phar::getVersion
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getVersion(): mixed
-----
METHOD Phar::hasMetadata
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function hasMetadata(): mixed
-----
METHOD Phar::interceptFileFuncs
-----
Is final: Yes
Has side-effects: Yes
Static
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function interceptFileFuncs(): void
-----
METHOD Phar::isBuffering
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isBuffering(): mixed
-----
METHOD Phar::isCompressed
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function isCompressed(): mixed
-----
METHOD Phar::isFileFormat
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $format
     * @return bool
     */
    function isFileFormat(int $format): mixed
-----
METHOD Phar::isValidPharFilename
-----
Is final: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @param bool $executable
     * @return bool
     */
    function isValidPharFilename(string $filename, bool $executable = true): bool
-----
METHOD Phar::isWritable
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isWritable(): mixed
-----
METHOD Phar::loadPhar
-----
Is final: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @param string|null $alias
     * @return bool
     */
    function loadPhar(string $filename, string|null $alias = null): bool
-----
METHOD Phar::mapPhar
-----
Is final: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string|null $alias
     * @param int $offset
     * @return bool
     */
    function mapPhar(string|null $alias = null, int $offset = 0): bool
-----
METHOD Phar::mount
-----
Is final: Yes
Has side-effects: Yes
Static
Visibility: public
Variants: 1
    /**
     * @param string $pharPath
     * @param string $externalPath
     * @return void
     */
    function mount(string $pharPath, string $externalPath): void
-----
METHOD Phar::mungServer
-----
Is final: Yes
Has side-effects: Yes
Static
Visibility: public
Variants: 1
    /**
     * @param array $variables
     * @return void
     */
    function mungServer(array $variables): void
-----
METHOD Phar::offsetExists
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $localName
     * @return bool
     */
    function offsetExists(mixed $localName): mixed
-----
METHOD Phar::offsetGet
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $localName
     * @return PharFileInfo
     */
    function offsetGet(mixed $localName): mixed
-----
METHOD Phar::offsetSet
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $localName
     * @param resource|string $value
     * @return mixed
     */
    function offsetSet(mixed $localName, mixed $value): mixed
-----
METHOD Phar::offsetUnset
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $localName
     * @return bool
     */
    function offsetUnset(mixed $localName): mixed
-----
METHOD Phar::running
-----
Is final: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param bool $returnPhar
     * @return string
     */
    function running(bool $returnPhar = true): string
-----
METHOD Phar::setAlias
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $alias
     * @return bool
     */
    function setAlias(string $alias): mixed
-----
METHOD Phar::setDefaultStub
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string|null $index
     * @param string|null $webIndex
     * @return bool
     */
    function setDefaultStub(string|null $index = null, string|null $webIndex = null): mixed
-----
METHOD Phar::setMetadata
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $metadata
     * @return mixed
     */
    function setMetadata(mixed $metadata): mixed
-----
METHOD Phar::setSignatureAlgorithm
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $algo
     * @param string|null $privateKey
     * @return mixed
     */
    function setSignatureAlgorithm(int $algo, string|null $privateKey = null): mixed
-----
METHOD Phar::setStub
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param resource|string $stub
     * @param int $length
     * @return bool
     */
    function setStub(mixed $stub, int $length = *ERROR*): mixed
-----
METHOD Phar::startBuffering
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function startBuffering(): mixed
-----
METHOD Phar::stopBuffering
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function stopBuffering(): mixed
-----
METHOD Phar::unlinkArchive
-----
Is final: Yes
Has side-effects: Maybe
Throw type: PharException
Static
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @return bool
     */
    function unlinkArchive(string $filename): bool
-----
METHOD Phar::webPhar
-----
Is final: Yes
Has side-effects: Yes
Static
Visibility: public
Variants: 1
    /**
     * @param string|null $alias
     * @param string|null $index
     * @param string|null $fileNotFoundScript
     * @param array $mimeTypes
     * @param (callable(): mixed)|null $rewrite
     * @return void
     */
    function webPhar(string|null $alias = null, string|null $index = null, string|null $fileNotFoundScript = null, array $mimeTypes = array{}, (callable(): mixed)|null $rewrite = null): void
-----
CLASS PharData
-----
class PharData extends Phar
{
}
-----
METHOD PharData::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @param int $flags
     * @param string|null $alias
     * @param int $format
     * @return void
     */
    function __construct(string $filename, int $flags = 12288, string|null $alias = null, int $format = 0): mixed
-----
METHOD PharData::__destruct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function __destruct(): mixed
-----
METHOD PharData::addEmptyDir
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $directory
     * @return mixed
     */
    function addEmptyDir(string $directory): mixed
-----
METHOD PharData::addFile
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @param string|null $localName
     * @return mixed
     */
    function addFile(string $filename, string|null $localName = null): mixed
-----
METHOD PharData::addFromString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $localName
     * @param string $contents
     * @return mixed
     */
    function addFromString(string $localName, string $contents): mixed
-----
METHOD PharData::buildFromDirectory
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $directory
     * @param string $pattern
     * @return array
     */
    function buildFromDirectory(string $directory, string $pattern = ''): mixed
-----
METHOD PharData::buildFromIterator
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param Iterator $iterator
     * @param string|null $baseDirectory
     * @return array
     */
    function buildFromIterator(Traversable $iterator, string|null $baseDirectory = null): mixed
-----
METHOD PharData::compress
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $compression
     * @param string|null $extension
     * @return Phar
     */
    function compress(int $compression, string|null $extension = null): mixed
-----
METHOD PharData::compressFiles
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $compression
     * @return mixed
     */
    function compressFiles(int $compression): mixed
-----
METHOD PharData::convertToData
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int|null $format
     * @param int|null $compression
     * @param string|null $extension
     * @return PharData
     */
    function convertToData(int|null $format = null, int|null $compression = null, string|null $extension = null): mixed
-----
METHOD PharData::convertToExecutable
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int|null $format
     * @param int|null $compression
     * @param string|null $extension
     * @return Phar
     */
    function convertToExecutable(int|null $format = null, int|null $compression = null, string|null $extension = null): mixed
-----
METHOD PharData::copy
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $to
     * @param string $from
     * @return bool
     */
    function copy(string $to, string $from): mixed
-----
METHOD PharData::decompress
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string|null $extension
     * @return Phar
     */
    function decompress(string|null $extension = null): mixed
-----
METHOD PharData::decompressFiles
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function decompressFiles(): mixed
-----
METHOD PharData::delMetadata
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function delMetadata(): mixed
-----
METHOD PharData::delete
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $localName
     * @return bool
     */
    function delete(string $localName): mixed
-----
METHOD PharData::extractTo
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $directory
     * @param array|string|null $files
     * @param bool $overwrite
     * @return bool
     */
    function extractTo(string $directory, array|string|null $files = null, bool $overwrite = false): mixed
-----
METHOD PharData::isWritable
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isWritable(): mixed
-----
METHOD PharData::offsetSet
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $localName
     * @param resource|string $value
     * @return mixed
     */
    function offsetSet(mixed $localName, mixed $value): mixed
-----
METHOD PharData::offsetUnset
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $localName
     * @return bool
     */
    function offsetUnset(mixed $localName): mixed
-----
METHOD PharData::setAlias
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $alias
     * @return bool
     */
    function setAlias(string $alias): mixed
-----
METHOD PharData::setDefaultStub
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string|null $index
     * @param string|null $webIndex
     * @return bool
     */
    function setDefaultStub(string|null $index = null, string|null $webIndex = null): mixed
-----
METHOD PharData::setMetadata
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $metadata
     * @return mixed
     */
    function setMetadata(mixed $metadata): mixed
-----
METHOD PharData::setSignatureAlgorithm
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $algo
     * @param string|null $privateKey
     * @return mixed
     */
    function setSignatureAlgorithm(int $algo, string|null $privateKey = null): mixed
-----
METHOD PharData::setStub
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param resource|string $stub
     * @param int $length
     * @return bool
     */
    function setStub(mixed $stub, int $length = *ERROR*): mixed
-----
CLASS PharFileInfo
-----
class PharFileInfo extends SplFileInfo
{
}
-----
METHOD PharFileInfo::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @return void
     */
    function __construct(string $filename): mixed
-----
METHOD PharFileInfo::__destruct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function __destruct(): mixed
-----
METHOD PharFileInfo::chmod
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $perms
     * @return void
     */
    function chmod(int $perms): mixed
-----
METHOD PharFileInfo::compress
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $compression
     * @return bool
     */
    function compress(int $compression): mixed
-----
METHOD PharFileInfo::decompress
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function decompress(): mixed
-----
METHOD PharFileInfo::delMetadata
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function delMetadata(): mixed
-----
METHOD PharFileInfo::getCRC32
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getCRC32(): mixed
-----
METHOD PharFileInfo::getCompressedSize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getCompressedSize(): mixed
-----
METHOD PharFileInfo::getContent
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getContent(): mixed
-----
METHOD PharFileInfo::getMetadata
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $unserializeOptions
     * @return mixed
     */
    function getMetadata(array $unserializeOptions = array{}): mixed
-----
METHOD PharFileInfo::getPharFlags
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getPharFlags(): mixed
-----
METHOD PharFileInfo::hasMetadata
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function hasMetadata(): mixed
-----
METHOD PharFileInfo::isCRCChecked
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isCRCChecked(): mixed
-----
METHOD PharFileInfo::isCompressed
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int|null $compression
     * @return bool
     */
    function isCompressed(int|null $compression = null): mixed
-----
METHOD PharFileInfo::setMetadata
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param mixed $metadata
     * @return void
     */
    function setMetadata(mixed $metadata): mixed
-----
CLASS PhpToken
-----
Not builtin
class PhpToken extends Symfony\Polyfill\Php80\PhpToken
{
}
-----
METHOD PhpToken::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $id
     * @param string $text
     * @param int $line
     * @param int $position
     * @return void
     */
    function __construct(int $id, string $text, int $line = -1, int $position = -1): mixed
-----
METHOD PhpToken::__toString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): string
-----
METHOD PhpToken::getTokenName
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string|null
     */
    function getTokenName(): string|null
-----
METHOD PhpToken::is
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array|int|string $kind
     * @return bool
     */
    function is(mixed $kind): bool
-----
METHOD PhpToken::isIgnorable
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isIgnorable(): bool
-----
METHOD PhpToken::tokenize
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $code
     * @param int $flags
     * @return array<static(Symfony\Polyfill\Php80\PhpToken)>
     */
    function tokenize(string $code, int $flags = 0): array
-----
CLASS Pool
-----
class Pool
{
}
-----
METHOD Pool::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $size
     * @param string $class
     * @param array $ctor
     * @return void
     */
    function __construct(int $size, string $class = 'Worker', array $ctor = array{}): mixed
-----
METHOD Pool::collect
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $collector
     * @return int
     */
    function collect((callable(): mixed)|null $collector = null): mixed
-----
METHOD Pool::resize
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $size
     * @return void
     */
    function resize(int $size): mixed
-----
METHOD Pool::shutdown
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function shutdown(): mixed
-----
METHOD Pool::submit
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param Threaded $task
     * @return int
     */
    function submit(Threaded $task): mixed
-----
METHOD Pool::submitTo
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $worker
     * @param Threaded $task
     * @return int
     */
    function submitTo(int $worker, Threaded $task): mixed
-----
CLASS QuickHashIntHash
-----
MISSING
-----
CLASS QuickHashIntSet
-----
MISSING
-----
CLASS QuickHashIntStringHash
-----
MISSING
-----
CLASS QuickHashStringIntHash
-----
MISSING
-----
CLASS RRDCreator
-----
class RRDCreator
{
}
-----
METHOD RRDCreator::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $path
     * @param string $startTime
     * @param int $step
     * @return void
     */
    function __construct(mixed $path, mixed $startTime = '', mixed $step = 0): mixed
-----
METHOD RRDCreator::addArchive
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $description
     * @return void
     */
    function addArchive(mixed $description): mixed
-----
METHOD RRDCreator::addDataSource
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $description
     * @return void
     */
    function addDataSource(mixed $description): mixed
-----
METHOD RRDCreator::save
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function save(): mixed
-----
CLASS RRDGraph
-----
class RRDGraph
{
}
-----
METHOD RRDGraph::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $path
     * @return void
     */
    function __construct(mixed $path): mixed
-----
METHOD RRDGraph::save
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function save(): mixed
-----
METHOD RRDGraph::saveVerbose
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function saveVerbose(): mixed
-----
METHOD RRDGraph::setOptions
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param array $options
     * @return void
     */
    function setOptions(mixed $options): mixed
-----
CLASS RRDUpdater
-----
class RRDUpdater
{
}
-----
METHOD RRDUpdater::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $path
     * @return void
     */
    function __construct(mixed $path): mixed
-----
METHOD RRDUpdater::update
-----
Has side-effects: Maybe
Throw type: Exception
Visibility: public
Variants: 1
    /**
     * @param array $values
     * @param string $time
     * @return bool
     */
    function update(mixed $values, mixed $time = ''): mixed
-----
CLASS Random\Engine
-----
interface Random\Engine
{
}
-----
METHOD Random\Engine::generate
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function generate(): string
-----
CLASS Random\Engine\Mt19937
-----
final class Random\Engine\Mt19937 implements Random\Engine
{
}
-----
METHOD Random\Engine\Mt19937::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int|null $seed
     * @param int $mode
     * @return mixed
     */
    function __construct(int|null $seed = null, int $mode = 0): mixed
-----
METHOD Random\Engine\Mt19937::__debugInfo
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function __debugInfo(): array
-----
METHOD Random\Engine\Mt19937::__serialize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function __serialize(): array
-----
METHOD Random\Engine\Mt19937::__unserialize
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param array $data
     * @return void
     */
    function __unserialize(array $data): void
-----
METHOD Random\Engine\Mt19937::generate
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function generate(): string
-----
CLASS Random\Engine\PcgOneseq128XslRr64
-----
final class Random\Engine\PcgOneseq128XslRr64 implements Random\Engine
{
}
-----
METHOD Random\Engine\PcgOneseq128XslRr64::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int|string|null $seed
     * @return mixed
     */
    function __construct(int|string|null $seed = null): mixed
-----
METHOD Random\Engine\PcgOneseq128XslRr64::__debugInfo
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function __debugInfo(): array
-----
METHOD Random\Engine\PcgOneseq128XslRr64::__serialize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function __serialize(): array
-----
METHOD Random\Engine\PcgOneseq128XslRr64::__unserialize
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param array $data
     * @return void
     */
    function __unserialize(array $data): void
-----
METHOD Random\Engine\PcgOneseq128XslRr64::generate
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function generate(): string
-----
METHOD Random\Engine\PcgOneseq128XslRr64::jump
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $advance
     * @return void
     */
    function jump(int $advance): void
-----
CLASS Random\Engine\Secure
-----
final class Random\Engine\Secure implements Random\CryptoSafeEngine
{
}
-----
METHOD Random\Engine\Secure::generate
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function generate(): string
-----
CLASS Random\Engine\Xoshiro256StarStar
-----
final class Random\Engine\Xoshiro256StarStar implements Random\Engine
{
}
-----
METHOD Random\Engine\Xoshiro256StarStar::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int|string|null $seed
     * @return mixed
     */
    function __construct(int|string|null $seed = null): mixed
-----
METHOD Random\Engine\Xoshiro256StarStar::__debugInfo
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function __debugInfo(): array
-----
METHOD Random\Engine\Xoshiro256StarStar::__serialize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function __serialize(): array
-----
METHOD Random\Engine\Xoshiro256StarStar::__unserialize
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param array $data
     * @return void
     */
    function __unserialize(array $data): void
-----
METHOD Random\Engine\Xoshiro256StarStar::generate
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function generate(): string
-----
METHOD Random\Engine\Xoshiro256StarStar::jump
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function jump(): void
-----
METHOD Random\Engine\Xoshiro256StarStar::jumpLong
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function jumpLong(): void
-----
CLASS Random\Randomizer
-----
final class Random\Randomizer
{
}
-----
METHOD Random\Randomizer::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param Random\Engine|null $engine
     * @return mixed
     */
    function __construct(Random\Engine|null $engine = null): mixed
-----
METHOD Random\Randomizer::__serialize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function __serialize(): array
-----
METHOD Random\Randomizer::__unserialize
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param array $data
     * @return void
     */
    function __unserialize(array $data): void
-----
METHOD Random\Randomizer::getBytes
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $length
     * @return string
     */
    function getBytes(int $length): string
-----
METHOD Random\Randomizer::getInt
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $min
     * @param int $max
     * @return int
     */
    function getInt(int $min, int $max): int
-----
METHOD Random\Randomizer::nextInt
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function nextInt(): int
-----
METHOD Random\Randomizer::pickArrayKeys
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $array
     * @param int $num
     * @return array
     */
    function pickArrayKeys(array $array, int $num): array
-----
METHOD Random\Randomizer::shuffleArray
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $array
     * @return array
     */
    function shuffleArray(array $array): array
-----
METHOD Random\Randomizer::shuffleBytes
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $bytes
     * @return string
     */
    function shuffleBytes(string $bytes): string
-----
CLASS RarArchive
-----
final class RarArchive implements Traversable, Stringable
{
}
-----
METHOD RarArchive::__toString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): mixed
-----
METHOD RarArchive::close
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function close(): mixed
-----
METHOD RarArchive::getComment
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string|null
     */
    function getComment(): mixed
-----
METHOD RarArchive::getEntries
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array<RarEntry>|false
     */
    function getEntries(): mixed
-----
METHOD RarArchive::getEntry
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $entryname
     * @return RarEntry|false
     */
    function getEntry(mixed $entryname): mixed
-----
METHOD RarArchive::isBroken
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isBroken(): mixed
-----
METHOD RarArchive::isSolid
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isSolid(): mixed
-----
METHOD RarArchive::open
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @param string $password
     * @param callable(): mixed $volume_callback
     * @return RarArchive|false
     */
    function open(mixed $filename, mixed $password = null, (callable(): mixed)|null $volume_callback = null): mixed
-----
METHOD RarArchive::setAllowBroken
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $allow_broken
     * @return bool
     */
    function setAllowBroken(mixed $allow_broken): mixed
-----
CLASS RarEntry
-----
final class RarEntry implements Stringable
{
}
-----
METHOD RarEntry::__toString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): mixed
-----
METHOD RarEntry::extract
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $dir
     * @param string $filepath
     * @param string $password
     * @param bool $extended_data
     * @return bool
     */
    function extract(mixed $dir, mixed $filepath = '', mixed $password = null, mixed $extended_data = false): mixed
-----
METHOD RarEntry::getAttr
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getAttr(): mixed
-----
METHOD RarEntry::getCrc
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getCrc(): mixed
-----
METHOD RarEntry::getFileTime
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getFileTime(): mixed
-----
METHOD RarEntry::getHostOs
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getHostOs(): mixed
-----
METHOD RarEntry::getMethod
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getMethod(): mixed
-----
METHOD RarEntry::getName
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getName(): mixed
-----
METHOD RarEntry::getPackedSize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getPackedSize(): mixed
-----
METHOD RarEntry::getStream
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $password
     * @return resource|false
     */
    function getStream(mixed $password = ''): mixed
-----
METHOD RarEntry::getUnpackedSize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getUnpackedSize(): mixed
-----
METHOD RarEntry::getVersion
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getVersion(): mixed
-----
METHOD RarEntry::isDirectory
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isDirectory(): mixed
-----
METHOD RarEntry::isEncrypted
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isEncrypted(): mixed
-----
CLASS RarException
-----
final class RarException extends Exception
{
}
-----
METHOD RarException::isUsingExceptions
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isUsingExceptions(): mixed
-----
METHOD RarException::setUsingExceptions
-----
Has side-effects: Yes
Static
Visibility: public
Variants: 1
    /**
     * @param bool $using_exceptions
     * @return void
     */
    function setUsingExceptions(mixed $using_exceptions): mixed
-----
CLASS RecursiveArrayIterator
-----
class RecursiveArrayIterator extends ArrayIterator implements RecursiveIterator
{
}
-----
METHOD RecursiveArrayIterator::getChildren
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return RecursiveArrayIterator<TKey of (int|string) (class RecursiveArrayIterator, parameter), TValue (class RecursiveArrayIterator, parameter)>
     */
    function getChildren(): mixed
-----
METHOD RecursiveArrayIterator::hasChildren
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function hasChildren(): mixed
-----
CLASS RecursiveCachingIterator
-----
class RecursiveCachingIterator extends CachingIterator implements RecursiveIterator
{
}
-----
METHOD RecursiveCachingIterator::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param Iterator $iterator
     * @param int $flags
     * @return void
     */
    function __construct(Iterator $iterator, int $flags = 1): mixed
-----
METHOD RecursiveCachingIterator::getChildren
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return RecursiveCachingIterator
     */
    function getChildren(): mixed
-----
METHOD RecursiveCachingIterator::hasChildren
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function hasChildren(): mixed
-----
CLASS RecursiveCallbackFilterIterator
-----
class RecursiveCallbackFilterIterator extends CallbackFilterIterator implements RecursiveIterator
{
}
-----
METHOD RecursiveCallbackFilterIterator::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TIterator of Traversable<TKey (class RecursiveCallbackFilterIterator, parameter), TValue (class RecursiveCallbackFilterIterator, parameter)> (class RecursiveCallbackFilterIterator, parameter) $iterator
     * @param callable(): mixed $callback
     * @return void
     */
    function __construct(RecursiveIterator $iterator, callable(): mixed $callback): mixed
-----
METHOD RecursiveCallbackFilterIterator::getChildren
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return RecursiveCallbackFilterIterator<TKey (class RecursiveCallbackFilterIterator, parameter), TValue (class RecursiveCallbackFilterIterator, parameter), TIterator of Traversable<TKey (class RecursiveCallbackFilterIterator, parameter), TValue (class RecursiveCallbackFilterIterator, parameter)> (class RecursiveCallbackFilterIterator, parameter)>
     */
    function getChildren(): mixed
-----
METHOD RecursiveCallbackFilterIterator::hasChildren
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function hasChildren(): mixed
-----
CLASS RecursiveDirectoryIterator
-----
class RecursiveDirectoryIterator extends FilesystemIterator implements RecursiveIterator
{
}
-----
METHOD RecursiveDirectoryIterator::__construct
-----
Has side-effects: Maybe
Throw type: UnexpectedValueException
Visibility: public
Variants: 1
    /**
     * @param string $directory
     * @param int $flags
     * @return void
     */
    function __construct(string $directory, int $flags = 0): mixed
-----
METHOD RecursiveDirectoryIterator::getChildren
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return object
     */
    function getChildren(): mixed
-----
METHOD RecursiveDirectoryIterator::getSubPath
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getSubPath(): mixed
-----
METHOD RecursiveDirectoryIterator::getSubPathname
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getSubPathname(): mixed
-----
METHOD RecursiveDirectoryIterator::hasChildren
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $allowLinks
     * @return bool
     */
    function hasChildren(bool $allowLinks = false): mixed
-----
METHOD RecursiveDirectoryIterator::key
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function key(): mixed
-----
METHOD RecursiveDirectoryIterator::next
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): mixed
-----
METHOD RecursiveDirectoryIterator::rewind
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): mixed
-----
CLASS RecursiveFilterIterator
-----
abstract class RecursiveFilterIterator extends FilterIterator implements RecursiveIterator
{
}
-----
METHOD RecursiveFilterIterator::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param RecursiveIterator $iterator
     * @return void
     */
    function __construct(RecursiveIterator $iterator): mixed
-----
METHOD RecursiveFilterIterator::getChildren
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return RecursiveFilterIterator
     */
    function getChildren(): mixed
-----
METHOD RecursiveFilterIterator::hasChildren
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function hasChildren(): mixed
-----
CLASS RecursiveIterator
-----
interface RecursiveIterator extends Iterator
{
}
-----
METHOD RecursiveIterator::getChildren
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return RecursiveIterator
     */
    function getChildren(): mixed
-----
METHOD RecursiveIterator::hasChildren
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function hasChildren(): mixed
-----
CLASS RecursiveIteratorIterator
-----
class RecursiveIteratorIterator implements OuterIterator
{
}
-----
METHOD RecursiveIteratorIterator::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param T of IteratorAggregate|RecursiveIterator (class RecursiveIteratorIterator, parameter) $iterator
     * @param int $mode
     * @param int $flags
     * @return void
     */
    function __construct(Traversable $iterator, int $mode = 0, int $flags = 0): mixed
-----
METHOD RecursiveIteratorIterator::beginChildren
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function beginChildren(): mixed
-----
METHOD RecursiveIteratorIterator::beginIteration
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return RecursiveIterator
     */
    function beginIteration(): mixed
-----
METHOD RecursiveIteratorIterator::callGetChildren
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return RecursiveIterator
     */
    function callGetChildren(): mixed
-----
METHOD RecursiveIteratorIterator::callHasChildren
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function callHasChildren(): mixed
-----
METHOD RecursiveIteratorIterator::current
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function current(): mixed
-----
METHOD RecursiveIteratorIterator::endChildren
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function endChildren(): mixed
-----
METHOD RecursiveIteratorIterator::endIteration
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return RecursiveIterator
     */
    function endIteration(): mixed
-----
METHOD RecursiveIteratorIterator::getDepth
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getDepth(): mixed
-----
METHOD RecursiveIteratorIterator::getInnerIterator
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Iterator<mixed, mixed>
     */
    function getInnerIterator(): mixed
-----
METHOD RecursiveIteratorIterator::getMaxDepth
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int|false
     */
    function getMaxDepth(): mixed
-----
METHOD RecursiveIteratorIterator::getSubIterator
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int|null $level
     * @return RecursiveIterator
     */
    function getSubIterator(int|null $level = null): mixed
-----
METHOD RecursiveIteratorIterator::key
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function key(): mixed
-----
METHOD RecursiveIteratorIterator::next
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): mixed
-----
METHOD RecursiveIteratorIterator::nextElement
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function nextElement(): mixed
-----
METHOD RecursiveIteratorIterator::rewind
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): mixed
-----
METHOD RecursiveIteratorIterator::setMaxDepth
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $maxDepth
     * @return void
     */
    function setMaxDepth(int $maxDepth = -1): mixed
-----
METHOD RecursiveIteratorIterator::valid
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function valid(): mixed
-----
CLASS RecursiveRegexIterator
-----
class RecursiveRegexIterator extends RegexIterator implements RecursiveIterator
{
}
-----
METHOD RecursiveRegexIterator::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param RecursiveIterator $iterator
     * @param string $pattern
     * @param int $mode
     * @param int $flags
     * @param int $pregFlags
     * @return void
     */
    function __construct(RecursiveIterator $iterator, string $pattern, int $mode = 0, int $flags = 0, int $pregFlags = 0): mixed
-----
METHOD RecursiveRegexIterator::getChildren
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return RecursiveRegexIterator
     */
    function getChildren(): mixed
-----
METHOD RecursiveRegexIterator::hasChildren
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function hasChildren(): mixed
-----
CLASS RecursiveTreeIterator
-----
class RecursiveTreeIterator extends RecursiveIteratorIterator
{
}
-----
METHOD RecursiveTreeIterator::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param IteratorAggregate|RecursiveIterator $iterator
     * @param int $flags
     * @param int $cachingIteratorFlags
     * @param int $mode
     * @return void
     */
    function __construct(mixed $iterator, int $flags = 8, int $cachingIteratorFlags = 16, int $mode = 1): mixed
-----
METHOD RecursiveTreeIterator::beginChildren
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function beginChildren(): mixed
-----
METHOD RecursiveTreeIterator::beginIteration
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return RecursiveIterator
     */
    function beginIteration(): mixed
-----
METHOD RecursiveTreeIterator::callGetChildren
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return RecursiveIterator
     */
    function callGetChildren(): mixed
-----
METHOD RecursiveTreeIterator::callHasChildren
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function callHasChildren(): mixed
-----
METHOD RecursiveTreeIterator::current
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function current(): mixed
-----
METHOD RecursiveTreeIterator::endChildren
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function endChildren(): mixed
-----
METHOD RecursiveTreeIterator::endIteration
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function endIteration(): mixed
-----
METHOD RecursiveTreeIterator::getEntry
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getEntry(): mixed
-----
METHOD RecursiveTreeIterator::getPostfix
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getPostfix(): mixed
-----
METHOD RecursiveTreeIterator::getPrefix
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getPrefix(): mixed
-----
METHOD RecursiveTreeIterator::key
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function key(): mixed
-----
METHOD RecursiveTreeIterator::next
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): void
-----
METHOD RecursiveTreeIterator::nextElement
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function nextElement(): mixed
-----
METHOD RecursiveTreeIterator::rewind
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): void
-----
METHOD RecursiveTreeIterator::setPostfix
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $postfix
     * @return void
     */
    function setPostfix(string $postfix): mixed
-----
METHOD RecursiveTreeIterator::setPrefixPart
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $part
     * @param string $value
     * @return void
     */
    function setPrefixPart(int $part, string $value): mixed
-----
METHOD RecursiveTreeIterator::valid
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function valid(): bool
-----
CLASS Reflection
-----
class Reflection
{
}
-----
METHOD Reflection::export
-----
MISSING
-----
METHOD Reflection::getModifierNames
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int $modifiers
     * @return array
     */
    function getModifierNames(int $modifiers): mixed
-----
CLASS ReflectionAttribute
-----
class ReflectionAttribute implements Reflector
{
}
-----
METHOD ReflectionAttribute::__construct
-----
Has side-effects: Maybe
Visibility: private
Variants: 1
    /**
     * @return mixed
     */
    function __construct(): mixed
-----
METHOD ReflectionAttribute::getArguments
-----
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getArguments(): array
-----
METHOD ReflectionAttribute::getName
-----
Visibility: public
Variants: 1
    /**
     * @return class-string<T of object (class ReflectionAttribute, parameter)>
     */
    function getName(): string
-----
METHOD ReflectionAttribute::getTarget
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getTarget(): int
-----
METHOD ReflectionAttribute::isRepeated
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isRepeated(): bool
-----
METHOD ReflectionAttribute::newInstance
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return T of object (class ReflectionAttribute, parameter)
     */
    function newInstance(): object
-----
CLASS ReflectionClass
-----
class ReflectionClass implements Reflector
{
}
-----
METHOD ReflectionClass::__construct
-----
Has side-effects: Maybe
Throw type: ReflectionException
Visibility: public
Variants: 1
    /**
     * @param class-string<T of object (class ReflectionClass, parameter)>|T of object (class ReflectionClass, parameter) $objectOrClass
     * @return void
     */
    function __construct(object|string $objectOrClass): mixed
-----
METHOD ReflectionClass::__toString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): string
-----
METHOD ReflectionClass::export
-----
MISSING
-----
METHOD ReflectionClass::getAttributes
-----
Visibility: public
Variants: 1
    /**
     * @param string|null $name
     * @param int $flags
     * @return array<ReflectionAttribute<object>>
     */
    function getAttributes(string|null $name = null, int $flags = 0): array
-----
METHOD ReflectionClass::getConstant
-----
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return mixed
     */
    function getConstant(string $name): mixed
-----
METHOD ReflectionClass::getConstants
-----
Visibility: public
Variants: 1
    /**
     * @param int|null $filter
     * @return array<string, mixed>
     */
    function getConstants(int|null $filter = null): mixed
-----
METHOD ReflectionClass::getConstructor
-----
Visibility: public
Variants: 1
    /**
     * @return ReflectionMethod|null
     */
    function getConstructor(): mixed
-----
METHOD ReflectionClass::getDefaultProperties
-----
Visibility: public
Variants: 1
    /**
     * @return array<string, mixed>
     */
    function getDefaultProperties(): mixed
-----
METHOD ReflectionClass::getDocComment
-----
Visibility: public
Variants: 1
    /**
     * @return string|false
     */
    function getDocComment(): mixed
-----
METHOD ReflectionClass::getEndLine
-----
Visibility: public
Variants: 1
    /**
     * @return int|false
     */
    function getEndLine(): mixed
-----
METHOD ReflectionClass::getExtension
-----
Visibility: public
Variants: 1
    /**
     * @return ReflectionExtension|null
     */
    function getExtension(): mixed
-----
METHOD ReflectionClass::getExtensionName
-----
Visibility: public
Variants: 1
    /**
     * @return string|false
     */
    function getExtensionName(): mixed
-----
METHOD ReflectionClass::getFileName
-----
Visibility: public
Variants: 1
    /**
     * @return string|false
     */
    function getFileName(): mixed
-----
METHOD ReflectionClass::getInterfaceNames
-----
Visibility: public
Variants: 1
    /**
     * @return array<int, class-string>
     */
    function getInterfaceNames(): mixed
-----
METHOD ReflectionClass::getInterfaces
-----
Visibility: public
Variants: 1
    /**
     * @return array<string, ReflectionClass>
     */
    function getInterfaces(): mixed
-----
METHOD ReflectionClass::getMethod
-----
Throw type: ReflectionException
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return ReflectionMethod
     */
    function getMethod(string $name): mixed
-----
METHOD ReflectionClass::getMethods
-----
Visibility: public
Variants: 1
    /**
     * @param int|null $filter
     * @return array<int, ReflectionMethod>
     */
    function getMethods(int|null $filter = null): mixed
-----
METHOD ReflectionClass::getModifiers
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getModifiers(): mixed
-----
METHOD ReflectionClass::getName
-----
Visibility: public
Variants: 1
    /**
     * @return class-string<T of object (class ReflectionClass, parameter)>
     */
    function getName(): mixed
-----
METHOD ReflectionClass::getNamespaceName
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getNamespaceName(): mixed
-----
METHOD ReflectionClass::getParentClass
-----
Visibility: public
Variants: 1
    /**
     * @return ReflectionClass|false
     */
    function getParentClass(): mixed
-----
METHOD ReflectionClass::getProperties
-----
Visibility: public
Variants: 1
    /**
     * @param int|null $filter
     * @return array<int, ReflectionProperty>
     */
    function getProperties(int|null $filter = null): mixed
-----
METHOD ReflectionClass::getProperty
-----
Throw type: ReflectionException
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return ReflectionProperty
     */
    function getProperty(string $name): mixed
-----
METHOD ReflectionClass::getReflectionConstant
-----
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return ReflectionClassConstant|false
     */
    function getReflectionConstant(string $name): mixed
-----
METHOD ReflectionClass::getReflectionConstants
-----
Visibility: public
Variants: 1
    /**
     * @param int|null $filter
     * @return array<int, ReflectionClassConstant>
     */
    function getReflectionConstants(int|null $filter = null): mixed
-----
METHOD ReflectionClass::getShortName
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getShortName(): mixed
-----
METHOD ReflectionClass::getStartLine
-----
Visibility: public
Variants: 1
    /**
     * @return int|false
     */
    function getStartLine(): mixed
-----
METHOD ReflectionClass::getStaticProperties
-----
Visibility: public
Variants: 1
    /**
     * @return array<string, mixed>
     */
    function getStaticProperties(): mixed
-----
METHOD ReflectionClass::getStaticPropertyValue
-----
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param mixed $default
     * @return mixed
     */
    function getStaticPropertyValue(string $name, mixed $default = *ERROR*): mixed
-----
METHOD ReflectionClass::getTraitAliases
-----
Visibility: public
Variants: 1
    /**
     * @return array<string, string>
     */
    function getTraitAliases(): mixed
-----
METHOD ReflectionClass::getTraitNames
-----
Visibility: public
Variants: 1
    /**
     * @return array<int, class-string>
     */
    function getTraitNames(): mixed
-----
METHOD ReflectionClass::getTraits
-----
Visibility: public
Variants: 1
    /**
     * @return array<string, ReflectionClass>
     */
    function getTraits(): mixed
-----
METHOD ReflectionClass::hasConstant
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return bool
     */
    function hasConstant(string $name): mixed
-----
METHOD ReflectionClass::hasMethod
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return bool
     */
    function hasMethod(string $name): mixed
-----
METHOD ReflectionClass::hasProperty
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return bool
     */
    function hasProperty(string $name): mixed
-----
METHOD ReflectionClass::implementsInterface
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param ReflectionClass|string $interface
     * @return bool
     */
    function implementsInterface(ReflectionClass|string $interface): mixed
-----
METHOD ReflectionClass::inNamespace
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function inNamespace(): mixed
-----
METHOD ReflectionClass::isAbstract
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isAbstract(): mixed
-----
METHOD ReflectionClass::isAnonymous
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isAnonymous(): mixed
-----
METHOD ReflectionClass::isCloneable
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isCloneable(): mixed
-----
METHOD ReflectionClass::isEnum
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isEnum(): bool
-----
METHOD ReflectionClass::isFinal
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isFinal(): mixed
-----
METHOD ReflectionClass::isInstance
-----
Visibility: public
Variants: 1
    /**
     * @param object $object
     * @return bool
     */
    function isInstance(object $object): mixed
-----
METHOD ReflectionClass::isInstantiable
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isInstantiable(): mixed
-----
METHOD ReflectionClass::isInterface
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isInterface(): mixed
-----
METHOD ReflectionClass::isInternal
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isInternal(): mixed
-----
METHOD ReflectionClass::isIterable
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isIterable(): mixed
-----
METHOD ReflectionClass::isIterateable
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isIterateable(): mixed
-----
METHOD ReflectionClass::isReadOnly
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isReadOnly(): bool
-----
METHOD ReflectionClass::isSubclassOf
-----
Visibility: public
Variants: 1
    /**
     * @param ReflectionClass|string $class
     * @return bool
     */
    function isSubclassOf(ReflectionClass|string $class): mixed
-----
METHOD ReflectionClass::isTrait
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isTrait(): mixed
-----
METHOD ReflectionClass::isUserDefined
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isUserDefined(): mixed
-----
METHOD ReflectionClass::newInstance
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $args
     * @return T of object (class ReflectionClass, parameter)
     */
    function newInstance(mixed ...$args): mixed
-----
METHOD ReflectionClass::newInstanceArgs
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array<int|string, mixed> $args
     * @return T of object (class ReflectionClass, parameter)
     */
    function newInstanceArgs(array $args = array{}): mixed
-----
METHOD ReflectionClass::newInstanceWithoutConstructor
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return T of object (class ReflectionClass, parameter)
     */
    function newInstanceWithoutConstructor(): mixed
-----
METHOD ReflectionClass::setStaticPropertyValue
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param mixed $value
     * @return void
     */
    function setStaticPropertyValue(string $name, mixed $value): mixed
-----
CLASS ReflectionClassConstant
-----
class ReflectionClassConstant implements Reflector
{
}
-----
METHOD ReflectionClassConstant::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param object|string $class
     * @param string $constant
     * @return void
     */
    function __construct(object|string $class, string $constant): mixed
-----
METHOD ReflectionClassConstant::__toString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): string
-----
METHOD ReflectionClassConstant::export
-----
MISSING
-----
METHOD ReflectionClassConstant::getAttributes
-----
Visibility: public
Variants: 1
    /**
     * @param string|null $name
     * @param int $flags
     * @return array<ReflectionAttribute<object>>
     */
    function getAttributes(string|null $name = null, int $flags = 0): array
-----
METHOD ReflectionClassConstant::getDeclaringClass
-----
Visibility: public
Variants: 1
    /**
     * @return ReflectionClass
     */
    function getDeclaringClass(): mixed
-----
METHOD ReflectionClassConstant::getDocComment
-----
Visibility: public
Variants: 1
    /**
     * @return string|false
     */
    function getDocComment(): mixed
-----
METHOD ReflectionClassConstant::getModifiers
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getModifiers(): mixed
-----
METHOD ReflectionClassConstant::getName
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getName(): mixed
-----
METHOD ReflectionClassConstant::getValue
-----
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function getValue(): mixed
-----
METHOD ReflectionClassConstant::isEnumCase
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isEnumCase(): bool
-----
METHOD ReflectionClassConstant::isFinal
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isFinal(): bool
-----
METHOD ReflectionClassConstant::isPrivate
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isPrivate(): mixed
-----
METHOD ReflectionClassConstant::isProtected
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isProtected(): mixed
-----
METHOD ReflectionClassConstant::isPublic
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isPublic(): mixed
-----
CLASS ReflectionEnum
-----
class ReflectionEnum extends ReflectionClass
{
}
-----
METHOD ReflectionEnum::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param object|string $objectOrClass
     * @return mixed
     */
    function __construct(object|string $objectOrClass): mixed
-----
METHOD ReflectionEnum::getBackingType
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return ReflectionNamedType|null
     */
    function getBackingType(): ReflectionNamedType|null
-----
METHOD ReflectionEnum::getCase
-----
Has side-effects: Maybe
Throw type: ReflectionException
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return ReflectionEnumUnitCase
     */
    function getCase(string $name): ReflectionEnumUnitCase
-----
METHOD ReflectionEnum::getCases
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getCases(): array
-----
METHOD ReflectionEnum::hasCase
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return bool
     */
    function hasCase(string $name): bool
-----
METHOD ReflectionEnum::isBacked
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isBacked(): bool
-----
CLASS ReflectionEnumBackedCase
-----
class ReflectionEnumBackedCase extends ReflectionEnumUnitCase
{
}
-----
METHOD ReflectionEnumBackedCase::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param object|string $class
     * @param string $constant
     * @return mixed
     */
    function __construct(object|string $class, string $constant): mixed
-----
METHOD ReflectionEnumBackedCase::getBackingValue
-----
Visibility: public
Variants: 1
    /**
     * @return int|string
     */
    function getBackingValue(): int|string
-----
CLASS ReflectionEnumUnitCase
-----
class ReflectionEnumUnitCase extends ReflectionClassConstant
{
}
-----
METHOD ReflectionEnumUnitCase::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param object|string $class
     * @param string $constant
     * @return mixed
     */
    function __construct(object|string $class, string $constant): mixed
-----
METHOD ReflectionEnumUnitCase::getEnum
-----
Visibility: public
Variants: 1
    /**
     * @return ReflectionEnum
     */
    function getEnum(): ReflectionEnum
-----
METHOD ReflectionEnumUnitCase::getValue
-----
Visibility: public
Variants: 1
    /**
     * @return UnitEnum
     */
    function getValue(): UnitEnum
-----
CLASS ReflectionExtension
-----
class ReflectionExtension implements Reflector
{
}
-----
METHOD ReflectionExtension::__clone
-----
Has side-effects: Yes
Visibility: private
Variants: 1
    /**
     * @return void
     */
    function __clone(): void
-----
METHOD ReflectionExtension::__construct
-----
Has side-effects: Maybe
Throw type: ReflectionException
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return void
     */
    function __construct(string $name): mixed
-----
METHOD ReflectionExtension::__toString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): string
-----
METHOD ReflectionExtension::export
-----
MISSING
-----
METHOD ReflectionExtension::getClassNames
-----
Visibility: public
Variants: 1
    /**
     * @return array<int, class-string>
     */
    function getClassNames(): mixed
-----
METHOD ReflectionExtension::getClasses
-----
Visibility: public
Variants: 1
    /**
     * @return array<string, ReflectionClass>
     */
    function getClasses(): mixed
-----
METHOD ReflectionExtension::getConstants
-----
Visibility: public
Variants: 1
    /**
     * @return array<string, mixed>
     */
    function getConstants(): mixed
-----
METHOD ReflectionExtension::getDependencies
-----
Visibility: public
Variants: 1
    /**
     * @return array<string, string>
     */
    function getDependencies(): mixed
-----
METHOD ReflectionExtension::getFunctions
-----
Visibility: public
Variants: 1
    /**
     * @return array<string, ReflectionFunction>
     */
    function getFunctions(): mixed
-----
METHOD ReflectionExtension::getINIEntries
-----
Visibility: public
Variants: 1
    /**
     * @return array<string, mixed>
     */
    function getINIEntries(): mixed
-----
METHOD ReflectionExtension::getName
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getName(): mixed
-----
METHOD ReflectionExtension::getVersion
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getVersion(): mixed
-----
METHOD ReflectionExtension::info
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function info(): mixed
-----
METHOD ReflectionExtension::isPersistent
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function isPersistent(): mixed
-----
METHOD ReflectionExtension::isTemporary
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isTemporary(): mixed
-----
CLASS ReflectionFiber
-----
final class ReflectionFiber
{
}
-----
METHOD ReflectionFiber::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param Fiber $fiber
     * @return mixed
     */
    function __construct(Fiber $fiber): mixed
-----
METHOD ReflectionFiber::getCallable
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return callable(): mixed
     */
    function getCallable(): callable(): mixed
-----
METHOD ReflectionFiber::getExecutingFile
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string|null
     */
    function getExecutingFile(): string|null
-----
METHOD ReflectionFiber::getExecutingLine
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int|null
     */
    function getExecutingLine(): int|null
-----
METHOD ReflectionFiber::getFiber
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Fiber
     */
    function getFiber(): Fiber
-----
METHOD ReflectionFiber::getTrace
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $options
     * @return array
     */
    function getTrace(int $options = 1): array
-----
CLASS ReflectionFunction
-----
class ReflectionFunction extends ReflectionFunctionAbstract
{
}
-----
METHOD ReflectionFunction::__construct
-----
Has side-effects: Maybe
Throw type: ReflectionException
Visibility: public
Variants: 1
    /**
     * @param Closure|string $function
     * @return void
     */
    function __construct(Closure|string $function): mixed
-----
METHOD ReflectionFunction::__toString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): string
-----
METHOD ReflectionFunction::export
-----
MISSING
-----
METHOD ReflectionFunction::getClosure
-----
Visibility: public
Variants: 1
    /**
     * @return Closure|null
     */
    function getClosure(): mixed
-----
METHOD ReflectionFunction::invoke
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $args
     * @return mixed
     */
    function invoke(mixed ...$args): mixed
-----
METHOD ReflectionFunction::invokeArgs
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $args
     * @return mixed
     */
    function invokeArgs(array $args): mixed
-----
METHOD ReflectionFunction::isAnonymous
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isAnonymous(): bool
-----
METHOD ReflectionFunction::isDisabled
-----
Is deprecated: Yes
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isDisabled(): mixed
-----
CLASS ReflectionFunctionAbstract
-----
abstract class ReflectionFunctionAbstract implements Reflector
{
}
-----
METHOD ReflectionFunctionAbstract::__clone
-----
Has side-effects: Yes
Visibility: private
Variants: 1
    /**
     * @return void
     */
    function __clone(): void
-----
METHOD ReflectionFunctionAbstract::__toString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): mixed
-----
METHOD ReflectionFunctionAbstract::getAttributes
-----
Visibility: public
Variants: 1
    /**
     * @param string|null $name
     * @param int $flags
     * @return array<ReflectionAttribute<object>>
     */
    function getAttributes(string|null $name = null, int $flags = 0): array
-----
METHOD ReflectionFunctionAbstract::getClosureScopeClass
-----
Visibility: public
Variants: 1
    /**
     * @return ReflectionClass|null
     */
    function getClosureScopeClass(): mixed
-----
METHOD ReflectionFunctionAbstract::getClosureThis
-----
Visibility: public
Variants: 1
    /**
     * @return object|null
     */
    function getClosureThis(): mixed
-----
METHOD ReflectionFunctionAbstract::getClosureUsedVariables
-----
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getClosureUsedVariables(): array
-----
METHOD ReflectionFunctionAbstract::getDocComment
-----
Visibility: public
Variants: 1
    /**
     * @return string|false
     */
    function getDocComment(): mixed
-----
METHOD ReflectionFunctionAbstract::getEndLine
-----
Visibility: public
Variants: 1
    /**
     * @return int|false
     */
    function getEndLine(): mixed
-----
METHOD ReflectionFunctionAbstract::getExtension
-----
Visibility: public
Variants: 1
    /**
     * @return ReflectionExtension
     */
    function getExtension(): mixed
-----
METHOD ReflectionFunctionAbstract::getExtensionName
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getExtensionName(): mixed
-----
METHOD ReflectionFunctionAbstract::getFileName
-----
Visibility: public
Variants: 1
    /**
     * @return string|false
     */
    function getFileName(): mixed
-----
METHOD ReflectionFunctionAbstract::getName
-----
Visibility: public
Variants: 1
    /**
     * @return non-empty-string
     */
    function getName(): mixed
-----
METHOD ReflectionFunctionAbstract::getNamespaceName
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getNamespaceName(): mixed
-----
METHOD ReflectionFunctionAbstract::getNumberOfParameters
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getNumberOfParameters(): mixed
-----
METHOD ReflectionFunctionAbstract::getNumberOfRequiredParameters
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getNumberOfRequiredParameters(): mixed
-----
METHOD ReflectionFunctionAbstract::getParameters
-----
Visibility: public
Variants: 1
    /**
     * @return array<int, ReflectionParameter>
     */
    function getParameters(): mixed
-----
METHOD ReflectionFunctionAbstract::getReturnType
-----
Visibility: public
Variants: 1
    /**
     * @return ReflectionType|null
     */
    function getReturnType(): mixed
-----
METHOD ReflectionFunctionAbstract::getShortName
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getShortName(): mixed
-----
METHOD ReflectionFunctionAbstract::getStartLine
-----
Visibility: public
Variants: 1
    /**
     * @return int|false
     */
    function getStartLine(): mixed
-----
METHOD ReflectionFunctionAbstract::getStaticVariables
-----
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getStaticVariables(): mixed
-----
METHOD ReflectionFunctionAbstract::getTentativeReturnType
-----
Visibility: public
Variants: 1
    /**
     * @return ReflectionType|null
     */
    function getTentativeReturnType(): ReflectionType|null
-----
METHOD ReflectionFunctionAbstract::hasReturnType
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function hasReturnType(): mixed
-----
METHOD ReflectionFunctionAbstract::hasTentativeReturnType
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function hasTentativeReturnType(): bool
-----
METHOD ReflectionFunctionAbstract::inNamespace
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function inNamespace(): mixed
-----
METHOD ReflectionFunctionAbstract::isClosure
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isClosure(): mixed
-----
METHOD ReflectionFunctionAbstract::isDeprecated
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isDeprecated(): mixed
-----
METHOD ReflectionFunctionAbstract::isGenerator
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isGenerator(): mixed
-----
METHOD ReflectionFunctionAbstract::isInternal
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isInternal(): mixed
-----
METHOD ReflectionFunctionAbstract::isStatic
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isStatic(): bool
-----
METHOD ReflectionFunctionAbstract::isUserDefined
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isUserDefined(): mixed
-----
METHOD ReflectionFunctionAbstract::isVariadic
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isVariadic(): mixed
-----
METHOD ReflectionFunctionAbstract::returnsReference
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function returnsReference(): mixed
-----
CLASS ReflectionGenerator
-----
class ReflectionGenerator
{
}
-----
METHOD ReflectionGenerator::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param Generator $generator
     * @return void
     */
    function __construct(Generator $generator): mixed
-----
METHOD ReflectionGenerator::getExecutingFile
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getExecutingFile(): mixed
-----
METHOD ReflectionGenerator::getExecutingGenerator
-----
Visibility: public
Variants: 1
    /**
     * @return Generator
     */
    function getExecutingGenerator(): mixed
-----
METHOD ReflectionGenerator::getExecutingLine
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getExecutingLine(): mixed
-----
METHOD ReflectionGenerator::getFunction
-----
Visibility: public
Variants: 1
    /**
     * @return ReflectionFunctionAbstract
     */
    function getFunction(): mixed
-----
METHOD ReflectionGenerator::getThis
-----
Visibility: public
Variants: 1
    /**
     * @return object
     */
    function getThis(): mixed
-----
METHOD ReflectionGenerator::getTrace
-----
Visibility: public
Variants: 1
    /**
     * @param int $options
     * @return array{function: string, line?: int, file?: string, class?: class-string, type?: '->'|'::', args?: array, object?: object}
     */
    function getTrace(int $options = 1): mixed
-----
CLASS ReflectionIntersectionType
-----
class ReflectionIntersectionType extends ReflectionType
{
}
-----
METHOD ReflectionIntersectionType::getTypes
-----
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getTypes(): array
-----
CLASS ReflectionMethod
-----
class ReflectionMethod extends ReflectionFunctionAbstract
{
}
-----
METHOD ReflectionMethod::__construct
-----
Has side-effects: Maybe
Throw type: ReflectionException
Visibility: public
Variants: 2
    /**
     * @param object|string $objectOrMethod
     * @param string $method
     * @return void
     */
    function __construct(object|string $objectOrMethod, string|null $method = null): mixed
    /**
     * @param string $objectOrMethod
     * @return void
     */
    function __construct(object|string $objectOrMethod): mixed
-----
METHOD ReflectionMethod::__toString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): string
-----
METHOD ReflectionMethod::export
-----
MISSING
-----
METHOD ReflectionMethod::getClosure
-----
Visibility: public
Variants: 1
    /**
     * @param object|null $object
     * @return Closure|null
     */
    function getClosure(object|null $object = null): mixed
-----
METHOD ReflectionMethod::getDeclaringClass
-----
Visibility: public
Variants: 1
    /**
     * @return ReflectionClass
     */
    function getDeclaringClass(): mixed
-----
METHOD ReflectionMethod::getModifiers
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getModifiers(): mixed
-----
METHOD ReflectionMethod::getPrototype
-----
Throw type: ReflectionException
Visibility: public
Variants: 1
    /**
     * @return ReflectionMethod
     */
    function getPrototype(): mixed
-----
METHOD ReflectionMethod::hasPrototype
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function hasPrototype(): bool
-----
METHOD ReflectionMethod::invoke
-----
Has side-effects: Maybe
Throw type: ReflectionException
Visibility: public
Variants: 1
    /**
     * @param object|null $object
     * @param mixed $args
     * @return mixed
     */
    function invoke(object|null $object, mixed ...$args): mixed
-----
METHOD ReflectionMethod::invokeArgs
-----
Has side-effects: Maybe
Throw type: ReflectionException
Visibility: public
Variants: 1
    /**
     * @param object|null $object
     * @param array $args
     * @return mixed
     */
    function invokeArgs(object|null $object, array $args): mixed
-----
METHOD ReflectionMethod::isAbstract
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isAbstract(): mixed
-----
METHOD ReflectionMethod::isConstructor
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isConstructor(): mixed
-----
METHOD ReflectionMethod::isDestructor
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isDestructor(): mixed
-----
METHOD ReflectionMethod::isFinal
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isFinal(): mixed
-----
METHOD ReflectionMethod::isPrivate
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isPrivate(): mixed
-----
METHOD ReflectionMethod::isProtected
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isProtected(): mixed
-----
METHOD ReflectionMethod::isPublic
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isPublic(): mixed
-----
METHOD ReflectionMethod::setAccessible
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param bool $accessible
     * @return void
     */
    function setAccessible(bool $accessible): mixed
-----
CLASS ReflectionNamedType
-----
class ReflectionNamedType extends ReflectionType
{
}
-----
METHOD ReflectionNamedType::getName
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getName(): mixed
-----
METHOD ReflectionNamedType::isBuiltin
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isBuiltin(): mixed
-----
CLASS ReflectionObject
-----
class ReflectionObject extends ReflectionClass
{
}
-----
METHOD ReflectionObject::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param object $object
     * @return void
     */
    function __construct(object $object): mixed
-----
METHOD ReflectionObject::export
-----
MISSING
-----
CLASS ReflectionParameter
-----
class ReflectionParameter implements Reflector
{
}
-----
METHOD ReflectionParameter::__clone
-----
Has side-effects: Yes
Visibility: private
Variants: 1
    /**
     * @return void
     */
    function __clone(): void
-----
METHOD ReflectionParameter::__construct
-----
Has side-effects: Maybe
Throw type: ReflectionException
Visibility: public
Variants: 1
    /**
     * @param array|object|string $function
     * @param int|string $param
     * @return void
     */
    function __construct(mixed $function, int|string $param): mixed
-----
METHOD ReflectionParameter::__toString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): string
-----
METHOD ReflectionParameter::allowsNull
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function allowsNull(): mixed
-----
METHOD ReflectionParameter::canBePassedByValue
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function canBePassedByValue(): mixed
-----
METHOD ReflectionParameter::export
-----
MISSING
-----
METHOD ReflectionParameter::getAttributes
-----
Visibility: public
Variants: 1
    /**
     * @param string|null $name
     * @param int $flags
     * @return array<ReflectionAttribute<object>>
     */
    function getAttributes(string|null $name = null, int $flags = 0): array
-----
METHOD ReflectionParameter::getClass
-----
Is deprecated: Yes
Visibility: public
Variants: 1
    /**
     * @return ReflectionClass|null
     */
    function getClass(): mixed
-----
METHOD ReflectionParameter::getDeclaringClass
-----
Visibility: public
Variants: 1
    /**
     * @return ReflectionClass|null
     */
    function getDeclaringClass(): mixed
-----
METHOD ReflectionParameter::getDeclaringFunction
-----
Visibility: public
Variants: 1
    /**
     * @return ReflectionFunctionAbstract
     */
    function getDeclaringFunction(): mixed
-----
METHOD ReflectionParameter::getDefaultValue
-----
Throw type: ReflectionException
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function getDefaultValue(): mixed
-----
METHOD ReflectionParameter::getDefaultValueConstantName
-----
Throw type: ReflectionException
Visibility: public
Variants: 1
    /**
     * @return string|null
     */
    function getDefaultValueConstantName(): mixed
-----
METHOD ReflectionParameter::getName
-----
Visibility: public
Variants: 1
    /**
     * @return non-empty-string
     */
    function getName(): mixed
-----
METHOD ReflectionParameter::getPosition
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getPosition(): mixed
-----
METHOD ReflectionParameter::getType
-----
Visibility: public
Variants: 1
    /**
     * @return ReflectionType|null
     */
    function getType(): mixed
-----
METHOD ReflectionParameter::hasType
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function hasType(): mixed
-----
METHOD ReflectionParameter::isArray
-----
Is deprecated: Yes
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isArray(): mixed
-----
METHOD ReflectionParameter::isCallable
-----
Is deprecated: Yes
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isCallable(): mixed
-----
METHOD ReflectionParameter::isDefaultValueAvailable
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isDefaultValueAvailable(): mixed
-----
METHOD ReflectionParameter::isDefaultValueConstant
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isDefaultValueConstant(): mixed
-----
METHOD ReflectionParameter::isOptional
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isOptional(): mixed
-----
METHOD ReflectionParameter::isPassedByReference
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isPassedByReference(): mixed
-----
METHOD ReflectionParameter::isVariadic
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isVariadic(): mixed
-----
CLASS ReflectionProperty
-----
class ReflectionProperty implements Reflector
{
}
-----
METHOD ReflectionProperty::__clone
-----
Has side-effects: Yes
Visibility: private
Variants: 1
    /**
     * @return void
     */
    function __clone(): void
-----
METHOD ReflectionProperty::__construct
-----
Has side-effects: Maybe
Throw type: ReflectionException
Visibility: public
Variants: 1
    /**
     * @param object|string $class
     * @param string $property
     * @return void
     */
    function __construct(object|string $class, string $property): mixed
-----
METHOD ReflectionProperty::__toString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): string
-----
METHOD ReflectionProperty::export
-----
MISSING
-----
METHOD ReflectionProperty::getAttributes
-----
Visibility: public
Variants: 1
    /**
     * @param string|null $name
     * @param int $flags
     * @return array<ReflectionAttribute<object>>
     */
    function getAttributes(string|null $name = null, int $flags = 0): array
-----
METHOD ReflectionProperty::getDeclaringClass
-----
Visibility: public
Variants: 1
    /**
     * @return ReflectionClass
     */
    function getDeclaringClass(): mixed
-----
METHOD ReflectionProperty::getDefaultValue
-----
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function getDefaultValue(): mixed
-----
METHOD ReflectionProperty::getDocComment
-----
Visibility: public
Variants: 1
    /**
     * @return string|false
     */
    function getDocComment(): mixed
-----
METHOD ReflectionProperty::getModifiers
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getModifiers(): mixed
-----
METHOD ReflectionProperty::getName
-----
Visibility: public
Variants: 1
    /**
     * @return non-empty-string
     */
    function getName(): mixed
-----
METHOD ReflectionProperty::getType
-----
Visibility: public
Variants: 1
    /**
     * @return ReflectionType|null
     */
    function getType(): mixed
-----
METHOD ReflectionProperty::getValue
-----
Visibility: public
Variants: 1
    /**
     * @param object|null $object
     * @return mixed
     */
    function getValue(object|null $object = null): mixed
-----
METHOD ReflectionProperty::hasDefaultValue
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function hasDefaultValue(): bool
-----
METHOD ReflectionProperty::hasType
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function hasType(): mixed
-----
METHOD ReflectionProperty::isDefault
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isDefault(): mixed
-----
METHOD ReflectionProperty::isInitialized
-----
Visibility: public
Variants: 1
    /**
     * @param object|null $object
     * @return bool
     */
    function isInitialized(object|null $object = null): mixed
-----
METHOD ReflectionProperty::isPrivate
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isPrivate(): mixed
-----
METHOD ReflectionProperty::isPromoted
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isPromoted(): bool
-----
METHOD ReflectionProperty::isProtected
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isProtected(): mixed
-----
METHOD ReflectionProperty::isPublic
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isPublic(): mixed
-----
METHOD ReflectionProperty::isReadOnly
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isReadOnly(): bool
-----
METHOD ReflectionProperty::isStatic
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isStatic(): mixed
-----
METHOD ReflectionProperty::setAccessible
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param bool $accessible
     * @return void
     */
    function setAccessible(bool $accessible): mixed
-----
METHOD ReflectionProperty::setValue
-----
Has side-effects: Yes
Visibility: public
Variants: 2
    /**
     * @param object|null $objectOrValue
     * @param mixed $value
     * @return void
     */
    function setValue(mixed $objectOrValue, mixed $value): mixed
    /**
     * @param mixed $objectOrValue
     * @return void
     */
    function setValue(mixed $objectOrValue): mixed
-----
CLASS ReflectionReference
-----
class ReflectionReference
{
}
-----
METHOD ReflectionReference::__construct
-----
Has side-effects: Maybe
Visibility: private
Variants: 1
    /**
     * @return mixed
     */
    function __construct(): mixed
-----
METHOD ReflectionReference::fromArrayElement
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param array $array
     * @param int|string $key
     * @return ReflectionReference|null
     */
    function fromArrayElement(array $array, int|string $key): ReflectionReference|null
-----
METHOD ReflectionReference::getId
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getId(): string
-----
CLASS ReflectionType
-----
abstract class ReflectionType implements Stringable
{
}
-----
METHOD ReflectionType::__toString
-----
Is deprecated: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): string
-----
METHOD ReflectionType::allowsNull
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function allowsNull(): mixed
-----
CLASS ReflectionUnionType
-----
class ReflectionUnionType extends ReflectionType
{
}
-----
METHOD ReflectionUnionType::getTypes
-----
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getTypes(): array
-----
CLASS ReflectionZendExtension
-----
class ReflectionZendExtension implements Reflector
{
}
-----
METHOD ReflectionZendExtension::__clone
-----
Has side-effects: Yes
Visibility: private
Variants: 1
    /**
     * @return void
     */
    function __clone(): void
-----
METHOD ReflectionZendExtension::__construct
-----
Has side-effects: Maybe
Throw type: ReflectionException
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return void
     */
    function __construct(string $name): mixed
-----
METHOD ReflectionZendExtension::__toString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): string
-----
METHOD ReflectionZendExtension::export
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param bool $return
     * @return string|null
     */
    function export(mixed $name, mixed $return = false): mixed
-----
METHOD ReflectionZendExtension::getAuthor
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getAuthor(): mixed
-----
METHOD ReflectionZendExtension::getCopyright
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getCopyright(): mixed
-----
METHOD ReflectionZendExtension::getName
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getName(): mixed
-----
METHOD ReflectionZendExtension::getURL
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getURL(): mixed
-----
METHOD ReflectionZendExtension::getVersion
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getVersion(): mixed
-----
CLASS Reflector
-----
interface Reflector extends Stringable
{
}
-----
METHOD Reflector::export
-----
MISSING
-----
CLASS RegexIterator
-----
class RegexIterator extends FilterIterator
{
}
-----
METHOD RegexIterator::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param Iterator<TKey (class RegexIterator, parameter), TValue (class RegexIterator, parameter)> $iterator
     * @param string $pattern
     * @param 0|1|2|3|4 $mode
     * @param int $flags
     * @param int $pregFlags
     * @return void
     */
    function __construct(Iterator $iterator, string $pattern, int $mode = 0, int $flags = 0, int $pregFlags = 0): mixed
-----
METHOD RegexIterator::accept
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function accept(): mixed
-----
METHOD RegexIterator::getFlags
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getFlags(): mixed
-----
METHOD RegexIterator::getMode
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getMode(): mixed
-----
METHOD RegexIterator::getPregFlags
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getPregFlags(): mixed
-----
METHOD RegexIterator::getRegex
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getRegex(): mixed
-----
METHOD RegexIterator::setFlags
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $flags
     * @return bool
     */
    function setFlags(int $flags): mixed
-----
METHOD RegexIterator::setMode
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $mode
     * @return bool
     */
    function setMode(int $mode): mixed
-----
METHOD RegexIterator::setPregFlags
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $pregFlags
     * @return bool
     */
    function setPregFlags(int $pregFlags): mixed
-----
CLASS ResourceBundle
-----
class ResourceBundle implements IteratorAggregate, Countable
{
}
-----
METHOD ResourceBundle::count
-----
Visibility: public
Variants: 1
    /**
     * @return int<0, max>
     */
    function count(): mixed
-----
METHOD ResourceBundle::create
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string|null $locale
     * @param string|null $bundle
     * @param bool $fallback
     * @return ResourceBundle|null
     */
    function create(string|null $locale, string|null $bundle, bool $fallback = true): mixed
-----
METHOD ResourceBundle::get
-----
Visibility: public
Variants: 1
    /**
     * @param int|string $index
     * @param bool $fallback
     * @return mixed
     */
    function get(mixed $index, bool $fallback = true): mixed
-----
METHOD ResourceBundle::getErrorCode
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getErrorCode(): mixed
-----
METHOD ResourceBundle::getErrorMessage
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getErrorMessage(): mixed
-----
METHOD ResourceBundle::getLocales
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $bundle
     * @return array
     */
    function getLocales(string $bundle): mixed
-----
CLASS Result
-----
MISSING
-----
CLASS ReturnTypeWillChange
-----
Not builtin
final class ReturnTypeWillChange
{
}
-----
METHOD ReturnTypeWillChange::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function __construct(): mixed
-----
CLASS RowResult
-----
MISSING
-----
CLASS SNMP
-----
class SNMP
{
}
-----
METHOD SNMP::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $version
     * @param string $hostname
     * @param string $community
     * @param int $timeout
     * @param int $retries
     * @return void
     */
    function __construct(int $version, string $hostname, string $community, int $timeout = -1, int $retries = -1): mixed
-----
METHOD SNMP::close
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function close(): mixed
-----
METHOD SNMP::get
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array|string $object_id
     * @param bool $preserve_keys
     * @return array|string|false
     */
    function get(array|string $object_id, bool $preserve_keys = false): mixed
-----
METHOD SNMP::getErrno
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getErrno(): mixed
-----
METHOD SNMP::getError
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getError(): mixed
-----
METHOD SNMP::getnext
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array|string $object_id
     * @return array|string|false
     */
    function getnext(array|string $object_id): mixed
-----
METHOD SNMP::set
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array|string $object_id
     * @param array|string $type
     * @param array|string $value
     * @return bool
     */
    function set(array|string $object_id, array|string $type, array|string $value): mixed
-----
METHOD SNMP::setSecurity
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $sec_level
     * @param string $auth_protocol
     * @param string $auth_passphrase
     * @param string $priv_protocol
     * @param string $priv_passphrase
     * @param string $contextName
     * @param string $contextEngineID
     * @return bool
     */
    function setSecurity(string $sec_level, string $auth_protocol = '', string $auth_passphrase = '', string $priv_protocol = '', string $priv_passphrase = '', string $contextName = '', string $contextEngineID = ''): mixed
-----
METHOD SNMP::walk
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array|string $object_id
     * @param bool $suffix_as_keys
     * @param int $max_repetitions
     * @param int $non_repeaters
     * @return array|false
     */
    function walk(array|string $object_id, bool $suffix_as_keys = false, int $max_repetitions = -1, int $non_repeaters = -1): mixed
-----
CLASS SQLite3
-----
class SQLite3
{
}
-----
METHOD SQLite3::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @param int $flags
     * @param string $encryptionKey
     * @return void
     */
    function __construct(string $filename, int $flags = 6, string $encryptionKey = ''): mixed
-----
METHOD SQLite3::backup
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param SQLite3 $destination
     * @param string $sourceDatabase
     * @param string $destinationDatabase
     * @return bool
     */
    function backup(SQLite3 $destination, string $sourceDatabase = 'main', string $destinationDatabase = 'main'): mixed
-----
METHOD SQLite3::busyTimeout
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $milliseconds
     * @return bool
     */
    function busyTimeout(int $milliseconds): mixed
-----
METHOD SQLite3::changes
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function changes(): mixed
-----
METHOD SQLite3::close
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function close(): mixed
-----
METHOD SQLite3::createAggregate
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param callable(): mixed $stepCallback
     * @param callable(): mixed $finalCallback
     * @param int $argCount
     * @return bool
     */
    function createAggregate(string $name, callable(): mixed $stepCallback, callable(): mixed $finalCallback, int $argCount = -1): mixed
-----
METHOD SQLite3::createCollation
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param callable(): mixed $callback
     * @return bool
     */
    function createCollation(string $name, callable(): mixed $callback): mixed
-----
METHOD SQLite3::createFunction
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param callable(): mixed $callback
     * @param int $argCount
     * @param int $flags
     * @return bool
     */
    function createFunction(string $name, callable(): mixed $callback, int $argCount = -1, int $flags = 0): mixed
-----
METHOD SQLite3::enableExceptions
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $enable
     * @return bool
     */
    function enableExceptions(bool $enable = false): mixed
-----
METHOD SQLite3::escapeString
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $string
     * @return string
     */
    function escapeString(string $string): mixed
-----
METHOD SQLite3::exec
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $query
     * @return bool
     */
    function exec(string $query): mixed
-----
METHOD SQLite3::lastErrorCode
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function lastErrorCode(): mixed
-----
METHOD SQLite3::lastErrorMsg
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function lastErrorMsg(): mixed
-----
METHOD SQLite3::lastInsertRowID
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function lastInsertRowID(): mixed
-----
METHOD SQLite3::loadExtension
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return bool
     */
    function loadExtension(string $name): mixed
-----
METHOD SQLite3::open
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @param int $flags
     * @param string $encryptionKey
     * @return void
     */
    function open(string $filename, int $flags = 6, string $encryptionKey = ''): mixed
-----
METHOD SQLite3::openBlob
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $table
     * @param string $column
     * @param int $rowid
     * @param string $database
     * @param int $flags
     * @return resource|false
     */
    function openBlob(string $table, string $column, int $rowid, string $database = 'main', int $flags = 1): mixed
-----
METHOD SQLite3::prepare
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $query
     * @return SQLite3Stmt|false
     */
    function prepare(string $query): mixed
-----
METHOD SQLite3::query
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $query
     * @return SQLite3Result|false
     */
    function query(string $query): mixed
-----
METHOD SQLite3::querySingle
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $query
     * @param bool $entireRow
     * @return array|bool|float|int|string|null
     */
    function querySingle(string $query, bool $entireRow = false): mixed
-----
METHOD SQLite3::setAuthorizer
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param (callable(): mixed)|null $callback
     * @return bool
     */
    function setAuthorizer((callable(): mixed)|null $callback): mixed
-----
METHOD SQLite3::version
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function version(): mixed
-----
CLASS SQLite3Result
-----
class SQLite3Result
{
}
-----
METHOD SQLite3Result::__construct
-----
Has side-effects: Maybe
Visibility: private
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD SQLite3Result::columnName
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $column
     * @return string
     */
    function columnName(int $column): mixed
-----
METHOD SQLite3Result::columnType
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $column
     * @return int
     */
    function columnType(int $column): mixed
-----
METHOD SQLite3Result::fetchArray
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $mode
     * @return array|false
     */
    function fetchArray(int $mode = 3): mixed
-----
METHOD SQLite3Result::finalize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function finalize(): mixed
-----
METHOD SQLite3Result::numColumns
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function numColumns(): mixed
-----
METHOD SQLite3Result::reset
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function reset(): mixed
-----
CLASS SQLite3Stmt
-----
class SQLite3Stmt
{
}
-----
METHOD SQLite3Stmt::__construct
-----
Has side-effects: Maybe
Visibility: private
Variants: 1
    /**
     * @param sqlite3 $sqlite3
     * @param string $query
     * @return void
     */
    function __construct(SQLite3 $sqlite3, string $query): mixed
-----
METHOD SQLite3Stmt::bindParam
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int|string $param
     * @param mixed $var
     * @param int $type
     * @return bool
     */
    function bindParam(int|string $param, mixed &r$var, int $type = 3): mixed
-----
METHOD SQLite3Stmt::bindValue
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int|string $param
     * @param mixed $value
     * @param int $type
     * @return bool
     */
    function bindValue(int|string $param, mixed $value, int $type = 3): mixed
-----
METHOD SQLite3Stmt::clear
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function clear(): mixed
-----
METHOD SQLite3Stmt::close
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function close(): mixed
-----
METHOD SQLite3Stmt::execute
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return SQLite3Result|false
     */
    function execute(): mixed
-----
METHOD SQLite3Stmt::getSQL
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $expand
     * @return string
     */
    function getSQL(bool $expand = false): mixed
-----
METHOD SQLite3Stmt::paramCount
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function paramCount(): mixed
-----
METHOD SQLite3Stmt::readOnly
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function readOnly(): mixed
-----
METHOD SQLite3Stmt::reset
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function reset(): mixed
-----
CLASS SVM
-----
class SVM
{
}
-----
METHOD SVM::__construct
-----
Has side-effects: Maybe
Throw type: SVMException
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD SVM::crossvalidate
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $problem
     * @param int $number_of_folds
     * @return float
     */
    function crossvalidate(array $problem, int $number_of_folds): float
-----
METHOD SVM::getOptions
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getOptions(): array
-----
METHOD SVM::setOptions
-----
Has side-effects: Maybe
Throw type: SVMException
Visibility: public
Variants: 1
    /**
     * @param array $params
     * @return bool
     */
    function setOptions(array $params): bool
-----
METHOD SVM::train
-----
Has side-effects: Maybe
Throw type: SMVException
Visibility: public
Variants: 1
    /**
     * @param array $problem
     * @param array $weights
     * @return SVMModel
     */
    function train(array $problem, array|null $weights = null): SVMModel
-----
CLASS SVMModel
-----
class SVMModel
{
}
-----
METHOD SVMModel::__construct
-----
Has side-effects: Maybe
Throw type: Throws
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @return void
     */
    function __construct(string $filename = ''): mixed
-----
METHOD SVMModel::checkProbabilityModel
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function checkProbabilityModel(): bool
-----
METHOD SVMModel::getLabels
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getLabels(): array
-----
METHOD SVMModel::getNrClass
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getNrClass(): int
-----
METHOD SVMModel::getSvmType
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getSvmType(): int
-----
METHOD SVMModel::getSvrProbability
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return float
     */
    function getSvrProbability(): float
-----
METHOD SVMModel::load
-----
Has side-effects: Maybe
Throw type: SVMException
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @return bool
     */
    function load(string $filename): bool
-----
METHOD SVMModel::predict
-----
Has side-effects: Maybe
Throw type: SVMException
Visibility: public
Variants: 1
    /**
     * @param array $data
     * @return float
     */
    function predict(array $data): float
-----
METHOD SVMModel::predict_probability
-----
Has side-effects: Maybe
Throw type: SVMException
Visibility: public
Variants: 1
    /**
     * @param array $data
     * @return float
     */
    function predict_probability(array $data): float
-----
METHOD SVMModel::save
-----
Has side-effects: Maybe
Throw type: SVMException
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @return bool
     */
    function save(string $filename): bool
-----
CLASS Schema
-----
MISSING
-----
CLASS SchemaObject
-----
MISSING
-----
CLASS SeasLog
-----
MISSING
-----
CLASS SeekableIterator
-----
interface SeekableIterator extends Iterator
{
}
-----
METHOD SeekableIterator::seek
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $offset
     * @return void
     */
    function seek(int $offset): mixed
-----
CLASS SensitiveParameter
-----
final class SensitiveParameter
{
}
-----
METHOD SensitiveParameter::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function __construct(): mixed
-----
CLASS SensitiveParameterValue
-----
final class SensitiveParameterValue
{
}
-----
METHOD SensitiveParameterValue::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $value
     * @return mixed
     */
    function __construct(mixed $value): mixed
-----
METHOD SensitiveParameterValue::__debugInfo
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function __debugInfo(): array
-----
METHOD SensitiveParameterValue::getValue
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function getValue(): mixed
-----
CLASS Serializable
-----
interface Serializable
{
}
-----
METHOD Serializable::serialize
-----
Has side-effects: Maybe
Throw type: Exception
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function serialize(): mixed
-----
METHOD Serializable::unserialize
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return void
     */
    function unserialize(string $data): mixed
-----
CLASS Session
-----
MISSING
-----
CLASS SessionHandler
-----
class SessionHandler implements SessionHandlerInterface, SessionIdInterface
{
}
-----
METHOD SessionHandler::close
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function close(): mixed
-----
METHOD SessionHandler::create_sid
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return char
     */
    function create_sid(): mixed
-----
METHOD SessionHandler::destroy
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $id
     * @return bool
     */
    function destroy(string $id): mixed
-----
METHOD SessionHandler::gc
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $max_lifetime
     * @return int|false
     */
    function gc(int $max_lifetime): mixed
-----
METHOD SessionHandler::open
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $path
     * @param string $name
     * @return bool
     */
    function open(string $path, string $name): mixed
-----
METHOD SessionHandler::read
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $id
     * @return string
     */
    function read(string $id): mixed
-----
METHOD SessionHandler::write
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $id
     * @param string $data
     * @return bool
     */
    function write(string $id, string $data): mixed
-----
CLASS SessionHandlerInterface
-----
interface SessionHandlerInterface
{
}
-----
METHOD SessionHandlerInterface::close
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function close(): mixed
-----
METHOD SessionHandlerInterface::destroy
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $id
     * @return bool
     */
    function destroy(string $id): mixed
-----
METHOD SessionHandlerInterface::gc
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $max_lifetime
     * @return int|false
     */
    function gc(int $max_lifetime): mixed
-----
METHOD SessionHandlerInterface::open
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $path
     * @param string $name
     * @return bool
     */
    function open(string $path, string $name): mixed
-----
METHOD SessionHandlerInterface::read
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $id
     * @return string
     */
    function read(string $id): mixed
-----
METHOD SessionHandlerInterface::write
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $id
     * @param string $data
     * @return bool
     */
    function write(string $id, string $data): mixed
-----
CLASS SessionIdInterface
-----
interface SessionIdInterface
{
}
-----
METHOD SessionIdInterface::create_sid
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function create_sid(): mixed
-----
CLASS SessionUpdateTimestampHandlerInterface
-----
interface SessionUpdateTimestampHandlerInterface
{
}
-----
METHOD SessionUpdateTimestampHandlerInterface::updateTimestamp
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $id
     * @param string $data
     * @return bool
     */
    function updateTimestamp(string $id, string $data): mixed
-----
METHOD SessionUpdateTimestampHandlerInterface::validateId
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $id
     * @return bool
     */
    function validateId(string $id): mixed
-----
CLASS SimpleXMLElement
-----
class SimpleXMLElement implements ArrayAccess, Countable, Stringable, RecursiveIterator
{
}
-----
METHOD SimpleXMLElement::__construct
-----
Throw type: Exception
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @param int $options
     * @param bool $dataIsURL
     * @param string $namespaceOrPrefix
     * @param bool $isPrefix
     * @return void
     */
    function __construct(string $data, int $options = 0, bool $dataIsURL = false, string $namespaceOrPrefix = '', bool $isPrefix = false): mixed
-----
METHOD SimpleXMLElement::__toString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): string
-----
METHOD SimpleXMLElement::addAttribute
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $qualifiedName
     * @param string $value
     * @param string|null $namespace
     * @return void
     */
    function addAttribute(string $qualifiedName, string $value, string|null $namespace = null): mixed
-----
METHOD SimpleXMLElement::addChild
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $qualifiedName
     * @param string|null $value
     * @param string|null $namespace
     * @return static(SimpleXMLElement)
     */
    function addChild(string $qualifiedName, string|null $value = null, string|null $namespace = null): mixed
-----
METHOD SimpleXMLElement::asXML
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string|null $filename
     * @return ($filename is null ? string|false : bool)
     */
    function asXML(string|null $filename = null): mixed
-----
METHOD SimpleXMLElement::attributes
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string|null $namespaceOrPrefix
     * @param bool $isPrefix
     * @return static(SimpleXMLElement)|null
     */
    function attributes(string|null $namespaceOrPrefix = null, bool $isPrefix = false): mixed
-----
METHOD SimpleXMLElement::children
-----
Visibility: public
Variants: 1
    /**
     * @param string|null $namespaceOrPrefix
     * @param bool $isPrefix
     * @return (static(SimpleXMLElement)|null)
     */
    function children(string|null $namespaceOrPrefix = null, bool $isPrefix = false): mixed
-----
METHOD SimpleXMLElement::count
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function count(): mixed
-----
METHOD SimpleXMLElement::current
-----
Visibility: public
Variants: 1
    /**
     * @return static(SimpleXMLElement)
     */
    function current(): SimpleXMLElement
-----
METHOD SimpleXMLElement::getChildren
-----
Visibility: public
Variants: 1
    /**
     * @return SimpleXMLElement|null
     */
    function getChildren(): mixed
-----
METHOD SimpleXMLElement::getDocNamespaces
-----
Visibility: public
Variants: 1
    /**
     * @param bool $recursive
     * @param bool $fromRoot
     * @return array<string>|false
     */
    function getDocNamespaces(bool $recursive = false, bool $fromRoot = true): mixed
-----
METHOD SimpleXMLElement::getName
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getName(): mixed
-----
METHOD SimpleXMLElement::getNamespaces
-----
Visibility: public
Variants: 1
    /**
     * @param bool $recursive
     * @return array<string>
     */
    function getNamespaces(bool $recursive = false): mixed
-----
METHOD SimpleXMLElement::hasChildren
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function hasChildren(): mixed
-----
METHOD SimpleXMLElement::key
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function key(): mixed
-----
METHOD SimpleXMLElement::next
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): mixed
-----
METHOD SimpleXMLElement::registerXPathNamespace
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $prefix
     * @param string $namespace
     * @return bool
     */
    function registerXPathNamespace(string $prefix, string $namespace): mixed
-----
METHOD SimpleXMLElement::rewind
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): mixed
-----
METHOD SimpleXMLElement::saveXML
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string|null $filename
     * @return ($filename is null ? string|false : bool)
     */
    function saveXML(string|null $filename = null): mixed
-----
METHOD SimpleXMLElement::valid
-----
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function valid(): mixed
-----
METHOD SimpleXMLElement::xpath
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $expression
     * @return array<static(SimpleXMLElement)>|false|null
     */
    function xpath(string $expression): mixed
-----
CLASS SoapClient
-----
class SoapClient
{
}
-----
METHOD SoapClient::__call
-----
Is deprecated: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param array $args
     * @return mixed
     */
    function __call(string $name, array $args): mixed
-----
METHOD SoapClient::__construct
-----
Has side-effects: Maybe
Throw type: SoapFault
Visibility: public
Variants: 1
    /**
     * @param string|null $wsdl
     * @param array $options
     * @return void
     */
    function __construct(string|null $wsdl, array $options = array{}): mixed
-----
METHOD SoapClient::__doRequest
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $request
     * @param string $location
     * @param string $action
     * @param int $version
     * @param bool $oneWay
     * @return string|null
     */
    function __doRequest(string $request, string $location, string $action, int $version, bool $oneWay = false): mixed
-----
METHOD SoapClient::__getCookies
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function __getCookies(): mixed
-----
METHOD SoapClient::__getFunctions
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array|null
     */
    function __getFunctions(): mixed
-----
METHOD SoapClient::__getLastRequest
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string|null
     */
    function __getLastRequest(): mixed
-----
METHOD SoapClient::__getLastRequestHeaders
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string|null
     */
    function __getLastRequestHeaders(): mixed
-----
METHOD SoapClient::__getLastResponse
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string|null
     */
    function __getLastResponse(): mixed
-----
METHOD SoapClient::__getLastResponseHeaders
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string|null
     */
    function __getLastResponseHeaders(): mixed
-----
METHOD SoapClient::__getTypes
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array|null
     */
    function __getTypes(): mixed
-----
METHOD SoapClient::__setCookie
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string|null $value
     * @return mixed
     */
    function __setCookie(string $name, string|null $value = null): mixed
-----
METHOD SoapClient::__setLocation
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string|null $location
     * @return string|null
     */
    function __setLocation(string|null $location = null): mixed
-----
METHOD SoapClient::__setSoapHeaders
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array|SoapHeader|null $headers
     * @return bool
     */
    function __setSoapHeaders(mixed $headers = null): mixed
-----
METHOD SoapClient::__soapCall
-----
Has side-effects: Maybe
Throw type: SoapFault
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param array $args
     * @param array|null $options
     * @param array|SoapHeader|null $inputHeaders
     * @param array $outputHeaders
     * @return mixed
     */
    function __soapCall(string $name, array $args, array|null $options = null, mixed $inputHeaders = null, mixed &rw$outputHeaders = null): mixed
-----
CLASS SoapFault
-----
class SoapFault extends Exception
{
}
-----
METHOD SoapFault::__construct
-----
Visibility: public
Variants: 1
    /**
     * @param array|string|null $code
     * @param string $string
     * @param string|null $actor
     * @param mixed $details
     * @param string|null $name
     * @param mixed $headerFault
     * @return void
     */
    function __construct(array|string|null $code, string $string, string|null $actor = null, mixed $details = null, string|null $name = null, mixed $headerFault = null): mixed
-----
METHOD SoapFault::__toString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): string
-----
CLASS SoapHeader
-----
class SoapHeader
{
}
-----
METHOD SoapHeader::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $namespace
     * @param string $name
     * @param mixed $data
     * @param bool $mustUnderstand
     * @param int|string|null $actor
     * @return void
     */
    function __construct(string $namespace, string $name, mixed $data = *ERROR*, bool $mustUnderstand = false, int|string|null $actor = null): mixed
-----
CLASS SoapParam
-----
class SoapParam
{
}
-----
METHOD SoapParam::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $data
     * @param string $name
     * @return void
     */
    function __construct(mixed $data, string $name): mixed
-----
CLASS SoapServer
-----
class SoapServer
{
}
-----
METHOD SoapServer::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string|null $wsdl
     * @param array $options
     * @return void
     */
    function __construct(string|null $wsdl, array $options = array{}): mixed
-----
METHOD SoapServer::addFunction
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param array|int|string $functions
     * @return void
     */
    function addFunction(mixed $functions): mixed
-----
METHOD SoapServer::addSoapHeader
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param soapheader $header
     * @return void
     */
    function addSoapHeader(SoapHeader $header): mixed
-----
METHOD SoapServer::fault
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $code
     * @param string $string
     * @param string $actor
     * @param string $details
     * @param string $name
     * @return void
     */
    function fault(string $code, string $string, string $actor = '', mixed $details = null, string $name = ''): mixed
-----
METHOD SoapServer::getFunctions
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getFunctions(): mixed
-----
METHOD SoapServer::handle
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string|null $request
     * @return void
     */
    function handle(string|null $request = null): mixed
-----
METHOD SoapServer::setClass
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $class
     * @param mixed $args
     * @return void
     */
    function setClass(string $class, mixed ...$args): mixed
-----
METHOD SoapServer::setObject
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param object $object
     * @return void
     */
    function setObject(object $object): mixed
-----
METHOD SoapServer::setPersistence
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $mode
     * @return void
     */
    function setPersistence(int $mode): mixed
-----
CLASS SoapVar
-----
class SoapVar
{
}
-----
METHOD SoapVar::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $data
     * @param int|null $encoding
     * @param string|null $typeName
     * @param string|null $typeNamespace
     * @param string|null $nodeName
     * @param string|null $nodeNamespace
     * @return void
     */
    function __construct(mixed $data, int|null $encoding, string|null $typeName = null, string|null $typeNamespace = null, string|null $nodeName = null, string|null $nodeNamespace = null): mixed
-----
CLASS SolrClient
-----
final class SolrClient
{
}
-----
METHOD SolrClient::__construct
-----
Has side-effects: Maybe
Throw type: SolrIllegalArgumentException
Visibility: public
Variants: 1
    /**
     * @param array $clientOptions
     * @return void
     */
    function __construct(array $clientOptions): mixed
-----
METHOD SolrClient::__destruct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function __destruct(): mixed
-----
METHOD SolrClient::addDocument
-----
Has side-effects: Maybe
Throw type: SolrClientException|SolrServerException
Visibility: public
Variants: 1
    /**
     * @param solrinputdocument $doc
     * @param bool $overwrite
     * @param int $commitWithin
     * @return SolrUpdateResponse
     */
    function addDocument(SolrInputDocument $doc, mixed $overwrite = true, mixed $commitWithin = 0): mixed
-----
METHOD SolrClient::addDocuments
-----
Has side-effects: Maybe
Throw type: SolrClientException|SolrServerException
Visibility: public
Variants: 1
    /**
     * @param array $docs
     * @param bool $overwrite
     * @param int $commitWithin
     * @return SolrUpdateResponse
     */
    function addDocuments(array $docs, mixed $overwrite = true, mixed $commitWithin = 0): mixed
-----
METHOD SolrClient::commit
-----
Has side-effects: Maybe
Throw type: SolrClientException|SolrServerException
Visibility: public
Variants: 1
    /**
     * @param int $softCommit
     * @param bool $waitSearcher
     * @param bool $expungeDeletes
     * @return SolrUpdateResponse
     */
    function commit(mixed $softCommit = false, mixed $waitSearcher = true, mixed $expungeDeletes = false): mixed
-----
METHOD SolrClient::deleteById
-----
Has side-effects: Maybe
Throw type: SolrClientException|SolrServerException
Visibility: public
Variants: 1
    /**
     * @param string $id
     * @return SolrUpdateResponse
     */
    function deleteById(mixed $id): mixed
-----
METHOD SolrClient::deleteByIds
-----
Has side-effects: Maybe
Throw type: SolrClientException|SolrServerException
Visibility: public
Variants: 1
    /**
     * @param array $ids
     * @return SolrUpdateResponse
     */
    function deleteByIds(array $ids): mixed
-----
METHOD SolrClient::deleteByQueries
-----
Has side-effects: Maybe
Throw type: SolrClientException|SolrServerException
Visibility: public
Variants: 1
    /**
     * @param array $queries
     * @return SolrUpdateResponse
     */
    function deleteByQueries(array $queries): mixed
-----
METHOD SolrClient::deleteByQuery
-----
Has side-effects: Maybe
Throw type: SolrClientException|SolrServerException
Visibility: public
Variants: 1
    /**
     * @param string $query
     * @return SolrUpdateResponse
     */
    function deleteByQuery(mixed $query): mixed
-----
METHOD SolrClient::getById
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $id
     * @return SolrQueryResponse
     */
    function getById(mixed $id): mixed
-----
METHOD SolrClient::getByIds
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $ids
     * @return SolrQueryResponse
     */
    function getByIds(array $ids): mixed
-----
METHOD SolrClient::getDebug
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getDebug(): mixed
-----
METHOD SolrClient::getOptions
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getOptions(): mixed
-----
METHOD SolrClient::optimize
-----
Has side-effects: Maybe
Throw type: SolrClientException|SolrServerException
Visibility: public
Variants: 1
    /**
     * @param int $maxSegments
     * @param bool $softCommit
     * @param bool $waitSearcher
     * @return SolrUpdateResponse
     */
    function optimize(mixed $maxSegments = 1, mixed $softCommit = true, mixed $waitSearcher = true): mixed
-----
METHOD SolrClient::ping
-----
Has side-effects: Maybe
Throw type: SolrClientException|SolrServerException
Visibility: public
Variants: 1
    /**
     * @return SolrPingResponse
     */
    function ping(): mixed
-----
METHOD SolrClient::query
-----
Has side-effects: Maybe
Throw type: SolrClientException|SolrServerException
Visibility: public
Variants: 1
    /**
     * @param solrparams $query
     * @return SolrQueryResponse
     */
    function query(SolrParams $query): mixed
-----
METHOD SolrClient::request
-----
Has side-effects: Maybe
Throw type: SolrClientException|SolrIllegalArgumentException|SolrServerException
Visibility: public
Variants: 1
    /**
     * @param string $raw_request
     * @return SolrUpdateResponse
     */
    function request(mixed $raw_request): mixed
-----
METHOD SolrClient::rollback
-----
Has side-effects: Maybe
Throw type: SolrClientException|SolrServerException
Visibility: public
Variants: 1
    /**
     * @return SolrUpdateResponse
     */
    function rollback(): mixed
-----
METHOD SolrClient::setResponseWriter
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $responseWriter
     * @return void
     */
    function setResponseWriter(mixed $responseWriter): mixed
-----
METHOD SolrClient::setServlet
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $type
     * @param string $value
     * @return bool
     */
    function setServlet(mixed $type, mixed $value): mixed
-----
METHOD SolrClient::system
-----
Has side-effects: Yes
Throw type: SolrClientException|SolrServerException
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function system(): mixed
-----
METHOD SolrClient::threads
-----
Has side-effects: Yes
Throw type: SolrClientException|SolrServerException
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function threads(): mixed
-----
CLASS SolrClientException
-----
class SolrClientException extends SolrException
{
}
-----
METHOD SolrClientException::getInternalInfo
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getInternalInfo(): mixed
-----
CLASS SolrCollapseFunction
-----
class SolrCollapseFunction implements Stringable
{
}
-----
METHOD SolrCollapseFunction::__construct
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field
     * @return void
     */
    function __construct(mixed $field): mixed
-----
METHOD SolrCollapseFunction::__toString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): mixed
-----
METHOD SolrCollapseFunction::getField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getField(): mixed
-----
METHOD SolrCollapseFunction::getHint
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getHint(): mixed
-----
METHOD SolrCollapseFunction::getMax
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getMax(): mixed
-----
METHOD SolrCollapseFunction::getMin
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getMin(): mixed
-----
METHOD SolrCollapseFunction::getNullPolicy
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getNullPolicy(): mixed
-----
METHOD SolrCollapseFunction::getSize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getSize(): mixed
-----
METHOD SolrCollapseFunction::setField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $fieldName
     * @return SolrCollapseFunction
     */
    function setField(mixed $fieldName): mixed
-----
METHOD SolrCollapseFunction::setHint
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $hint
     * @return SolrCollapseFunction
     */
    function setHint(mixed $hint): mixed
-----
METHOD SolrCollapseFunction::setMax
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $max
     * @return SolrCollapseFunction
     */
    function setMax(mixed $max): mixed
-----
METHOD SolrCollapseFunction::setMin
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $min
     * @return SolrCollapseFunction
     */
    function setMin(mixed $min): mixed
-----
METHOD SolrCollapseFunction::setNullPolicy
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $nullPolicy
     * @return SolrCollapseFunction
     */
    function setNullPolicy(mixed $nullPolicy): mixed
-----
METHOD SolrCollapseFunction::setSize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $size
     * @return SolrCollapseFunction
     */
    function setSize(mixed $size): mixed
-----
CLASS SolrDisMaxQuery
-----
class SolrDisMaxQuery extends SolrQuery
{
}
-----
METHOD SolrDisMaxQuery::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $q
     * @return void
     */
    function __construct(mixed $q = ''): mixed
-----
METHOD SolrDisMaxQuery::addBigramPhraseField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field
     * @param string $boost
     * @param string $slop
     * @return SolrDisMaxQuery
     */
    function addBigramPhraseField(mixed $field, mixed $boost, mixed $slop): mixed
-----
METHOD SolrDisMaxQuery::addBoostQuery
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field
     * @param string $value
     * @param string $boost
     * @return SolrDisMaxQuery
     */
    function addBoostQuery(mixed $field, mixed $value, mixed $boost): mixed
-----
METHOD SolrDisMaxQuery::addPhraseField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field
     * @param string $boost
     * @param string $slop
     * @return SolrDisMaxQuery
     */
    function addPhraseField(mixed $field, mixed $boost, mixed $slop): mixed
-----
METHOD SolrDisMaxQuery::addQueryField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field
     * @param string $boost
     * @return SolrDisMaxQuery
     */
    function addQueryField(mixed $field, mixed $boost): mixed
-----
METHOD SolrDisMaxQuery::addTrigramPhraseField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field
     * @param string $boost
     * @param string $slop
     * @return SolrDisMaxQuery
     */
    function addTrigramPhraseField(mixed $field, mixed $boost, mixed $slop): mixed
-----
METHOD SolrDisMaxQuery::addUserField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field
     * @return SolrDisMaxQuery
     */
    function addUserField(mixed $field): mixed
-----
METHOD SolrDisMaxQuery::removeBigramPhraseField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field
     * @return SolrDisMaxQuery
     */
    function removeBigramPhraseField(mixed $field): mixed
-----
METHOD SolrDisMaxQuery::removeBoostQuery
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field
     * @return SolrDisMaxQuery
     */
    function removeBoostQuery(mixed $field): mixed
-----
METHOD SolrDisMaxQuery::removePhraseField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field
     * @return SolrDisMaxQuery
     */
    function removePhraseField(mixed $field): mixed
-----
METHOD SolrDisMaxQuery::removeQueryField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field
     * @return SolrDisMaxQuery
     */
    function removeQueryField(mixed $field): mixed
-----
METHOD SolrDisMaxQuery::removeTrigramPhraseField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field
     * @return SolrDisMaxQuery
     */
    function removeTrigramPhraseField(mixed $field): mixed
-----
METHOD SolrDisMaxQuery::removeUserField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field
     * @return SolrDisMaxQuery
     */
    function removeUserField(mixed $field): mixed
-----
METHOD SolrDisMaxQuery::setBigramPhraseFields
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $fields
     * @return SolrDisMaxQuery
     */
    function setBigramPhraseFields(mixed $fields): mixed
-----
METHOD SolrDisMaxQuery::setBigramPhraseSlop
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $slop
     * @return SolrDisMaxQuery
     */
    function setBigramPhraseSlop(mixed $slop): mixed
-----
METHOD SolrDisMaxQuery::setBoostFunction
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $function
     * @return SolrDisMaxQuery
     */
    function setBoostFunction(mixed $function): mixed
-----
METHOD SolrDisMaxQuery::setBoostQuery
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $q
     * @return SolrDisMaxQuery
     */
    function setBoostQuery(mixed $q): mixed
-----
METHOD SolrDisMaxQuery::setMinimumMatch
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $value
     * @return SolrDisMaxQuery
     */
    function setMinimumMatch(mixed $value): mixed
-----
METHOD SolrDisMaxQuery::setPhraseFields
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $fields
     * @return SolrDisMaxQuery
     */
    function setPhraseFields(mixed $fields): mixed
-----
METHOD SolrDisMaxQuery::setPhraseSlop
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $slop
     * @return SolrDisMaxQuery
     */
    function setPhraseSlop(mixed $slop): mixed
-----
METHOD SolrDisMaxQuery::setQueryAlt
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $q
     * @return SolrDisMaxQuery
     */
    function setQueryAlt(mixed $q): mixed
-----
METHOD SolrDisMaxQuery::setQueryPhraseSlop
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $slop
     * @return SolrDisMaxQuery
     */
    function setQueryPhraseSlop(mixed $slop): mixed
-----
METHOD SolrDisMaxQuery::setTieBreaker
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $tieBreaker
     * @return SolrDisMaxQuery
     */
    function setTieBreaker(mixed $tieBreaker): mixed
-----
METHOD SolrDisMaxQuery::setTrigramPhraseFields
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $fields
     * @return SolrDisMaxQuery
     */
    function setTrigramPhraseFields(mixed $fields): mixed
-----
METHOD SolrDisMaxQuery::setTrigramPhraseSlop
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $slop
     * @return SolrDisMaxQuery
     */
    function setTrigramPhraseSlop(mixed $slop): mixed
-----
METHOD SolrDisMaxQuery::setUserFields
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $fields
     * @return SolrDisMaxQuery
     */
    function setUserFields(mixed $fields): mixed
-----
METHOD SolrDisMaxQuery::useDisMaxQueryParser
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return SolrDisMaxQuery
     */
    function useDisMaxQueryParser(): mixed
-----
METHOD SolrDisMaxQuery::useEDisMaxQueryParser
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return SolrDisMaxQuery
     */
    function useEDisMaxQueryParser(): mixed
-----
CLASS SolrDocument
-----
final class SolrDocument implements ArrayAccess, Iterator, Serializable
{
}
-----
METHOD SolrDocument::__clone
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __clone(): mixed
-----
METHOD SolrDocument::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD SolrDocument::__destruct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function __destruct(): mixed
-----
METHOD SolrDocument::__get
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $fieldName
     * @return SolrDocumentField
     */
    function __get(mixed $fieldName): mixed
-----
METHOD SolrDocument::__isset
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $fieldName
     * @return bool
     */
    function __isset(mixed $fieldName): mixed
-----
METHOD SolrDocument::__set
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $fieldName
     * @param string $fieldValue
     * @return bool
     */
    function __set(mixed $fieldName, mixed $fieldValue): mixed
-----
METHOD SolrDocument::__unset
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $fieldName
     * @return bool
     */
    function __unset(mixed $fieldName): mixed
-----
METHOD SolrDocument::addField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $fieldName
     * @param string $fieldValue
     * @return bool
     */
    function addField(mixed $fieldName, mixed $fieldValue): mixed
-----
METHOD SolrDocument::clear
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function clear(): mixed
-----
METHOD SolrDocument::current
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return SolrDocumentField
     */
    function current(): mixed
-----
METHOD SolrDocument::deleteField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $fieldName
     * @return bool
     */
    function deleteField(mixed $fieldName): mixed
-----
METHOD SolrDocument::fieldExists
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $fieldName
     * @return bool
     */
    function fieldExists(mixed $fieldName): mixed
-----
METHOD SolrDocument::getChildDocuments
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getChildDocuments(): mixed
-----
METHOD SolrDocument::getChildDocumentsCount
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getChildDocumentsCount(): mixed
-----
METHOD SolrDocument::getField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $fieldName
     * @return SolrDocumentField
     */
    function getField(mixed $fieldName): mixed
-----
METHOD SolrDocument::getFieldCount
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getFieldCount(): mixed
-----
METHOD SolrDocument::getFieldNames
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getFieldNames(): mixed
-----
METHOD SolrDocument::getInputDocument
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return SolrInputDocument
     */
    function getInputDocument(): mixed
-----
METHOD SolrDocument::hasChildDocuments
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function hasChildDocuments(): mixed
-----
METHOD SolrDocument::key
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function key(): mixed
-----
METHOD SolrDocument::merge
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param solrdocument $sourceDoc
     * @param bool $overwrite
     * @return bool
     */
    function merge(SolrInputDocument $sourceDoc, mixed $overwrite = true): mixed
-----
METHOD SolrDocument::next
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): mixed
-----
METHOD SolrDocument::offsetExists
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $fieldName
     * @return bool
     */
    function offsetExists(mixed $fieldName): mixed
-----
METHOD SolrDocument::offsetGet
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $fieldName
     * @return SolrDocumentField
     */
    function offsetGet(mixed $fieldName): mixed
-----
METHOD SolrDocument::offsetSet
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $fieldName
     * @param string $fieldValue
     * @return void
     */
    function offsetSet(mixed $fieldName, mixed $fieldValue): mixed
-----
METHOD SolrDocument::offsetUnset
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $fieldName
     * @return void
     */
    function offsetUnset(mixed $fieldName): mixed
-----
METHOD SolrDocument::reset
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function reset(): mixed
-----
METHOD SolrDocument::rewind
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): mixed
-----
METHOD SolrDocument::serialize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function serialize(): mixed
-----
METHOD SolrDocument::sort
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $sortOrderBy
     * @param int $sortDirection
     * @return bool
     */
    function sort(mixed $sortOrderBy, mixed $sortDirection = 1): mixed
-----
METHOD SolrDocument::toArray
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function toArray(): mixed
-----
METHOD SolrDocument::unserialize
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $serialized
     * @return void
     */
    function unserialize(mixed $serialized): mixed
-----
METHOD SolrDocument::valid
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function valid(): mixed
-----
CLASS SolrDocumentField
-----
final class SolrDocumentField
{
}
-----
METHOD SolrDocumentField::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD SolrDocumentField::__destruct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function __destruct(): mixed
-----
CLASS SolrException
-----
class SolrException extends Exception
{
}
-----
METHOD SolrException::getInternalInfo
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getInternalInfo(): mixed
-----
CLASS SolrGenericResponse
-----
final class SolrGenericResponse extends SolrResponse
{
}
-----
METHOD SolrGenericResponse::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD SolrGenericResponse::__destruct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function __destruct(): mixed
-----
CLASS SolrIllegalArgumentException
-----
class SolrIllegalArgumentException extends SolrException
{
}
-----
METHOD SolrIllegalArgumentException::getInternalInfo
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getInternalInfo(): mixed
-----
CLASS SolrIllegalOperationException
-----
class SolrIllegalOperationException extends SolrException
{
}
-----
METHOD SolrIllegalOperationException::getInternalInfo
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getInternalInfo(): mixed
-----
CLASS SolrInputDocument
-----
final class SolrInputDocument
{
}
-----
METHOD SolrInputDocument::__clone
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __clone(): mixed
-----
METHOD SolrInputDocument::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD SolrInputDocument::__destruct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function __destruct(): mixed
-----
METHOD SolrInputDocument::addChildDocument
-----
Has side-effects: Yes
Throw type: SolrException
Visibility: public
Variants: 1
    /**
     * @param SolrInputDocument $child
     * @return void
     */
    function addChildDocument(SolrInputDocument $child): mixed
-----
METHOD SolrInputDocument::addChildDocuments
-----
Has side-effects: Yes
Throw type: SolrException
Visibility: public
Variants: 1
    /**
     * @param array $docs
     * @return void
     */
    function addChildDocuments(array $docs): mixed
-----
METHOD SolrInputDocument::addField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $fieldName
     * @param string $fieldValue
     * @param float $fieldBoostValue
     * @return bool
     */
    function addField(mixed $fieldName, mixed $fieldValue, mixed $fieldBoostValue = 0.0): mixed
-----
METHOD SolrInputDocument::clear
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function clear(): mixed
-----
METHOD SolrInputDocument::deleteField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $fieldName
     * @return bool
     */
    function deleteField(mixed $fieldName): mixed
-----
METHOD SolrInputDocument::fieldExists
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $fieldName
     * @return bool
     */
    function fieldExists(mixed $fieldName): mixed
-----
METHOD SolrInputDocument::getBoost
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return float
     */
    function getBoost(): mixed
-----
METHOD SolrInputDocument::getChildDocuments
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getChildDocuments(): mixed
-----
METHOD SolrInputDocument::getChildDocumentsCount
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getChildDocumentsCount(): mixed
-----
METHOD SolrInputDocument::getField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $fieldName
     * @return SolrDocumentField
     */
    function getField(mixed $fieldName): mixed
-----
METHOD SolrInputDocument::getFieldBoost
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $fieldName
     * @return float
     */
    function getFieldBoost(mixed $fieldName): mixed
-----
METHOD SolrInputDocument::getFieldCount
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getFieldCount(): mixed
-----
METHOD SolrInputDocument::getFieldNames
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getFieldNames(): mixed
-----
METHOD SolrInputDocument::hasChildDocuments
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function hasChildDocuments(): mixed
-----
METHOD SolrInputDocument::merge
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param solrinputdocument $sourceDoc
     * @param bool $overwrite
     * @return bool
     */
    function merge(SolrInputDocument $sourceDoc, mixed $overwrite = true): mixed
-----
METHOD SolrInputDocument::reset
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function reset(): mixed
-----
METHOD SolrInputDocument::setBoost
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $documentBoostValue
     * @return bool
     */
    function setBoost(mixed $documentBoostValue): mixed
-----
METHOD SolrInputDocument::setFieldBoost
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $fieldName
     * @param float $fieldBoostValue
     * @return bool
     */
    function setFieldBoost(mixed $fieldName, mixed $fieldBoostValue): mixed
-----
METHOD SolrInputDocument::sort
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $sortOrderBy
     * @param int $sortDirection
     * @return bool
     */
    function sort(mixed $sortOrderBy, mixed $sortDirection = 1): mixed
-----
METHOD SolrInputDocument::toArray
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function toArray(): mixed
-----
CLASS SolrModifiableParams
-----
class SolrModifiableParams extends SolrParams
{
}
-----
METHOD SolrModifiableParams::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD SolrModifiableParams::__destruct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function __destruct(): mixed
-----
CLASS SolrObject
-----
final class SolrObject implements ArrayAccess
{
}
-----
METHOD SolrObject::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD SolrObject::__destruct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function __destruct(): mixed
-----
METHOD SolrObject::getPropertyNames
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getPropertyNames(): mixed
-----
METHOD SolrObject::offsetExists
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $property_name
     * @return bool
     */
    function offsetExists(mixed $property_name): mixed
-----
METHOD SolrObject::offsetGet
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $property_name
     * @return mixed
     */
    function offsetGet(mixed $property_name): mixed
-----
METHOD SolrObject::offsetSet
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $property_name
     * @param string $property_value
     * @return void
     */
    function offsetSet(mixed $property_name, mixed $property_value): mixed
-----
METHOD SolrObject::offsetUnset
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $property_name
     * @return void
     */
    function offsetUnset(mixed $property_name): mixed
-----
CLASS SolrParams
-----
abstract class SolrParams implements Serializable
{
}
-----
METHOD SolrParams::add
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $value
     * @return SolrParams
     */
    function add(mixed $name, mixed $value): mixed
-----
METHOD SolrParams::addParam
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $value
     * @return SolrParams
     */
    function addParam(mixed $name, mixed $value): mixed
-----
METHOD SolrParams::get
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $param_name
     * @return mixed
     */
    function get(mixed $param_name): mixed
-----
METHOD SolrParams::getParam
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $param_name
     * @return mixed
     */
    function getParam(mixed $param_name): mixed
-----
METHOD SolrParams::getParams
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getParams(): mixed
-----
METHOD SolrParams::getPreparedParams
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getPreparedParams(): mixed
-----
METHOD SolrParams::serialize
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function serialize(): mixed
-----
METHOD SolrParams::set
-----
Is final: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $value
     * @return void
     */
    function set(mixed $name, mixed $value): mixed
-----
METHOD SolrParams::setParam
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $value
     * @return SolrParams
     */
    function setParam(mixed $name, mixed $value): mixed
-----
METHOD SolrParams::toString
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $url_encode
     * @return string
     */
    function toString(mixed $url_encode = false): mixed
-----
METHOD SolrParams::unserialize
-----
Is final: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $serialized
     * @return void
     */
    function unserialize(mixed $serialized): mixed
-----
CLASS SolrPingResponse
-----
final class SolrPingResponse extends SolrResponse
{
}
-----
METHOD SolrPingResponse::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD SolrPingResponse::__destruct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function __destruct(): mixed
-----
METHOD SolrPingResponse::getResponse
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getResponse(): mixed
-----
CLASS SolrQuery
-----
class SolrQuery extends SolrModifiableParams
{
}
-----
METHOD SolrQuery::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $q
     * @return void
     */
    function __construct(mixed $q = ''): mixed
-----
METHOD SolrQuery::__destruct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function __destruct(): mixed
-----
METHOD SolrQuery::addExpandFilterQuery
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $fq
     * @return SolrQuery
     */
    function addExpandFilterQuery(mixed $fq): mixed
-----
METHOD SolrQuery::addExpandSortField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field
     * @param string $order
     * @return SolrQuery
     */
    function addExpandSortField(mixed $field, mixed $order): mixed
-----
METHOD SolrQuery::addFacetDateField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $dateField
     * @return SolrQuery
     */
    function addFacetDateField(mixed $dateField): mixed
-----
METHOD SolrQuery::addFacetDateOther
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $value
     * @param string $field_override
     * @return SolrQuery
     */
    function addFacetDateOther(mixed $value, mixed $field_override): mixed
-----
METHOD SolrQuery::addFacetField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field
     * @return SolrQuery
     */
    function addFacetField(mixed $field): mixed
-----
METHOD SolrQuery::addFacetQuery
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $facetQuery
     * @return SolrQuery
     */
    function addFacetQuery(mixed $facetQuery): mixed
-----
METHOD SolrQuery::addField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field
     * @return SolrQuery
     */
    function addField(mixed $field): mixed
-----
METHOD SolrQuery::addFilterQuery
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $fq
     * @return SolrQuery
     */
    function addFilterQuery(mixed $fq): mixed
-----
METHOD SolrQuery::addGroupField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $value
     * @return SolrQuery
     */
    function addGroupField(mixed $value): mixed
-----
METHOD SolrQuery::addGroupFunction
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $value
     * @return SolrQuery
     */
    function addGroupFunction(mixed $value): mixed
-----
METHOD SolrQuery::addGroupQuery
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $value
     * @return SolrQuery
     */
    function addGroupQuery(mixed $value): mixed
-----
METHOD SolrQuery::addGroupSortField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field
     * @param int $order
     * @return SolrQuery
     */
    function addGroupSortField(mixed $field, mixed $order): mixed
-----
METHOD SolrQuery::addHighlightField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field
     * @return SolrQuery
     */
    function addHighlightField(mixed $field): mixed
-----
METHOD SolrQuery::addMltField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field
     * @return SolrQuery
     */
    function addMltField(mixed $field): mixed
-----
METHOD SolrQuery::addMltQueryField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field
     * @param float $boost
     * @return SolrQuery
     */
    function addMltQueryField(mixed $field, mixed $boost): mixed
-----
METHOD SolrQuery::addSortField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field
     * @param int $order
     * @return SolrQuery
     */
    function addSortField(mixed $field, mixed $order = 1): mixed
-----
METHOD SolrQuery::addStatsFacet
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field
     * @return SolrQuery
     */
    function addStatsFacet(mixed $field): mixed
-----
METHOD SolrQuery::addStatsField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field
     * @return SolrQuery
     */
    function addStatsField(mixed $field): mixed
-----
METHOD SolrQuery::collapse
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param SolrCollapseFunction $collapseFunction
     * @return SolrQuery
     */
    function collapse(SolrCollapseFunction $collapseFunction): mixed
-----
METHOD SolrQuery::getExpand
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function getExpand(): mixed
-----
METHOD SolrQuery::getExpandFilterQueries
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getExpandFilterQueries(): mixed
-----
METHOD SolrQuery::getExpandQuery
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getExpandQuery(): mixed
-----
METHOD SolrQuery::getExpandRows
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getExpandRows(): mixed
-----
METHOD SolrQuery::getExpandSortFields
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getExpandSortFields(): mixed
-----
METHOD SolrQuery::getFacet
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function getFacet(): mixed
-----
METHOD SolrQuery::getFacetDateEnd
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field_override
     * @return string
     */
    function getFacetDateEnd(mixed $field_override): mixed
-----
METHOD SolrQuery::getFacetDateFields
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getFacetDateFields(): mixed
-----
METHOD SolrQuery::getFacetDateGap
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field_override
     * @return string
     */
    function getFacetDateGap(mixed $field_override): mixed
-----
METHOD SolrQuery::getFacetDateHardEnd
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field_override
     * @return string
     */
    function getFacetDateHardEnd(mixed $field_override): mixed
-----
METHOD SolrQuery::getFacetDateOther
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field_override
     * @return string|null
     */
    function getFacetDateOther(mixed $field_override): mixed
-----
METHOD SolrQuery::getFacetDateStart
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field_override
     * @return string
     */
    function getFacetDateStart(mixed $field_override): mixed
-----
METHOD SolrQuery::getFacetFields
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getFacetFields(): mixed
-----
METHOD SolrQuery::getFacetLimit
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field_override
     * @return int
     */
    function getFacetLimit(mixed $field_override): mixed
-----
METHOD SolrQuery::getFacetMethod
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field_override
     * @return string
     */
    function getFacetMethod(mixed $field_override): mixed
-----
METHOD SolrQuery::getFacetMinCount
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field_override
     * @return int
     */
    function getFacetMinCount(mixed $field_override): mixed
-----
METHOD SolrQuery::getFacetMissing
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field_override
     * @return bool
     */
    function getFacetMissing(mixed $field_override): mixed
-----
METHOD SolrQuery::getFacetOffset
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field_override
     * @return int
     */
    function getFacetOffset(mixed $field_override): mixed
-----
METHOD SolrQuery::getFacetPrefix
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field_override
     * @return string
     */
    function getFacetPrefix(mixed $field_override): mixed
-----
METHOD SolrQuery::getFacetQueries
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getFacetQueries(): mixed
-----
METHOD SolrQuery::getFacetSort
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field_override
     * @return int
     */
    function getFacetSort(mixed $field_override): mixed
-----
METHOD SolrQuery::getFields
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getFields(): mixed
-----
METHOD SolrQuery::getFilterQueries
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getFilterQueries(): mixed
-----
METHOD SolrQuery::getGroup
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function getGroup(): mixed
-----
METHOD SolrQuery::getGroupCachePercent
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getGroupCachePercent(): mixed
-----
METHOD SolrQuery::getGroupFacet
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function getGroupFacet(): mixed
-----
METHOD SolrQuery::getGroupFields
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getGroupFields(): mixed
-----
METHOD SolrQuery::getGroupFormat
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getGroupFormat(): mixed
-----
METHOD SolrQuery::getGroupFunctions
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getGroupFunctions(): mixed
-----
METHOD SolrQuery::getGroupLimit
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getGroupLimit(): mixed
-----
METHOD SolrQuery::getGroupMain
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function getGroupMain(): mixed
-----
METHOD SolrQuery::getGroupNGroups
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function getGroupNGroups(): mixed
-----
METHOD SolrQuery::getGroupOffset
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getGroupOffset(): mixed
-----
METHOD SolrQuery::getGroupQueries
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getGroupQueries(): mixed
-----
METHOD SolrQuery::getGroupSortFields
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getGroupSortFields(): mixed
-----
METHOD SolrQuery::getGroupTruncate
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function getGroupTruncate(): mixed
-----
METHOD SolrQuery::getHighlight
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function getHighlight(): mixed
-----
METHOD SolrQuery::getHighlightAlternateField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field_override
     * @return string
     */
    function getHighlightAlternateField(mixed $field_override): mixed
-----
METHOD SolrQuery::getHighlightFields
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getHighlightFields(): mixed
-----
METHOD SolrQuery::getHighlightFormatter
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field_override
     * @return string
     */
    function getHighlightFormatter(mixed $field_override): mixed
-----
METHOD SolrQuery::getHighlightFragmenter
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field_override
     * @return string
     */
    function getHighlightFragmenter(mixed $field_override): mixed
-----
METHOD SolrQuery::getHighlightFragsize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field_override
     * @return int
     */
    function getHighlightFragsize(mixed $field_override): mixed
-----
METHOD SolrQuery::getHighlightHighlightMultiTerm
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function getHighlightHighlightMultiTerm(): mixed
-----
METHOD SolrQuery::getHighlightMaxAlternateFieldLength
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field_override
     * @return int
     */
    function getHighlightMaxAlternateFieldLength(mixed $field_override): mixed
-----
METHOD SolrQuery::getHighlightMaxAnalyzedChars
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getHighlightMaxAnalyzedChars(): mixed
-----
METHOD SolrQuery::getHighlightMergeContiguous
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field_override
     * @return bool
     */
    function getHighlightMergeContiguous(mixed $field_override): mixed
-----
METHOD SolrQuery::getHighlightRegexMaxAnalyzedChars
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getHighlightRegexMaxAnalyzedChars(): mixed
-----
METHOD SolrQuery::getHighlightRegexPattern
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getHighlightRegexPattern(): mixed
-----
METHOD SolrQuery::getHighlightRegexSlop
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return float
     */
    function getHighlightRegexSlop(): mixed
-----
METHOD SolrQuery::getHighlightRequireFieldMatch
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function getHighlightRequireFieldMatch(): mixed
-----
METHOD SolrQuery::getHighlightSimplePost
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field_override
     * @return string
     */
    function getHighlightSimplePost(mixed $field_override): mixed
-----
METHOD SolrQuery::getHighlightSimplePre
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field_override
     * @return string
     */
    function getHighlightSimplePre(mixed $field_override): mixed
-----
METHOD SolrQuery::getHighlightSnippets
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field_override
     * @return int
     */
    function getHighlightSnippets(mixed $field_override): mixed
-----
METHOD SolrQuery::getHighlightUsePhraseHighlighter
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function getHighlightUsePhraseHighlighter(): mixed
-----
METHOD SolrQuery::getMlt
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function getMlt(): mixed
-----
METHOD SolrQuery::getMltBoost
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function getMltBoost(): mixed
-----
METHOD SolrQuery::getMltCount
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getMltCount(): mixed
-----
METHOD SolrQuery::getMltFields
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getMltFields(): mixed
-----
METHOD SolrQuery::getMltMaxNumQueryTerms
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getMltMaxNumQueryTerms(): mixed
-----
METHOD SolrQuery::getMltMaxNumTokens
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getMltMaxNumTokens(): mixed
-----
METHOD SolrQuery::getMltMaxWordLength
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getMltMaxWordLength(): mixed
-----
METHOD SolrQuery::getMltMinDocFrequency
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getMltMinDocFrequency(): mixed
-----
METHOD SolrQuery::getMltMinTermFrequency
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getMltMinTermFrequency(): mixed
-----
METHOD SolrQuery::getMltMinWordLength
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getMltMinWordLength(): mixed
-----
METHOD SolrQuery::getMltQueryFields
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getMltQueryFields(): mixed
-----
METHOD SolrQuery::getQuery
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getQuery(): mixed
-----
METHOD SolrQuery::getRows
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getRows(): mixed
-----
METHOD SolrQuery::getSortFields
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getSortFields(): mixed
-----
METHOD SolrQuery::getStart
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getStart(): mixed
-----
METHOD SolrQuery::getStats
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function getStats(): mixed
-----
METHOD SolrQuery::getStatsFacets
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getStatsFacets(): mixed
-----
METHOD SolrQuery::getStatsFields
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getStatsFields(): mixed
-----
METHOD SolrQuery::getTerms
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function getTerms(): mixed
-----
METHOD SolrQuery::getTermsField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getTermsField(): mixed
-----
METHOD SolrQuery::getTermsIncludeLowerBound
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function getTermsIncludeLowerBound(): mixed
-----
METHOD SolrQuery::getTermsIncludeUpperBound
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function getTermsIncludeUpperBound(): mixed
-----
METHOD SolrQuery::getTermsLimit
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getTermsLimit(): mixed
-----
METHOD SolrQuery::getTermsLowerBound
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getTermsLowerBound(): mixed
-----
METHOD SolrQuery::getTermsMaxCount
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getTermsMaxCount(): mixed
-----
METHOD SolrQuery::getTermsMinCount
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getTermsMinCount(): mixed
-----
METHOD SolrQuery::getTermsPrefix
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getTermsPrefix(): mixed
-----
METHOD SolrQuery::getTermsReturnRaw
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function getTermsReturnRaw(): mixed
-----
METHOD SolrQuery::getTermsSort
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getTermsSort(): mixed
-----
METHOD SolrQuery::getTermsUpperBound
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getTermsUpperBound(): mixed
-----
METHOD SolrQuery::getTimeAllowed
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getTimeAllowed(): mixed
-----
METHOD SolrQuery::removeExpandFilterQuery
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $fq
     * @return SolrQuery
     */
    function removeExpandFilterQuery(mixed $fq): mixed
-----
METHOD SolrQuery::removeExpandSortField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field
     * @return SolrQuery
     */
    function removeExpandSortField(mixed $field): mixed
-----
METHOD SolrQuery::removeFacetDateField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field
     * @return SolrQuery
     */
    function removeFacetDateField(mixed $field): mixed
-----
METHOD SolrQuery::removeFacetDateOther
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $value
     * @param string $field_override
     * @return SolrQuery
     */
    function removeFacetDateOther(mixed $value, mixed $field_override): mixed
-----
METHOD SolrQuery::removeFacetField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field
     * @return SolrQuery
     */
    function removeFacetField(mixed $field): mixed
-----
METHOD SolrQuery::removeFacetQuery
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $value
     * @return SolrQuery
     */
    function removeFacetQuery(mixed $value): mixed
-----
METHOD SolrQuery::removeField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field
     * @return SolrQuery
     */
    function removeField(mixed $field): mixed
-----
METHOD SolrQuery::removeFilterQuery
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $fq
     * @return SolrQuery
     */
    function removeFilterQuery(mixed $fq): mixed
-----
METHOD SolrQuery::removeHighlightField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field
     * @return SolrQuery
     */
    function removeHighlightField(mixed $field): mixed
-----
METHOD SolrQuery::removeMltField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field
     * @return SolrQuery
     */
    function removeMltField(mixed $field): mixed
-----
METHOD SolrQuery::removeMltQueryField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $queryField
     * @return SolrQuery
     */
    function removeMltQueryField(mixed $queryField): mixed
-----
METHOD SolrQuery::removeSortField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field
     * @return SolrQuery
     */
    function removeSortField(mixed $field): mixed
-----
METHOD SolrQuery::removeStatsFacet
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $value
     * @return SolrQuery
     */
    function removeStatsFacet(mixed $value): mixed
-----
METHOD SolrQuery::removeStatsField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field
     * @return SolrQuery
     */
    function removeStatsField(mixed $field): mixed
-----
METHOD SolrQuery::setEchoHandler
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $flag
     * @return SolrQuery
     */
    function setEchoHandler(mixed $flag): mixed
-----
METHOD SolrQuery::setEchoParams
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $type
     * @return SolrQuery
     */
    function setEchoParams(mixed $type): mixed
-----
METHOD SolrQuery::setExpand
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $value
     * @return SolrQuery
     */
    function setExpand(mixed $value): mixed
-----
METHOD SolrQuery::setExpandQuery
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $q
     * @return SolrQuery
     */
    function setExpandQuery(mixed $q): mixed
-----
METHOD SolrQuery::setExpandRows
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $value
     * @return SolrQuery
     */
    function setExpandRows(mixed $value): mixed
-----
METHOD SolrQuery::setExplainOther
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $query
     * @return SolrQuery
     */
    function setExplainOther(mixed $query): mixed
-----
METHOD SolrQuery::setFacet
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $flag
     * @return SolrQuery
     */
    function setFacet(mixed $flag): mixed
-----
METHOD SolrQuery::setFacetDateEnd
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $value
     * @param string $field_override
     * @return SolrQuery
     */
    function setFacetDateEnd(mixed $value, mixed $field_override): mixed
-----
METHOD SolrQuery::setFacetDateGap
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $value
     * @param string $field_override
     * @return SolrQuery
     */
    function setFacetDateGap(mixed $value, mixed $field_override): mixed
-----
METHOD SolrQuery::setFacetDateHardEnd
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $value
     * @param string $field_override
     * @return SolrQuery
     */
    function setFacetDateHardEnd(mixed $value, mixed $field_override): mixed
-----
METHOD SolrQuery::setFacetDateStart
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $value
     * @param string $field_override
     * @return SolrQuery
     */
    function setFacetDateStart(mixed $value, mixed $field_override): mixed
-----
METHOD SolrQuery::setFacetEnumCacheMinDefaultFrequency
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $frequency
     * @param string $field_override
     * @return SolrQuery
     */
    function setFacetEnumCacheMinDefaultFrequency(mixed $frequency, mixed $field_override): mixed
-----
METHOD SolrQuery::setFacetLimit
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $limit
     * @param string $field_override
     * @return SolrQuery
     */
    function setFacetLimit(mixed $limit, mixed $field_override): mixed
-----
METHOD SolrQuery::setFacetMethod
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $method
     * @param string $field_override
     * @return SolrQuery
     */
    function setFacetMethod(mixed $method, mixed $field_override): mixed
-----
METHOD SolrQuery::setFacetMinCount
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $mincount
     * @param string $field_override
     * @return SolrQuery
     */
    function setFacetMinCount(mixed $mincount, mixed $field_override): mixed
-----
METHOD SolrQuery::setFacetMissing
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $flag
     * @param string $field_override
     * @return SolrQuery
     */
    function setFacetMissing(mixed $flag, mixed $field_override): mixed
-----
METHOD SolrQuery::setFacetOffset
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $offset
     * @param string $field_override
     * @return SolrQuery
     */
    function setFacetOffset(mixed $offset, mixed $field_override): mixed
-----
METHOD SolrQuery::setFacetPrefix
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $prefix
     * @param string $field_override
     * @return SolrQuery
     */
    function setFacetPrefix(mixed $prefix, mixed $field_override): mixed
-----
METHOD SolrQuery::setFacetSort
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $facetSort
     * @param string $field_override
     * @return SolrQuery
     */
    function setFacetSort(mixed $facetSort, mixed $field_override): mixed
-----
METHOD SolrQuery::setGroup
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $value
     * @return SolrQuery
     */
    function setGroup(mixed $value): mixed
-----
METHOD SolrQuery::setGroupCachePercent
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $percent
     * @return SolrQuery
     */
    function setGroupCachePercent(mixed $percent): mixed
-----
METHOD SolrQuery::setGroupFacet
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $value
     * @return SolrQuery
     */
    function setGroupFacet(mixed $value): mixed
-----
METHOD SolrQuery::setGroupFormat
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $value
     * @return SolrQuery
     */
    function setGroupFormat(mixed $value): mixed
-----
METHOD SolrQuery::setGroupLimit
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $value
     * @return SolrQuery
     */
    function setGroupLimit(mixed $value): mixed
-----
METHOD SolrQuery::setGroupMain
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $value
     * @return SolrQuery
     */
    function setGroupMain(mixed $value): mixed
-----
METHOD SolrQuery::setGroupNGroups
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $value
     * @return SolrQuery
     */
    function setGroupNGroups(mixed $value): mixed
-----
METHOD SolrQuery::setGroupOffset
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $value
     * @return SolrQuery
     */
    function setGroupOffset(mixed $value): mixed
-----
METHOD SolrQuery::setGroupTruncate
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $value
     * @return SolrQuery
     */
    function setGroupTruncate(mixed $value): mixed
-----
METHOD SolrQuery::setHighlight
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $flag
     * @return SolrQuery
     */
    function setHighlight(mixed $flag): mixed
-----
METHOD SolrQuery::setHighlightAlternateField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $field
     * @param string $field_override
     * @return SolrQuery
     */
    function setHighlightAlternateField(mixed $field, mixed $field_override): mixed
-----
METHOD SolrQuery::setHighlightFormatter
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $formatter
     * @param string $field_override
     * @return SolrQuery
     */
    function setHighlightFormatter(mixed $formatter, mixed $field_override): mixed
-----
METHOD SolrQuery::setHighlightFragmenter
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $fragmenter
     * @param string $field_override
     * @return SolrQuery
     */
    function setHighlightFragmenter(mixed $fragmenter, mixed $field_override): mixed
-----
METHOD SolrQuery::setHighlightFragsize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $size
     * @param string $field_override
     * @return SolrQuery
     */
    function setHighlightFragsize(mixed $size, mixed $field_override): mixed
-----
METHOD SolrQuery::setHighlightHighlightMultiTerm
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $flag
     * @return SolrQuery
     */
    function setHighlightHighlightMultiTerm(mixed $flag): mixed
-----
METHOD SolrQuery::setHighlightMaxAlternateFieldLength
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $fieldLength
     * @param string $field_override
     * @return SolrQuery
     */
    function setHighlightMaxAlternateFieldLength(mixed $fieldLength, mixed $field_override): mixed
-----
METHOD SolrQuery::setHighlightMaxAnalyzedChars
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $value
     * @return SolrQuery
     */
    function setHighlightMaxAnalyzedChars(mixed $value): mixed
-----
METHOD SolrQuery::setHighlightMergeContiguous
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $flag
     * @param string $field_override
     * @return SolrQuery
     */
    function setHighlightMergeContiguous(mixed $flag, mixed $field_override): mixed
-----
METHOD SolrQuery::setHighlightRegexMaxAnalyzedChars
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $maxAnalyzedChars
     * @return SolrQuery
     */
    function setHighlightRegexMaxAnalyzedChars(mixed $maxAnalyzedChars): mixed
-----
METHOD SolrQuery::setHighlightRegexPattern
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $value
     * @return SolrQuery
     */
    function setHighlightRegexPattern(mixed $value): mixed
-----
METHOD SolrQuery::setHighlightRegexSlop
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $factor
     * @return SolrQuery
     */
    function setHighlightRegexSlop(mixed $factor): mixed
-----
METHOD SolrQuery::setHighlightRequireFieldMatch
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $flag
     * @return SolrQuery
     */
    function setHighlightRequireFieldMatch(mixed $flag): mixed
-----
METHOD SolrQuery::setHighlightSimplePost
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $simplePost
     * @param string $field_override
     * @return SolrQuery
     */
    function setHighlightSimplePost(mixed $simplePost, mixed $field_override): mixed
-----
METHOD SolrQuery::setHighlightSimplePre
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $simplePre
     * @param string $field_override
     * @return SolrQuery
     */
    function setHighlightSimplePre(mixed $simplePre, mixed $field_override): mixed
-----
METHOD SolrQuery::setHighlightSnippets
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $value
     * @param string $field_override
     * @return SolrQuery
     */
    function setHighlightSnippets(mixed $value, mixed $field_override): mixed
-----
METHOD SolrQuery::setHighlightUsePhraseHighlighter
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $flag
     * @return SolrQuery
     */
    function setHighlightUsePhraseHighlighter(mixed $flag): mixed
-----
METHOD SolrQuery::setMlt
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $flag
     * @return SolrQuery
     */
    function setMlt(mixed $flag): mixed
-----
METHOD SolrQuery::setMltBoost
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $flag
     * @return SolrQuery
     */
    function setMltBoost(mixed $flag): mixed
-----
METHOD SolrQuery::setMltCount
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $count
     * @return SolrQuery
     */
    function setMltCount(mixed $count): mixed
-----
METHOD SolrQuery::setMltMaxNumQueryTerms
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $value
     * @return SolrQuery
     */
    function setMltMaxNumQueryTerms(mixed $value): mixed
-----
METHOD SolrQuery::setMltMaxNumTokens
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $value
     * @return SolrQuery
     */
    function setMltMaxNumTokens(mixed $value): mixed
-----
METHOD SolrQuery::setMltMaxWordLength
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $maxWordLength
     * @return SolrQuery
     */
    function setMltMaxWordLength(mixed $maxWordLength): mixed
-----
METHOD SolrQuery::setMltMinDocFrequency
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $minDocFrequency
     * @return SolrQuery
     */
    function setMltMinDocFrequency(mixed $minDocFrequency): mixed
-----
METHOD SolrQuery::setMltMinTermFrequency
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $minTermFrequency
     * @return SolrQuery
     */
    function setMltMinTermFrequency(mixed $minTermFrequency): mixed
-----
METHOD SolrQuery::setMltMinWordLength
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $minWordLength
     * @return SolrQuery
     */
    function setMltMinWordLength(mixed $minWordLength): mixed
-----
METHOD SolrQuery::setOmitHeader
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $flag
     * @return SolrQuery
     */
    function setOmitHeader(mixed $flag): mixed
-----
METHOD SolrQuery::setQuery
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $query
     * @return SolrQuery
     */
    function setQuery(mixed $query): mixed
-----
METHOD SolrQuery::setRows
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $rows
     * @return SolrQuery
     */
    function setRows(mixed $rows): mixed
-----
METHOD SolrQuery::setShowDebugInfo
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $flag
     * @return SolrQuery
     */
    function setShowDebugInfo(mixed $flag): mixed
-----
METHOD SolrQuery::setStart
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $start
     * @return SolrQuery
     */
    function setStart(mixed $start): mixed
-----
METHOD SolrQuery::setStats
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $flag
     * @return SolrQuery
     */
    function setStats(mixed $flag): mixed
-----
METHOD SolrQuery::setTerms
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $flag
     * @return SolrQuery
     */
    function setTerms(mixed $flag): mixed
-----
METHOD SolrQuery::setTermsField
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $fieldname
     * @return SolrQuery
     */
    function setTermsField(mixed $fieldname): mixed
-----
METHOD SolrQuery::setTermsIncludeLowerBound
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $flag
     * @return SolrQuery
     */
    function setTermsIncludeLowerBound(mixed $flag): mixed
-----
METHOD SolrQuery::setTermsIncludeUpperBound
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $flag
     * @return SolrQuery
     */
    function setTermsIncludeUpperBound(mixed $flag): mixed
-----
METHOD SolrQuery::setTermsLimit
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $limit
     * @return SolrQuery
     */
    function setTermsLimit(mixed $limit): mixed
-----
METHOD SolrQuery::setTermsLowerBound
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $lowerBound
     * @return SolrQuery
     */
    function setTermsLowerBound(mixed $lowerBound): mixed
-----
METHOD SolrQuery::setTermsMaxCount
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $frequency
     * @return SolrQuery
     */
    function setTermsMaxCount(mixed $frequency): mixed
-----
METHOD SolrQuery::setTermsMinCount
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $frequency
     * @return SolrQuery
     */
    function setTermsMinCount(mixed $frequency): mixed
-----
METHOD SolrQuery::setTermsPrefix
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $prefix
     * @return SolrQuery
     */
    function setTermsPrefix(mixed $prefix): mixed
-----
METHOD SolrQuery::setTermsReturnRaw
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $flag
     * @return SolrQuery
     */
    function setTermsReturnRaw(mixed $flag): mixed
-----
METHOD SolrQuery::setTermsSort
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $sortType
     * @return SolrQuery
     */
    function setTermsSort(mixed $sortType): mixed
-----
METHOD SolrQuery::setTermsUpperBound
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $upperBound
     * @return SolrQuery
     */
    function setTermsUpperBound(mixed $upperBound): mixed
-----
METHOD SolrQuery::setTimeAllowed
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $timeAllowed
     * @return SolrQuery
     */
    function setTimeAllowed(mixed $timeAllowed): mixed
-----
CLASS SolrQueryResponse
-----
final class SolrQueryResponse extends SolrResponse
{
}
-----
METHOD SolrQueryResponse::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD SolrQueryResponse::__destruct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function __destruct(): mixed
-----
CLASS SolrResponse
-----
abstract class SolrResponse
{
}
-----
METHOD SolrResponse::getDigestedResponse
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getDigestedResponse(): mixed
-----
METHOD SolrResponse::getHttpStatus
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getHttpStatus(): mixed
-----
METHOD SolrResponse::getHttpStatusMessage
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getHttpStatusMessage(): mixed
-----
METHOD SolrResponse::getRawRequest
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getRawRequest(): mixed
-----
METHOD SolrResponse::getRawRequestHeaders
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getRawRequestHeaders(): mixed
-----
METHOD SolrResponse::getRawResponse
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getRawResponse(): mixed
-----
METHOD SolrResponse::getRawResponseHeaders
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getRawResponseHeaders(): mixed
-----
METHOD SolrResponse::getRequestUrl
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getRequestUrl(): mixed
-----
METHOD SolrResponse::getResponse
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return SolrObject
     */
    function getResponse(): mixed
-----
METHOD SolrResponse::setParseMode
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $parser_mode
     * @return bool
     */
    function setParseMode(mixed $parser_mode = 0): mixed
-----
METHOD SolrResponse::success
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function success(): mixed
-----
CLASS SolrServerException
-----
class SolrServerException extends SolrException
{
}
-----
METHOD SolrServerException::getInternalInfo
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getInternalInfo(): mixed
-----
CLASS SolrUpdateResponse
-----
final class SolrUpdateResponse extends SolrResponse
{
}
-----
METHOD SolrUpdateResponse::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD SolrUpdateResponse::__destruct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function __destruct(): mixed
-----
CLASS SolrUtils
-----
abstract class SolrUtils
{
}
-----
METHOD SolrUtils::digestXmlResponse
-----
Has side-effects: Maybe
Throw type: SolrException
Static
Visibility: public
Variants: 1
    /**
     * @param string $xmlresponse
     * @param int $parse_mode
     * @return SolrObject
     */
    function digestXmlResponse(mixed $xmlresponse, mixed $parse_mode = 0): mixed
-----
METHOD SolrUtils::escapeQueryChars
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $str
     * @return string|false
     */
    function escapeQueryChars(mixed $str): mixed
-----
METHOD SolrUtils::getSolrVersion
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getSolrVersion(): mixed
-----
METHOD SolrUtils::queryPhrase
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $str
     * @return string
     */
    function queryPhrase(mixed $str): mixed
-----
CLASS SplDoublyLinkedList
-----
class SplDoublyLinkedList implements Iterator, Countable, ArrayAccess, Serializable
{
}
-----
METHOD SplDoublyLinkedList::add
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @param TValue (class SplDoublyLinkedList, parameter) $value
     * @return void
     */
    function add(int $index, mixed $value): mixed
-----
METHOD SplDoublyLinkedList::bottom
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return TValue (class SplDoublyLinkedList, parameter)
     */
    function bottom(): mixed
-----
METHOD SplDoublyLinkedList::count
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function count(): mixed
-----
METHOD SplDoublyLinkedList::current
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return TValue (class SplDoublyLinkedList, parameter)
     */
    function current(): mixed
-----
METHOD SplDoublyLinkedList::getIteratorMode
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getIteratorMode(): mixed
-----
METHOD SplDoublyLinkedList::isEmpty
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isEmpty(): mixed
-----
METHOD SplDoublyLinkedList::key
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function key(): mixed
-----
METHOD SplDoublyLinkedList::next
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): mixed
-----
METHOD SplDoublyLinkedList::offsetExists
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @return bool
     */
    function offsetExists(mixed $index): mixed
-----
METHOD SplDoublyLinkedList::offsetGet
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @return TValue (class SplDoublyLinkedList, parameter)
     */
    function offsetGet(mixed $index): mixed
-----
METHOD SplDoublyLinkedList::offsetSet
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int|null $index
     * @param TValue (class SplDoublyLinkedList, parameter) $value
     * @return void
     */
    function offsetSet(mixed $index, mixed $value): mixed
-----
METHOD SplDoublyLinkedList::offsetUnset
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @return void
     */
    function offsetUnset(mixed $index): mixed
-----
METHOD SplDoublyLinkedList::pop
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return TValue (class SplDoublyLinkedList, parameter)
     */
    function pop(): mixed
-----
METHOD SplDoublyLinkedList::prev
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function prev(): mixed
-----
METHOD SplDoublyLinkedList::push
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param TValue (class SplDoublyLinkedList, parameter) $value
     * @return void
     */
    function push(mixed $value): mixed
-----
METHOD SplDoublyLinkedList::rewind
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): mixed
-----
METHOD SplDoublyLinkedList::serialize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function serialize(): mixed
-----
METHOD SplDoublyLinkedList::setIteratorMode
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $mode
     * @return int
     */
    function setIteratorMode(int $mode): mixed
-----
METHOD SplDoublyLinkedList::shift
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return TValue (class SplDoublyLinkedList, parameter)
     */
    function shift(): mixed
-----
METHOD SplDoublyLinkedList::top
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return TValue (class SplDoublyLinkedList, parameter)
     */
    function top(): mixed
-----
METHOD SplDoublyLinkedList::unserialize
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return void
     */
    function unserialize(string $data): mixed
-----
METHOD SplDoublyLinkedList::unshift
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param TValue (class SplDoublyLinkedList, parameter) $value
     * @return void
     */
    function unshift(mixed $value): mixed
-----
METHOD SplDoublyLinkedList::valid
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function valid(): mixed
-----
CLASS SplFileInfo
-----
class SplFileInfo implements Stringable
{
}
-----
METHOD SplFileInfo::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @return void
     */
    function __construct(string $filename): mixed
-----
METHOD SplFileInfo::__toString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): string
-----
METHOD SplFileInfo::getATime
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return (int|false)
     */
    function getATime(): mixed
-----
METHOD SplFileInfo::getBasename
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $suffix
     * @return string
     */
    function getBasename(string $suffix = ''): mixed
-----
METHOD SplFileInfo::getCTime
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getCTime(): mixed
-----
METHOD SplFileInfo::getExtension
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getExtension(): mixed
-----
METHOD SplFileInfo::getFileInfo
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string|null $class
     * @return SplFileInfo
     */
    function getFileInfo(string|null $class = null): mixed
-----
METHOD SplFileInfo::getFilename
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getFilename(): mixed
-----
METHOD SplFileInfo::getGroup
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return (int|false)
     */
    function getGroup(): mixed
-----
METHOD SplFileInfo::getInode
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return (int|false)
     */
    function getInode(): mixed
-----
METHOD SplFileInfo::getLinkTarget
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return (string|false)
     */
    function getLinkTarget(): mixed
-----
METHOD SplFileInfo::getMTime
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return (int|false)
     */
    function getMTime(): mixed
-----
METHOD SplFileInfo::getOwner
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return (int|false)
     */
    function getOwner(): mixed
-----
METHOD SplFileInfo::getPath
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getPath(): mixed
-----
METHOD SplFileInfo::getPathInfo
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string|null $class
     * @return SplFileInfo
     */
    function getPathInfo(string|null $class = null): mixed
-----
METHOD SplFileInfo::getPathname
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getPathname(): mixed
-----
METHOD SplFileInfo::getPerms
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return (int|false)
     */
    function getPerms(): mixed
-----
METHOD SplFileInfo::getRealPath
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return (string|false)
     */
    function getRealPath(): mixed
-----
METHOD SplFileInfo::getSize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return (int|false)
     */
    function getSize(): mixed
-----
METHOD SplFileInfo::getType
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return (string|false)
     */
    function getType(): mixed
-----
METHOD SplFileInfo::isDir
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isDir(): mixed
-----
METHOD SplFileInfo::isExecutable
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isExecutable(): mixed
-----
METHOD SplFileInfo::isFile
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isFile(): mixed
-----
METHOD SplFileInfo::isLink
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isLink(): mixed
-----
METHOD SplFileInfo::isReadable
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isReadable(): mixed
-----
METHOD SplFileInfo::isWritable
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isWritable(): mixed
-----
METHOD SplFileInfo::openFile
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $mode
     * @param bool $useIncludePath
     * @param resource|null $context
     * @return SplFileObject
     */
    function openFile(string $mode = 'r', bool $useIncludePath = false, mixed $context = null): mixed
-----
METHOD SplFileInfo::setFileClass
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $class
     * @return void
     */
    function setFileClass(string $class = 'SplFileObject'): mixed
-----
METHOD SplFileInfo::setInfoClass
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $class
     * @return void
     */
    function setInfoClass(string $class = 'SplFileInfo'): mixed
-----
CLASS SplFileObject
-----
class SplFileObject extends SplFileInfo implements RecursiveIterator, SeekableIterator
{
}
-----
METHOD SplFileObject::__construct
-----
Has side-effects: Maybe
Throw type: LogicException|RuntimeException
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @param string $mode
     * @param bool $useIncludePath
     * @param resource|null $context
     * @return void
     */
    function __construct(string $filename, string $mode = 'r', bool $useIncludePath = false, mixed $context = null): mixed
-----
METHOD SplFileObject::__toString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): string
-----
METHOD SplFileObject::current
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array|string|false
     */
    function current(): mixed
-----
METHOD SplFileObject::eof
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function eof(): mixed
-----
METHOD SplFileObject::fflush
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function fflush(): mixed
-----
METHOD SplFileObject::fgetc
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string|false
     */
    function fgetc(): mixed
-----
METHOD SplFileObject::fgetcsv
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $separator
     * @param string $enclosure
     * @param string $escape
     * @return array<int, string|null>|false|null
     */
    function fgetcsv(string $separator = ',', string $enclosure = '"', string $escape = '\\'): mixed
-----
METHOD SplFileObject::fgets
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string|false
     */
    function fgets(): mixed
-----
METHOD SplFileObject::fgetss
-----
MISSING
-----
METHOD SplFileObject::flock
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $operation
     * @param int $wouldBlock
     * @return bool
     */
    function flock(int $operation, mixed &rw$wouldBlock = null): mixed
-----
METHOD SplFileObject::fpassthru
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function fpassthru(): mixed
-----
METHOD SplFileObject::fputcsv
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $fields
     * @param string $separator
     * @param string $enclosure
     * @param string $escape
     * @param string $eol
     * @return int|false
     */
    function fputcsv(array $fields, string $separator = ',', string $enclosure = '"', string $escape = '\\', string $eol = "\n"): mixed
-----
METHOD SplFileObject::fread
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $length
     * @return string|false
     */
    function fread(int $length): mixed
-----
METHOD SplFileObject::fscanf
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $format
     * @param float|int|string $vars
     * @return bool
     */
    function fscanf(string $format, mixed ...&rw$vars): mixed
-----
METHOD SplFileObject::fseek
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $offset
     * @param int $whence
     * @return int
     */
    function fseek(int $offset, int $whence = 0): mixed
-----
METHOD SplFileObject::fstat
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function fstat(): mixed
-----
METHOD SplFileObject::ftell
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int|false
     */
    function ftell(): mixed
-----
METHOD SplFileObject::ftruncate
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $size
     * @return bool
     */
    function ftruncate(int $size): mixed
-----
METHOD SplFileObject::fwrite
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @param int $length
     * @return int
     */
    function fwrite(string $data, int $length = 0): mixed
-----
METHOD SplFileObject::getChildren
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return null
     */
    function getChildren(): mixed
-----
METHOD SplFileObject::getCsvControl
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getCsvControl(): mixed
-----
METHOD SplFileObject::getCurrentLine
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string|false
     */
    function getCurrentLine(): mixed
-----
METHOD SplFileObject::getFlags
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getFlags(): mixed
-----
METHOD SplFileObject::getMaxLineLen
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getMaxLineLen(): mixed
-----
METHOD SplFileObject::hasChildren
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return false
     */
    function hasChildren(): mixed
-----
METHOD SplFileObject::key
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function key(): mixed
-----
METHOD SplFileObject::next
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): mixed
-----
METHOD SplFileObject::rewind
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): mixed
-----
METHOD SplFileObject::seek
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $line
     * @return void
     */
    function seek(int $line): mixed
-----
METHOD SplFileObject::setCsvControl
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $separator
     * @param string $enclosure
     * @param string $escape
     * @return void
     */
    function setCsvControl(string $separator = ',', string $enclosure = '"', string $escape = '\\'): mixed
-----
METHOD SplFileObject::setFlags
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $flags
     * @return void
     */
    function setFlags(int $flags): mixed
-----
METHOD SplFileObject::setMaxLineLen
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $maxLength
     * @return void
     */
    function setMaxLineLen(int $maxLength): mixed
-----
METHOD SplFileObject::valid
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function valid(): mixed
-----
CLASS SplFixedArray
-----
class SplFixedArray implements ArrayAccess, Countable, IteratorAggregate, JsonSerializable
{
}
-----
METHOD SplFixedArray::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $size
     * @return void
     */
    function __construct(int $size = 0): mixed
-----
METHOD SplFixedArray::__serialize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function __serialize(): array
-----
METHOD SplFixedArray::__unserialize
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param array $data
     * @return void
     */
    function __unserialize(array $data): void
-----
METHOD SplFixedArray::__wakeup
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __wakeup(): mixed
-----
METHOD SplFixedArray::count
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function count(): mixed
-----
METHOD SplFixedArray::current
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function current(): mixed
-----
METHOD SplFixedArray::fromArray
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param array<int, TInput (method SplFixedArray::fromArray(), parameter)> $array
     * @param bool $preserveKeys
     * @return SplFixedArray<TInput (method SplFixedArray::fromArray(), parameter)>
     */
    function fromArray(array $array, bool $preserveKeys = true): mixed
-----
METHOD SplFixedArray::getIterator
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Traversable<int, TValue (class SplFixedArray, parameter)|null>
     */
    function getIterator(): Iterator
-----
METHOD SplFixedArray::getSize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getSize(): mixed
-----
METHOD SplFixedArray::jsonSerialize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function jsonSerialize(): array
-----
METHOD SplFixedArray::key
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function key(): mixed
-----
METHOD SplFixedArray::next
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): mixed
-----
METHOD SplFixedArray::offsetExists
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @return bool
     */
    function offsetExists(mixed $index): mixed
-----
METHOD SplFixedArray::offsetGet
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @return TValue (class SplFixedArray, parameter)|null
     */
    function offsetGet(mixed $index): mixed
-----
METHOD SplFixedArray::offsetSet
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int|null $index
     * @param TValue (class SplFixedArray, parameter)|null $value
     * @return void
     */
    function offsetSet(mixed $index, mixed $value): mixed
-----
METHOD SplFixedArray::offsetUnset
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @return void
     */
    function offsetUnset(mixed $index): mixed
-----
METHOD SplFixedArray::rewind
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): mixed
-----
METHOD SplFixedArray::setSize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $size
     * @return bool
     */
    function setSize(int $size): mixed
-----
METHOD SplFixedArray::toArray
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array<int, TValue (class SplFixedArray, parameter)|null>
     */
    function toArray(): mixed
-----
METHOD SplFixedArray::valid
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function valid(): mixed
-----
CLASS SplHeap
-----
abstract class SplHeap implements Iterator, Countable
{
}
-----
METHOD SplHeap::compare
-----
Has side-effects: Maybe
Visibility: protected
Variants: 1
    /**
     * @param mixed $value1
     * @param mixed $value2
     * @return int
     */
    function compare(mixed $value1, mixed $value2): mixed
-----
METHOD SplHeap::count
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int<0, max>
     */
    function count(): mixed
-----
METHOD SplHeap::current
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function current(): mixed
-----
METHOD SplHeap::extract
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function extract(): mixed
-----
METHOD SplHeap::insert
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $value
     * @return bool
     */
    function insert(mixed $value): mixed
-----
METHOD SplHeap::isCorrupted
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function isCorrupted(): mixed
-----
METHOD SplHeap::isEmpty
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isEmpty(): mixed
-----
METHOD SplHeap::key
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function key(): mixed
-----
METHOD SplHeap::next
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): mixed
-----
METHOD SplHeap::recoverFromCorruption
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function recoverFromCorruption(): mixed
-----
METHOD SplHeap::rewind
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): mixed
-----
METHOD SplHeap::top
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function top(): mixed
-----
METHOD SplHeap::valid
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function valid(): mixed
-----
CLASS SplMaxHeap
-----
class SplMaxHeap extends SplHeap
{
}
-----
METHOD SplMaxHeap::compare
-----
Has side-effects: Maybe
Visibility: protected
Variants: 1
    /**
     * @param mixed $value1
     * @param mixed $value2
     * @return int
     */
    function compare(mixed $value1, mixed $value2): mixed
-----
CLASS SplMinHeap
-----
class SplMinHeap extends SplHeap
{
}
-----
METHOD SplMinHeap::compare
-----
Has side-effects: Maybe
Visibility: protected
Variants: 1
    /**
     * @param mixed $value1
     * @param mixed $value2
     * @return int
     */
    function compare(mixed $value1, mixed $value2): mixed
-----
CLASS SplObjectStorage
-----
class SplObjectStorage implements Countable, Iterator, Serializable, ArrayAccess
{
}
-----
METHOD SplObjectStorage::addAll
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param SplObjectStorage<TObject of object (class SplObjectStorage, parameter), TData (class SplObjectStorage, parameter)> $storage
     * @return int<0, max>
     */
    function addAll(SplObjectStorage $storage): mixed
-----
METHOD SplObjectStorage::attach
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param TObject of object (class SplObjectStorage, parameter) $object
     * @param TData (class SplObjectStorage, parameter) $info
     * @return void
     */
    function attach(object $object, mixed $info = null): mixed
-----
METHOD SplObjectStorage::contains
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TObject of object (class SplObjectStorage, parameter) $object
     * @return bool
     */
    function contains(object $object): mixed
-----
METHOD SplObjectStorage::count
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $mode
     * @return int
     */
    function count(int $mode = 0): mixed
-----
METHOD SplObjectStorage::current
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return TObject of object (class SplObjectStorage, parameter)
     */
    function current(): mixed
-----
METHOD SplObjectStorage::detach
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param TObject of object (class SplObjectStorage, parameter) $object
     * @return void
     */
    function detach(object $object): mixed
-----
METHOD SplObjectStorage::getHash
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TObject of object (class SplObjectStorage, parameter) $object
     * @return string
     */
    function getHash(object $object): mixed
-----
METHOD SplObjectStorage::getInfo
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return TData (class SplObjectStorage, parameter)
     */
    function getInfo(): mixed
-----
METHOD SplObjectStorage::key
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function key(): mixed
-----
METHOD SplObjectStorage::next
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): mixed
-----
METHOD SplObjectStorage::offsetExists
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TObject of object (class SplObjectStorage, parameter) $object
     * @return bool
     */
    function offsetExists(mixed $object): mixed
-----
METHOD SplObjectStorage::offsetGet
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TObject of object (class SplObjectStorage, parameter) $object
     * @return TData (class SplObjectStorage, parameter)
     */
    function offsetGet(mixed $object): mixed
-----
METHOD SplObjectStorage::offsetSet
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param TObject of object (class SplObjectStorage, parameter)|null $object
     * @param TData (class SplObjectStorage, parameter) $info
     * @return void
     */
    function offsetSet(mixed $object, mixed $info = null): mixed
-----
METHOD SplObjectStorage::offsetUnset
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param TObject of object (class SplObjectStorage, parameter) $object
     * @return void
     */
    function offsetUnset(mixed $object): mixed
-----
METHOD SplObjectStorage::removeAll
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param SplObjectStorage<object, mixed> $storage
     * @return int<0, max>
     */
    function removeAll(SplObjectStorage $storage): mixed
-----
METHOD SplObjectStorage::removeAllExcept
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param SplObjectStorage<object, mixed> $storage
     * @return int<0, max>
     */
    function removeAllExcept(SplObjectStorage $storage): mixed
-----
METHOD SplObjectStorage::rewind
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): mixed
-----
METHOD SplObjectStorage::serialize
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function serialize(): mixed
-----
METHOD SplObjectStorage::setInfo
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param TData (class SplObjectStorage, parameter) $info
     * @return void
     */
    function setInfo(mixed $info): mixed
-----
METHOD SplObjectStorage::unserialize
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @return void
     */
    function unserialize(string $data): mixed
-----
METHOD SplObjectStorage::valid
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function valid(): mixed
-----
CLASS SplObserver
-----
interface SplObserver
{
}
-----
METHOD SplObserver::update
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param SplSubject $subject
     * @return void
     */
    function update(SplSubject $subject): mixed
-----
CLASS SplPriorityQueue
-----
class SplPriorityQueue implements Iterator, Countable
{
}
-----
METHOD SplPriorityQueue::compare
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TPriority (class SplPriorityQueue, parameter) $priority1
     * @param TPriority (class SplPriorityQueue, parameter) $priority2
     * @return int
     */
    function compare(mixed $priority1, mixed $priority2): mixed
-----
METHOD SplPriorityQueue::count
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function count(): mixed
-----
METHOD SplPriorityQueue::current
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array{priority: TPriority (class SplPriorityQueue, parameter), data: TValue (class SplPriorityQueue, parameter)}|TPriority (class SplPriorityQueue, parameter)|TValue (class SplPriorityQueue, parameter)
     */
    function current(): mixed
-----
METHOD SplPriorityQueue::extract
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array{priority: TPriority (class SplPriorityQueue, parameter), data: TValue (class SplPriorityQueue, parameter)}|TPriority (class SplPriorityQueue, parameter)|TValue (class SplPriorityQueue, parameter)
     */
    function extract(): mixed
-----
METHOD SplPriorityQueue::getExtractFlags
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getExtractFlags(): mixed
-----
METHOD SplPriorityQueue::insert
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TValue (class SplPriorityQueue, parameter) $value
     * @param TPriority (class SplPriorityQueue, parameter) $priority
     * @return true
     */
    function insert(mixed $value, mixed $priority): mixed
-----
METHOD SplPriorityQueue::isCorrupted
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isCorrupted(): mixed
-----
METHOD SplPriorityQueue::isEmpty
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isEmpty(): mixed
-----
METHOD SplPriorityQueue::key
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function key(): mixed
-----
METHOD SplPriorityQueue::next
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): mixed
-----
METHOD SplPriorityQueue::recoverFromCorruption
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function recoverFromCorruption(): mixed
-----
METHOD SplPriorityQueue::rewind
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): mixed
-----
METHOD SplPriorityQueue::setExtractFlags
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $flags
     * @return void
     */
    function setExtractFlags(int $flags): mixed
-----
METHOD SplPriorityQueue::top
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array{priority: TPriority (class SplPriorityQueue, parameter), data: TValue (class SplPriorityQueue, parameter)}|TPriority (class SplPriorityQueue, parameter)|TValue (class SplPriorityQueue, parameter)
     */
    function top(): mixed
-----
METHOD SplPriorityQueue::valid
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function valid(): mixed
-----
CLASS SplQueue
-----
class SplQueue extends SplDoublyLinkedList
{
}
-----
METHOD SplQueue::dequeue
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return TValue (class SplQueue, parameter)
     */
    function dequeue(): mixed
-----
METHOD SplQueue::enqueue
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param TValue (class SplQueue, parameter) $value
     * @return void
     */
    function enqueue(mixed $value): mixed
-----
CLASS SplSubject
-----
interface SplSubject
{
}
-----
METHOD SplSubject::attach
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param SplObserver $observer
     * @return void
     */
    function attach(SplObserver $observer): mixed
-----
METHOD SplSubject::detach
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param SplObserver $observer
     * @return void
     */
    function detach(SplObserver $observer): mixed
-----
METHOD SplSubject::notify
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function notify(): mixed
-----
CLASS SplTempFileObject
-----
class SplTempFileObject extends SplFileObject
{
}
-----
METHOD SplTempFileObject::__construct
-----
Has side-effects: Maybe
Throw type: RuntimeException
Visibility: public
Variants: 1
    /**
     * @param int $maxMemory
     * @return void
     */
    function __construct(int $maxMemory = 2097152): mixed
-----
CLASS Spoofchecker
-----
class Spoofchecker
{
}
-----
METHOD Spoofchecker::__construct
-----
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD Spoofchecker::areConfusable
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $string1
     * @param string $string2
     * @param int $errorCode
     * @return bool
     */
    function areConfusable(string $string1, string $string2, mixed &rw$errorCode = null): mixed
-----
METHOD Spoofchecker::isSuspicious
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $string
     * @param int $errorCode
     * @return bool
     */
    function isSuspicious(string $string, mixed &rw$errorCode = null): mixed
-----
METHOD Spoofchecker::setAllowedLocales
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $locales
     * @return void
     */
    function setAllowedLocales(string $locales): mixed
-----
METHOD Spoofchecker::setChecks
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $checks
     * @return void
     */
    function setChecks(int $checks): mixed
-----
CLASS SqlStatement
-----
MISSING
-----
CLASS SqlStatementResult
-----
MISSING
-----
CLASS Statement
-----
MISSING
-----
CLASS Stomp
-----
class Stomp
{
}
-----
METHOD Stomp::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $broker
     * @param string $username
     * @param string $password
     * @param array $headers
     * @return void
     */
    function __construct(mixed $broker = null, mixed $username = null, mixed $password = null, array $headers = array{}): mixed
-----
METHOD Stomp::__destruct
-----
MISSING
-----
METHOD Stomp::abort
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $transaction_id
     * @param array $headers
     * @param mixed $link
     * @return bool
     */
    function abort(mixed $transaction_id, mixed $headers, mixed $link): mixed
-----
METHOD Stomp::ack
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $msg
     * @param array $headers
     * @param mixed $link
     * @return bool
     */
    function ack(mixed $msg, array $headers = array{}, mixed $link): mixed
-----
METHOD Stomp::begin
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $transaction_id
     * @param array $headers
     * @param mixed $link
     * @return bool
     */
    function begin(mixed $transaction_id, mixed $headers, mixed $link): mixed
-----
METHOD Stomp::commit
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $transaction_id
     * @param array $headers
     * @param mixed $link
     * @return bool
     */
    function commit(mixed $transaction_id, mixed $headers, mixed $link): mixed
-----
METHOD Stomp::error
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $link
     * @return string
     */
    function error(mixed $link): mixed
-----
METHOD Stomp::getReadTimeout
-----
MISSING
-----
METHOD Stomp::getSessionId
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $link
     * @return string
     */
    function getSessionId(mixed $link): mixed
-----
METHOD Stomp::hasFrame
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $link
     * @return bool
     */
    function hasFrame(mixed $link): mixed
-----
METHOD Stomp::readFrame
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $className
     * @param mixed $link
     * @return array
     */
    function readFrame(mixed $className = 'stompFrame', mixed $link): mixed
-----
METHOD Stomp::send
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $destination
     * @param mixed $msg
     * @param array $headers
     * @param mixed $link
     * @return bool
     */
    function send(mixed $destination, mixed $msg, array $headers = array{}, mixed $link): mixed
-----
METHOD Stomp::setReadTimeout
-----
MISSING
-----
METHOD Stomp::subscribe
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $destination
     * @param array $headers
     * @param mixed $link
     * @return bool
     */
    function subscribe(mixed $destination, array $headers = array{}, mixed $link): mixed
-----
METHOD Stomp::unsubscribe
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $destination
     * @param array $headers
     * @param mixed $link
     * @return bool
     */
    function unsubscribe(mixed $destination, array $headers = array{}, mixed $link): mixed
-----
CLASS StompException
-----
class StompException extends Exception
{
}
-----
METHOD StompException::getDetails
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getDetails(): mixed
-----
CLASS StompFrame
-----
class StompFrame
{
}
-----
METHOD StompFrame::__construct
-----
MISSING
-----
CLASS Stringable
-----
Not builtin
interface Stringable
{
}
-----
METHOD Stringable::__toString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): string
-----
CLASS Swoole\Async
-----
MISSING
-----
CLASS Swoole\Atomic
-----
class Swoole\Atomic
{
}
-----
METHOD Swoole\Atomic::__construct
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $value
     * @return void
     */
    function __construct(int $value = 0): mixed
-----
METHOD Swoole\Atomic::add
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $add_value
     * @return int
     */
    function add(int $add_value = 1): mixed
-----
METHOD Swoole\Atomic::cmpset
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $cmp_value
     * @param int $new_value
     * @return bool
     */
    function cmpset(int $cmp_value, int $new_value): mixed
-----
METHOD Swoole\Atomic::get
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function get(): mixed
-----
METHOD Swoole\Atomic::set
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $value
     * @return mixed
     */
    function set(int $value): mixed
-----
METHOD Swoole\Atomic::sub
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $sub_value
     * @return int
     */
    function sub(int $sub_value = 1): mixed
-----
CLASS Swoole\Buffer
-----
MISSING
-----
CLASS Swoole\Channel
-----
MISSING
-----
CLASS Swoole\Client
-----
class Swoole\Client
{
}
-----
METHOD Swoole\Client::__construct
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $type
     * @param mixed $async
     * @param mixed $id
     * @return void
     */
    function __construct(mixed $type, mixed $async = null, mixed $id = null): mixed
-----
METHOD Swoole\Client::__destruct
-----
Is internal: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __destruct(): mixed
-----
METHOD Swoole\Client::close
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $force
     * @return mixed
     */
    function close(mixed $force = null): mixed
-----
METHOD Swoole\Client::connect
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $host
     * @param mixed $port
     * @param mixed $timeout
     * @param mixed $sock_flag
     * @return mixed
     */
    function connect(mixed $host, mixed $port = null, mixed $timeout = null, mixed $sock_flag = null): mixed
-----
METHOD Swoole\Client::getpeername
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function getpeername(): mixed
-----
METHOD Swoole\Client::getsockname
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function getsockname(): mixed
-----
METHOD Swoole\Client::isConnected
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function isConnected(): mixed
-----
METHOD Swoole\Client::on
-----
MISSING
-----
METHOD Swoole\Client::pause
-----
MISSING
-----
METHOD Swoole\Client::pipe
-----
MISSING
-----
METHOD Swoole\Client::recv
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $size
     * @param mixed $flag
     * @return mixed
     */
    function recv(mixed $size = null, mixed $flag = null): mixed
-----
METHOD Swoole\Client::resume
-----
MISSING
-----
METHOD Swoole\Client::send
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $data
     * @param mixed $flag
     * @return mixed
     */
    function send(mixed $data, mixed $flag = null): mixed
-----
METHOD Swoole\Client::sendfile
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $filename
     * @param mixed $offset
     * @param mixed $length
     * @return mixed
     */
    function sendfile(mixed $filename, mixed $offset = null, mixed $length = null): mixed
-----
METHOD Swoole\Client::sendto
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $ip
     * @param mixed $port
     * @param mixed $data
     * @return mixed
     */
    function sendto(mixed $ip, mixed $port, mixed $data): mixed
-----
METHOD Swoole\Client::set
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $settings
     * @return mixed
     */
    function set(array $settings): mixed
-----
METHOD Swoole\Client::sleep
-----
MISSING
-----
METHOD Swoole\Client::wakeup
-----
MISSING
-----
CLASS Swoole\Connection\Iterator
-----
class Swoole\Connection\Iterator implements Iterator, ArrayAccess, Countable
{
}
-----
METHOD Swoole\Connection\Iterator::count
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function count(): int
-----
METHOD Swoole\Connection\Iterator::current
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function current(): mixed
-----
METHOD Swoole\Connection\Iterator::key
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function key(): mixed
-----
METHOD Swoole\Connection\Iterator::next
-----
Is internal: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): void
-----
METHOD Swoole\Connection\Iterator::offsetExists
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $fd
     * @return bool
     */
    function offsetExists(mixed $fd): bool
-----
METHOD Swoole\Connection\Iterator::offsetGet
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $fd
     * @return mixed
     */
    function offsetGet(mixed $fd): mixed
-----
METHOD Swoole\Connection\Iterator::offsetSet
-----
Is internal: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param mixed $fd
     * @param mixed $value
     * @return void
     */
    function offsetSet(mixed $fd, mixed $value): void
-----
METHOD Swoole\Connection\Iterator::offsetUnset
-----
Is internal: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param mixed $fd
     * @return void
     */
    function offsetUnset(mixed $fd): void
-----
METHOD Swoole\Connection\Iterator::rewind
-----
Is internal: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): void
-----
METHOD Swoole\Connection\Iterator::valid
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function valid(): bool
-----
CLASS Swoole\Coroutine
-----
class Swoole\Coroutine
{
}
-----
METHOD Swoole\Coroutine::call_user_func
-----
MISSING
-----
METHOD Swoole\Coroutine::call_user_func_array
-----
MISSING
-----
METHOD Swoole\Coroutine::cli_wait
-----
MISSING
-----
METHOD Swoole\Coroutine::create
-----
Is internal: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $func
     * @param mixed $params
     * @return mixed
     */
    function create(callable(): mixed $func, mixed ...$params): mixed
-----
METHOD Swoole\Coroutine::getuid
-----
Is internal: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function getuid(): mixed
-----
METHOD Swoole\Coroutine::resume
-----
Is internal: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param mixed $cid
     * @return mixed
     */
    function resume(mixed $cid): mixed
-----
METHOD Swoole\Coroutine::suspend
-----
Is internal: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function suspend(): mixed
-----
CLASS Swoole\Coroutine\Client
-----
class Swoole\Coroutine\Client
{
}
-----
METHOD Swoole\Coroutine\Client::__construct
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $type
     * @return void
     */
    function __construct(mixed $type): mixed
-----
METHOD Swoole\Coroutine\Client::__destruct
-----
Is internal: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __destruct(): mixed
-----
METHOD Swoole\Coroutine\Client::close
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function close(): mixed
-----
METHOD Swoole\Coroutine\Client::connect
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $host
     * @param mixed $port
     * @param mixed $timeout
     * @param mixed $sock_flag
     * @return mixed
     */
    function connect(mixed $host, mixed $port = null, mixed $timeout = null, mixed $sock_flag = null): mixed
-----
METHOD Swoole\Coroutine\Client::getpeername
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function getpeername(): mixed
-----
METHOD Swoole\Coroutine\Client::getsockname
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function getsockname(): mixed
-----
METHOD Swoole\Coroutine\Client::isConnected
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function isConnected(): mixed
-----
METHOD Swoole\Coroutine\Client::recv
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $timeout
     * @return mixed
     */
    function recv(mixed $timeout = null): mixed
-----
METHOD Swoole\Coroutine\Client::send
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $data
     * @return mixed
     */
    function send(mixed $data): mixed
-----
METHOD Swoole\Coroutine\Client::sendfile
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $filename
     * @param mixed $offset
     * @param mixed $length
     * @return mixed
     */
    function sendfile(mixed $filename, mixed $offset = null, mixed $length = null): mixed
-----
METHOD Swoole\Coroutine\Client::sendto
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $address
     * @param mixed $port
     * @param mixed $data
     * @return mixed
     */
    function sendto(mixed $address, mixed $port, mixed $data): mixed
-----
METHOD Swoole\Coroutine\Client::set
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $settings
     * @return mixed
     */
    function set(array $settings): mixed
-----
CLASS Swoole\Coroutine\Http\Client
-----
class Swoole\Coroutine\Http\Client
{
}
-----
METHOD Swoole\Coroutine\Http\Client::__construct
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $host
     * @param mixed $port
     * @param mixed $ssl
     * @return void
     */
    function __construct(mixed $host, mixed $port = null, mixed $ssl = null): mixed
-----
METHOD Swoole\Coroutine\Http\Client::__destruct
-----
Is internal: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __destruct(): mixed
-----
METHOD Swoole\Coroutine\Http\Client::addFile
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $path
     * @param mixed $name
     * @param mixed $type
     * @param mixed $filename
     * @param mixed $offset
     * @param mixed $length
     * @return mixed
     */
    function addFile(mixed $path, mixed $name, mixed $type = null, mixed $filename = null, mixed $offset = null, mixed $length = null): mixed
-----
METHOD Swoole\Coroutine\Http\Client::close
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function close(): mixed
-----
METHOD Swoole\Coroutine\Http\Client::execute
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $path
     * @return mixed
     */
    function execute(mixed $path): mixed
-----
METHOD Swoole\Coroutine\Http\Client::get
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $path
     * @return mixed
     */
    function get(mixed $path): mixed
-----
METHOD Swoole\Coroutine\Http\Client::getDefer
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function getDefer(): mixed
-----
METHOD Swoole\Coroutine\Http\Client::isConnected
-----
MISSING
-----
METHOD Swoole\Coroutine\Http\Client::post
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $path
     * @param mixed $data
     * @return mixed
     */
    function post(mixed $path, mixed $data): mixed
-----
METHOD Swoole\Coroutine\Http\Client::recv
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $timeout
     * @return mixed
     */
    function recv(mixed $timeout = null): mixed
-----
METHOD Swoole\Coroutine\Http\Client::set
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $settings
     * @return mixed
     */
    function set(array $settings): mixed
-----
METHOD Swoole\Coroutine\Http\Client::setCookies
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $cookies
     * @return mixed
     */
    function setCookies(array $cookies): mixed
-----
METHOD Swoole\Coroutine\Http\Client::setData
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $data
     * @return mixed
     */
    function setData(mixed $data): mixed
-----
METHOD Swoole\Coroutine\Http\Client::setDefer
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $defer
     * @return mixed
     */
    function setDefer(mixed $defer = null): mixed
-----
METHOD Swoole\Coroutine\Http\Client::setHeaders
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $headers
     * @return mixed
     */
    function setHeaders(array $headers): mixed
-----
METHOD Swoole\Coroutine\Http\Client::setMethod
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $method
     * @return mixed
     */
    function setMethod(mixed $method): mixed
-----
CLASS Swoole\Coroutine\MySQL
-----
class Swoole\Coroutine\MySQL
{
}
-----
METHOD Swoole\Coroutine\MySQL::__construct
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD Swoole\Coroutine\MySQL::__destruct
-----
Is internal: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __destruct(): mixed
-----
METHOD Swoole\Coroutine\MySQL::close
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function close(): mixed
-----
METHOD Swoole\Coroutine\MySQL::connect
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array|null $server_config
     * @return mixed
     */
    function connect(array|null $server_config = null): mixed
-----
METHOD Swoole\Coroutine\MySQL::getDefer
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function getDefer(): mixed
-----
METHOD Swoole\Coroutine\MySQL::query
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $sql
     * @param mixed $timeout
     * @return mixed
     */
    function query(mixed $sql, mixed $timeout = null): mixed
-----
METHOD Swoole\Coroutine\MySQL::recv
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function recv(): mixed
-----
METHOD Swoole\Coroutine\MySQL::setDefer
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $defer
     * @return mixed
     */
    function setDefer(mixed $defer = null): mixed
-----
CLASS Swoole\Event
-----
class Swoole\Event
{
}
-----
METHOD Swoole\Event::add
-----
Is internal: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param mixed $fd
     * @param (callable(): mixed)|null $read_callback
     * @param (callable(): mixed)|null $write_callback
     * @param mixed $events
     * @return mixed
     */
    function add(mixed $fd, (callable(): mixed)|null $read_callback, (callable(): mixed)|null $write_callback = null, mixed $events = null): mixed
-----
METHOD Swoole\Event::defer
-----
Is internal: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @return true
     */
    function defer(callable(): mixed $callback): mixed
-----
METHOD Swoole\Event::del
-----
Is internal: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param mixed $fd
     * @return mixed
     */
    function del(mixed $fd): mixed
-----
METHOD Swoole\Event::exit
-----
Is internal: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function exit(): mixed
-----
METHOD Swoole\Event::set
-----
Is internal: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param mixed $fd
     * @param (callable(): mixed)|null $read_callback
     * @param (callable(): mixed)|null $write_callback
     * @param mixed $events
     * @return mixed
     */
    function set(mixed $fd, (callable(): mixed)|null $read_callback = null, (callable(): mixed)|null $write_callback = null, mixed $events = null): mixed
-----
METHOD Swoole\Event::wait
-----
Is internal: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function wait(): mixed
-----
METHOD Swoole\Event::write
-----
Is internal: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param mixed $fd
     * @param mixed $data
     * @return mixed
     */
    function write(mixed $fd, mixed $data): mixed
-----
CLASS Swoole\Http\Client
-----
MISSING
-----
CLASS Swoole\Http\Request
-----
class Swoole\Http\Request
{
}
-----
METHOD Swoole\Http\Request::__destruct
-----
Is internal: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __destruct(): mixed
-----
METHOD Swoole\Http\Request::rawcontent
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string|false
     */
    function rawContent(): mixed
-----
CLASS Swoole\Http\Response
-----
class Swoole\Http\Response
{
}
-----
METHOD Swoole\Http\Response::__destruct
-----
Is internal: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __destruct(): mixed
-----
METHOD Swoole\Http\Response::cookie
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $name
     * @param mixed $value
     * @param mixed $expires
     * @param mixed $path
     * @param mixed $domain
     * @param mixed $secure
     * @param mixed $httponly
     * @param mixed $samesite
     * @param mixed $priority
     * @return mixed
     */
    function cookie(mixed $name, mixed $value = null, mixed $expires = null, mixed $path = null, mixed $domain = null, mixed $secure = null, mixed $httponly = null, mixed $samesite = null, mixed $priority = null): mixed
-----
METHOD Swoole\Http\Response::end
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $content
     * @return mixed
     */
    function end(mixed $content = null): mixed
-----
METHOD Swoole\Http\Response::gzip
-----
MISSING
-----
METHOD Swoole\Http\Response::header
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $key
     * @param mixed $value
     * @param mixed $format
     * @return mixed
     */
    function header(mixed $key, mixed $value, mixed $format = null): mixed
-----
METHOD Swoole\Http\Response::initHeader
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function initHeader(): mixed
-----
METHOD Swoole\Http\Response::rawcookie
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $name
     * @param mixed $value
     * @param mixed $expires
     * @param mixed $path
     * @param mixed $domain
     * @param mixed $secure
     * @param mixed $httponly
     * @param mixed $samesite
     * @param mixed $priority
     * @return mixed
     */
    function rawcookie(mixed $name, mixed $value = null, mixed $expires = null, mixed $path = null, mixed $domain = null, mixed $secure = null, mixed $httponly = null, mixed $samesite = null, mixed $priority = null): mixed
-----
METHOD Swoole\Http\Response::sendfile
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $filename
     * @param mixed $offset
     * @param mixed $length
     * @return mixed
     */
    function sendfile(mixed $filename, mixed $offset = null, mixed $length = null): mixed
-----
METHOD Swoole\Http\Response::status
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $http_code
     * @param mixed $reason
     * @return mixed
     */
    function status(mixed $http_code, mixed $reason = null): mixed
-----
METHOD Swoole\Http\Response::write
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $content
     * @return mixed
     */
    function write(mixed $content): mixed
-----
CLASS Swoole\Http\Server
-----
class Swoole\Http\Server extends Swoole\Server
{
}
-----
METHOD Swoole\Http\Server::on
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $event_name
     * @param callable(): mixed $callback
     * @return mixed
     */
    function on(mixed $event_name, callable(): mixed $callback): mixed
-----
METHOD Swoole\Http\Server::start
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function start(): mixed
-----
CLASS Swoole\Lock
-----
class Swoole\Lock
{
}
-----
METHOD Swoole\Lock::__construct
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $type
     * @param string $filename
     * @return void
     */
    function __construct(int $type = 3, string $filename = ''): mixed
-----
METHOD Swoole\Lock::__destruct
-----
MISSING
-----
METHOD Swoole\Lock::lock
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function lock(): mixed
-----
METHOD Swoole\Lock::lock_read
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function lock_read(): mixed
-----
METHOD Swoole\Lock::trylock
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function trylock(): mixed
-----
METHOD Swoole\Lock::trylock_read
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function trylock_read(): mixed
-----
METHOD Swoole\Lock::unlock
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function unlock(): mixed
-----
CLASS Swoole\Mmap
-----
MISSING
-----
CLASS Swoole\MySQL
-----
MISSING
-----
CLASS Swoole\Process
-----
class Swoole\Process
{
}
-----
METHOD Swoole\Process::__construct
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @param mixed $redirect_stdin_and_stdout
     * @param mixed $pipe_type
     * @param mixed $enable_coroutine
     * @return void
     */
    function __construct(callable(): mixed $callback, mixed $redirect_stdin_and_stdout = null, mixed $pipe_type = null, mixed $enable_coroutine = null): mixed
-----
METHOD Swoole\Process::__destruct
-----
Is internal: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __destruct(): mixed
-----
METHOD Swoole\Process::alarm
-----
Is internal: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param mixed $usec
     * @param mixed $type
     * @return mixed
     */
    function alarm(mixed $usec, mixed $type = null): mixed
-----
METHOD Swoole\Process::close
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function close(): mixed
-----
METHOD Swoole\Process::daemon
-----
Is internal: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param mixed $nochdir
     * @param mixed $noclose
     * @param mixed $pipes
     * @return mixed
     */
    function daemon(mixed $nochdir = null, mixed $noclose = null, mixed $pipes = null): mixed
-----
METHOD Swoole\Process::exec
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $exec_file
     * @param mixed $args
     * @return mixed
     */
    function exec(mixed $exec_file, mixed $args): mixed
-----
METHOD Swoole\Process::exit
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $exit_code
     * @return mixed
     */
    function exit(mixed $exit_code = null): mixed
-----
METHOD Swoole\Process::freeQueue
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function freeQueue(): mixed
-----
METHOD Swoole\Process::kill
-----
Is internal: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param mixed $pid
     * @param mixed $signal_no
     * @return mixed
     */
    function kill(mixed $pid, mixed $signal_no = null): mixed
-----
METHOD Swoole\Process::name
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $process_name
     * @return mixed
     */
    function name(mixed $process_name): mixed
-----
METHOD Swoole\Process::pop
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $size
     * @return mixed
     */
    function pop(mixed $size = null): mixed
-----
METHOD Swoole\Process::push
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $data
     * @return mixed
     */
    function push(mixed $data): mixed
-----
METHOD Swoole\Process::read
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $size
     * @return mixed
     */
    function read(mixed $size = null): mixed
-----
METHOD Swoole\Process::signal
-----
Is internal: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param mixed $signal_no
     * @param mixed $callback
     * @return mixed
     */
    function signal(mixed $signal_no, mixed $callback): mixed
-----
METHOD Swoole\Process::start
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function start(): mixed
-----
METHOD Swoole\Process::statQueue
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function statQueue(): mixed
-----
METHOD Swoole\Process::useQueue
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $key
     * @param mixed $mode
     * @param mixed $capacity
     * @return mixed
     */
    function useQueue(mixed $key = null, mixed $mode = null, mixed $capacity = null): mixed
-----
METHOD Swoole\Process::wait
-----
Is internal: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param mixed $blocking
     * @return mixed
     */
    function wait(mixed $blocking = null): mixed
-----
METHOD Swoole\Process::write
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $data
     * @return mixed
     */
    function write(mixed $data): mixed
-----
CLASS Swoole\Redis\Server
-----
class Swoole\Redis\Server extends Swoole\Server
{
}
-----
METHOD Swoole\Redis\Server::format
-----
Is internal: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int $type
     * @param mixed $value
     * @return string|false
     */
    function format(int $type, mixed $value = null): mixed
-----
METHOD Swoole\Redis\Server::setHandler
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $command
     * @param callable(): mixed $callback
     * @return bool
     */
    function setHandler(string $command, callable(): mixed $callback): mixed
-----
METHOD Swoole\Redis\Server::start
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function start(): mixed
-----
CLASS Swoole\Serialize
-----
MISSING
-----
CLASS Swoole\Server
-----
class Swoole\Server
{
}
-----
METHOD Swoole\Server::__construct
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $host
     * @param mixed $port
     * @param mixed $mode
     * @param mixed $sock_type
     * @return void
     */
    function __construct(mixed $host, mixed $port = null, mixed $mode = null, mixed $sock_type = null): mixed
-----
METHOD Swoole\Server::addProcess
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param Swoole\Process $process
     * @return int|false
     */
    function addProcess(Swoole\Process $process): mixed
-----
METHOD Swoole\Server::addlistener
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $host
     * @param mixed $port
     * @param mixed $sock_type
     * @return mixed
     */
    function addlistener(mixed $host, mixed $port, mixed $sock_type): mixed
-----
METHOD Swoole\Server::after
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $ms
     * @param callable(): mixed $callback
     * @param mixed $params
     * @return int
     */
    function after(int $ms, callable(): mixed $callback, mixed ...$params): mixed
-----
METHOD Swoole\Server::bind
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $fd
     * @param mixed $uid
     * @return mixed
     */
    function bind(mixed $fd, mixed $uid): mixed
-----
METHOD Swoole\Server::clearTimer
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $timer_id
     * @return bool
     */
    function clearTimer(int $timer_id): mixed
-----
METHOD Swoole\Server::close
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $fd
     * @param mixed $reset
     * @return mixed
     */
    function close(mixed $fd, mixed $reset = null): mixed
-----
METHOD Swoole\Server::confirm
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $fd
     * @return mixed
     */
    function confirm(mixed $fd): mixed
-----
METHOD Swoole\Server::connection_info
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $fd
     * @param mixed $reactor_id
     * @return mixed
     */
    function connection_info(mixed $fd, mixed $reactor_id = null): mixed
-----
METHOD Swoole\Server::connection_list
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $start_fd
     * @param mixed $find_count
     * @return mixed
     */
    function connection_list(mixed $start_fd, mixed $find_count = null): mixed
-----
METHOD Swoole\Server::defer
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @return true
     */
    function defer(callable(): mixed $callback): mixed
-----
METHOD Swoole\Server::exist
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $fd
     * @return mixed
     */
    function exist(mixed $fd): mixed
-----
METHOD Swoole\Server::finish
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $data
     * @return mixed
     */
    function finish(mixed $data): mixed
-----
METHOD Swoole\Server::getClientInfo
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $fd
     * @param mixed $reactor_id
     * @return mixed
     */
    function getClientInfo(mixed $fd, mixed $reactor_id = null): mixed
-----
METHOD Swoole\Server::getClientList
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $start_fd
     * @param mixed $find_count
     * @return mixed
     */
    function getClientList(mixed $start_fd, mixed $find_count = null): mixed
-----
METHOD Swoole\Server::getLastError
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function getLastError(): mixed
-----
METHOD Swoole\Server::heartbeat
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $reactor_id
     * @return mixed
     */
    function heartbeat(mixed $reactor_id): mixed
-----
METHOD Swoole\Server::listen
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $host
     * @param mixed $port
     * @param mixed $sock_type
     * @return mixed
     */
    function listen(mixed $host, mixed $port, mixed $sock_type): mixed
-----
METHOD Swoole\Server::on
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $event_name
     * @param callable(): mixed $callback
     * @return mixed
     */
    function on(mixed $event_name, callable(): mixed $callback): mixed
-----
METHOD Swoole\Server::pause
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $fd
     * @return mixed
     */
    function pause(mixed $fd): mixed
-----
METHOD Swoole\Server::protect
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $fd
     * @param mixed $is_protected
     * @return mixed
     */
    function protect(mixed $fd, mixed $is_protected = null): mixed
-----
METHOD Swoole\Server::reload
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function reload(): mixed
-----
METHOD Swoole\Server::resume
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $fd
     * @return mixed
     */
    function resume(mixed $fd): mixed
-----
METHOD Swoole\Server::send
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $fd
     * @param mixed $send_data
     * @param mixed $server_socket
     * @return mixed
     */
    function send(mixed $fd, mixed $send_data, mixed $server_socket = null): mixed
-----
METHOD Swoole\Server::sendMessage
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $message
     * @param mixed $dst_worker_id
     * @return mixed
     */
    function sendMessage(mixed $message, mixed $dst_worker_id): mixed
-----
METHOD Swoole\Server::sendfile
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $conn_fd
     * @param mixed $filename
     * @param mixed $offset
     * @param mixed $length
     * @return mixed
     */
    function sendfile(mixed $conn_fd, mixed $filename, mixed $offset = null, mixed $length = null): mixed
-----
METHOD Swoole\Server::sendto
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $ip
     * @param mixed $port
     * @param mixed $send_data
     * @param mixed $server_socket
     * @return mixed
     */
    function sendto(mixed $ip, mixed $port, mixed $send_data, mixed $server_socket = null): mixed
-----
METHOD Swoole\Server::sendwait
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $conn_fd
     * @param mixed $send_data
     * @return mixed
     */
    function sendwait(mixed $conn_fd, mixed $send_data): mixed
-----
METHOD Swoole\Server::set
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $settings
     * @return mixed
     */
    function set(array $settings): mixed
-----
METHOD Swoole\Server::shutdown
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function shutdown(): mixed
-----
METHOD Swoole\Server::start
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function start(): mixed
-----
METHOD Swoole\Server::stats
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function stats(): mixed
-----
METHOD Swoole\Server::stop
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $worker_id
     * @return mixed
     */
    function stop(mixed $worker_id = null): mixed
-----
METHOD Swoole\Server::task
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $data
     * @param mixed $worker_id
     * @param (callable(): mixed)|null $finish_callback
     * @return mixed
     */
    function task(mixed $data, mixed $worker_id = null, (callable(): mixed)|null $finish_callback = null): mixed
-----
METHOD Swoole\Server::taskWaitMulti
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $tasks
     * @param mixed $timeout
     * @return mixed
     */
    function taskWaitMulti(array $tasks, mixed $timeout = null): mixed
-----
METHOD Swoole\Server::taskwait
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $data
     * @param mixed $timeout
     * @param mixed $worker_id
     * @return mixed
     */
    function taskwait(mixed $data, mixed $timeout = null, mixed $worker_id = null): mixed
-----
METHOD Swoole\Server::tick
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $ms
     * @param callable(): mixed $callback
     * @param mixed $params
     * @return int
     */
    function tick(int $ms, callable(): mixed $callback, mixed ...$params): mixed
-----
CLASS Swoole\Server\Port
-----
class Swoole\Server\Port
{
}
-----
METHOD Swoole\Server\Port::__construct
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: private
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD Swoole\Server\Port::__destruct
-----
Is internal: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __destruct(): mixed
-----
METHOD Swoole\Server\Port::on
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $event_name
     * @param callable(): mixed $callback
     * @return mixed
     */
    function on(mixed $event_name, callable(): mixed $callback): mixed
-----
METHOD Swoole\Server\Port::set
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $settings
     * @return mixed
     */
    function set(array $settings): mixed
-----
CLASS Swoole\Table
-----
class Swoole\Table implements Iterator, ArrayAccess, Countable
{
}
-----
METHOD Swoole\Table::__construct
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $table_size
     * @param float $conflict_proportion
     * @return void
     */
    function __construct(int $table_size, float $conflict_proportion = 0.2): mixed
-----
METHOD Swoole\Table::column
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param int $type
     * @param int $size
     * @return bool
     */
    function column(string $name, int $type, int $size = 0): mixed
-----
METHOD Swoole\Table::count
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function count(): mixed
-----
METHOD Swoole\Table::create
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function create(): mixed
-----
METHOD Swoole\Table::current
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function current(): mixed
-----
METHOD Swoole\Table::decr
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @param string $column
     * @param mixed $decrby
     * @return int
     */
    function decr(string $key, string $column, mixed $decrby = 1): mixed
-----
METHOD Swoole\Table::del
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @return bool
     */
    function del(string $key): mixed
-----
METHOD Swoole\Table::destroy
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function destroy(): mixed
-----
METHOD Swoole\Table::exist
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @return bool
     */
    function exist(string $key): mixed
-----
METHOD Swoole\Table::get
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @param string|null $field
     * @return mixed
     */
    function get(string $key, string|null $field = null): mixed
-----
METHOD Swoole\Table::incr
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @param string $column
     * @param mixed $incrby
     * @return int
     */
    function incr(string $key, string $column, mixed $incrby = 1): mixed
-----
METHOD Swoole\Table::key
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function key(): mixed
-----
METHOD Swoole\Table::next
-----
Is internal: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): mixed
-----
METHOD Swoole\Table::rewind
-----
Is internal: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): mixed
-----
METHOD Swoole\Table::set
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @param array $value
     * @return bool
     */
    function set(string $key, array $value): mixed
-----
METHOD Swoole\Table::valid
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function valid(): mixed
-----
CLASS Swoole\Timer
-----
class Swoole\Timer
{
}
-----
METHOD Swoole\Timer::after
-----
Is internal: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int $ms
     * @param callable(): mixed $callback
     * @param mixed $params
     * @return int
     */
    function after(int $ms, callable(): mixed $callback, mixed ...$params): mixed
-----
METHOD Swoole\Timer::clear
-----
Is internal: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int $timer_id
     * @return bool
     */
    function clear(int $timer_id): mixed
-----
METHOD Swoole\Timer::exists
-----
Is internal: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int $timer_id
     * @return bool
     */
    function exists(int $timer_id): mixed
-----
METHOD Swoole\Timer::tick
-----
Is internal: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int $ms
     * @param callable(): mixed $callback
     * @param mixed $params
     * @return int
     */
    function tick(int $ms, callable(): mixed $callback, mixed ...$params): mixed
-----
CLASS Swoole\WebSocket\Server
-----
class Swoole\WebSocket\Server extends Swoole\Http\Server
{
}
-----
METHOD Swoole\WebSocket\Server::exist
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $fd
     * @return mixed
     */
    function exist(mixed $fd): mixed
-----
METHOD Swoole\WebSocket\Server::on
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $event_name
     * @param callable(): mixed $callback
     * @return mixed
     */
    function on(mixed $event_name, callable(): mixed $callback): mixed
-----
METHOD Swoole\WebSocket\Server::pack
-----
Is internal: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param mixed $data
     * @param mixed $opcode
     * @param mixed $flags
     * @return mixed
     */
    function pack(mixed $data, mixed $opcode = null, mixed $flags = null): mixed
-----
METHOD Swoole\WebSocket\Server::push
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $fd
     * @param mixed $data
     * @param mixed $opcode
     * @param mixed $flags
     * @return mixed
     */
    function push(mixed $fd, mixed $data, mixed $opcode = null, mixed $flags = null): mixed
-----
METHOD Swoole\WebSocket\Server::unpack
-----
Is internal: Yes
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param mixed $data
     * @return mixed
     */
    function unpack(mixed $data): mixed
-----
CLASS SyncEvent
-----
class SyncEvent
{
}
-----
METHOD SyncEvent::__construct
-----
Has side-effects: Maybe
Throw type: Exception
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param bool $manual
     * @return void
     */
    function __construct(string $name, bool $manual = false): mixed
-----
METHOD SyncEvent::fire
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function fire(): mixed
-----
METHOD SyncEvent::reset
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function reset(): mixed
-----
METHOD SyncEvent::wait
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $wait
     * @return bool
     */
    function wait(mixed $wait = -1): mixed
-----
CLASS SyncMutex
-----
class SyncMutex
{
}
-----
METHOD SyncMutex::__construct
-----
Has side-effects: Maybe
Throw type: Exception
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return void
     */
    function __construct(mixed $name): mixed
-----
METHOD SyncMutex::lock
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $wait
     * @return bool
     */
    function lock(mixed $wait = -1): mixed
-----
METHOD SyncMutex::unlock
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $all
     * @return bool
     */
    function unlock(mixed $all = false): mixed
-----
CLASS SyncReaderWriter
-----
class SyncReaderWriter
{
}
-----
METHOD SyncReaderWriter::__construct
-----
Has side-effects: Maybe
Throw type: Exception
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param bool $autounlock
     * @return void
     */
    function __construct(mixed $name, mixed $autounlock = true): mixed
-----
METHOD SyncReaderWriter::readlock
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $wait
     * @return bool
     */
    function readlock(mixed $wait = -1): mixed
-----
METHOD SyncReaderWriter::readunlock
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function readunlock(): mixed
-----
METHOD SyncReaderWriter::writelock
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $wait
     * @return bool
     */
    function writelock(mixed $wait = -1): mixed
-----
METHOD SyncReaderWriter::writeunlock
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function writeunlock(): mixed
-----
CLASS SyncSemaphore
-----
class SyncSemaphore
{
}
-----
METHOD SyncSemaphore::__construct
-----
Has side-effects: Maybe
Throw type: Exception
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param int $initialval
     * @param bool $autounlock
     * @return void
     */
    function __construct(mixed $name, mixed $initialval = 1, mixed $autounlock = true): mixed
-----
METHOD SyncSemaphore::lock
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $wait
     * @return bool
     */
    function lock(mixed $wait = -1): mixed
-----
METHOD SyncSemaphore::unlock
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $prevcount
     * @return bool
     */
    function unlock(mixed &rw$prevcount = 0): mixed
-----
CLASS SyncSharedMemory
-----
class SyncSharedMemory
{
}
-----
METHOD SyncSharedMemory::__construct
-----
Has side-effects: Maybe
Throw type: Exception
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param int $size
     * @return void
     */
    function __construct(mixed $name, mixed $size): mixed
-----
METHOD SyncSharedMemory::first
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function first(): mixed
-----
METHOD SyncSharedMemory::read
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $start
     * @param int $length
     * @return mixed
     */
    function read(mixed $start = 0, mixed $length): mixed
-----
METHOD SyncSharedMemory::size
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function size(): mixed
-----
METHOD SyncSharedMemory::write
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $string
     * @param int $start
     * @return mixed
     */
    function write(mixed $string, mixed $start = 0): mixed
-----
CLASS Table
-----
MISSING
-----
CLASS TableDelete
-----
MISSING
-----
CLASS TableInsert
-----
MISSING
-----
CLASS TableSelect
-----
MISSING
-----
CLASS TableUpdate
-----
MISSING
-----
CLASS Thread
-----
class Thread extends Threaded
{
}
-----
METHOD Thread::getCreatorId
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getCreatorId(): mixed
-----
METHOD Thread::getCurrentThread
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return Thread|null
     */
    function getCurrentThread(): mixed
-----
METHOD Thread::getCurrentThreadId
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getCurrentThreadId(): mixed
-----
METHOD Thread::getThreadId
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getThreadId(): mixed
-----
METHOD Thread::isJoined
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isJoined(): mixed
-----
METHOD Thread::isStarted
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isStarted(): mixed
-----
METHOD Thread::join
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function join(): mixed
-----
METHOD Thread::start
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $options
     * @return bool
     */
    function start(int $options = 1118481): mixed
-----
CLASS Threaded
-----
class Threaded implements Collectable, Traversable, Countable, ArrayAccess
{
}
-----
METHOD Threaded::chunk
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $size
     * @param bool $preserve
     * @return array
     */
    function chunk(mixed $size, mixed $preserve = false): mixed
-----
METHOD Threaded::count
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int<0, max>
     */
    function count(): mixed
-----
METHOD Threaded::extend
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $class
     * @return bool
     */
    function extend(mixed $class): mixed
-----
METHOD Threaded::isRunning
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isRunning(): mixed
-----
METHOD Threaded::isTerminated
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isTerminated(): mixed
-----
METHOD Threaded::merge
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $from
     * @param bool $overwrite
     * @return bool
     */
    function merge(mixed $from, mixed $overwrite = true): mixed
-----
METHOD Threaded::notify
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function notify(): mixed
-----
METHOD Threaded::notifyOne
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function notifyOne(): mixed
-----
METHOD Threaded::pop
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function pop(): mixed
-----
METHOD Threaded::run
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function run(): mixed
-----
METHOD Threaded::shift
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function shift(): mixed
-----
METHOD Threaded::synchronized
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param Closure $block
     * @param mixed $_
     * @return mixed
     */
    function synchronized(Closure $block, mixed ...$_): mixed
-----
METHOD Threaded::wait
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $timeout
     * @return bool
     */
    function wait(int $timeout = 0): mixed
-----
CLASS Throwable
-----
interface Throwable extends Stringable
{
}
-----
METHOD Throwable::__toString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): mixed
-----
METHOD Throwable::getCode
-----
Has side-effects: Maybe
Throw type: void
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function getCode(): mixed
-----
METHOD Throwable::getFile
-----
Has side-effects: Maybe
Throw type: void
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getFile(): string
-----
METHOD Throwable::getLine
-----
Has side-effects: Maybe
Throw type: void
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getLine(): int
-----
METHOD Throwable::getMessage
-----
Has side-effects: Maybe
Throw type: void
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getMessage(): string
-----
METHOD Throwable::getPrevious
-----
Has side-effects: Maybe
Throw type: void
Visibility: public
Variants: 1
    /**
     * @return Throwable|null
     */
    function getPrevious(): Throwable|null
-----
METHOD Throwable::getTrace
-----
Has side-effects: Maybe
Throw type: void
Visibility: public
Variants: 1
    /**
     * @return array<int, array{function: string, line?: int, file?: string, class?: class-string, type?: '->'|'::', args?: array, object?: object}>
     */
    function getTrace(): array
-----
METHOD Throwable::getTraceAsString
-----
Has side-effects: Maybe
Throw type: void
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getTraceAsString(): string
-----
CLASS Transliterator
-----
class Transliterator
{
}
-----
METHOD Transliterator::__construct
-----
Is final: Yes
Has side-effects: Maybe
Visibility: private
Variants: 1
    /**
     * @return mixed
     */
    function __construct(): mixed
-----
METHOD Transliterator::create
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $id
     * @param int $direction
     * @return Transliterator|null
     */
    function create(string $id, int $direction = 0): mixed
-----
METHOD Transliterator::createFromRules
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $rules
     * @param int $direction
     * @return Transliterator|null
     */
    function createFromRules(string $rules, int $direction = 0): mixed
-----
METHOD Transliterator::createInverse
-----
Visibility: public
Variants: 1
    /**
     * @return Transliterator
     */
    function createInverse(): mixed
-----
METHOD Transliterator::getErrorCode
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getErrorCode(): mixed
-----
METHOD Transliterator::getErrorMessage
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getErrorMessage(): mixed
-----
METHOD Transliterator::listIDs
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function listIDs(): mixed
-----
METHOD Transliterator::transliterate
-----
Visibility: public
Variants: 1
    /**
     * @param string $string
     * @param int $start
     * @param int $end
     * @return string|false
     */
    function transliterate(string $string, int $start = 0, int $end = -1): mixed
-----
CLASS UConverter
-----
class UConverter
{
}
-----
METHOD UConverter::__construct
-----
Visibility: public
Variants: 1
    /**
     * @param string|null $destination_encoding
     * @param string|null $source_encoding
     * @return void
     */
    function __construct(string|null $destination_encoding = null, string|null $source_encoding = null): mixed
-----
METHOD UConverter::convert
-----
Visibility: public
Variants: 1
    /**
     * @param string $str
     * @param bool $reverse
     * @return string
     */
    function convert(string $str, bool $reverse = false): mixed
-----
METHOD UConverter::fromUCallback
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $reason
     * @param array $source
     * @param int $codePoint
     * @param int $error
     * @return mixed
     */
    function fromUCallback(int $reason, array $source, int $codePoint, mixed &rw$error): mixed
-----
METHOD UConverter::getAliases
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return array
     */
    function getAliases(string $name): mixed
-----
METHOD UConverter::getAvailable
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getAvailable(): mixed
-----
METHOD UConverter::getDestinationEncoding
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getDestinationEncoding(): mixed
-----
METHOD UConverter::getDestinationType
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getDestinationType(): mixed
-----
METHOD UConverter::getErrorCode
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getErrorCode(): mixed
-----
METHOD UConverter::getErrorMessage
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getErrorMessage(): mixed
-----
METHOD UConverter::getSourceEncoding
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getSourceEncoding(): mixed
-----
METHOD UConverter::getSourceType
-----
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getSourceType(): mixed
-----
METHOD UConverter::getStandards
-----
Static
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getStandards(): mixed
-----
METHOD UConverter::getSubstChars
-----
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getSubstChars(): mixed
-----
METHOD UConverter::reasonText
-----
Static
Visibility: public
Variants: 1
    /**
     * @param int $reason
     * @return string
     */
    function reasonText(int $reason): mixed
-----
METHOD UConverter::setDestinationEncoding
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $encoding
     * @return bool
     */
    function setDestinationEncoding(string $encoding): mixed
-----
METHOD UConverter::setSourceEncoding
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $encoding
     * @return bool
     */
    function setSourceEncoding(string $encoding): mixed
-----
METHOD UConverter::setSubstChars
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $chars
     * @return bool
     */
    function setSubstChars(string $chars): mixed
-----
METHOD UConverter::toUCallback
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $reason
     * @param string $source
     * @param string $codeUnits
     * @param int $error
     * @return mixed
     */
    function toUCallback(int $reason, string $source, string $codeUnits, mixed &rw$error): mixed
-----
METHOD UConverter::transcode
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $str
     * @param string $toEncoding
     * @param string $fromEncoding
     * @param array|null $options
     * @return string
     */
    function transcode(string $str, string $toEncoding, string $fromEncoding, array|null $options = null): mixed
-----
CLASS UI\Area
-----
MISSING
-----
CLASS UI\Control
-----
MISSING
-----
CLASS UI\Controls\Box
-----
MISSING
-----
CLASS UI\Controls\Button
-----
MISSING
-----
CLASS UI\Controls\Check
-----
MISSING
-----
CLASS UI\Controls\ColorButton
-----
MISSING
-----
CLASS UI\Controls\Combo
-----
MISSING
-----
CLASS UI\Controls\EditableCombo
-----
MISSING
-----
CLASS UI\Controls\Entry
-----
MISSING
-----
CLASS UI\Controls\Form
-----
MISSING
-----
CLASS UI\Controls\Grid
-----
MISSING
-----
CLASS UI\Controls\Group
-----
MISSING
-----
CLASS UI\Controls\Label
-----
MISSING
-----
CLASS UI\Controls\MultilineEntry
-----
MISSING
-----
CLASS UI\Controls\Picker
-----
MISSING
-----
CLASS UI\Controls\Progress
-----
MISSING
-----
CLASS UI\Controls\Radio
-----
MISSING
-----
CLASS UI\Controls\Separator
-----
MISSING
-----
CLASS UI\Controls\Slider
-----
MISSING
-----
CLASS UI\Controls\Spin
-----
MISSING
-----
CLASS UI\Controls\Tab
-----
MISSING
-----
CLASS UI\Draw\Brush
-----
MISSING
-----
CLASS UI\Draw\Brush\Gradient
-----
MISSING
-----
CLASS UI\Draw\Brush\LinearGradient
-----
MISSING
-----
CLASS UI\Draw\Brush\RadialGradient
-----
MISSING
-----
CLASS UI\Draw\Color
-----
MISSING
-----
CLASS UI\Draw\Matrix
-----
MISSING
-----
CLASS UI\Draw\Path
-----
MISSING
-----
CLASS UI\Draw\Pen
-----
MISSING
-----
CLASS UI\Draw\Stroke
-----
MISSING
-----
CLASS UI\Draw\Text\Font
-----
MISSING
-----
CLASS UI\Draw\Text\Font\Descriptor
-----
MISSING
-----
CLASS UI\Draw\Text\Layout
-----
MISSING
-----
CLASS UI\Executor
-----
MISSING
-----
CLASS UI\Menu
-----
MISSING
-----
CLASS UI\MenuItem
-----
MISSING
-----
CLASS UI\Point
-----
MISSING
-----
CLASS UI\Size
-----
MISSING
-----
CLASS UI\Window
-----
MISSING
-----
CLASS UnitEnum
-----
interface UnitEnum
{
}
-----
METHOD UnitEnum::cases
-----
Static
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function cases(): array
-----
CLASS V8Js
-----
class V8Js
{
}
-----
METHOD V8Js::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $object_name
     * @param array $variables
     * @param array $extensions
     * @param bool $report_uncaught_exceptions
     * @param string $snapshot_blob
     * @return void
     */
    function __construct(mixed $object_name = 'PHP', array $variables = array{}, array $extensions = array{}, mixed $report_uncaught_exceptions = true, mixed $snapshot_blob = null): mixed
-----
METHOD V8Js::executeString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $script
     * @param string $identifier
     * @param int $flags
     * @return mixed
     */
    function executeString(mixed $script, mixed $identifier = '', mixed $flags = 1): mixed
-----
METHOD V8Js::getExtensions
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getExtensions(): mixed
-----
METHOD V8Js::getPendingException
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return V8JsException
     */
    function getPendingException(): mixed
-----
METHOD V8Js::registerExtension
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $extension_name
     * @param string $code
     * @param array $dependencies
     * @param bool $auto_enable
     * @return bool
     */
    function registerExtension(mixed $extension_name, mixed $code, array $dependencies, mixed $auto_enable = false): mixed
-----
CLASS V8JsException
-----
MISSING
-----
CLASS VarnishAdmin
-----
MISSING
-----
CLASS VarnishLog
-----
MISSING
-----
CLASS VarnishStat
-----
MISSING
-----
CLASS Vtiful\Kernel\Excel
-----
class Vtiful\Kernel\Excel
{
}
-----
METHOD Vtiful\Kernel\Excel::__construct
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $config
     * @return void
     */
    function __construct(array $config): mixed
-----
METHOD Vtiful\Kernel\Excel::addSheet
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string|null $sheetName
     * @return Vtiful\Kernel\Excel
     */
    function addSheet(string|null $sheetName): Vtiful\Kernel\Excel
-----
METHOD Vtiful\Kernel\Excel::autoFilter
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $range
     * @return Vtiful\Kernel\Excel
     */
    function autoFilter(string $range): Vtiful\Kernel\Excel
-----
METHOD Vtiful\Kernel\Excel::constMemory
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $fileName
     * @param string $sheetName
     * @return Vtiful\Kernel\Excel
     */
    function constMemory(string $fileName, string $sheetName = 'Sheet1'): Vtiful\Kernel\Excel
-----
METHOD Vtiful\Kernel\Excel::data
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $data
     * @return Vtiful\Kernel\Excel
     */
    function data(array $data): Vtiful\Kernel\Excel
-----
METHOD Vtiful\Kernel\Excel::fileName
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $fileName
     * @param string $sheetName
     * @return Vtiful\Kernel\Excel
     */
    function fileName(string $fileName, string $sheetName = 'Sheet1'): Vtiful\Kernel\Excel
-----
METHOD Vtiful\Kernel\Excel::getHandle
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return resource
     */
    function getHandle(): mixed
-----
METHOD Vtiful\Kernel\Excel::header
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $header
     * @return Vtiful\Kernel\Excel
     */
    function header(array $header): Vtiful\Kernel\Excel
-----
METHOD Vtiful\Kernel\Excel::insertFormula
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $row
     * @param int $column
     * @param string $formula
     * @return Vtiful\Kernel\Excel
     */
    function insertFormula(int $row, int $column, string $formula): Vtiful\Kernel\Excel
-----
METHOD Vtiful\Kernel\Excel::insertImage
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $row
     * @param int $column
     * @param string $imagePath
     * @param float $width
     * @param float $height
     * @return Vtiful\Kernel\Excel
     */
    function insertImage(int $row, int $column, string $imagePath, float $width = 1, float $height = 1): Vtiful\Kernel\Excel
-----
METHOD Vtiful\Kernel\Excel::insertText
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $row
     * @param int $column
     * @param float|int|string $data
     * @param string|null $format
     * @param resource|null $formatHandle
     * @return Vtiful\Kernel\Excel
     */
    function insertText(int $row, int $column, mixed $data, string|null $format = null, mixed $formatHandle = null): Vtiful\Kernel\Excel
-----
METHOD Vtiful\Kernel\Excel::mergeCells
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $range
     * @param string $data
     * @return Vtiful\Kernel\Excel
     */
    function MergeCells(string $range, string $data): Vtiful\Kernel\Excel
-----
METHOD Vtiful\Kernel\Excel::output
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function output(): string
-----
METHOD Vtiful\Kernel\Excel::setColumn
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $range
     * @param float $cellWidth
     * @param resource|null $formatHandle
     * @return Vtiful\Kernel\Excel
     */
    function setColumn(string $range, float $cellWidth, mixed $formatHandle = null): Vtiful\Kernel\Excel
-----
METHOD Vtiful\Kernel\Excel::setRow
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $range
     * @param float $cellHeight
     * @param resource|null $formatHandle
     * @return Vtiful\Kernel\Excel
     */
    function setRow(string $range, float $cellHeight, mixed $formatHandle = null): Vtiful\Kernel\Excel
-----
CLASS Vtiful\Kernel\Format
-----
class Vtiful\Kernel\Format
{
}
-----
METHOD Vtiful\Kernel\Format::align
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $style
     * @return static(Vtiful\Kernel\Format)
     */
    function align(mixed ...$style): Vtiful\Kernel\Format
-----
METHOD Vtiful\Kernel\Format::bold
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return static(Vtiful\Kernel\Format)
     */
    function bold(): Vtiful\Kernel\Format
-----
METHOD Vtiful\Kernel\Format::italic
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return static(Vtiful\Kernel\Format)
     */
    function italic(): Vtiful\Kernel\Format
-----
METHOD Vtiful\Kernel\Format::underline
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $style
     * @return static(Vtiful\Kernel\Format)
     */
    function underline(int $style): Vtiful\Kernel\Format
-----
CLASS Warning
-----
MISSING
-----
CLASS WeakMap
-----
final class WeakMap implements ArrayAccess, Countable, IteratorAggregate
{
}
-----
METHOD WeakMap::count
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function count(): int
-----
METHOD WeakMap::getIterator
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Traversable<TKey of object (class WeakMap, parameter), TValue (class WeakMap, parameter)>
     */
    function getIterator(): Iterator
-----
METHOD WeakMap::offsetExists
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TKey of object (class WeakMap, parameter) $object
     * @return bool
     */
    function offsetExists(mixed $object): bool
-----
METHOD WeakMap::offsetGet
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param TKey of object (class WeakMap, parameter) $object
     * @return TValue (class WeakMap, parameter)|null
     */
    function offsetGet(mixed $object): mixed
-----
METHOD WeakMap::offsetSet
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param TKey of object (class WeakMap, parameter)|null $object
     * @param TValue (class WeakMap, parameter) $value
     * @return void
     */
    function offsetSet(mixed $object, mixed $value): void
-----
METHOD WeakMap::offsetUnset
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param TKey of object (class WeakMap, parameter) $object
     * @return void
     */
    function offsetUnset(mixed $object): void
-----
CLASS WeakReference
-----
final class WeakReference
{
}
-----
METHOD WeakReference::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function __construct(): mixed
-----
METHOD WeakReference::create
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param TIn of object (method WeakReference::create(), parameter) $object
     * @return WeakReference<TIn of object (method WeakReference::create(), parameter)>
     */
    function create(object $object): WeakReference
-----
METHOD WeakReference::get
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return T of object (class WeakReference, parameter)|null
     */
    function get(): object|null
-----
CLASS Worker
-----
class Worker extends Thread
{
}
-----
METHOD Worker::collect
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $collector
     * @return int
     */
    function collect((callable(): mixed)|null $collector = null): mixed
-----
METHOD Worker::getStacked
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getStacked(): mixed
-----
METHOD Worker::isShutdown
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isShutdown(): mixed
-----
METHOD Worker::shutdown
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function shutdown(): mixed
-----
METHOD Worker::stack
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param Threaded $work
     * @return int
     */
    function stack(Threaded $work): mixed
-----
METHOD Worker::unstack
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Collectable|null
     */
    function unstack(): mixed
-----
CLASS XMLDiff\Base
-----
MISSING
-----
CLASS XMLDiff\DOM
-----
MISSING
-----
CLASS XMLDiff\File
-----
MISSING
-----
CLASS XMLDiff\Memory
-----
MISSING
-----
CLASS XMLReader
-----
class XMLReader
{
}
-----
METHOD XMLReader::XML
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $source
     * @param string|null $encoding
     * @param int $flags
     * @return bool|XMLReader
     */
    function XML(string $source, string|null $encoding = null, int $flags = 0): mixed
-----
METHOD XMLReader::close
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function close(): mixed
-----
METHOD XMLReader::expand
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param DOMNode|null $baseNode
     * @return DOMNode|false
     */
    function expand(DOMNode|null $baseNode = null): mixed
-----
METHOD XMLReader::getAttribute
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return string|null
     */
    function getAttribute(string $name): mixed
-----
METHOD XMLReader::getAttributeNo
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @return string|null
     */
    function getAttributeNo(int $index): mixed
-----
METHOD XMLReader::getAttributeNs
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $namespace
     * @return string|null
     */
    function getAttributeNs(string $name, string $namespace): mixed
-----
METHOD XMLReader::getParserProperty
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $property
     * @return bool
     */
    function getParserProperty(int $property): mixed
-----
METHOD XMLReader::isValid
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isValid(): mixed
-----
METHOD XMLReader::lookupNamespace
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $prefix
     * @return string|null
     */
    function lookupNamespace(string $prefix): mixed
-----
METHOD XMLReader::moveToAttribute
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return bool
     */
    function moveToAttribute(string $name): mixed
-----
METHOD XMLReader::moveToAttributeNo
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @return bool
     */
    function moveToAttributeNo(int $index): mixed
-----
METHOD XMLReader::moveToAttributeNs
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $namespace
     * @return bool
     */
    function moveToAttributeNs(string $name, string $namespace): mixed
-----
METHOD XMLReader::moveToElement
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function moveToElement(): mixed
-----
METHOD XMLReader::moveToFirstAttribute
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function moveToFirstAttribute(): mixed
-----
METHOD XMLReader::moveToNextAttribute
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function moveToNextAttribute(): mixed
-----
METHOD XMLReader::next
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string|null $name
     * @return bool
     */
    function next(string|null $name = null): mixed
-----
METHOD XMLReader::open
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $uri
     * @param string|null $encoding
     * @param int $flags
     * @return bool|XMLReader
     */
    function open(string $uri, string|null $encoding = null, int $flags = 0): mixed
-----
METHOD XMLReader::read
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function read(): mixed
-----
METHOD XMLReader::readInnerXml
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function readInnerXml(): mixed
-----
METHOD XMLReader::readOuterXml
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function readOuterXml(): mixed
-----
METHOD XMLReader::readString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function readString(): mixed
-----
METHOD XMLReader::setParserProperty
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $property
     * @param bool $value
     * @return bool
     */
    function setParserProperty(int $property, bool $value): mixed
-----
METHOD XMLReader::setRelaxNGSchema
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string|null $filename
     * @return bool
     */
    function setRelaxNGSchema(string|null $filename): mixed
-----
METHOD XMLReader::setRelaxNGSchemaSource
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string|null $source
     * @return bool
     */
    function setRelaxNGSchemaSource(string|null $source): mixed
-----
METHOD XMLReader::setSchema
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string|null $filename
     * @return bool
     */
    function setSchema(string|null $filename): mixed
-----
CLASS XMLWriter
-----
class XMLWriter
{
}
-----
METHOD XMLWriter::endAttribute
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function endAttribute(): mixed
-----
METHOD XMLWriter::endCdata
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function endCdata(): mixed
-----
METHOD XMLWriter::endComment
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function endComment(): mixed
-----
METHOD XMLWriter::endDocument
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function endDocument(): mixed
-----
METHOD XMLWriter::endDtd
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function endDtd(): mixed
-----
METHOD XMLWriter::endDtdAttlist
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function endDtdAttlist(): mixed
-----
METHOD XMLWriter::endDtdElement
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function endDtdElement(): mixed
-----
METHOD XMLWriter::endDtdEntity
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function endDtdEntity(): mixed
-----
METHOD XMLWriter::endElement
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function endElement(): mixed
-----
METHOD XMLWriter::endPi
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function endPi(): mixed
-----
METHOD XMLWriter::flush
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $empty
     * @return mixed
     */
    function flush(bool $empty = true): mixed
-----
METHOD XMLWriter::fullEndElement
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function fullEndElement(): mixed
-----
METHOD XMLWriter::openMemory
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function openMemory(): mixed
-----
METHOD XMLWriter::openUri
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $uri
     * @return bool
     */
    function openUri(string $uri): mixed
-----
METHOD XMLWriter::outputMemory
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $flush
     * @return string
     */
    function outputMemory(bool $flush = true): mixed
-----
METHOD XMLWriter::setIndent
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $enable
     * @return bool
     */
    function setIndent(bool $enable): mixed
-----
METHOD XMLWriter::setIndentString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $indentation
     * @return bool
     */
    function setIndentString(string $indentation): mixed
-----
METHOD XMLWriter::startAttribute
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return bool
     */
    function startAttribute(string $name): mixed
-----
METHOD XMLWriter::startAttributeNs
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string|null $prefix
     * @param string $name
     * @param string|null $namespace
     * @return bool
     */
    function startAttributeNs(string|null $prefix, string $name, string|null $namespace): mixed
-----
METHOD XMLWriter::startCdata
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function startCdata(): mixed
-----
METHOD XMLWriter::startComment
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function startComment(): mixed
-----
METHOD XMLWriter::startDocument
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string|null $version
     * @param string|null $encoding
     * @param string|null $standalone
     * @return bool
     */
    function startDocument(string|null $version = '1.0', string|null $encoding = null, string|null $standalone = null): mixed
-----
METHOD XMLWriter::startDtd
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $qualifiedName
     * @param string|null $publicId
     * @param string|null $systemId
     * @return bool
     */
    function startDtd(string $qualifiedName, string|null $publicId = null, string|null $systemId = null): mixed
-----
METHOD XMLWriter::startDtdAttlist
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return bool
     */
    function startDtdAttlist(string $name): mixed
-----
METHOD XMLWriter::startDtdElement
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $qualifiedName
     * @return bool
     */
    function startDtdElement(string $qualifiedName): mixed
-----
METHOD XMLWriter::startDtdEntity
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param bool $isParam
     * @return bool
     */
    function startDtdEntity(string $name, bool $isParam): mixed
-----
METHOD XMLWriter::startElement
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return bool
     */
    function startElement(string $name): mixed
-----
METHOD XMLWriter::startElementNs
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string|null $prefix
     * @param string $name
     * @param string|null $namespace
     * @return bool
     */
    function startElementNs(string|null $prefix, string $name, string|null $namespace): mixed
-----
METHOD XMLWriter::startPi
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $target
     * @return bool
     */
    function startPi(string $target): mixed
-----
METHOD XMLWriter::text
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $content
     * @return bool
     */
    function text(string $content): mixed
-----
METHOD XMLWriter::writeAttribute
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $value
     * @return bool
     */
    function writeAttribute(string $name, string $value): mixed
-----
METHOD XMLWriter::writeAttributeNs
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string|null $prefix
     * @param string $name
     * @param string|null $namespace
     * @param string $value
     * @return bool
     */
    function writeAttributeNs(string|null $prefix, string $name, string|null $namespace, string $value): mixed
-----
METHOD XMLWriter::writeCdata
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $content
     * @return bool
     */
    function writeCdata(string $content): mixed
-----
METHOD XMLWriter::writeComment
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $content
     * @return bool
     */
    function writeComment(string $content): mixed
-----
METHOD XMLWriter::writeDtd
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string|null $publicId
     * @param string|null $systemId
     * @param string|null $content
     * @return bool
     */
    function writeDtd(string $name, string|null $publicId = null, string|null $systemId = null, string|null $content = null): mixed
-----
METHOD XMLWriter::writeDtdAttlist
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $content
     * @return bool
     */
    function writeDtdAttlist(string $name, string $content): mixed
-----
METHOD XMLWriter::writeDtdElement
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $content
     * @return bool
     */
    function writeDtdElement(string $name, string $content): mixed
-----
METHOD XMLWriter::writeDtdEntity
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $content
     * @param bool $pe
     * @param string|null $pubid
     * @param string|null $sysid
     * @param string|null $ndataid
     * @return bool
     */
    function writeDtdEntity(string $name, string $content, bool $pe = false, string|null $pubid = null, string|null $sysid = null, string|null $ndataid = null): mixed
-----
METHOD XMLWriter::writeElement
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string|null $content
     * @return bool
     */
    function writeElement(string $name, string|null $content = null): mixed
-----
METHOD XMLWriter::writeElementNs
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string|null $prefix
     * @param string $name
     * @param string|null $namespace
     * @param string|null $content
     * @return bool
     */
    function writeElementNs(string|null $prefix, string $name, string|null $namespace, string|null $content = null): mixed
-----
METHOD XMLWriter::writePi
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $target
     * @param string $content
     * @return bool
     */
    function writePi(string $target, string $content): mixed
-----
METHOD XMLWriter::writeRaw
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $content
     * @return bool
     */
    function writeRaw(string $content): mixed
-----
CLASS XSLTProcessor
-----
class XSLTProcessor
{
}
-----
METHOD XSLTProcessor::__construct
-----
MISSING
-----
METHOD XSLTProcessor::getParameter
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $namespaceURI
     * @param string $localName
     * @return string|false
     */
    function getParameter(string $namespaceURI, string $localName): mixed
-----
METHOD XSLTProcessor::getSecurityPrefs
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getSecurityPrefs(): mixed
-----
METHOD XSLTProcessor::hasExsltSupport
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function hasExsltSupport(): mixed
-----
METHOD XSLTProcessor::importStylesheet
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param DOMDocument|SimpleXMLElement $stylesheet
     * @return bool
     */
    function importStylesheet(object $stylesheet): mixed
-----
METHOD XSLTProcessor::registerPHPFunctions
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param array|string|null $restrict
     * @return void
     */
    function registerPHPFunctions(array|string|null $restrict = null): mixed
-----
METHOD XSLTProcessor::removeParameter
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $namespaceURI
     * @param string $localName
     * @return bool
     */
    function removeParameter(string $namespaceURI, string $localName): mixed
-----
METHOD XSLTProcessor::setParameter
-----
Has side-effects: Maybe
Visibility: public
Variants: 2
    /**
     * @param string $namespace
     * @param string $options
     * @param string $value
     * @return bool
     */
    function setParameter(mixed $namespace, mixed $options, mixed $value): mixed
    /**
     * @param string $namespace
     * @param array $options
     * @return bool
     */
    function setParameter(mixed $namespace, mixed $options): mixed
-----
METHOD XSLTProcessor::setProfiling
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string|null $filename
     * @return bool
     */
    function setProfiling(string|null $filename): mixed
-----
METHOD XSLTProcessor::setSecurityPrefs
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $securityPrefs
     * @return int
     */
    function setSecurityPrefs(int $securityPrefs): mixed
-----
METHOD XSLTProcessor::transformToDoc
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param DOMDocument|SimpleXMLElement $doc
     * @param string|null $returnClass
     * @return DOMDocument|false
     */
    function transformToDoc(object $doc, string|null $returnClass = null): mixed
-----
METHOD XSLTProcessor::transformToUri
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param DOMDocument|SimpleXMLElement $doc
     * @param string $uri
     * @return int
     */
    function transformToUri(object $doc, string $uri): mixed
-----
METHOD XSLTProcessor::transformToXml
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param DOMDocument|SimpleXMLElement $doc
     * @return string|false|null
     */
    function transformToXml(object $doc): mixed
-----
CLASS Yac
-----
MISSING
-----
CLASS Yaconf
-----
MISSING
-----
CLASS Yaf_Action_Abstract
-----
abstract class Yaf_Action_Abstract extends Yaf_Controller_Abstract
{
}
-----
METHOD Yaf_Action_Abstract::execute
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $arg
     * @param mixed $args
     * @return mixed
     */
    function execute(mixed $arg, mixed ...$args): mixed
-----
METHOD Yaf_Action_Abstract::getController
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Yaf_Controller_Abstract
     */
    function getController(): mixed
-----
METHOD Yaf_Action_Abstract::getControllerName
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function getControllerName(): mixed
-----
CLASS Yaf_Application
-----
final class Yaf_Application
{
}
-----
METHOD Yaf_Application::__construct
-----
Has side-effects: Maybe
Throw type: Yaf_Exception_StartupError|Yaf_Exception_TypeError
Visibility: public
Variants: 1
    /**
     * @param mixed $config
     * @param string $environ
     * @return void
     */
    function __construct(mixed $config, mixed $environ = null): mixed
-----
METHOD Yaf_Application::__destruct
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __destruct(): mixed
-----
METHOD Yaf_Application::app
-----
Has side-effects: Yes
Static
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function app(): mixed
-----
METHOD Yaf_Application::bootstrap
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param Yaf_Bootstrap_Abstract $bootstrap
     * @return void
     */
    function bootstrap(mixed $bootstrap = null): mixed
-----
METHOD Yaf_Application::clearLastError
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Yaf_Application
     */
    function clearLastError(): mixed
-----
METHOD Yaf_Application::environ
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function environ(): mixed
-----
METHOD Yaf_Application::execute
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $entry
     * @param string $_
     * @return void
     */
    function execute(callable(): mixed $entry, mixed ...$_): mixed
-----
METHOD Yaf_Application::getAppDirectory
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Yaf_Application
     */
    function getAppDirectory(): mixed
-----
METHOD Yaf_Application::getConfig
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Yaf_Config_Abstract
     */
    function getConfig(): mixed
-----
METHOD Yaf_Application::getDispatcher
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Yaf_Dispatcher
     */
    function getDispatcher(): mixed
-----
METHOD Yaf_Application::getLastErrorMsg
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getLastErrorMsg(): mixed
-----
METHOD Yaf_Application::getLastErrorNo
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getLastErrorNo(): mixed
-----
METHOD Yaf_Application::getModules
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getModules(): mixed
-----
METHOD Yaf_Application::run
-----
Has side-effects: Yes
Throw type: Yaf_Exception_StartupError
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function run(): mixed
-----
METHOD Yaf_Application::setAppDirectory
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $directory
     * @return Yaf_Application
     */
    function setAppDirectory(mixed $directory): mixed
-----
CLASS Yaf_Config_Abstract
-----
abstract class Yaf_Config_Abstract implements Iterator, ArrayAccess, Countable
{
}
-----
METHOD Yaf_Config_Abstract::get
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param mixed $value
     * @return mixed
     */
    function get(mixed $name = null, mixed $value): mixed
-----
METHOD Yaf_Config_Abstract::readonly
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function readonly(): mixed
-----
METHOD Yaf_Config_Abstract::set
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Yaf_Config_Abstract
     */
    function set(): mixed
-----
METHOD Yaf_Config_Abstract::toArray
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function toArray(): mixed
-----
CLASS Yaf_Config_Ini
-----
class Yaf_Config_Ini extends Yaf_Config_Abstract
{
}
-----
METHOD Yaf_Config_Ini::__construct
-----
Has side-effects: Maybe
Throw type: Yaf_Exception_TypeError
Visibility: public
Variants: 1
    /**
     * @param string $config_file
     * @param string $section
     * @return void
     */
    function __construct(mixed $config_file, mixed $section = null): mixed
-----
METHOD Yaf_Config_Ini::__get
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return void
     */
    function __get(mixed $name = null): mixed
-----
METHOD Yaf_Config_Ini::__isset
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return void
     */
    function __isset(mixed $name): mixed
-----
METHOD Yaf_Config_Ini::__set
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param mixed $value
     * @return void
     */
    function __set(mixed $name, mixed $value): mixed
-----
METHOD Yaf_Config_Ini::count
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int<0, max>
     */
    function count(): mixed
-----
METHOD Yaf_Config_Ini::current
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function current(): mixed
-----
METHOD Yaf_Config_Ini::key
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function key(): mixed
-----
METHOD Yaf_Config_Ini::next
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): mixed
-----
METHOD Yaf_Config_Ini::offsetExists
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return void
     */
    function offsetExists(mixed $name): mixed
-----
METHOD Yaf_Config_Ini::offsetGet
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return void
     */
    function offsetGet(mixed $name = ''): mixed
-----
METHOD Yaf_Config_Ini::offsetSet
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $value
     * @return void
     */
    function offsetSet(mixed $name, mixed $value): mixed
-----
METHOD Yaf_Config_Ini::offsetUnset
-----
Is deprecated: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return void
     */
    function offsetUnset(mixed $name): mixed
-----
METHOD Yaf_Config_Ini::readonly
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function readonly(): mixed
-----
METHOD Yaf_Config_Ini::rewind
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): mixed
-----
METHOD Yaf_Config_Ini::toArray
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function toArray(): mixed
-----
METHOD Yaf_Config_Ini::valid
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function valid(): mixed
-----
CLASS Yaf_Config_Simple
-----
class Yaf_Config_Simple extends Yaf_Config_Abstract
{
}
-----
METHOD Yaf_Config_Simple::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $config
     * @param string $readonly
     * @return void
     */
    function __construct(mixed $config, mixed $readonly = null): mixed
-----
METHOD Yaf_Config_Simple::__get
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return void
     */
    function __get(mixed $name = null): mixed
-----
METHOD Yaf_Config_Simple::__isset
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return void
     */
    function __isset(mixed $name): mixed
-----
METHOD Yaf_Config_Simple::__set
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $value
     * @return void
     */
    function __set(mixed $name, mixed $value): mixed
-----
METHOD Yaf_Config_Simple::count
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int<0, max>
     */
    function count(): mixed
-----
METHOD Yaf_Config_Simple::current
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function current(): mixed
-----
METHOD Yaf_Config_Simple::key
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function key(): mixed
-----
METHOD Yaf_Config_Simple::next
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): mixed
-----
METHOD Yaf_Config_Simple::offsetExists
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return void
     */
    function offsetExists(mixed $name): mixed
-----
METHOD Yaf_Config_Simple::offsetGet
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return void
     */
    function offsetGet(mixed $name): mixed
-----
METHOD Yaf_Config_Simple::offsetSet
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $value
     * @return void
     */
    function offsetSet(mixed $name, mixed $value): mixed
-----
METHOD Yaf_Config_Simple::offsetUnset
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return void
     */
    function offsetUnset(mixed $name): mixed
-----
METHOD Yaf_Config_Simple::readonly
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function readonly(): mixed
-----
METHOD Yaf_Config_Simple::rewind
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): mixed
-----
METHOD Yaf_Config_Simple::toArray
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function toArray(): mixed
-----
METHOD Yaf_Config_Simple::valid
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function valid(): mixed
-----
CLASS Yaf_Controller_Abstract
-----
abstract class Yaf_Controller_Abstract
{
}
-----
METHOD Yaf_Controller_Abstract::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD Yaf_Controller_Abstract::display
-----
Has side-effects: Maybe
Visibility: protected
Variants: 1
    /**
     * @param string $tpl
     * @param array $parameters
     * @return bool
     */
    function display(mixed $tpl, array|null $parameters = null): mixed
-----
METHOD Yaf_Controller_Abstract::forward
-----
Has side-effects: Yes
Visibility: public
Variants: 3
    /**
     * @param string $module
     * @param array $controller
     * @return void
     */
    function forward(mixed $module, mixed $controller = null): mixed
    /**
     * @param string $module
     * @param string $controller
     * @param array $action
     * @return void
     */
    function forward(mixed $module, mixed $controller = null, mixed $action = null): mixed
    /**
     * @param string $module
     * @param string $controller
     * @param string $action
     * @param array $parameters
     * @return void
     */
    function forward(mixed $module, mixed $controller = null, mixed $action = null, array|null $parameters = null): mixed
-----
METHOD Yaf_Controller_Abstract::getInvokeArg
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return void
     */
    function getInvokeArg(mixed $name): mixed
-----
METHOD Yaf_Controller_Abstract::getInvokeArgs
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function getInvokeArgs(): mixed
-----
METHOD Yaf_Controller_Abstract::getModuleName
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getModuleName(): mixed
-----
METHOD Yaf_Controller_Abstract::getName
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function getName(): mixed
-----
METHOD Yaf_Controller_Abstract::getRequest
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Yaf_Request_Abstract
     */
    function getRequest(): mixed
-----
METHOD Yaf_Controller_Abstract::getResponse
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Yaf_Response_Abstract
     */
    function getResponse(): mixed
-----
METHOD Yaf_Controller_Abstract::getView
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Yaf_View_Interface
     */
    function getView(): mixed
-----
METHOD Yaf_Controller_Abstract::getViewpath
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function getViewpath(): mixed
-----
METHOD Yaf_Controller_Abstract::init
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function init(): mixed
-----
METHOD Yaf_Controller_Abstract::initView
-----
Is deprecated: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param array $options
     * @return void
     */
    function initView(array|null $options = null): mixed
-----
METHOD Yaf_Controller_Abstract::redirect
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $url
     * @return bool
     */
    function redirect(mixed $url): mixed
-----
METHOD Yaf_Controller_Abstract::render
-----
Has side-effects: Maybe
Visibility: protected
Variants: 1
    /**
     * @param string $tpl
     * @param array $parameters
     * @return string
     */
    function render(mixed $tpl, array|null $parameters = null): mixed
-----
METHOD Yaf_Controller_Abstract::setViewpath
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $view_directory
     * @return void
     */
    function setViewpath(mixed $view_directory): mixed
-----
CLASS Yaf_Dispatcher
-----
final class Yaf_Dispatcher
{
}
-----
METHOD Yaf_Dispatcher::__construct
-----
Has side-effects: Maybe
Visibility: private
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD Yaf_Dispatcher::autoRender
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $flag
     * @return Yaf_Dispatcher
     */
    function autoRender(mixed $flag = null): mixed
-----
METHOD Yaf_Dispatcher::catchException
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $flag
     * @return Yaf_Dispatcher
     */
    function catchException(mixed $flag = null): mixed
-----
METHOD Yaf_Dispatcher::disableView
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function disableView(): mixed
-----
METHOD Yaf_Dispatcher::dispatch
-----
Has side-effects: Maybe
Throw type: Yaf_Exception_DispatchFailed|Yaf_Exception_LoadFailed|Yaf_Exception_RouterFailed|Yaf_Exception_TypeError
Visibility: public
Variants: 1
    /**
     * @param Yaf_Request_Abstract $request
     * @return Yaf_Response_Abstract
     */
    function dispatch(mixed $request): mixed
-----
METHOD Yaf_Dispatcher::enableView
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Yaf_Dispatcher
     */
    function enableView(): mixed
-----
METHOD Yaf_Dispatcher::flushInstantly
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $flag
     * @return Yaf_Dispatcher
     */
    function flushInstantly(mixed $flag = null): mixed
-----
METHOD Yaf_Dispatcher::getApplication
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Yaf_Application
     */
    function getApplication(): mixed
-----
METHOD Yaf_Dispatcher::getDefaultAction
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function getDefaultAction(): mixed
-----
METHOD Yaf_Dispatcher::getDefaultController
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function getDefaultController(): mixed
-----
METHOD Yaf_Dispatcher::getDefaultModule
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function getDefaultModule(): mixed
-----
METHOD Yaf_Dispatcher::getInstance
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return Yaf_Dispatcher
     */
    function getInstance(): mixed
-----
METHOD Yaf_Dispatcher::getRequest
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Yaf_Request_Abstract
     */
    function getRequest(): mixed
-----
METHOD Yaf_Dispatcher::getRouter
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Yaf_Router
     */
    function getRouter(): mixed
-----
METHOD Yaf_Dispatcher::initView
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $templates_dir
     * @param array $options
     * @return Yaf_View_Interface
     */
    function initView(mixed $templates_dir, array|null $options = null): mixed
-----
METHOD Yaf_Dispatcher::registerPlugin
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param Yaf_Plugin_Abstract $plugin
     * @return Yaf_Dispatcher
     */
    function registerPlugin(mixed $plugin): mixed
-----
METHOD Yaf_Dispatcher::returnResponse
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $flag
     * @return Yaf_Dispatcher
     */
    function returnResponse(mixed $flag): mixed
-----
METHOD Yaf_Dispatcher::setDefaultAction
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $action
     * @return Yaf_Dispatcher
     */
    function setDefaultAction(mixed $action): mixed
-----
METHOD Yaf_Dispatcher::setDefaultController
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $controller
     * @return Yaf_Dispatcher
     */
    function setDefaultController(mixed $controller): mixed
-----
METHOD Yaf_Dispatcher::setDefaultModule
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $module
     * @return Yaf_Dispatcher
     */
    function setDefaultModule(mixed $module): mixed
-----
METHOD Yaf_Dispatcher::setErrorHandler
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param call $callback
     * @param int $error_types
     * @return Yaf_Dispatcher
     */
    function setErrorHandler(mixed $callback, mixed $error_types = 521): mixed
-----
METHOD Yaf_Dispatcher::setRequest
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param Yaf_Request_Abstract $request
     * @return Yaf_Dispatcher
     */
    function setRequest(mixed $request): mixed
-----
METHOD Yaf_Dispatcher::setView
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param Yaf_View_Interface $view
     * @return Yaf_Dispatcher
     */
    function setView(mixed $view): mixed
-----
METHOD Yaf_Dispatcher::throwException
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $flag
     * @return Yaf_Dispatcher
     */
    function throwException(mixed $flag = null): mixed
-----
CLASS Yaf_Exception
-----
class Yaf_Exception extends Exception
{
}
-----
METHOD Yaf_Exception::__construct
-----
Visibility: public
Variants: 1
    /**
     * @param string $message
     * @param int $code
     * @param Throwable|null $previous
     * @return void
     */
    function __construct(string $message = '', int $code = 0, Throwable|null $previous = null): mixed
-----
METHOD Yaf_Exception::getPrevious
-----
Is final: Yes
Throw type: void
Visibility: public
Variants: 1
    /**
     * @return Throwable|null
     */
    function getPrevious(): Throwable|null
-----
CLASS Yaf_Loader
-----
class Yaf_Loader
{
}
-----
METHOD Yaf_Loader::__construct
-----
Has side-effects: Maybe
Visibility: private
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD Yaf_Loader::autoload
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function autoload(): mixed
-----
METHOD Yaf_Loader::clearLocalNamespace
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function clearLocalNamespace(): mixed
-----
METHOD Yaf_Loader::getInstance
-----
Has side-effects: Yes
Static
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function getInstance(): mixed
-----
METHOD Yaf_Loader::getLibraryPath
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $is_global
     * @return Yaf_Loader
     */
    function getLibraryPath(mixed $is_global = false): mixed
-----
METHOD Yaf_Loader::getLocalNamespace
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function getLocalNamespace(): mixed
-----
METHOD Yaf_Loader::getNamespacePath
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $class_name
     * @return mixed
     */
    function getNamespacePath(mixed $class_name): mixed
-----
METHOD Yaf_Loader::import
-----
Has side-effects: Yes
Static
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function import(): mixed
-----
METHOD Yaf_Loader::isLocalName
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function isLocalName(): mixed
-----
METHOD Yaf_Loader::registerLocalNamespace
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param mixed $namespace
     * @return void
     */
    function registerLocalNamespace(mixed $namespace): mixed
-----
METHOD Yaf_Loader::registerNamespace
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $namespace
     * @param mixed $path
     * @return mixed
     */
    function registerNamespace(mixed $namespace, mixed $path = ''): mixed
-----
METHOD Yaf_Loader::setLibraryPath
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $library_path
     * @param bool $is_global
     * @return Yaf_Loader
     */
    function setLibraryPath(mixed $library_path, mixed $is_global = false): mixed
-----
CLASS Yaf_Plugin_Abstract
-----
abstract class Yaf_Plugin_Abstract
{
}
-----
METHOD Yaf_Plugin_Abstract::dispatchLoopShutdown
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param Yaf_Request_Abstract $request
     * @param Yaf_Response_Abstract $response
     * @return void
     */
    function dispatchLoopShutdown(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response): mixed
-----
METHOD Yaf_Plugin_Abstract::dispatchLoopStartup
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param Yaf_Request_Abstract $request
     * @param Yaf_Response_Abstract $response
     * @return void
     */
    function dispatchLoopStartup(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response): mixed
-----
METHOD Yaf_Plugin_Abstract::postDispatch
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param Yaf_Request_Abstract $request
     * @param Yaf_Response_Abstract $response
     * @return void
     */
    function postDispatch(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response): mixed
-----
METHOD Yaf_Plugin_Abstract::preDispatch
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param Yaf_Request_Abstract $request
     * @param Yaf_Response_Abstract $response
     * @return void
     */
    function preDispatch(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response): mixed
-----
METHOD Yaf_Plugin_Abstract::preResponse
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param Yaf_Request_Abstract $request
     * @param Yaf_Response_Abstract $response
     * @return void
     */
    function preResponse(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response): mixed
-----
METHOD Yaf_Plugin_Abstract::routerShutdown
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param Yaf_Request_Abstract $request
     * @param Yaf_Response_Abstract $response
     * @return void
     */
    function routerShutdown(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response): mixed
-----
METHOD Yaf_Plugin_Abstract::routerStartup
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param Yaf_Request_Abstract $request
     * @param Yaf_Response_Abstract $response
     * @return void
     */
    function routerStartup(Yaf_Request_Abstract $request, Yaf_Response_Abstract $response): mixed
-----
CLASS Yaf_Registry
-----
final class Yaf_Registry
{
}
-----
METHOD Yaf_Registry::__construct
-----
Has side-effects: Maybe
Visibility: private
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD Yaf_Registry::del
-----
Has side-effects: Yes
Static
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return void
     */
    function del(mixed $name): mixed
-----
METHOD Yaf_Registry::get
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return mixed
     */
    function get(mixed $name): mixed
-----
METHOD Yaf_Registry::has
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return bool
     */
    function has(mixed $name): mixed
-----
METHOD Yaf_Registry::set
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $value
     * @return bool
     */
    function set(mixed $name, mixed $value): mixed
-----
CLASS Yaf_Request_Abstract
-----
abstract class Yaf_Request_Abstract
{
}
-----
METHOD Yaf_Request_Abstract::clearParams
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function clearParams(): mixed
-----
METHOD Yaf_Request_Abstract::getActionName
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function getActionName(): mixed
-----
METHOD Yaf_Request_Abstract::getBaseUri
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function getBaseUri(): mixed
-----
METHOD Yaf_Request_Abstract::getControllerName
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function getControllerName(): mixed
-----
METHOD Yaf_Request_Abstract::getEnv
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $default
     * @return void
     */
    function getEnv(mixed $name = null, mixed $default = null): mixed
-----
METHOD Yaf_Request_Abstract::getException
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function getException(): mixed
-----
METHOD Yaf_Request_Abstract::getLanguage
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function getLanguage(): mixed
-----
METHOD Yaf_Request_Abstract::getMethod
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function getMethod(): mixed
-----
METHOD Yaf_Request_Abstract::getModuleName
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function getModuleName(): mixed
-----
METHOD Yaf_Request_Abstract::getParam
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $default
     * @return void
     */
    function getParam(mixed $name = '', mixed $default = ''): mixed
-----
METHOD Yaf_Request_Abstract::getParams
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function getParams(): mixed
-----
METHOD Yaf_Request_Abstract::getRequestUri
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function getRequestUri(): mixed
-----
METHOD Yaf_Request_Abstract::getServer
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $default
     * @return void
     */
    function getServer(mixed $name = null, mixed $default = null): mixed
-----
METHOD Yaf_Request_Abstract::isCli
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function isCli(): mixed
-----
METHOD Yaf_Request_Abstract::isDispatched
-----
Is final: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function isDispatched(): mixed
-----
METHOD Yaf_Request_Abstract::isGet
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function isGet(): mixed
-----
METHOD Yaf_Request_Abstract::isHead
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function isHead(): mixed
-----
METHOD Yaf_Request_Abstract::isOptions
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function isOptions(): mixed
-----
METHOD Yaf_Request_Abstract::isPost
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function isPost(): mixed
-----
METHOD Yaf_Request_Abstract::isPut
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function isPut(): mixed
-----
METHOD Yaf_Request_Abstract::isRouted
-----
Is final: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function isRouted(): mixed
-----
METHOD Yaf_Request_Abstract::isXmlHttpRequest
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function isXmlHttpRequest(): mixed
-----
METHOD Yaf_Request_Abstract::setActionName
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $action
     * @return void
     */
    function setActionName(mixed $action): mixed
-----
METHOD Yaf_Request_Abstract::setBaseUri
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $uri
     * @return bool
     */
    function setBaseUri(mixed $uri): mixed
-----
METHOD Yaf_Request_Abstract::setControllerName
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $controller
     * @return void
     */
    function setControllerName(mixed $controller): mixed
-----
METHOD Yaf_Request_Abstract::setDispatched
-----
Is final: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function setDispatched(): mixed
-----
METHOD Yaf_Request_Abstract::setModuleName
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $module
     * @return void
     */
    function setModuleName(mixed $module): mixed
-----
METHOD Yaf_Request_Abstract::setParam
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $value
     * @return void
     */
    function setParam(mixed $name, mixed $value = null): mixed
-----
METHOD Yaf_Request_Abstract::setRequestUri
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $uri
     * @return void
     */
    function setRequestUri(mixed $uri): mixed
-----
METHOD Yaf_Request_Abstract::setRouted
-----
Is final: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $flag
     * @return void
     */
    function setRouted(mixed $flag = null): mixed
-----
CLASS Yaf_Request_Http
-----
class Yaf_Request_Http extends Yaf_Request_Abstract
{
}
-----
METHOD Yaf_Request_Http::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD Yaf_Request_Http::get
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $default
     * @return mixed
     */
    function get(mixed $name, mixed $default = null): mixed
-----
METHOD Yaf_Request_Http::getCookie
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $default
     * @return mixed
     */
    function getCookie(mixed $name = null, mixed $default = null): mixed
-----
METHOD Yaf_Request_Http::getFiles
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function getFiles(): mixed
-----
METHOD Yaf_Request_Http::getPost
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $default
     * @return mixed
     */
    function getPost(mixed $name = null, mixed $default = null): mixed
-----
METHOD Yaf_Request_Http::getQuery
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $default
     * @return mixed
     */
    function getQuery(mixed $name = null, mixed $default = null): mixed
-----
METHOD Yaf_Request_Http::getRaw
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function getRaw(): mixed
-----
METHOD Yaf_Request_Http::getRequest
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function getRequest(): mixed
-----
METHOD Yaf_Request_Http::isXmlHttpRequest
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isXmlHttpRequest(): mixed
-----
CLASS Yaf_Request_Simple
-----
class Yaf_Request_Simple extends Yaf_Request_Abstract
{
}
-----
METHOD Yaf_Request_Simple::__construct
-----
Has side-effects: Maybe
Throw type: Yaf_Exception_TypeError
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD Yaf_Request_Simple::get
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function get(): mixed
-----
METHOD Yaf_Request_Simple::getCookie
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function getCookie(): mixed
-----
METHOD Yaf_Request_Simple::getFiles
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function getFiles(): mixed
-----
METHOD Yaf_Request_Simple::getPost
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function getPost(): mixed
-----
METHOD Yaf_Request_Simple::getQuery
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function getQuery(): mixed
-----
METHOD Yaf_Request_Simple::getRequest
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function getRequest(): mixed
-----
METHOD Yaf_Request_Simple::isXmlHttpRequest
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function isXmlHttpRequest(): mixed
-----
CLASS Yaf_Response_Abstract
-----
abstract class Yaf_Response_Abstract implements Stringable
{
}
-----
METHOD Yaf_Response_Abstract::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD Yaf_Response_Abstract::__destruct
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __destruct(): mixed
-----
METHOD Yaf_Response_Abstract::__toString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function __toString(): mixed
-----
METHOD Yaf_Response_Abstract::appendBody
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $body
     * @param string $name
     * @return bool
     */
    function appendBody(mixed $body, mixed $name = 'content'): mixed
-----
METHOD Yaf_Response_Abstract::clearBody
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return bool
     */
    function clearBody(mixed $name = 'content'): mixed
-----
METHOD Yaf_Response_Abstract::clearHeaders
-----
MISSING
-----
METHOD Yaf_Response_Abstract::getBody
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return mixed
     */
    function getBody(mixed $name = 'content'): mixed
-----
METHOD Yaf_Response_Abstract::getHeader
-----
MISSING
-----
METHOD Yaf_Response_Abstract::prependBody
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $body
     * @param string $name
     * @return bool
     */
    function prependBody(mixed $body, mixed $name = 'content'): mixed
-----
METHOD Yaf_Response_Abstract::response
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function response(): mixed
-----
METHOD Yaf_Response_Abstract::setAllHeaders
-----
MISSING
-----
METHOD Yaf_Response_Abstract::setBody
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $body
     * @param string $name
     * @return bool
     */
    function setBody(mixed $body, mixed $name = 'content'): mixed
-----
METHOD Yaf_Response_Abstract::setHeader
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function setHeader(): mixed
-----
METHOD Yaf_Response_Abstract::setRedirect
-----
MISSING
-----
CLASS Yaf_Route_Interface
-----
interface Yaf_Route_Interface
{
}
-----
METHOD Yaf_Route_Interface::assemble
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $info
     * @param array $query
     * @return string
     */
    function assemble(array $info, array|null $query = null): mixed
-----
METHOD Yaf_Route_Interface::route
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param Yaf_Request_Abstract $request
     * @return bool
     */
    function route(mixed $request): mixed
-----
CLASS Yaf_Route_Map
-----
final class Yaf_Route_Map implements Yaf_Route_Interface
{
}
-----
METHOD Yaf_Route_Map::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $controller_prefer
     * @param string $delimiter
     * @return void
     */
    function __construct(mixed $controller_prefer = false, mixed $delimiter = ''): mixed
-----
METHOD Yaf_Route_Map::assemble
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $info
     * @param array $query
     * @return string
     */
    function assemble(array $info, array|null $query = null): mixed
-----
METHOD Yaf_Route_Map::route
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param Yaf_Request_Abstract $request
     * @return bool
     */
    function route(mixed $request): mixed
-----
CLASS Yaf_Route_Regex
-----
final class Yaf_Route_Regex extends Yaf_Router implements Yaf_Route_Interface
{
}
-----
METHOD Yaf_Route_Regex::__construct
-----
Has side-effects: Maybe
Throw type: Yaf_Exception_TypeError
Visibility: public
Variants: 1
    /**
     * @param string $match
     * @param array $route
     * @param array $map
     * @param array $verify
     * @param string $reverse
     * @return void
     */
    function __construct(mixed $match, array $route, array|null $map = null, array|null $verify = null, mixed $reverse = null): mixed
-----
METHOD Yaf_Route_Regex::assemble
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $info
     * @param array $query
     * @return string
     */
    function assemble(array $info, array|null $query = null): mixed
-----
METHOD Yaf_Route_Regex::route
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param Yaf_Request_Abstract $request
     * @return bool
     */
    function route(mixed $request): mixed
-----
CLASS Yaf_Route_Rewrite
-----
final class Yaf_Route_Rewrite extends Yaf_Router implements Yaf_Route_Interface
{
}
-----
METHOD Yaf_Route_Rewrite::__construct
-----
Has side-effects: Maybe
Throw type: Yaf_Exception_TypeError
Visibility: public
Variants: 1
    /**
     * @param string $match
     * @param array $route
     * @param array $verify
     * @return void
     */
    function __construct(mixed $match, array $route, array|null $verify = null): mixed
-----
METHOD Yaf_Route_Rewrite::assemble
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $info
     * @param array $query
     * @return string
     */
    function assemble(array $info, array|null $query = null): mixed
-----
METHOD Yaf_Route_Rewrite::route
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param Yaf_Request_Abstract $request
     * @return bool
     */
    function route(mixed $request): mixed
-----
CLASS Yaf_Route_Simple
-----
final class Yaf_Route_Simple implements Yaf_Route_Interface
{
}
-----
METHOD Yaf_Route_Simple::__construct
-----
Has side-effects: Maybe
Throw type: Yaf_Exception_TypeError
Visibility: public
Variants: 1
    /**
     * @param string $module_name
     * @param string $controller_name
     * @param string $action_name
     * @return void
     */
    function __construct(mixed $module_name, mixed $controller_name, mixed $action_name): mixed
-----
METHOD Yaf_Route_Simple::assemble
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $info
     * @param array $query
     * @return string
     */
    function assemble(array $info, array|null $query = null): mixed
-----
METHOD Yaf_Route_Simple::route
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param Yaf_Request_Abstract $request
     * @return bool
     */
    function route(mixed $request): mixed
-----
CLASS Yaf_Route_Static
-----
class Yaf_Route_Static implements Yaf_Route_Interface
{
}
-----
METHOD Yaf_Route_Static::assemble
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $info
     * @param array $query
     * @return string
     */
    function assemble(array $info, array|null $query = null): mixed
-----
METHOD Yaf_Route_Static::match
-----
Is deprecated: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $uri
     * @return void
     */
    function match(mixed $uri): mixed
-----
METHOD Yaf_Route_Static::route
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param Yaf_Request_Abstract $request
     * @return bool
     */
    function route(mixed $request): mixed
-----
CLASS Yaf_Route_Supervar
-----
final class Yaf_Route_Supervar implements Yaf_Route_Interface
{
}
-----
METHOD Yaf_Route_Supervar::__construct
-----
Has side-effects: Maybe
Throw type: Yaf_Exception_TypeError
Visibility: public
Variants: 1
    /**
     * @param string $supervar_name
     * @return void
     */
    function __construct(mixed $supervar_name): mixed
-----
METHOD Yaf_Route_Supervar::assemble
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array $info
     * @param array $query
     * @return string
     */
    function assemble(array $info, array|null $query = null): mixed
-----
METHOD Yaf_Route_Supervar::route
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param Yaf_Request_Abstract $request
     * @return bool
     */
    function route(mixed $request): mixed
-----
CLASS Yaf_Router
-----
class Yaf_Router
{
}
-----
METHOD Yaf_Router::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD Yaf_Router::addConfig
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param Yaf_Config_Abstract $config
     * @return bool
     */
    function addConfig(mixed $config): mixed
-----
METHOD Yaf_Router::addRoute
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param Yaf_Route_Abstract $route
     * @return bool
     */
    function addRoute(mixed $name, mixed $route): mixed
-----
METHOD Yaf_Router::getCurrentRoute
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getCurrentRoute(): mixed
-----
METHOD Yaf_Router::getRoute
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return Yaf_Route_Interface
     */
    function getRoute(mixed $name): mixed
-----
METHOD Yaf_Router::getRoutes
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function getRoutes(): mixed
-----
METHOD Yaf_Router::route
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param Yaf_Request_Abstract $request
     * @return bool
     */
    function route(mixed $request): mixed
-----
CLASS Yaf_Session
-----
final class Yaf_Session implements Iterator, ArrayAccess, Countable
{
}
-----
METHOD Yaf_Session::__construct
-----
Has side-effects: Maybe
Visibility: private
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD Yaf_Session::__get
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return void
     */
    function __get(mixed $name): mixed
-----
METHOD Yaf_Session::__isset
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return void
     */
    function __isset(mixed $name): mixed
-----
METHOD Yaf_Session::__set
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $value
     * @return void
     */
    function __set(mixed $name, mixed $value): mixed
-----
METHOD Yaf_Session::__unset
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return void
     */
    function __unset(mixed $name): mixed
-----
METHOD Yaf_Session::count
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int<0, max>
     */
    function count(): mixed
-----
METHOD Yaf_Session::current
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function current(): mixed
-----
METHOD Yaf_Session::del
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return void
     */
    function del(mixed $name): mixed
-----
METHOD Yaf_Session::getInstance
-----
Has side-effects: Yes
Static
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function getInstance(): mixed
-----
METHOD Yaf_Session::has
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return void
     */
    function has(mixed $name): mixed
-----
METHOD Yaf_Session::key
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function key(): mixed
-----
METHOD Yaf_Session::next
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function next(): mixed
-----
METHOD Yaf_Session::offsetExists
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return void
     */
    function offsetExists(mixed $name): mixed
-----
METHOD Yaf_Session::offsetGet
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return void
     */
    function offsetGet(mixed $name): mixed
-----
METHOD Yaf_Session::offsetSet
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $value
     * @return void
     */
    function offsetSet(mixed $name, mixed $value): mixed
-----
METHOD Yaf_Session::offsetUnset
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return void
     */
    function offsetUnset(mixed $name): mixed
-----
METHOD Yaf_Session::rewind
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function rewind(): mixed
-----
METHOD Yaf_Session::start
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function start(): mixed
-----
METHOD Yaf_Session::valid
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function valid(): mixed
-----
CLASS Yaf_View_Interface
-----
interface Yaf_View_Interface
{
}
-----
METHOD Yaf_View_Interface::assign
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $value
     * @return bool
     */
    function assign(mixed $name, mixed $value = ''): mixed
-----
METHOD Yaf_View_Interface::display
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $tpl
     * @param array $tpl_vars
     * @return bool
     */
    function display(mixed $tpl, mixed $tpl_vars = null): mixed
-----
METHOD Yaf_View_Interface::getScriptPath
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function getScriptPath(): mixed
-----
METHOD Yaf_View_Interface::render
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $tpl
     * @param array $tpl_vars
     * @return string
     */
    function render(mixed $tpl, mixed $tpl_vars = null): mixed
-----
METHOD Yaf_View_Interface::setScriptPath
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $template_dir
     * @return void
     */
    function setScriptPath(mixed $template_dir): mixed
-----
CLASS Yaf_View_Simple
-----
class Yaf_View_Simple implements Yaf_View_Interface
{
}
-----
METHOD Yaf_View_Simple::__construct
-----
Is final: Yes
Has side-effects: Maybe
Throw type: Yaf_Exception_TypeError
Visibility: public
Variants: 1
    /**
     * @param string $template_dir
     * @param array $options
     * @return void
     */
    function __construct(mixed $template_dir, array|null $options = null): mixed
-----
METHOD Yaf_View_Simple::__get
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return void
     */
    function __get(mixed $name = null): mixed
-----
METHOD Yaf_View_Simple::__isset
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return void
     */
    function __isset(mixed $name): mixed
-----
METHOD Yaf_View_Simple::__set
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param mixed $value
     * @return void
     */
    function __set(mixed $name, mixed $value = null): mixed
-----
METHOD Yaf_View_Simple::assign
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param mixed $value
     * @return bool
     */
    function assign(mixed $name, mixed $value = null): mixed
-----
METHOD Yaf_View_Simple::assignRef
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param mixed $value
     * @return bool
     */
    function assignRef(mixed $name, mixed &r$value): mixed
-----
METHOD Yaf_View_Simple::clear
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return bool
     */
    function clear(mixed $name = null): mixed
-----
METHOD Yaf_View_Simple::display
-----
Has side-effects: Maybe
Throw type: Yaf_Exception_LoadFailed_View
Visibility: public
Variants: 1
    /**
     * @param string $tpl
     * @param array $tpl_vars
     * @return bool
     */
    function display(mixed $tpl, mixed $tpl_vars = null): mixed
-----
METHOD Yaf_View_Simple::eval
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $tpl_str
     * @param array $vars
     * @return string
     */
    function eval(mixed $tpl_str, mixed $vars = null): mixed
-----
METHOD Yaf_View_Simple::getScriptPath
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getScriptPath(): mixed
-----
METHOD Yaf_View_Simple::render
-----
Has side-effects: Maybe
Throw type: Yaf_Exception_LoadFailed_View
Visibility: public
Variants: 1
    /**
     * @param string $tpl
     * @param array $tpl_vars
     * @return string
     */
    function render(mixed $tpl, mixed $tpl_vars = null): mixed
-----
METHOD Yaf_View_Simple::setScriptPath
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $template_dir
     * @return bool
     */
    function setScriptPath(mixed $template_dir): mixed
-----
CLASS Yar_Client
-----
class Yar_Client
{
}
-----
METHOD Yar_Client::__call
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param string $method
     * @param array $parameters
     * @return void
     */
    function __call(mixed $method, mixed $parameters): mixed
-----
METHOD Yar_Client::__construct
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $url
     * @return void
     */
    function __construct(mixed $url): mixed
-----
METHOD Yar_Client::setOpt
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $type
     * @param mixed $value
     * @return bool
     */
    function setOpt(mixed $type, mixed $value): mixed
-----
CLASS Yar_Client_Exception
-----
class Yar_Client_Exception extends Exception
{
}
-----
METHOD Yar_Client_Exception::getType
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function getType(): mixed
-----
CLASS Yar_Concurrent_Client
-----
class Yar_Concurrent_Client
{
}
-----
METHOD Yar_Concurrent_Client::call
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param string $uri
     * @param string $method
     * @param array $parameters
     * @param callable(): mixed $callback
     * @return int
     */
    function call(mixed $uri, mixed $method, mixed $parameters, (callable(): mixed)|null $callback = null): mixed
-----
METHOD Yar_Concurrent_Client::loop
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @param callable(): mixed $error_callback
     * @return bool
     */
    function loop(mixed $callback = null, mixed $error_callback = null): mixed
-----
METHOD Yar_Concurrent_Client::reset
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function reset(): mixed
-----
CLASS Yar_Server
-----
class Yar_Server
{
}
-----
METHOD Yar_Server::__construct
-----
Is final: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param object $obj
     * @return void
     */
    function __construct(mixed $obj): mixed
-----
METHOD Yar_Server::handle
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function handle(): mixed
-----
CLASS Yar_Server_Exception
-----
class Yar_Server_Exception extends Exception
{
}
-----
METHOD Yar_Server_Exception::getType
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getType(): mixed
-----
CLASS ZMQ
-----
class ZMQ
{
}
-----
METHOD ZMQ::__construct
-----
Has side-effects: Maybe
Visibility: private
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
CLASS ZMQContext
-----
class ZMQContext
{
}
-----
METHOD ZMQContext::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $io_threads
     * @param bool $is_persistent
     * @return void
     */
    function __construct(mixed $io_threads = 1, mixed $is_persistent = true): mixed
-----
METHOD ZMQContext::getOpt
-----
Has side-effects: Maybe
Throw type: ZMQContextException
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @return mixed
     */
    function getOpt(mixed $key): mixed
-----
METHOD ZMQContext::getSocket
-----
Has side-effects: Maybe
Throw type: ZMQSocketException
Visibility: public
Variants: 1
    /**
     * @param int $type
     * @param string $persistent_id
     * @param callable(): mixed $on_new_socket
     * @return ZMQSocket
     */
    function getSocket(mixed $type, mixed $persistent_id = null, mixed $on_new_socket = null): mixed
-----
METHOD ZMQContext::isPersistent
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isPersistent(): mixed
-----
METHOD ZMQContext::setOpt
-----
Has side-effects: Maybe
Throw type: ZMQContextException
Visibility: public
Variants: 1
    /**
     * @param int $key
     * @param mixed $value
     * @return ZMQContext
     */
    function setOpt(mixed $key, mixed $value): mixed
-----
CLASS ZMQDevice
-----
class ZMQDevice
{
}
-----
METHOD ZMQDevice::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param ZMQSocket $frontend
     * @param ZMQSocket $backend
     * @param ZMQSocket $listener
     * @return void
     */
    function __construct(ZMQSocket $frontend, ZMQSocket $backend, ZMQSocket|null $listener = null): mixed
-----
METHOD ZMQDevice::getIdleTimeout
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return ZMQDevice
     */
    function getIdleTimeout(): mixed
-----
METHOD ZMQDevice::getTimerTimeout
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return ZMQDevice
     */
    function getTimerTimeout(): mixed
-----
METHOD ZMQDevice::run
-----
Has side-effects: Yes
Throw type: ZMQDeviceException
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function run(): mixed
-----
METHOD ZMQDevice::setIdleCallback
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $cb_func
     * @param int $timeout
     * @param mixed $user_data
     * @return ZMQDevice
     */
    function setIdleCallback(mixed $cb_func, mixed $timeout, mixed $user_data): mixed
-----
METHOD ZMQDevice::setIdleTimeout
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $timeout
     * @return ZMQDevice
     */
    function setIdleTimeout(mixed $timeout): mixed
-----
METHOD ZMQDevice::setTimerCallback
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $cb_func
     * @param int $timeout
     * @param mixed $user_data
     * @return ZMQDevice
     */
    function setTimerCallback(mixed $cb_func, mixed $timeout, mixed $user_data): mixed
-----
METHOD ZMQDevice::setTimerTimeout
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $timeout
     * @return ZMQDevice
     */
    function setTimerTimeout(mixed $timeout): mixed
-----
CLASS ZMQPoll
-----
class ZMQPoll
{
}
-----
METHOD ZMQPoll::add
-----
Has side-effects: Maybe
Throw type: ZMQPollException
Visibility: public
Variants: 1
    /**
     * @param mixed $entry
     * @param int $type
     * @return string
     */
    function add(ZMQSocket $entry, mixed $type): mixed
-----
METHOD ZMQPoll::clear
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return ZMQPoll
     */
    function clear(): mixed
-----
METHOD ZMQPoll::count
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int<0, max>
     */
    function count(): mixed
-----
METHOD ZMQPoll::getLastErrors
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getLastErrors(): mixed
-----
METHOD ZMQPoll::poll
-----
Has side-effects: Maybe
Throw type: ZMQPollException
Visibility: public
Variants: 1
    /**
     * @param array $readable
     * @param array $writable
     * @param int $timeout
     * @return int
     */
    function poll(array &rw$readable, array &rw$writable, mixed $timeout = -1): mixed
-----
METHOD ZMQPoll::remove
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $item
     * @return bool
     */
    function remove(mixed $item): mixed
-----
CLASS ZMQSocket
-----
class ZMQSocket
{
}
-----
METHOD ZMQSocket::__construct
-----
Has side-effects: Maybe
Throw type: ZMQSocketException
Visibility: public
Variants: 1
    /**
     * @param ZMQContext $context
     * @param int $type
     * @param string $persistent_id
     * @param callable(): mixed $on_new_socket
     * @return void
     */
    function __construct(ZMQContext $context, mixed $type, mixed $persistent_id = null, mixed $on_new_socket = null): mixed
-----
METHOD ZMQSocket::bind
-----
Has side-effects: Maybe
Throw type: ZMQSocketException
Visibility: public
Variants: 1
    /**
     * @param string $dsn
     * @param bool $force
     * @return ZMQSocket
     */
    function bind(mixed $dsn, mixed $force = false): mixed
-----
METHOD ZMQSocket::connect
-----
Has side-effects: Maybe
Throw type: ZMQSocketException
Visibility: public
Variants: 1
    /**
     * @param string $dsn
     * @param bool $force
     * @return ZMQSocket
     */
    function connect(mixed $dsn, mixed $force = false): mixed
-----
METHOD ZMQSocket::disconnect
-----
Has side-effects: Maybe
Throw type: ZMQSocketException
Visibility: public
Variants: 1
    /**
     * @param string $dsn
     * @return ZMQSocket
     */
    function disconnect(mixed $dsn): mixed
-----
METHOD ZMQSocket::getEndpoints
-----
Has side-effects: Maybe
Throw type: ZMQSocketException
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getEndpoints(): mixed
-----
METHOD ZMQSocket::getPersistentId
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getPersistentId(): mixed
-----
METHOD ZMQSocket::getSockOpt
-----
Has side-effects: Maybe
Throw type: ZMQSocketException
Visibility: public
Variants: 1
    /**
     * @param string $key
     * @return mixed
     */
    function getSockOpt(mixed $key): mixed
-----
METHOD ZMQSocket::getSocketType
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getSocketType(): mixed
-----
METHOD ZMQSocket::isPersistent
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isPersistent(): mixed
-----
METHOD ZMQSocket::recv
-----
Has side-effects: Maybe
Throw type: ZMQSocketException
Visibility: public
Variants: 1
    /**
     * @param int $mode
     * @return string
     */
    function recv(mixed $mode = 0): mixed
-----
METHOD ZMQSocket::recvMulti
-----
Has side-effects: Maybe
Throw type: ZMQSocketException
Visibility: public
Variants: 1
    /**
     * @param int $mode
     * @return array<string>
     */
    function recvMulti(mixed $mode = 0): mixed
-----
METHOD ZMQSocket::send
-----
Has side-effects: Maybe
Throw type: ZMQSocketException
Visibility: public
Variants: 2
    /**
     * @param array $message
     * @param int $mode
     * @return ZMQSocket
     */
    function send(mixed $message, mixed $mode = 0): mixed
    /**
     * @param string $message
     * @param int $mode
     * @return ZMQSocket
     */
    function send(mixed $message, mixed $mode = 0): mixed
-----
METHOD ZMQSocket::sendmulti
-----
Has side-effects: Maybe
Throw type: ZMQSocketException
Visibility: public
Variants: 1
    /**
     * @param array $message
     * @param int $mode
     * @return ZMQSocket
     */
    function sendmulti(array $message, mixed $mode = 0): mixed
-----
METHOD ZMQSocket::setSockOpt
-----
Has side-effects: Maybe
Throw type: ZMQSocketException
Visibility: public
Variants: 1
    /**
     * @param int $key
     * @param mixed $value
     * @return ZMQSocket
     */
    function setSockOpt(mixed $key, mixed $value): mixed
-----
METHOD ZMQSocket::unbind
-----
Has side-effects: Maybe
Throw type: ZMQSocketException
Visibility: public
Variants: 1
    /**
     * @param string $dsn
     * @return ZMQSocket
     */
    function unbind(mixed $dsn): mixed
-----
CLASS ZipArchive
-----
class ZipArchive implements Countable
{
}
-----
METHOD ZipArchive::addEmptyDir
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $dirname
     * @param int $flags
     * @return bool
     */
    function addEmptyDir(string $dirname, int $flags = 0): mixed
-----
METHOD ZipArchive::addFile
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $filepath
     * @param string $entryname
     * @param int $start
     * @param int $length
     * @param int $flags
     * @return bool
     */
    function addFile(string $filepath, string $entryname = '', int $start = 0, int $length = 0, int $flags = 8192): mixed
-----
METHOD ZipArchive::addFromString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $content
     * @param int $flags
     * @return bool
     */
    function addFromString(string $name, string $content, int $flags = 8192): mixed
-----
METHOD ZipArchive::addGlob
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $pattern
     * @param int $flags
     * @param array $options
     * @return bool
     */
    function addGlob(string $pattern, int $flags = 0, array $options = array{}): mixed
-----
METHOD ZipArchive::addPattern
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $pattern
     * @param string $path
     * @param array $options
     * @return bool
     */
    function addPattern(string $pattern, string $path = '.', array $options = array{}): mixed
-----
METHOD ZipArchive::clearError
-----
MISSING
-----
METHOD ZipArchive::close
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function close(): mixed
-----
METHOD ZipArchive::count
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function count(): mixed
-----
METHOD ZipArchive::deleteIndex
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @return bool
     */
    function deleteIndex(int $index): mixed
-----
METHOD ZipArchive::deleteName
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return bool
     */
    function deleteName(string $name): mixed
-----
METHOD ZipArchive::extractTo
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $pathto
     * @param array<string>|string|null $files
     * @return bool
     */
    function extractTo(string $pathto, array|string|null $files = null): mixed
-----
METHOD ZipArchive::getArchiveComment
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $flags
     * @return string
     */
    function getArchiveComment(int $flags = 0): mixed
-----
METHOD ZipArchive::getArchiveFlag
-----
MISSING
-----
METHOD ZipArchive::getCommentIndex
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @param int $flags
     * @return string
     */
    function getCommentIndex(int $index, int $flags = 0): mixed
-----
METHOD ZipArchive::getCommentName
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param int $flags
     * @return string
     */
    function getCommentName(string $name, int $flags = 0): mixed
-----
METHOD ZipArchive::getExternalAttributesIndex
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @param int $opsys
     * @param int $attr
     * @param int $flags
     * @return bool
     */
    function getExternalAttributesIndex(int $index, mixed &rw$opsys, mixed &rw$attr, int $flags = 0): mixed
-----
METHOD ZipArchive::getExternalAttributesName
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param int $opsys
     * @param int $attr
     * @param int $flags
     * @return bool
     */
    function getExternalAttributesName(string $name, mixed &rw$opsys, mixed &rw$attr, int $flags = 0): mixed
-----
METHOD ZipArchive::getFromIndex
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @param int $len
     * @param int $flags
     * @return string|false
     */
    function getFromIndex(int $index, int $len = 0, int $flags = 0): mixed
-----
METHOD ZipArchive::getFromName
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param int $len
     * @param int $flags
     * @return string|false
     */
    function getFromName(string $name, int $len = 0, int $flags = 0): mixed
-----
METHOD ZipArchive::getNameIndex
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @param int $flags
     * @return string|false
     */
    function getNameIndex(int $index, int $flags = 0): mixed
-----
METHOD ZipArchive::getStatusString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getStatusString(): mixed
-----
METHOD ZipArchive::getStream
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return resource|false
     */
    function getStream(string $name): mixed
-----
METHOD ZipArchive::getStreamIndex
-----
MISSING
-----
METHOD ZipArchive::getStreamName
-----
MISSING
-----
METHOD ZipArchive::isCompressionMethodSupported
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int $method
     * @param bool $enc
     * @return bool
     */
    function isCompressionMethodSupported(int $method, bool $enc = true): bool
-----
METHOD ZipArchive::isEncryptionMethodSupported
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int $method
     * @param bool $enc
     * @return bool
     */
    function isEncryptionMethodSupported(int $method, bool $enc = true): bool
-----
METHOD ZipArchive::locateName
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param int $flags
     * @return int|false
     */
    function locateName(string $name, int $flags = 0): mixed
-----
METHOD ZipArchive::open
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @param int $flags
     * @return 0|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32|true
     */
    function open(string $filename, int $flags = 0): mixed
-----
METHOD ZipArchive::registerCancelCallback
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $callback
     * @return bool
     */
    function registerCancelCallback(callable(): mixed $callback): mixed
-----
METHOD ZipArchive::registerProgressCallback
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param float $rate
     * @param callable(): mixed $callback
     * @return bool
     */
    function registerProgressCallback(float $rate, callable(): mixed $callback): mixed
-----
METHOD ZipArchive::renameIndex
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @param string $new_name
     * @return bool
     */
    function renameIndex(int $index, string $new_name): mixed
-----
METHOD ZipArchive::renameName
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $new_name
     * @return bool
     */
    function renameName(string $name, string $new_name): mixed
-----
METHOD ZipArchive::replaceFile
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $filepath
     * @param int $index
     * @param int $start
     * @param int $length
     * @param int $flags
     * @return bool
     */
    function replaceFile(string $filepath, int $index, int $start = 0, int $length = 0, int $flags = 0): mixed
-----
METHOD ZipArchive::setArchiveComment
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $comment
     * @return bool
     */
    function setArchiveComment(string $comment): mixed
-----
METHOD ZipArchive::setArchiveFlag
-----
MISSING
-----
METHOD ZipArchive::setCommentIndex
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @param string $comment
     * @return bool
     */
    function setCommentIndex(int $index, string $comment): mixed
-----
METHOD ZipArchive::setCommentName
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param string $comment
     * @return bool
     */
    function setCommentName(string $name, string $comment): mixed
-----
METHOD ZipArchive::setCompressionIndex
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @param int $method
     * @param int $compflags
     * @return bool
     */
    function setCompressionIndex(int $index, int $method, int $compflags = 0): mixed
-----
METHOD ZipArchive::setCompressionName
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param int $method
     * @param int $compflags
     * @return bool
     */
    function setCompressionName(string $name, int $method, int $compflags = 0): mixed
-----
METHOD ZipArchive::setEncryptionIndex
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @param int $method
     * @param string|null $password
     * @return bool
     */
    function setEncryptionIndex(int $index, int $method, string|null $password = null): mixed
-----
METHOD ZipArchive::setEncryptionName
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param int $method
     * @param string|null $password
     * @return bool
     */
    function setEncryptionName(string $name, int $method, string|null $password = null): mixed
-----
METHOD ZipArchive::setExternalAttributesIndex
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @param int $opsys
     * @param int $attr
     * @param int $flags
     * @return bool
     */
    function setExternalAttributesIndex(int $index, int $opsys, int $attr, int $flags = 0): mixed
-----
METHOD ZipArchive::setExternalAttributesName
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param int $opsys
     * @param int $attr
     * @param int $flags
     * @return bool
     */
    function setExternalAttributesName(string $name, int $opsys, int $attr, int $flags = 0): mixed
-----
METHOD ZipArchive::setMtimeIndex
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @param int $timestamp
     * @param int $flags
     * @return bool
     */
    function setMtimeIndex(int $index, int $timestamp, int $flags = 0): mixed
-----
METHOD ZipArchive::setMtimeName
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param int $timestamp
     * @param int $flags
     * @return bool
     */
    function setMtimeName(string $name, int $timestamp, int $flags = 0): mixed
-----
METHOD ZipArchive::setPassword
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $password
     * @return bool
     */
    function setPassword(string $password): mixed
-----
METHOD ZipArchive::statIndex
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @param int $flags
     * @return array|false
     */
    function statIndex(int $index, int $flags = 0): mixed
-----
METHOD ZipArchive::statName
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param int $flags
     * @return array|false
     */
    function statName(string $name, int $flags = 0): mixed
-----
METHOD ZipArchive::unchangeAll
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function unchangeAll(): mixed
-----
METHOD ZipArchive::unchangeArchive
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function unchangeArchive(): mixed
-----
METHOD ZipArchive::unchangeIndex
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @return bool
     */
    function unchangeIndex(int $index): mixed
-----
METHOD ZipArchive::unchangeName
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return bool
     */
    function unchangeName(string $name): mixed
-----
CLASS Zookeeper
-----
class Zookeeper
{
}
-----
METHOD Zookeeper::__construct
-----
Is internal: Yes
Has side-effects: Maybe
Throw type: ZookeeperException
Visibility: public
Variants: 1
    /**
     * @param string $host
     * @param (callable(): mixed)|null $watcher_cb
     * @param int $recv_timeout
     * @return void
     */
    function __construct(mixed $host = '', mixed $watcher_cb = null, mixed $recv_timeout = 10000): mixed
-----
METHOD Zookeeper::addAuth
-----
Has side-effects: Maybe
Throw type: ZookeeperException
Visibility: public
Variants: 1
    /**
     * @param string $scheme
     * @param string $cert
     * @param callable(): mixed $completion_cb
     * @return bool
     */
    function addAuth(mixed $scheme, mixed $cert, mixed $completion_cb = null): mixed
-----
METHOD Zookeeper::close
-----
Is internal: Yes
Has side-effects: Maybe
Throw type: ZookeeperException
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function close(): mixed
-----
METHOD Zookeeper::connect
-----
Has side-effects: Yes
Throw type: ZookeeperException
Visibility: public
Variants: 1
    /**
     * @param string $host
     * @param callable(): mixed $watcher_cb
     * @param int $recv_timeout
     * @return void
     */
    function connect(mixed $host, mixed $watcher_cb = null, mixed $recv_timeout = 10000): mixed
-----
METHOD Zookeeper::create
-----
Has side-effects: Maybe
Throw type: ZookeeperException
Visibility: public
Variants: 1
    /**
     * @param string $path
     * @param string $value
     * @param array $acl
     * @param int $flags
     * @return string
     */
    function create(mixed $path, mixed $value, mixed $acl, mixed $flags = null): mixed
-----
METHOD Zookeeper::delete
-----
Has side-effects: Maybe
Throw type: ZookeeperException
Visibility: public
Variants: 1
    /**
     * @param string $path
     * @param int $version
     * @return bool
     */
    function delete(mixed $path, mixed $version = -1): mixed
-----
METHOD Zookeeper::exists
-----
Has side-effects: Maybe
Throw type: ZookeeperException
Visibility: public
Variants: 1
    /**
     * @param string $path
     * @param callable(): mixed $watcher_cb
     * @return bool
     */
    function exists(mixed $path, mixed $watcher_cb = null): mixed
-----
METHOD Zookeeper::get
-----
Has side-effects: Maybe
Throw type: ZookeeperException
Visibility: public
Variants: 1
    /**
     * @param string $path
     * @param callable(): mixed $watcher_cb
     * @param array $stat
     * @param int $max_size
     * @return string
     */
    function get(mixed $path, mixed $watcher_cb = null, mixed $stat = null, mixed $max_size = 0): mixed
-----
METHOD Zookeeper::getAcl
-----
Throw type: ZookeeperException
Visibility: public
Variants: 1
    /**
     * @param string $path
     * @return array
     */
    function getAcl(mixed $path): mixed
-----
METHOD Zookeeper::getChildren
-----
Throw type: ZookeeperException
Visibility: public
Variants: 1
    /**
     * @param string $path
     * @param callable(): mixed $watcher_cb
     * @return array
     */
    function getChildren(mixed $path, mixed $watcher_cb = null): mixed
-----
METHOD Zookeeper::getClientId
-----
Throw type: ZookeeperException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getClientId(): mixed
-----
METHOD Zookeeper::getConfig
-----
MISSING
-----
METHOD Zookeeper::getRecvTimeout
-----
Throw type: ZookeeperException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getRecvTimeout(): mixed
-----
METHOD Zookeeper::getState
-----
Throw type: ZookeeperException
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getState(): mixed
-----
METHOD Zookeeper::isRecoverable
-----
Has side-effects: Maybe
Throw type: ZookeeperException
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isRecoverable(): mixed
-----
METHOD Zookeeper::set
-----
Has side-effects: Maybe
Throw type: ZookeeperException
Visibility: public
Variants: 1
    /**
     * @param string $path
     * @param string $data
     * @param int $version
     * @param array $stat
     * @return bool
     */
    function set(mixed $path, mixed $data, mixed $version = -1, mixed $stat = null): mixed
-----
METHOD Zookeeper::setAcl
-----
Has side-effects: Maybe
Throw type: ZookeeperException
Visibility: public
Variants: 1
    /**
     * @param string $path
     * @param int $version
     * @param array $acls
     * @return bool
     */
    function setAcl(mixed $path, mixed $version, mixed $acls): mixed
-----
METHOD Zookeeper::setDebugLevel
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param int $level
     * @return bool
     */
    function setDebugLevel(mixed $level): mixed
-----
METHOD Zookeeper::setDeterministicConnOrder
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param bool $trueOrFalse
     * @return bool
     */
    function setDeterministicConnOrder(mixed $trueOrFalse): mixed
-----
METHOD Zookeeper::setLogStream
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param resource $file
     * @return bool
     */
    function setLogStream(mixed $file): mixed
-----
METHOD Zookeeper::setWatcher
-----
Has side-effects: Maybe
Throw type: ZookeeperException
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $watcher_cb
     * @return bool
     */
    function setWatcher(mixed $watcher_cb): mixed
-----
CLASS ZookeeperConfig
-----
MISSING
-----
CLASS com
-----
class COM
{
}
-----
METHOD com::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $module_name
     * @param array|string|null $server_name
     * @param int $codepage
     * @param string $typelib
     * @return void
     */
    function __construct(string $module_name, array|string|null $server_name = null, int $codepage = 0, string $typelib = ''): mixed
-----
CLASS dotnet
-----
class DOTNET
{
}
-----
METHOD dotnet::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $assembly_name
     * @param string $class_name
     * @param int $codepage
     * @return void
     */
    function __construct(string $assembly_name, string $class_name, int $codepage = 0): mixed
-----
CLASS finfo
-----
class finfo
{
}
-----
METHOD finfo::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $flags
     * @param string|null $magic_database
     * @return void
     */
    function __construct(int $flags = 0, string|null $magic_database = null): mixed
-----
METHOD finfo::buffer
-----
Visibility: public
Variants: 1
    /**
     * @param string $string
     * @param int $flags
     * @param resource|null $context
     * @return string|false
     */
    function buffer(string $string, int $flags = 0, mixed $context = null): mixed
-----
METHOD finfo::file
-----
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @param int $flags
     * @param resource|null $context
     * @return string|false
     */
    function file(string $filename, int $flags = 0, mixed $context = null): mixed
-----
METHOD finfo::set_flags
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $flags
     * @return bool
     */
    function set_flags(int $flags): mixed
-----
CLASS mysql_xdevapi\Client
-----
MISSING
-----
CLASS mysqli
-----
class mysqli
{
}
-----
PROPERTY mysqli::affected_rows
-----
Visibility: public
Read type: int<-1, max>|numeric-string
Write type: int<-1, max>|numeric-string
-----
PROPERTY mysqli::client_info
-----
Visibility: public
Read type: string
Write type: string
-----
PROPERTY mysqli::client_version
-----
Visibility: public
Read type: int
Write type: int
-----
PROPERTY mysqli::connect_errno
-----
Visibility: public
Read type: int
Write type: int
-----
PROPERTY mysqli::connect_error
-----
Visibility: public
Read type: string|null
Write type: string|null
-----
PROPERTY mysqli::errno
-----
Visibility: public
Read type: int
Write type: int
-----
PROPERTY mysqli::error
-----
Visibility: public
Read type: string
Write type: string
-----
PROPERTY mysqli::error_list
-----
Visibility: public
Read type: array
Write type: array
-----
PROPERTY mysqli::field_count
-----
Visibility: public
Read type: int
Write type: int
-----
PROPERTY mysqli::host_info
-----
Visibility: public
Read type: string
Write type: string
-----
PROPERTY mysqli::info
-----
Visibility: public
Read type: string|null
Write type: string|null
-----
PROPERTY mysqli::insert_id
-----
Visibility: public
Read type: int|string
Write type: int|string
-----
PROPERTY mysqli::protocol_version
-----
Visibility: public
Read type: int
Write type: int
-----
PROPERTY mysqli::server_info
-----
Visibility: public
Read type: string
Write type: string
-----
PROPERTY mysqli::server_version
-----
Visibility: public
Read type: int
Write type: int
-----
PROPERTY mysqli::sqlstate
-----
Visibility: public
Read type: string
Write type: string
-----
PROPERTY mysqli::thread_id
-----
Visibility: public
Read type: int
Write type: int
-----
PROPERTY mysqli::warning_count
-----
Visibility: public
Read type: int
Write type: int
-----
METHOD mysqli::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string|null $hostname
     * @param string|null $username
     * @param string|null $password
     * @param string|null $database
     * @param int|null $port
     * @param string|null $socket
     * @return void
     */
    function __construct(string|null $hostname = null, string|null $username = null, string|null $password = null, string|null $database = null, int|null $port = null, string|null $socket = null): mixed
-----
METHOD mysqli::autocommit
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool $enable
     * @return bool
     */
    function autocommit(bool $enable): mixed
-----
METHOD mysqli::begin_transaction
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $flags
     * @param string|null $name
     * @return bool
     */
    function begin_transaction(int $flags = 0, string|null $name = null): mixed
-----
METHOD mysqli::change_user
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $username
     * @param string $password
     * @param string|null $database
     * @return bool
     */
    function change_user(string $username, string $password, string|null $database): mixed
-----
METHOD mysqli::character_set_name
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function character_set_name(): mixed
-----
METHOD mysqli::close
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function close(): mixed
-----
METHOD mysqli::commit
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $flags
     * @param string|null $name
     * @return bool
     */
    function commit(int $flags = 0, string|null $name = null): mixed
-----
METHOD mysqli::debug
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $options
     * @return bool
     */
    function debug(string $options): mixed
-----
METHOD mysqli::dump_debug_info
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function dump_debug_info(): mixed
-----
METHOD mysqli::escape_string
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $string
     * @return string
     */
    function escape_string(string $string): mixed
-----
METHOD mysqli::execute_query
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $query
     * @param array|null $params
     * @return bool|mysqli_result
     */
    function execute_query(string $query, array|null $params = null): bool|mysqli_result
-----
METHOD mysqli::get_charset
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return object
     */
    function get_charset(): mixed
-----
METHOD mysqli::get_connection_stats
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array|false
     */
    function get_connection_stats(): mixed
-----
METHOD mysqli::get_warnings
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mysqli_warning
     */
    function get_warnings(): mixed
-----
METHOD mysqli::init
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mysqli
     */
    function init(): mixed
-----
METHOD mysqli::kill
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $process_id
     * @return bool
     */
    function kill(int $process_id): mixed
-----
METHOD mysqli::more_results
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function more_results(): mixed
-----
METHOD mysqli::multi_query
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $query
     * @return bool
     */
    function multi_query(string $query): mixed
-----
METHOD mysqli::next_result
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function next_result(): mixed
-----
METHOD mysqli::options
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $option
     * @param int|string $value
     * @return bool
     */
    function options(int $option, mixed $value): mixed
-----
METHOD mysqli::ping
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function ping(): mixed
-----
METHOD mysqli::poll
-----
Has side-effects: Maybe
Static
Visibility: public
Variants: 1
    /**
     * @param array|null $read
     * @param array|null $error
     * @param array $reject
     * @param int $seconds
     * @param int $microseconds
     * @return int|false
     */
    function poll(array|null &rw$read, array|null &rw$error, array &rw$reject, int $seconds, int $microseconds = 0): mixed
-----
METHOD mysqli::prepare
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $query
     * @return mysqli_stmt|false
     */
    function prepare(string $query): mixed
-----
METHOD mysqli::query
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $query
     * @param int $result_mode
     * @return bool|mysqli_result
     */
    function query(string $query, int $result_mode = 0): mixed
-----
METHOD mysqli::real_connect
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string|null $hostname
     * @param string|null $username
     * @param string|null $password
     * @param string|null $database
     * @param int|null $port
     * @param string|null $socket
     * @param int $flags
     * @return bool
     */
    function real_connect(string|null $hostname = null, string|null $username = null, string|null $password = null, string|null $database = null, int|null $port = null, string|null $socket = null, int $flags = 0): mixed
-----
METHOD mysqli::real_escape_string
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $string
     * @return string
     */
    function real_escape_string(string $string): mixed
-----
METHOD mysqli::real_query
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $query
     * @return bool
     */
    function real_query(string $query): mixed
-----
METHOD mysqli::reap_async_query
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mysqli_result|false
     */
    function reap_async_query(): mixed
-----
METHOD mysqli::refresh
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $flags
     * @return bool
     */
    function refresh(int $flags): mixed
-----
METHOD mysqli::release_savepoint
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return bool
     */
    function release_savepoint(string $name): mixed
-----
METHOD mysqli::rollback
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $flags
     * @param string|null $name
     * @return bool
     */
    function rollback(int $flags = 0, string|null $name = null): mixed
-----
METHOD mysqli::savepoint
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return bool
     */
    function savepoint(string $name): mixed
-----
METHOD mysqli::select_db
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $database
     * @return bool
     */
    function select_db(string $database): mixed
-----
METHOD mysqli::set_charset
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $charset
     * @return bool
     */
    function set_charset(string $charset): mixed
-----
METHOD mysqli::set_opt
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $option
     * @param int|string $value
     * @return bool
     */
    function set_opt(int $option, mixed $value): mixed
-----
METHOD mysqli::ssl_set
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string|null $key
     * @param string|null $certificate
     * @param string|null $ca_certificate
     * @param string|null $ca_path
     * @param string|null $cipher_algos
     * @return bool
     */
    function ssl_set(string|null $key, string|null $certificate, string|null $ca_certificate, string|null $ca_path, string|null $cipher_algos): mixed
-----
METHOD mysqli::stat
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string|false
     */
    function stat(): mixed
-----
METHOD mysqli::stmt_init
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mysqli_stmt
     */
    function stmt_init(): mixed
-----
METHOD mysqli::store_result
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $mode
     * @return mysqli_result|false
     */
    function store_result(int $mode = 0): mixed
-----
METHOD mysqli::thread_safe
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function thread_safe(): mixed
-----
METHOD mysqli::use_result
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mysqli_result|false
     */
    function use_result(): mixed
-----
CLASS mysqli_driver
-----
final class mysqli_driver
{
}
-----
PROPERTY mysqli_driver::report_mode
-----
Visibility: public
Read type: int
Write type: int
-----
METHOD mysqli_driver::embedded_server_end
-----
MISSING
-----
METHOD mysqli_driver::embedded_server_start
-----
MISSING
-----
CLASS mysqli_result
-----
class mysqli_result implements IteratorAggregate
{
}
-----
PROPERTY mysqli_result::current_field
-----
Visibility: public
Read type: int
Write type: int
-----
PROPERTY mysqli_result::field_count
-----
Visibility: public
Read type: int
Write type: int
-----
PROPERTY mysqli_result::lengths
-----
Visibility: public
Read type: array|null
Write type: array|null
-----
PROPERTY mysqli_result::num_rows
-----
Visibility: public
Read type: int<0, max>|numeric-string
Write type: int<0, max>|numeric-string
-----
METHOD mysqli_result::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mysqli $mysql
     * @param int $result_mode
     * @return void
     */
    function __construct(mysqli $mysql, int $result_mode = 0): mixed
-----
METHOD mysqli_result::data_seek
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $offset
     * @return bool
     */
    function data_seek(int $offset): mixed
-----
METHOD mysqli_result::fetch_all
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $mode
     * @return array
     */
    function fetch_all(int $mode = 2): mixed
-----
METHOD mysqli_result::fetch_array
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $mode
     * @return array|null
     */
    function fetch_array(int $mode = 3): mixed
-----
METHOD mysqli_result::fetch_assoc
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array<string, string>|null
     */
    function fetch_assoc(): mixed
-----
METHOD mysqli_result::fetch_column
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $column
     * @return float|int|string|false|null
     */
    function fetch_column(int $column = 0): float|int|string|false|null
-----
METHOD mysqli_result::fetch_field
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return object|false
     */
    function fetch_field(): mixed
-----
METHOD mysqli_result::fetch_field_direct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @return object|false
     */
    function fetch_field_direct(int $index): mixed
-----
METHOD mysqli_result::fetch_fields
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function fetch_fields(): mixed
-----
METHOD mysqli_result::fetch_object
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $class
     * @param array $constructor_args
     * @return object|null
     */
    function fetch_object(string $class = 'stdClass', array $constructor_args = array{}): mixed
-----
METHOD mysqli_result::fetch_row
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array|null
     */
    function fetch_row(): mixed
-----
METHOD mysqli_result::field_seek
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $index
     * @return bool
     */
    function field_seek(int $index): mixed
-----
METHOD mysqli_result::free
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function free(): mixed
-----
METHOD mysqli_result::getIterator
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return Traversable<mixed, mixed>
     */
    function getIterator(): Iterator
-----
CLASS mysqli_sql_exception
-----
final class mysqli_sql_exception extends RuntimeException
{
}
-----
METHOD mysqli_sql_exception::getSqlState
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getSqlState(): string
-----
CLASS mysqli_stmt
-----
class mysqli_stmt
{
}
-----
PROPERTY mysqli_stmt::affected_rows
-----
Visibility: public
Read type: int<-1, max>|numeric-string
Write type: int<-1, max>|numeric-string
-----
PROPERTY mysqli_stmt::errno
-----
Visibility: public
Read type: int
Write type: int
-----
PROPERTY mysqli_stmt::error
-----
Visibility: public
Read type: string
Write type: string
-----
PROPERTY mysqli_stmt::error_list
-----
Visibility: public
Read type: array<int, array{errno: int, sqlstate: string, error: string}>
Write type: array<int, array{errno: int, sqlstate: string, error: string}>
-----
PROPERTY mysqli_stmt::field_count
-----
Visibility: public
Read type: int<0, max>
Write type: int<0, max>
-----
PROPERTY mysqli_stmt::insert_id
-----
Visibility: public
Read type: int|string
Write type: int|string
-----
PROPERTY mysqli_stmt::num_rows
-----
Visibility: public
Read type: int<0, max>|numeric-string
Write type: int<0, max>|numeric-string
-----
PROPERTY mysqli_stmt::param_count
-----
Visibility: public
Read type: int<0, max>
Write type: int<0, max>
-----
PROPERTY mysqli_stmt::sqlstate
-----
Visibility: public
Read type: non-empty-string
Write type: non-empty-string
-----
METHOD mysqli_stmt::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mysqli $mysql
     * @param string|null $query
     * @return void
     */
    function __construct(mysqli $mysql, string|null $query = null): mixed
-----
METHOD mysqli_stmt::attr_get
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $attribute
     * @return int|false
     */
    function attr_get(int $attribute): mixed
-----
METHOD mysqli_stmt::attr_set
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $attribute
     * @param int $value
     * @return bool
     */
    function attr_set(int $attribute, int $value): mixed
-----
METHOD mysqli_stmt::bind_param
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $types
     * @param mixed $var1
     * @return bool
     */
    function bind_param(string $types, mixed ...$var1): mixed
-----
METHOD mysqli_stmt::bind_result
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $var1
     * @return bool
     */
    function bind_result(mixed ...&rw$var1): mixed
-----
METHOD mysqli_stmt::close
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function close(): mixed
-----
METHOD mysqli_stmt::data_seek
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param int $offset
     * @return void
     */
    function data_seek(int $offset): mixed
-----
METHOD mysqli_stmt::execute
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param array|null $params
     * @return bool
     */
    function execute(array|null $params = null): mixed
-----
METHOD mysqli_stmt::fetch
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool|null
     */
    function fetch(): mixed
-----
METHOD mysqli_stmt::free_result
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function free_result(): mixed
-----
METHOD mysqli_stmt::get_result
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mysqli_result|false
     */
    function get_result(): mixed
-----
METHOD mysqli_stmt::get_warnings
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return object
     */
    function get_warnings(): mixed
-----
METHOD mysqli_stmt::more_results
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function more_results(): mixed
-----
METHOD mysqli_stmt::next_result
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function next_result(): mixed
-----
METHOD mysqli_stmt::prepare
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $query
     * @return bool
     */
    function prepare(string $query): mixed
-----
METHOD mysqli_stmt::reset
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function reset(): mixed
-----
METHOD mysqli_stmt::result_metadata
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return mysqli_result|false
     */
    function result_metadata(): mixed
-----
METHOD mysqli_stmt::send_long_data
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int $param_num
     * @param string $data
     * @return bool
     */
    function send_long_data(int $param_num, string $data): mixed
-----
METHOD mysqli_stmt::store_result
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function store_result(): mixed
-----
CLASS mysqli_warning
-----
final class mysqli_warning
{
}
-----
METHOD mysqli_warning::__construct
-----
Has side-effects: Maybe
Visibility: private
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD mysqli_warning::next
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function next(): bool
-----
CLASS parallel\Channel
-----
final class parallel\Channel implements Stringable
{
}
-----
METHOD parallel\Channel::__construct
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param int|null $capacity
     * @return void
     */
    function __construct(int|null $capacity = null): mixed
-----
METHOD parallel\Channel::close
-----
Is internal: Yes
Has side-effects: Yes
Throw type: parallel\Channel\Error\Closed
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function close(): void
-----
METHOD parallel\Channel::make
-----
Is internal: Yes
Has side-effects: Maybe
Throw type: parallel\Channel\Error\Existence
Static
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param int|null $capacity
     * @return parallel\Channel
     */
    function make(string $name, int|null $capacity = null): parallel\Channel
-----
METHOD parallel\Channel::open
-----
Is internal: Yes
Has side-effects: Maybe
Throw type: parallel\Channel\Error\Existence
Static
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @return parallel\Channel
     */
    function open(string $name): parallel\Channel
-----
METHOD parallel\Channel::recv
-----
Is internal: Yes
Has side-effects: Maybe
Throw type: parallel\Channel\Error\Closed
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function recv(): mixed
-----
METHOD parallel\Channel::send
-----
Is internal: Yes
Has side-effects: Yes
Throw type: parallel\Channel\Error\Closed|parallel\Channel\Error\IllegalValue
Visibility: public
Variants: 1
    /**
     * @param mixed $value
     * @return void
     */
    function send(mixed $value): void
-----
CLASS parallel\Events
-----
final class parallel\Events implements Countable, Traversable
{
}
-----
METHOD parallel\Events::addChannel
-----
Is internal: Yes
Has side-effects: Yes
Throw type: parallel\Events\Error\Existence
Visibility: public
Variants: 1
    /**
     * @param parallel\Channel $channel
     * @return void
     */
    function addChannel(parallel\Channel $channel): void
-----
METHOD parallel\Events::addFuture
-----
Is internal: Yes
Has side-effects: Yes
Throw type: parallel\Events\Error\Existence
Visibility: public
Variants: 1
    /**
     * @param string $name
     * @param parallel\Future $future
     * @return void
     */
    function addFuture(string $name, parallel\Future $future): void
-----
METHOD parallel\Events::poll
-----
Is internal: Yes
Has side-effects: Maybe
Throw type: parallel\Events\Error\Timeout
Visibility: public
Variants: 1
    /**
     * @return parallel\Events\Event|null
     */
    function poll(): parallel\Events\Event|null
-----
METHOD parallel\Events::remove
-----
Is internal: Yes
Has side-effects: Yes
Throw type: parallel\Events\Error\Existence
Visibility: public
Variants: 1
    /**
     * @param string $target
     * @return void
     */
    function remove(string $target): void
-----
METHOD parallel\Events::setBlocking
-----
Is internal: Yes
Has side-effects: Yes
Throw type: parallel\Events\Error
Visibility: public
Variants: 1
    /**
     * @param bool $blocking
     * @return void
     */
    function setBlocking(bool $blocking): void
-----
METHOD parallel\Events::setInput
-----
Is internal: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @param parallel\Events\Input $input
     * @return void
     */
    function setInput(parallel\Events\Input $input): void
-----
METHOD parallel\Events::setTimeout
-----
Is internal: Yes
Has side-effects: Yes
Throw type: parallel\Events\Error
Visibility: public
Variants: 1
    /**
     * @param int $timeout
     * @return void
     */
    function setTimeout(int $timeout): void
-----
CLASS parallel\Events\Input
-----
final class parallel\Events\Input
{
}
-----
METHOD parallel\Events\Input::add
-----
Is internal: Yes
Has side-effects: Yes
Throw type: parallel\Events\Input\Error\Existence|parallel\Events\Input\Error\IllegalValue
Visibility: public
Variants: 1
    /**
     * @param string $target
     * @param mixed $value
     * @return void
     */
    function add(string $target, mixed $value): void
-----
METHOD parallel\Events\Input::clear
-----
Is internal: Yes
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function clear(): void
-----
METHOD parallel\Events\Input::remove
-----
Is internal: Yes
Has side-effects: Yes
Throw type: parallel\Events\Input\Error\Existence
Visibility: public
Variants: 1
    /**
     * @param string $target
     * @return void
     */
    function remove(string $target): void
-----
CLASS parallel\Future
-----
final class parallel\Future
{
}
-----
METHOD parallel\Future::cancel
-----
Is internal: Yes
Has side-effects: Maybe
Throw type: parallel\Future\Error\Cancelled|parallel\Future\Error\Killed
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function cancel(): bool
-----
METHOD parallel\Future::cancelled
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function cancelled(): bool
-----
METHOD parallel\Future::done
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function done(): bool
-----
METHOD parallel\Future::value
-----
Is internal: Yes
Has side-effects: Maybe
Throw type: Throwable
Visibility: public
Variants: 1
    /**
     * @return mixed
     */
    function value(): mixed
-----
CLASS parallel\Runtime
-----
final class parallel\Runtime
{
}
-----
METHOD parallel\Runtime::__construct
-----
Is internal: Yes
Has side-effects: Maybe
Throw type: parallel\Runtime\Error
Visibility: public
Variants: 1
    /**
     * @param string|null $bootstrap
     * @return void
     */
    function __construct(string|null $bootstrap = null): mixed
-----
METHOD parallel\Runtime::close
-----
Is internal: Yes
Has side-effects: Yes
Throw type: parallel\Runtime\Error\Closed
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function close(): void
-----
METHOD parallel\Runtime::kill
-----
Is internal: Yes
Has side-effects: Yes
Throw type: parallel\Runtime\Error\Closed
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function kill(): void
-----
METHOD parallel\Runtime::run
-----
Is internal: Yes
Has side-effects: Maybe
Throw type: parallel\Runtime\Error\Closed|parallel\Runtime\Error\IllegalFunction|parallel\Runtime\Error\IllegalInstruction|parallel\Runtime\Error\IllegalParameter|parallel\Runtime\Error\IllegalReturn
Visibility: public
Variants: 1
    /**
     * @param Closure $task
     * @param array|null $argv
     * @return parallel\Future|null
     */
    function run(Closure $task, array|null $argv = null): parallel\Future|null
-----
CLASS parallel\Sync
-----
final class parallel\Sync
{
}
-----
METHOD parallel\Sync::__construct
-----
Is internal: Yes
Has side-effects: Maybe
Throw type: parallel\Sync\Error\IllegalValue
Visibility: public
Variants: 1
    /**
     * @param bool|float|int|string|null $value
     * @return void
     */
    function __construct(mixed $value = null): mixed
-----
METHOD parallel\Sync::__invoke
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param callable(): mixed $block
     * @return mixed
     */
    function __invoke(callable(): mixed $block): mixed
-----
METHOD parallel\Sync::get
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool|float|int|string
     */
    function get(): mixed
-----
METHOD parallel\Sync::notify
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param bool|null $all
     * @return bool
     */
    function notify(bool|null $all = null): bool
-----
METHOD parallel\Sync::set
-----
Is internal: Yes
Has side-effects: Maybe
Throw type: parallel\Sync\Error\IllegalValue
Visibility: public
Variants: 1
    /**
     * @param bool|float|int|string $value
     * @return mixed
     */
    function set(mixed $value): mixed
-----
METHOD parallel\Sync::wait
-----
Is internal: Yes
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function wait(): bool
-----
CLASS php_user_filter
-----
class php_user_filter
{
}
-----
METHOD php_user_filter::filter
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param resource $in
     * @param resource $out
     * @param int $consumed
     * @param bool $closing
     * @return int
     */
    function filter(mixed $in, mixed $out, mixed &r$consumed, bool $closing): mixed
-----
METHOD php_user_filter::onClose
-----
Has side-effects: Yes
Visibility: public
Variants: 1
    /**
     * @return void
     */
    function onClose(): mixed
-----
METHOD php_user_filter::onCreate
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function onCreate(): mixed
-----
CLASS streamWrapper
-----
MISSING
-----
CLASS tidy
-----
class tidy
{
}
-----
PROPERTY tidy::errorBuffer
-----
Visibility: public
Read type: string
Write type: string
-----
METHOD tidy::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string|null $filename
     * @param array|string|null $config
     * @param string|null $encoding
     * @param bool $use_include_path
     * @return void
     */
    function __construct(string|null $filename = null, array|string|null $config = null, string|null $encoding = null, bool $use_include_path = false): mixed
-----
METHOD tidy::body
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return tidyNode
     */
    function body(): mixed
-----
METHOD tidy::cleanRepair
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function cleanRepair(): mixed
-----
METHOD tidy::diagnose
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function diagnose(): mixed
-----
METHOD tidy::getConfig
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return array
     */
    function getConfig(): mixed
-----
METHOD tidy::getHtmlVer
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getHtmlVer(): mixed
-----
METHOD tidy::getOpt
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $option
     * @return mixed
     */
    function getOpt(string $option): mixed
-----
METHOD tidy::getOptDoc
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $optname
     * @return string
     */
    function getOptDoc(string $optname): mixed
-----
METHOD tidy::getRelease
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return string
     */
    function getRelease(): mixed
-----
METHOD tidy::getStatus
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return int
     */
    function getStatus(): mixed
-----
METHOD tidy::head
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return tidyNode
     */
    function head(): mixed
-----
METHOD tidy::html
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return tidyNode
     */
    function html(): mixed
-----
METHOD tidy::isXhtml
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isXhtml(): mixed
-----
METHOD tidy::isXml
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isXml(): mixed
-----
METHOD tidy::parseFile
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @param array|string|null $config
     * @param string|null $encoding
     * @param bool $use_include_path
     * @return bool
     */
    function parseFile(string $filename, array|string|null $config = null, string|null $encoding = null, bool $use_include_path = false): mixed
-----
METHOD tidy::parseString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $input
     * @param array|string|null $config
     * @param string|null $encoding
     * @return bool
     */
    function parseString(string $input, array|string|null $config = null, string|null $encoding = null): mixed
-----
METHOD tidy::repairFile
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $filename
     * @param array|string|null $config
     * @param string|null $encoding
     * @param bool $use_include_path
     * @return string
     */
    function repairFile(string $filename, array|string|null $config = null, string|null $encoding = null, bool $use_include_path = false): mixed
-----
METHOD tidy::repairString
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param string $data
     * @param array|string|null $config
     * @param string|null $encoding
     * @return string
     */
    function repairString(string $data, array|string|null $config = null, string|null $encoding = null): mixed
-----
METHOD tidy::root
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return tidyNode
     */
    function root(): mixed
-----
CLASS tidyNode
-----
final class tidyNode
{
}
-----
METHOD tidyNode::__construct
-----
Has side-effects: Maybe
Visibility: private
Variants: 1
    /**
     * @return void
     */
    function __construct(): mixed
-----
METHOD tidyNode::getParent
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return tidyNode|null
     */
    function getParent(): tidyNode|null
-----
METHOD tidyNode::hasChildren
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function hasChildren(): bool
-----
METHOD tidyNode::hasSiblings
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function hasSiblings(): bool
-----
METHOD tidyNode::isAsp
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isAsp(): bool
-----
METHOD tidyNode::isComment
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isComment(): bool
-----
METHOD tidyNode::isHtml
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isHtml(): bool
-----
METHOD tidyNode::isJste
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isJste(): bool
-----
METHOD tidyNode::isPhp
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isPhp(): bool
-----
METHOD tidyNode::isText
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @return bool
     */
    function isText(): bool
-----
CLASS variant
-----
class VARIANT
{
}
-----
METHOD variant::__construct
-----
Has side-effects: Maybe
Visibility: public
Variants: 1
    /**
     * @param mixed $value
     * @param int $type
     * @param int $codepage
     * @return void
     */
    function __construct(mixed $value = null, int $type = 0, int $codepage = 0): mixed
-----
CLASS wkhtmltox\Image\Converter
-----
MISSING
-----
CLASS wkhtmltox\PDF\Converter
-----
MISSING
-----
CLASS wkhtmltox\PDF\Object
-----
MISSING
